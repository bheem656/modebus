
M2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a444  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  0800a644  0800a644  0001a644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a878  0800a878  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a878  0800a878  0001a878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a880  0800a880  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a880  0800a880  0001a880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a884  0800a884  0001a884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cc4  20000074  0800a8fc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d38  0800a8fc  00024d38  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001efa7  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d55  00000000  00000000  0003f049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001718  00000000  00000000  00042da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015a0  00000000  00000000  000444b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b37d  00000000  00000000  00045a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b599  00000000  00000000  00070dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108dca  00000000  00000000  0008c36e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00195138  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006874  00000000  00000000  00195188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a62c 	.word	0x0800a62c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	0800a62c 	.word	0x0800a62c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <ModbusInit>:
 * @param EN_Port_v port for txen RS-485
 * @param EN_Pin_v pin for txen RS-485 (NULL means RS232C mode)
 * @ingroup setup
 */
void ModbusInit(modbusHandler_t * modH)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 80005ec:	4b36      	ldr	r3, [pc, #216]	; (80006c8 <ModbusInit+0xe4>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d864      	bhi.n	80006be <ModbusInit+0xda>
  {
	  //Create QueueModbus
	  modH->QueueModbusHandle = osMessageQueueNew (MAX_BUFFER, sizeof(uint8_t), &QueueModbus_attributes);
 80005f4:	4a35      	ldr	r2, [pc, #212]	; (80006cc <ModbusInit+0xe8>)
 80005f6:	2101      	movs	r1, #1
 80005f8:	20c8      	movs	r0, #200	; 0xc8
 80005fa:	f005 fd5b 	bl	80060b4 <osMessageQueueNew>
 80005fe:	4602      	mov	r2, r0
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

	  if(modH->uiModbusType == SLAVE_RTU)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b03      	cmp	r3, #3
 800060c:	d109      	bne.n	8000622 <ModbusInit+0x3e>
	  {
		  //Create Modbus task slave
	  	  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 800060e:	4a30      	ldr	r2, [pc, #192]	; (80006d0 <ModbusInit+0xec>)
 8000610:	6879      	ldr	r1, [r7, #4]
 8000612:	4830      	ldr	r0, [pc, #192]	; (80006d4 <ModbusInit+0xf0>)
 8000614:	f005 fbde 	bl	8005dd4 <osThreadNew>
 8000618:	4602      	mov	r2, r0
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8000620:	e028      	b.n	8000674 <ModbusInit+0x90>
	  }
	  else if (modH->uiModbusType == MASTER_RTU)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b04      	cmp	r3, #4
 8000628:	d123      	bne.n	8000672 <ModbusInit+0x8e>
	  {
		  //Create Modbus task Master  and Queue for telegrams
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 800062a:	4a2b      	ldr	r2, [pc, #172]	; (80006d8 <ModbusInit+0xf4>)
 800062c:	6879      	ldr	r1, [r7, #4]
 800062e:	482b      	ldr	r0, [pc, #172]	; (80006dc <ModbusInit+0xf8>)
 8000630:	f005 fbd0 	bl	8005dd4 <osThreadNew>
 8000634:	4602      	mov	r2, r0
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8000642:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800064a:	4a25      	ldr	r2, [pc, #148]	; (80006e0 <ModbusInit+0xfc>)
 800064c:	9200      	str	r2, [sp, #0]
 800064e:	2200      	movs	r2, #0
 8000650:	4824      	ldr	r0, [pc, #144]	; (80006e4 <ModbusInit+0x100>)
 8000652:	f007 ffb1 	bl	80085b8 <xTimerCreate>
 8000656:	4602      	mov	r2, r0
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);
		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 800065e:	4a22      	ldr	r2, [pc, #136]	; (80006e8 <ModbusInit+0x104>)
 8000660:	210c      	movs	r1, #12
 8000662:	2002      	movs	r0, #2
 8000664:	f005 fd26 	bl	80060b4 <osMessageQueueNew>
 8000668:	4602      	mov	r2, r0
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8000670:	e000      	b.n	8000674 <ModbusInit+0x90>
	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 8000672:	e7fe      	b.n	8000672 <ModbusInit+0x8e>
	  //Create timer T35

	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	5 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 800067a:	4a1c      	ldr	r2, [pc, #112]	; (80006ec <ModbusInit+0x108>)
 800067c:	9200      	str	r2, [sp, #0]
 800067e:	2200      	movs	r2, #0
 8000680:	2105      	movs	r1, #5
 8000682:	481b      	ldr	r0, [pc, #108]	; (80006f0 <ModbusInit+0x10c>)
 8000684:	f007 ff98 	bl	80085b8 <xTimerCreate>
 8000688:	4602      	mov	r2, r0
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );

	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 8000690:	4a18      	ldr	r2, [pc, #96]	; (80006f4 <ModbusInit+0x110>)
 8000692:	2101      	movs	r1, #1
 8000694:	2001      	movs	r0, #1
 8000696:	f005 fc71 	bl	8005f7c <osSemaphoreNew>
 800069a:	4602      	mov	r2, r0
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	  mHandlers[numberHandlers] = modH;
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <ModbusInit+0xe4>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	4619      	mov	r1, r3
 80006a8:	4a13      	ldr	r2, [pc, #76]	; (80006f8 <ModbusInit+0x114>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <ModbusInit+0xe4>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <ModbusInit+0xe4>)
 80006ba:	701a      	strb	r2, [r3, #0]
	  while(1); //error no more Modbus handlers supported
  }

  // printf("modbus initialization complete");

}
 80006bc:	e000      	b.n	80006c0 <ModbusInit+0xdc>
	  while(1); //error no more Modbus handlers supported
 80006be:	e7fe      	b.n	80006be <ModbusInit+0xda>
}
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000098 	.word	0x20000098
 80006cc:	0800a714 	.word	0x0800a714
 80006d0:	0800a744 	.word	0x0800a744
 80006d4:	08000879 	.word	0x08000879
 80006d8:	0800a768 	.word	0x0800a768
 80006dc:	08000ce5 	.word	0x08000ce5
 80006e0:	0800081d 	.word	0x0800081d
 80006e4:	0800a68c 	.word	0x0800a68c
 80006e8:	0800a72c 	.word	0x0800a72c
 80006ec:	08000799 	.word	0x08000799
 80006f0:	0800a69c 	.word	0x0800a69c
 80006f4:	0800a78c 	.word	0x0800a78c
 80006f8:	20000090 	.word	0x20000090

080006fc <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
    if (modH->EN_Port != NULL )
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d007      	beq.n	800071c <ModbusStart+0x20>
    {
        // return RS485 transceiver to transmit mode
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	68d8      	ldr	r0, [r3, #12]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	8a1b      	ldrh	r3, [r3, #16]
 8000714:	2200      	movs	r2, #0
 8000716:	4619      	mov	r1, r3
 8000718:	f002 fa0e 	bl	8002b38 <HAL_GPIO_WritePin>
    }

    if (modH->uiModbusType == SLAVE_RTU &&  modH->au16regs == NULL )
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b03      	cmp	r3, #3
 8000722:	d105      	bne.n	8000730 <ModbusStart+0x34>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d100      	bne.n	8000730 <ModbusStart+0x34>
    {
    	while(1); //ERROR define the DATA pointer shared through Modbus
 800072e:	e7fe      	b.n	800072e <ModbusStart+0x32>
    }

    //check that port is initialized
    while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8000730:	bf00      	nop
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	4618      	mov	r0, r3
 8000738:	f004 fb2e 	bl	8004d98 <HAL_UART_GetState>
 800073c:	4603      	mov	r3, r0
 800073e:	2b20      	cmp	r3, #32
 8000740:	d1f7      	bne.n	8000732 <ModbusStart+0x36>
    {
    }

    // Receive data from serial port for Modbus using interrupt
    if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6858      	ldr	r0, [r3, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	33f9      	adds	r3, #249	; 0xf9
 800074a:	2201      	movs	r2, #1
 800074c:	4619      	mov	r1, r3
 800074e:	f003 ffcb 	bl	80046e8 <HAL_UART_Receive_IT>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d000      	beq.n	800075a <ModbusStart+0x5e>
    {
        while(1)
 8000758:	e7fe      	b.n	8000758 <ModbusStart+0x5c>
        {
        }
    }

    modH->u8lastRec = modH->u8BufferSize = 0;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2200      	movs	r2, #0
 800075e:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	f893 20db 	ldrb.w	r2, [r3, #219]	; 0xdb
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2200      	movs	r2, #0
 8000772:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f8b3 20e8 	ldrh.w	r2, [r3, #232]	; 0xe8
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f8a3 20e6 	strh.w	r2, [r3, #230]	; 0xe6
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f8b3 20e6 	ldrh.w	r2, [r3, #230]	; 0xe6
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4

    // printf("modbus start running");
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <vTimerCallbackT35>:


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af02      	add	r7, sp, #8
 800079e:	6078      	str	r0, [r7, #4]
	//Notify that a steam has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	e02a      	b.n	80007fc <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 80007a6:	4a1b      	ldr	r2, [pc, #108]	; (8000814 <vTimerCallbackT35+0x7c>)
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d11e      	bne.n	80007f6 <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uiModbusType == MASTER_RTU)
 80007b8:	4a16      	ldr	r2, [pc, #88]	; (8000814 <vTimerCallbackT35+0x7c>)
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b04      	cmp	r3, #4
 80007c4:	d10c      	bne.n	80007e0 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 80007c6:	4a13      	ldr	r2, [pc, #76]	; (8000814 <vTimerCallbackT35+0x7c>)
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ce:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 80007d2:	2300      	movs	r3, #0
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	2300      	movs	r3, #0
 80007d8:	2200      	movs	r2, #0
 80007da:	2103      	movs	r1, #3
 80007dc:	f007 ff4a 	bl	8008674 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 80007e0:	4a0c      	ldr	r2, [pc, #48]	; (8000814 <vTimerCallbackT35+0x7c>)
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e8:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 80007ec:	2300      	movs	r3, #0
 80007ee:	2203      	movs	r2, #3
 80007f0:	2100      	movs	r1, #0
 80007f2:	f007 fd7f 	bl	80082f4 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	3301      	adds	r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <vTimerCallbackT35+0x80>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	4293      	cmp	r3, r2
 8000806:	dbce      	blt.n	80007a6 <vTimerCallbackT35+0xe>
		}

	}
}
 8000808:	bf00      	nop
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000090 	.word	0x20000090
 8000818:	20000098 	.word	0x20000098

0800081c <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	//Notify that a steam has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	e016      	b.n	8000858 <vTimerCallbackTimeout+0x3c>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 800082a:	4a11      	ldr	r2, [pc, #68]	; (8000870 <vTimerCallbackTimeout+0x54>)
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000832:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	429a      	cmp	r2, r3
 800083a:	d10a      	bne.n	8000852 <vTimerCallbackTimeout+0x36>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, NO_REPLY, eSetValueWithOverwrite);
 800083c:	4a0c      	ldr	r2, [pc, #48]	; (8000870 <vTimerCallbackTimeout+0x54>)
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000844:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000848:	2300      	movs	r3, #0
 800084a:	2203      	movs	r2, #3
 800084c:	21ff      	movs	r1, #255	; 0xff
 800084e:	f007 fd51 	bl	80082f4 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	3301      	adds	r3, #1
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <vTimerCallbackTimeout+0x58>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	461a      	mov	r2, r3
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	4293      	cmp	r3, r2
 8000862:	dbe2      	blt.n	800082a <vTimerCallbackTimeout+0xe>
		}

	}

}
 8000864:	bf00      	nop
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000090 	.word	0x20000090
 8000874:	20000098 	.word	0x20000098

08000878 <StartTaskModbusSlave>:


void StartTaskModbusSlave(void *argument)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	60fb      	str	r3, [r7, #12]

  for(;;)
  {

//	  // printf("__________slave task  running........\r\n");
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block indefinitely until a Modbus Frame arrives */
 8000884:	f04f 31ff 	mov.w	r1, #4294967295
 8000888:	2001      	movs	r0, #1
 800088a:	f007 fce7 	bl	800825c <ulTaskNotifyTake>

	  modH->i8lastError = 0;
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	2200      	movs	r2, #0
 8000892:	749a      	strb	r2, [r3, #18]
	  modH->u8BufferSize = uxQueueMessagesWaiting(modH->QueueModbusHandle); // return number of message stored in Queue
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800089a:	4618      	mov	r0, r3
 800089c:	f006 fadc 	bl	8006e58 <uxQueueMessagesWaiting>
 80008a0:	4603      	mov	r3, r0
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
//	  if (modH->EN_Port != NULL )
//	  {
//	     	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET); // is this required?
//	  }

	  int8_t i8state = getRxBuffer(modH);  // copy msg
 80008aa:	68f8      	ldr	r0, [r7, #12]
 80008ac:	f000 fbde 	bl	800106c <getRxBuffer>
 80008b0:	4603      	mov	r3, r0
 80008b2:	72fb      	strb	r3, [r7, #11]

	  // printf("__i8state : %d__ \r\n", i8state);

	  if (i8state < 7){
 80008b4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80008b8:	2b06      	cmp	r3, #6
 80008ba:	dc0a      	bgt.n	80008d2 <StartTaskModbusSlave+0x5a>
		  //The size of the frame is invalid
		  modH->i8lastError = ERR_BAD_SIZE;;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	22fa      	movs	r2, #250	; 0xfa
 80008c0:	749a      	strb	r2, [r3, #18]
		  xQueueGenericReset(modH->QueueModbusHandle, pdFALSE);
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f005 fd60 	bl	8006390 <xQueueGenericReset>
		  // printf("__i8state : not valid  \r\n");
		  continue;
 80008d0:	e093      	b.n	80009fa <StartTaskModbusSlave+0x182>
	  }


		// check slave id
	  if ( modH->au8Buffer[ID] !=  modH->u8id)
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	7cda      	ldrb	r2, [r3, #19]
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	7a1b      	ldrb	r3, [r3, #8]
 80008da:	429a      	cmp	r2, r3
 80008dc:	f040 808c 	bne.w	80009f8 <StartTaskModbusSlave+0x180>
		  // printf("slave id not valid  \r\n");
		  continue;
	  }

	  // validate message: CRC, FCT, address and size
	  uint8_t u8exception = validateRequest(modH);
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	f000 fc6b 	bl	80011bc <validateRequest>
 80008e6:	4603      	mov	r3, r0
 80008e8:	72bb      	strb	r3, [r7, #10]
	  if (u8exception > 0)
 80008ea:	7abb      	ldrb	r3, [r7, #10]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d00f      	beq.n	8000910 <StartTaskModbusSlave+0x98>
	  {
		  if (u8exception != NO_REPLY)
 80008f0:	7abb      	ldrb	r3, [r7, #10]
 80008f2:	2bff      	cmp	r3, #255	; 0xff
 80008f4:	d007      	beq.n	8000906 <StartTaskModbusSlave+0x8e>
		  {
			  buildException( u8exception, modH);
 80008f6:	7abb      	ldrb	r3, [r7, #10]
 80008f8:	68f9      	ldr	r1, [r7, #12]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 fdb7 	bl	800146e <buildException>
			  sendTxBuffer(modH);
 8000900:	68f8      	ldr	r0, [r7, #12]
 8000902:	f000 fdd3 	bl	80014ac <sendTxBuffer>
		  }
		  modH->i8lastError = u8exception;
 8000906:	f997 200a 	ldrsb.w	r2, [r7, #10]
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	749a      	strb	r2, [r3, #18]
		  //return u8exception
		  // printf("u8exception  \r\n  \r\n");
		  continue;
 800090e:	e074      	b.n	80009fa <StartTaskModbusSlave+0x182>
	  }

	  // printf("__________ message get the semaphore........\r\n");
	  //u32timeOut = millis(); TODO is this really need?
	  modH->i8lastError = 0;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2200      	movs	r2, #0
 8000914:	749a      	strb	r2, [r3, #18]


	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800091c:	f04f 31ff 	mov.w	r1, #4294967295
 8000920:	4618      	mov	r0, r3
 8000922:	f006 f985 	bl	8006c30 <xQueueSemaphoreTake>

	  // process message
	    switch(modH->au8Buffer[ FUNC ] )
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	7d1b      	ldrb	r3, [r3, #20]
 800092a:	3b01      	subs	r3, #1
 800092c:	2b0f      	cmp	r3, #15
 800092e:	d859      	bhi.n	80009e4 <StartTaskModbusSlave+0x16c>
 8000930:	a201      	add	r2, pc, #4	; (adr r2, 8000938 <StartTaskModbusSlave+0xc0>)
 8000932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000936:	bf00      	nop
 8000938:	08000979 	.word	0x08000979
 800093c:	08000979 	.word	0x08000979
 8000940:	0800098b 	.word	0x0800098b
 8000944:	0800098b 	.word	0x0800098b
 8000948:	0800099d 	.word	0x0800099d
 800094c:	080009af 	.word	0x080009af
 8000950:	080009e5 	.word	0x080009e5
 8000954:	080009e5 	.word	0x080009e5
 8000958:	080009e5 	.word	0x080009e5
 800095c:	080009e5 	.word	0x080009e5
 8000960:	080009e5 	.word	0x080009e5
 8000964:	080009e5 	.word	0x080009e5
 8000968:	080009e5 	.word	0x080009e5
 800096c:	080009e5 	.word	0x080009e5
 8000970:	080009c1 	.word	0x080009c1
 8000974:	080009d3 	.word	0x080009d3
	    {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH);
 8000978:	68f8      	ldr	r0, [r7, #12]
 800097a:	f000 fe2f 	bl	80015dc <process_FC1>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
				break;
 8000988:	e02d      	b.n	80009e6 <StartTaskModbusSlave+0x16e>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 800098a:	68f8      	ldr	r0, [r7, #12]
 800098c:	f000 fedc 	bl	8001748 <process_FC3>
 8000990:	4603      	mov	r3, r0
 8000992:	461a      	mov	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
				break;
 800099a:	e024      	b.n	80009e6 <StartTaskModbusSlave+0x16e>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 800099c:	68f8      	ldr	r0, [r7, #12]
 800099e:	f000 ff3e 	bl	800181e <process_FC5>
 80009a2:	4603      	mov	r3, r0
 80009a4:	461a      	mov	r2, r3
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
				break;
 80009ac:	e01b      	b.n	80009e6 <StartTaskModbusSlave+0x16e>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 80009ae:	68f8      	ldr	r0, [r7, #12]
 80009b0:	f000 ff8f 	bl	80018d2 <process_FC6>
 80009b4:	4603      	mov	r3, r0
 80009b6:	461a      	mov	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
				break;
 80009be:	e012      	b.n	80009e6 <StartTaskModbusSlave+0x16e>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 80009c0:	68f8      	ldr	r0, [r7, #12]
 80009c2:	f000 ffb8 	bl	8001936 <process_FC15>
 80009c6:	4603      	mov	r3, r0
 80009c8:	461a      	mov	r2, r3
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
				break;
 80009d0:	e009      	b.n	80009e6 <StartTaskModbusSlave+0x16e>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 80009d2:	68f8      	ldr	r0, [r7, #12]
 80009d4:	f001 f83e 	bl	8001a54 <process_FC16>
 80009d8:	4603      	mov	r3, r0
 80009da:	461a      	mov	r2, r3
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
				break;
 80009e2:	e000      	b.n	80009e6 <StartTaskModbusSlave+0x16e>
			default:
				break;
 80009e4:	bf00      	nop
	    }

	    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
 80009ec:	2300      	movs	r3, #0
 80009ee:	2200      	movs	r2, #0
 80009f0:	2100      	movs	r1, #0
 80009f2:	f005 fe91 	bl	8006718 <xQueueGenericSend>
	    //return i8state;
	    continue;
 80009f6:	e000      	b.n	80009fa <StartTaskModbusSlave+0x182>
		  continue;
 80009f8:	bf00      	nop
  {
 80009fa:	e743      	b.n	8000884 <StartTaskModbusSlave+0xc>

080009fc <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	4638      	mov	r0, r7
 8000a06:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	75bb      	strb	r3, [r7, #22]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8000a14:	f04f 31ff 	mov.w	r1, #4294967295
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f006 f909 	bl	8006c30 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	7a1b      	ldrb	r3, [r3, #8]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SendQuery+0x2e>
 8000a26:	23ff      	movs	r3, #255	; 0xff
 8000a28:	75bb      	strb	r3, [r7, #22]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	f993 30fa 	ldrsb.w	r3, [r3, #250]	; 0xfa
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SendQuery+0x3c>
 8000a34:	23fe      	movs	r3, #254	; 0xfe
 8000a36:	75bb      	strb	r3, [r7, #22]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8000a38:	783b      	ldrb	r3, [r7, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d002      	beq.n	8000a44 <SendQuery+0x48>
 8000a3e:	783b      	ldrb	r3, [r7, #0]
 8000a40:	2bf7      	cmp	r3, #247	; 0xf7
 8000a42:	d901      	bls.n	8000a48 <SendQuery+0x4c>
 8000a44:	23f7      	movs	r3, #247	; 0xf7
 8000a46:	75bb      	strb	r3, [r7, #22]

	if(error)
 8000a48:	7dbb      	ldrb	r3, [r7, #22]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d00e      	beq.n	8000a6c <SendQuery+0x70>
	{
		 modH->i8lastError = error;
 8000a4e:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2100      	movs	r1, #0
 8000a62:	f005 fe59 	bl	8006718 <xQueueGenericSend>
		 return error;
 8000a66:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000a6a:	e137      	b.n	8000cdc <SendQuery+0x2e0>
	}


	modH->au16regs = telegram.au16reg;
 8000a6c:	68ba      	ldr	r2, [r7, #8]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

	// telegram header
	modH->au8Buffer[ ID ]         = telegram.u8id;
 8000a74:	783a      	ldrb	r2, [r7, #0]
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	74da      	strb	r2, [r3, #19]
	modH->au8Buffer[ FUNC ]       = telegram.u8fct;
 8000a7a:	787a      	ldrb	r2, [r7, #1]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	751a      	strb	r2, [r3, #20]
	modH->au8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 8000a80:	887b      	ldrh	r3, [r7, #2]
 8000a82:	0a1b      	lsrs	r3, r3, #8
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	755a      	strb	r2, [r3, #21]
	modH->au8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 8000a8c:	887b      	ldrh	r3, [r7, #2]
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 8000a94:	787b      	ldrb	r3, [r7, #1]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	2b0f      	cmp	r3, #15
 8000a9a:	f200 810c 	bhi.w	8000cb6 <SendQuery+0x2ba>
 8000a9e:	a201      	add	r2, pc, #4	; (adr r2, 8000aa4 <SendQuery+0xa8>)
 8000aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa4:	08000ae5 	.word	0x08000ae5
 8000aa8:	08000ae5 	.word	0x08000ae5
 8000aac:	08000ae5 	.word	0x08000ae5
 8000ab0:	08000ae5 	.word	0x08000ae5
 8000ab4:	08000b03 	.word	0x08000b03
 8000ab8:	08000b29 	.word	0x08000b29
 8000abc:	08000cb7 	.word	0x08000cb7
 8000ac0:	08000cb7 	.word	0x08000cb7
 8000ac4:	08000cb7 	.word	0x08000cb7
 8000ac8:	08000cb7 	.word	0x08000cb7
 8000acc:	08000cb7 	.word	0x08000cb7
 8000ad0:	08000cb7 	.word	0x08000cb7
 8000ad4:	08000cb7 	.word	0x08000cb7
 8000ad8:	08000cb7 	.word	0x08000cb7
 8000adc:	08000b53 	.word	0x08000b53
 8000ae0:	08000c19 	.word	0x08000c19
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8000ae4:	88bb      	ldrh	r3, [r7, #4]
 8000ae6:	0a1b      	lsrs	r3, r3, #8
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8000af0:	88bb      	ldrh	r3, [r7, #4]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2206      	movs	r2, #6
 8000afc:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
	    break;
 8000b00:	e0d9      	b.n	8000cb6 <SendQuery+0x2ba>
	case MB_FC_WRITE_COIL:
	    modH->au8Buffer[ NB_HI ]      = ((modH->au16regs[0] > 0) ? 0xff : 0);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SendQuery+0x116>
 8000b0e:	22ff      	movs	r2, #255	; 0xff
 8000b10:	e000      	b.n	8000b14 <SendQuery+0x118>
 8000b12:	2200      	movs	r2, #0
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = 0;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	2206      	movs	r2, #6
 8000b22:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
	    break;
 8000b26:	e0c6      	b.n	8000cb6 <SendQuery+0x2ba>
	case MB_FC_WRITE_REGISTER:
	    modH->au8Buffer[ NB_HI ]      = highByte(modH->au16regs[0]);
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte(modH->au16regs[0]);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2206      	movs	r2, #6
 8000b4c:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
	    break;
 8000b50:	e0b1      	b.n	8000cb6 <SendQuery+0x2ba>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 8000b52:	88bb      	ldrh	r3, [r7, #4]
 8000b54:	091b      	lsrs	r3, r3, #4
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	747b      	strb	r3, [r7, #17]
	    u8bytesno = u8regsno * 2;
 8000b5a:	7c7b      	ldrb	r3, [r7, #17]
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	75fb      	strb	r3, [r7, #23]
	    if ((telegram.u16CoilsNo % 16) != 0)
 8000b60:	88bb      	ldrh	r3, [r7, #4]
 8000b62:	f003 030f 	and.w	r3, r3, #15
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d005      	beq.n	8000b78 <SendQuery+0x17c>
	    {
	        u8bytesno++;
 8000b6c:	7dfb      	ldrb	r3, [r7, #23]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	75fb      	strb	r3, [r7, #23]
	        u8regsno++;
 8000b72:	7c7b      	ldrb	r3, [r7, #17]
 8000b74:	3301      	adds	r3, #1
 8000b76:	747b      	strb	r3, [r7, #17]
	    }

	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8000b78:	88bb      	ldrh	r3, [r7, #4]
 8000b7a:	0a1b      	lsrs	r3, r3, #8
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8000b84:	88bb      	ldrh	r3, [r7, #4]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	761a      	strb	r2, [r3, #24]
	    modH->au8Buffer[ BYTE_CNT ]    = u8bytesno;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	7dfa      	ldrb	r2, [r7, #23]
 8000b90:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2207      	movs	r2, #7
 8000b96:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb

	    for (uint16_t i = 0; i < u8bytesno; i++)
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	82bb      	strh	r3, [r7, #20]
 8000b9e:	e035      	b.n	8000c0c <SendQuery+0x210>
	    {
	        if(i%2)
 8000ba0:	8abb      	ldrh	r3, [r7, #20]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d011      	beq.n	8000bd0 <SendQuery+0x1d4>
	        {
	            modH->au8Buffer[ modH->u8BufferSize ] = lowByte( modH->au16regs[ i/2 ] );
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bb2:	8abb      	ldrh	r3, [r7, #20]
 8000bb4:	085b      	lsrs	r3, r3, #1
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	4413      	add	r3, r2
 8000bbc:	881a      	ldrh	r2, [r3, #0]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	440b      	add	r3, r1
 8000bcc:	74da      	strb	r2, [r3, #19]
 8000bce:	e012      	b.n	8000bf6 <SendQuery+0x1fa>
	        }
	        else
	        {
	        	 modH->au8Buffer[  modH->u8BufferSize ] = highByte(  modH->au16regs[ i/2] );
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bd6:	8abb      	ldrh	r3, [r7, #20]
 8000bd8:	085b      	lsrs	r3, r3, #1
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	4413      	add	r3, r2
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	0a1b      	lsrs	r3, r3, #8
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 8000bec:	4619      	mov	r1, r3
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	440b      	add	r3, r1
 8000bf4:	74da      	strb	r2, [r3, #19]
	        }
	        modH->u8BufferSize++;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8000c06:	8abb      	ldrh	r3, [r7, #20]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	82bb      	strh	r3, [r7, #20]
 8000c0c:	7dfb      	ldrb	r3, [r7, #23]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	8aba      	ldrh	r2, [r7, #20]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d3c4      	bcc.n	8000ba0 <SendQuery+0x1a4>
	    }
	    break;
 8000c16:	e04e      	b.n	8000cb6 <SendQuery+0x2ba>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8000c18:	88bb      	ldrh	r3, [r7, #4]
 8000c1a:	0a1b      	lsrs	r3, r3, #8
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8000c24:	88bb      	ldrh	r3, [r7, #4]
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	761a      	strb	r2, [r3, #24]
	    modH->au8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 8000c2c:	88bb      	ldrh	r3, [r7, #4]
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	2207      	movs	r2, #7
 8000c3c:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8000c40:	2300      	movs	r3, #0
 8000c42:	827b      	strh	r3, [r7, #18]
 8000c44:	e032      	b.n	8000cac <SendQuery+0x2b0>
	    {
	        modH->au8Buffer[  modH->u8BufferSize ] = highByte(  modH->au16regs[ i ] );
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c4c:	8a7b      	ldrh	r3, [r7, #18]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	4413      	add	r3, r2
 8000c52:	881b      	ldrh	r3, [r3, #0]
 8000c54:	0a1b      	lsrs	r3, r3, #8
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 8000c5e:	4619      	mov	r1, r3
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	440b      	add	r3, r1
 8000c66:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 8000c6e:	3301      	adds	r3, #1
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
	        modH->au8Buffer[  modH->u8BufferSize ] = lowByte(  modH->au16regs[ i ] );
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c7e:	8a7b      	ldrh	r3, [r7, #18]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	4413      	add	r3, r2
 8000c84:	881a      	ldrh	r2, [r3, #0]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	440b      	add	r3, r1
 8000c94:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8000ca6:	8a7b      	ldrh	r3, [r7, #18]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	827b      	strh	r3, [r7, #18]
 8000cac:	88bb      	ldrh	r3, [r7, #4]
 8000cae:	8a7a      	ldrh	r2, [r7, #18]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d3c8      	bcc.n	8000c46 <SendQuery+0x24a>
	    }
	    break;
 8000cb4:	bf00      	nop
	}

	xSemaphoreGive(modH->ModBusSphrHandle);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	f005 fd29 	bl	8006718 <xQueueGenericSend>

	sendTxBuffer(modH);
 8000cc6:	68f8      	ldr	r0, [r7, #12]
 8000cc8:	f000 fbf0 	bl	80014ac <sendTxBuffer>
	modH->i8state = COM_WAITING;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
	modH->i8lastError = 0;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	749a      	strb	r2, [r3, #18]
	return 0;
 8000cda:	2300      	movs	r3, #0


}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <StartTaskModbusMaster>:




void StartTaskModbusMaster(void *argument)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af02      	add	r7, sp, #8
 8000cea:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	61fb      	str	r3, [r7, #28]
  modbus_t telegram;

  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000cf6:	f107 0108 	add.w	r1, r7, #8
 8000cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f005 feb0 	bl	8006a64 <xQueueReceive>

	  /*Format and Send query */
	  SendQuery(modH, telegram);
 8000d04:	f107 0308 	add.w	r3, r7, #8
 8000d08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d0a:	69f8      	ldr	r0, [r7, #28]
 8000d0c:	f7ff fe76 	bl	80009fc <SendQuery>

	  /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
	  ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000d10:	f04f 31ff 	mov.w	r1, #4294967295
 8000d14:	2001      	movs	r0, #1
 8000d16:	f007 faa1 	bl	800825c <ulTaskNotifyTake>
 8000d1a:	61b8      	str	r0, [r7, #24]
	  modH->i8lastError = 0;
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue == NO_REPLY)
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	2bff      	cmp	r3, #255	; 0xff
 8000d26:	d10f      	bne.n	8000d48 <StartTaskModbusMaster+0x64>
      {
    	  modH->i8state = COM_IDLE;
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
    	  modH->i8lastError = NO_REPLY;
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	22ff      	movs	r2, #255	; 0xff
 8000d34:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
    	  continue;
 8000d46:	e09b      	b.n	8000e80 <StartTaskModbusMaster+0x19c>
      }

	  modH->u8BufferSize = uxQueueMessagesWaiting(modH->QueueModbusHandle);
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f006 f882 	bl	8006e58 <uxQueueMessagesWaiting>
 8000d54:	4603      	mov	r3, r0
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb

	  int8_t i8state = getRxBuffer(modH);
 8000d5e:	69f8      	ldr	r0, [r7, #28]
 8000d60:	f000 f984 	bl	800106c <getRxBuffer>
 8000d64:	4603      	mov	r3, r0
 8000d66:	75fb      	strb	r3, [r7, #23]
	  //modH->u8lastError = i8state;

	  if (i8state < 6){
 8000d68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d6c:	2b05      	cmp	r3, #5
 8000d6e:	dc1e      	bgt.n	8000dae <StartTaskModbusMaster+0xca>
		  //The size of the frame is invalid
		  xQueueGenericReset(modH->QueueModbusHandle, pdFALSE);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8000d76:	2100      	movs	r1, #0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f005 fb09 	bl	8006390 <xQueueGenericReset>
		  modH->i8state = COM_IDLE;
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
		  modH->i8lastError = ERR_BAD_SIZE;
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	22fa      	movs	r2, #250	; 0xfa
 8000d8a:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 8000d92:	3301      	adds	r3, #1
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
		  xSemaphoreGive(modH->ModBusSphrHandle);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
 8000da2:	2300      	movs	r3, #0
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	f005 fcb6 	bl	8006718 <xQueueGenericSend>
		  continue;
 8000dac:	e068      	b.n	8000e80 <StartTaskModbusMaster+0x19c>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 8000db4:	2300      	movs	r3, #0
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2300      	movs	r3, #0
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2103      	movs	r1, #3
 8000dbe:	f007 fc59 	bl	8008674 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  uint8_t u8exception = validateAnswer(modH);
 8000dc2:	69f8      	ldr	r0, [r7, #28]
 8000dc4:	f000 f8e4 	bl	8000f90 <validateAnswer>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	75bb      	strb	r3, [r7, #22]
	  if (u8exception != 0)
 8000dcc:	7dbb      	ldrb	r3, [r7, #22]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d00c      	beq.n	8000dec <StartTaskModbusMaster+0x108>
	  {
		 modH->i8state = COM_IDLE;
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
 8000de0:	2300      	movs	r3, #0
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	f005 fc97 	bl	8006718 <xQueueGenericSend>
	     continue;
 8000dea:	e049      	b.n	8000e80 <StartTaskModbusMaster+0x19c>
	  }



	  modH->i8lastError = u8exception;
 8000dec:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8000dfa:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f005 ff16 	bl	8006c30 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->au8Buffer[ FUNC ] )
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	7d1b      	ldrb	r3, [r3, #20]
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	2b0f      	cmp	r3, #15
 8000e0c:	d82a      	bhi.n	8000e64 <StartTaskModbusMaster+0x180>
 8000e0e:	a201      	add	r2, pc, #4	; (adr r2, 8000e14 <StartTaskModbusMaster+0x130>)
 8000e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e14:	08000e55 	.word	0x08000e55
 8000e18:	08000e55 	.word	0x08000e55
 8000e1c:	08000e5d 	.word	0x08000e5d
 8000e20:	08000e5d 	.word	0x08000e5d
 8000e24:	08000e65 	.word	0x08000e65
 8000e28:	08000e65 	.word	0x08000e65
 8000e2c:	08000e65 	.word	0x08000e65
 8000e30:	08000e65 	.word	0x08000e65
 8000e34:	08000e65 	.word	0x08000e65
 8000e38:	08000e65 	.word	0x08000e65
 8000e3c:	08000e65 	.word	0x08000e65
 8000e40:	08000e65 	.word	0x08000e65
 8000e44:	08000e65 	.word	0x08000e65
 8000e48:	08000e65 	.word	0x08000e65
 8000e4c:	08000e65 	.word	0x08000e65
 8000e50:	08000e65 	.word	0x08000e65
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to au16regs buffer
	      get_FC1(modH);
 8000e54:	69f8      	ldr	r0, [r7, #28]
 8000e56:	f000 f815 	bl	8000e84 <get_FC1>
	      break;
 8000e5a:	e004      	b.n	8000e66 <StartTaskModbusMaster+0x182>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to au16regs buffer
	      get_FC3(modH);
 8000e5c:	69f8      	ldr	r0, [r7, #28]
 8000e5e:	f000 f868 	bl	8000f32 <get_FC3>
	      break;
 8000e62:	e000      	b.n	8000e66 <StartTaskModbusMaster+0x182>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 8000e64:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa

	  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
 8000e74:	2300      	movs	r3, #0
 8000e76:	2200      	movs	r2, #0
 8000e78:	2100      	movs	r1, #0
 8000e7a:	f005 fc4d 	bl	8006718 <xQueueGenericSend>
	  //return i8state;
	  continue;
 8000e7e:	bf00      	nop
  {
 8000e80:	e736      	b.n	8000cf0 <StartTaskModbusMaster+0xc>
 8000e82:	bf00      	nop

08000e84 <get_FC1>:
 *
 * @ingroup register
 * TODO: finish its implementation
 */
void get_FC1(modbusHandler_t *modH)
{
 8000e84:	b590      	push	{r4, r7, lr}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->au8Buffer[2]; i++) {
 8000e90:	2300      	movs	r3, #0
 8000e92:	73fb      	strb	r3, [r7, #15]
 8000e94:	e043      	b.n	8000f1e <get_FC1+0x9a>

        if(i%2)
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d01c      	beq.n	8000edc <get_FC1+0x58>
        {
        	modH->au16regs[i/2]= word(modH->au8Buffer[i+u8byte], lowByte(modH->au16regs[i/2]));
 8000ea2:	7bfa      	ldrb	r2, [r7, #15]
 8000ea4:	7bbb      	ldrb	r3, [r7, #14]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	4413      	add	r3, r2
 8000eac:	7cd8      	ldrb	r0, [r3, #19]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	085b      	lsrs	r3, r3, #1
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	4413      	add	r3, r2
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	b2d9      	uxtb	r1, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	085b      	lsrs	r3, r3, #1
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	18d4      	adds	r4, r2, r3
 8000ed2:	f000 fa73 	bl	80013bc <word>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	8023      	strh	r3, [r4, #0]
 8000eda:	e01d      	b.n	8000f18 <get_FC1+0x94>
        }
        else
        {

        	modH->au16regs[i/2]= word(highByte(modH->au16regs[i/2]), modH->au8Buffer[i+u8byte]);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	085b      	lsrs	r3, r3, #1
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	4413      	add	r3, r2
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	0a1b      	lsrs	r3, r3, #8
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	b2d8      	uxtb	r0, r3
 8000ef4:	7bfa      	ldrb	r2, [r7, #15]
 8000ef6:	7bbb      	ldrb	r3, [r7, #14]
 8000ef8:	4413      	add	r3, r2
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	7cd9      	ldrb	r1, [r3, #19]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	085b      	lsrs	r3, r3, #1
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	18d4      	adds	r4, r2, r3
 8000f10:	f000 fa54 	bl	80013bc <word>
 8000f14:	4603      	mov	r3, r0
 8000f16:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->au8Buffer[2]; i++) {
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	73fb      	strb	r3, [r7, #15]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	7d5b      	ldrb	r3, [r3, #21]
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d3b6      	bcc.n	8000e96 <get_FC1+0x12>
        }

     }
}
 8000f28:	bf00      	nop
 8000f2a:	bf00      	nop
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd90      	pop	{r4, r7, pc}

08000f32 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 8000f32:	b590      	push	{r4, r7, lr}
 8000f34:	b085      	sub	sp, #20
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->au8Buffer[ 2 ] /2; i++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73bb      	strb	r3, [r7, #14]
 8000f42:	e018      	b.n	8000f76 <get_FC3+0x44>
    {
    	modH->au16regs[ i ] = word(modH->au8Buffer[ u8byte ], modH->au8Buffer[ u8byte +1 ]);
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	7cd8      	ldrb	r0, [r3, #19]
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	4413      	add	r3, r2
 8000f54:	7cd9      	ldrb	r1, [r3, #19]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f5c:	7bbb      	ldrb	r3, [r7, #14]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	18d4      	adds	r4, r2, r3
 8000f62:	f000 fa2b 	bl	80013bc <word>
 8000f66:	4603      	mov	r3, r0
 8000f68:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	3302      	adds	r3, #2
 8000f6e:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->au8Buffer[ 2 ] /2; i++)
 8000f70:	7bbb      	ldrb	r3, [r7, #14]
 8000f72:	3301      	adds	r3, #1
 8000f74:	73bb      	strb	r3, [r7, #14]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	7d5b      	ldrb	r3, [r3, #21]
 8000f7a:	085b      	lsrs	r3, r3, #1
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	7bba      	ldrb	r2, [r7, #14]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d3df      	bcc.n	8000f44 <get_FC3+0x12>
    }
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd90      	pop	{r4, r7, pc}
	...

08000f90 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
    // check message crc vs calculated crc
    uint16_t u16MsgCRC =
        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 8000f9e:	3b02      	subs	r3, #2
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	7cdb      	ldrb	r3, [r3, #19]
 8000fa6:	021b      	lsls	r3, r3, #8
         | modH->au8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	440b      	add	r3, r1
 8000fb6:	7cdb      	ldrb	r3, [r3, #19]
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b21b      	sxth	r3, r3
    uint16_t u16MsgCRC =
 8000fbe:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->au8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f103 0213 	add.w	r2, r3, #19
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 8000fcc:	3b02      	subs	r3, #2
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	f000 fa05 	bl	80013e2 <calcCRC>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	461a      	mov	r2, r3
 8000fdc:	89bb      	ldrh	r3, [r7, #12]
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d009      	beq.n	8000ff6 <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 8000fe8:	3301      	adds	r3, #1
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
        return NO_REPLY;
 8000ff2:	23ff      	movs	r3, #255	; 0xff
 8000ff4:	e034      	b.n	8001060 <validateAnswer+0xd0>
    }

    // check exception
    if ((modH->au8Buffer[ FUNC ] & 0x80) != 0)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	7d1b      	ldrb	r3, [r3, #20]
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	da09      	bge.n	8001014 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 8001006:	3301      	adds	r3, #1
 8001008:	b29a      	uxth	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
        return ERR_EXCEPTION;
 8001010:	23fb      	movs	r3, #251	; 0xfb
 8001012:	e025      	b.n	8001060 <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 8001014:	2300      	movs	r3, #0
 8001016:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8001018:	2300      	movs	r3, #0
 800101a:	73bb      	strb	r3, [r7, #14]
 800101c:	e00c      	b.n	8001038 <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->au8Buffer[FUNC])
 800101e:	7bbb      	ldrb	r3, [r7, #14]
 8001020:	4a11      	ldr	r2, [pc, #68]	; (8001068 <validateAnswer+0xd8>)
 8001022:	5cd2      	ldrb	r2, [r2, r3]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	7d1b      	ldrb	r3, [r3, #20]
 8001028:	429a      	cmp	r2, r3
 800102a:	d102      	bne.n	8001032 <validateAnswer+0xa2>
        {
            isSupported = 1;
 800102c:	2301      	movs	r3, #1
 800102e:	73fb      	strb	r3, [r7, #15]
            break;
 8001030:	e005      	b.n	800103e <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8001032:	7bbb      	ldrb	r3, [r7, #14]
 8001034:	3301      	adds	r3, #1
 8001036:	73bb      	strb	r3, [r7, #14]
 8001038:	7bbb      	ldrb	r3, [r7, #14]
 800103a:	2b07      	cmp	r3, #7
 800103c:	d9ef      	bls.n	800101e <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	f083 0301 	eor.w	r3, r3, #1
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	d009      	beq.n	800105e <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 8001050:	3301      	adds	r3, #1
 8001052:	b29a      	uxth	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
        return EXC_FUNC_CODE;
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	0800a79c 	.word	0x0800a79c

0800106c <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int8_t getRxBuffer(modbusHandler_t *modH)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
    bool bBuffOverflow = false;
 8001074:	2300      	movs	r3, #0
 8001076:	72fb      	strb	r3, [r7, #11]

//    // printf("___________Get bufffer _____\r\n");
    int i;
    if (modH->EN_Port)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d007      	beq.n	8001090 <getRxBuffer+0x24>
    {
    	//digitalWrite( u8txenpin, LOW );
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68d8      	ldr	r0, [r3, #12]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	8a1b      	ldrh	r3, [r3, #16]
 8001088:	2200      	movs	r2, #0
 800108a:	4619      	mov	r1, r3
 800108c:	f001 fd54 	bl	8002b38 <HAL_GPIO_WritePin>
    }

//    // printf("___________rcv bufffer _____\r\n");
    modH->u8BufferSize = uxQueueMessagesWaiting(modH->QueueModbusHandle);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8001096:	4618      	mov	r0, r3
 8001098:	f005 fede 	bl	8006e58 <uxQueueMessagesWaiting>
 800109c:	4603      	mov	r3, r0
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
//    // printf("___________size bufffer : %d_____\r\n",modH->u8BufferSize);




    for(i = 0; i<  modH->u8BufferSize; i++ )
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	e00e      	b.n	80010ca <getRxBuffer+0x5e>
		{


			  xQueueReceive(modH->QueueModbusHandle, &modH->au8Buffer[i], 0);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f8d3 00fc 	ldr.w	r0, [r3, #252]	; 0xfc
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	3310      	adds	r3, #16
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	3303      	adds	r3, #3
 80010bc:	2200      	movs	r2, #0
 80010be:	4619      	mov	r1, r3
 80010c0:	f005 fcd0 	bl	8006a64 <xQueueReceive>
    for(i = 0; i<  modH->u8BufferSize; i++ )
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	3301      	adds	r3, #1
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 80010d0:	461a      	mov	r2, r3
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4293      	cmp	r3, r2
 80010d6:	dbe9      	blt.n	80010ac <getRxBuffer+0x40>
			  // printf("___________data : %d \r\n",modH->au8Buffer[i]);

		}


    modH->u16InCnt++;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f8b3 30e4 	ldrh.w	r3, [r3, #228]	; 0xe4
 80010de:	3301      	adds	r3, #1
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
    // printf("___________cnt value %d _____\r\n", modH->u16InCnt);

    if (bBuffOverflow)
 80010e8:	7afb      	ldrb	r3, [r7, #11]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d00a      	beq.n	8001104 <getRxBuffer+0x98>
    {
    	modH->u16errCnt++;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 80010f4:	3301      	adds	r3, #1
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
        return ERR_BUFF_OVERFLOW;  //using queues this will not happen
 80010fe:	f06f 0302 	mvn.w	r3, #2
 8001102:	e003      	b.n	800110c <getRxBuffer+0xa0>
    }
    return modH->u8BufferSize;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 800110a:	b25b      	sxtb	r3, r3
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <HAL_UART_RxCpltCallback>:
 * This is the callback for HAL interrupt of UART RX
 *
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001114:	b590      	push	{r4, r7, lr}
 8001116:	b087      	sub	sp, #28
 8001118:	af02      	add	r7, sp, #8
 800111a:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]

    int i;
    for (i = 0; i < numberHandlers; i++ )
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	e03a      	b.n	800119c <HAL_UART_RxCpltCallback+0x88>
    {
    	if (mHandlers[i]->port == UartHandle  )
 8001126:	4a23      	ldr	r2, [pc, #140]	; (80011b4 <HAL_UART_RxCpltCallback+0xa0>)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	429a      	cmp	r2, r3
 8001134:	d12f      	bne.n	8001196 <HAL_UART_RxCpltCallback+0x82>
    	{
//    		// printf("____uart RX callback___\r\n");
    		xQueueSendToBackFromISR( mHandlers[i]->QueueModbusHandle, &mHandlers[i]->dataRX, pdFALSE);
 8001136:	4a1f      	ldr	r2, [pc, #124]	; (80011b4 <HAL_UART_RxCpltCallback+0xa0>)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113e:	f8d3 00fc 	ldr.w	r0, [r3, #252]	; 0xfc
 8001142:	4a1c      	ldr	r2, [pc, #112]	; (80011b4 <HAL_UART_RxCpltCallback+0xa0>)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114a:	f103 01f9 	add.w	r1, r3, #249	; 0xf9
 800114e:	2300      	movs	r3, #0
 8001150:	2200      	movs	r2, #0
 8001152:	f005 fbe7 	bl	8006924 <xQueueGenericSendFromISR>
    		HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 8001156:	4a17      	ldr	r2, [pc, #92]	; (80011b4 <HAL_UART_RxCpltCallback+0xa0>)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115e:	6858      	ldr	r0, [r3, #4]
 8001160:	4a14      	ldr	r2, [pc, #80]	; (80011b4 <HAL_UART_RxCpltCallback+0xa0>)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001168:	33f9      	adds	r3, #249	; 0xf9
 800116a:	2201      	movs	r2, #1
 800116c:	4619      	mov	r1, r3
 800116e:	f003 fabb 	bl	80046e8 <HAL_UART_Receive_IT>
    		xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 8001172:	4a10      	ldr	r2, [pc, #64]	; (80011b4 <HAL_UART_RxCpltCallback+0xa0>)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117a:	f8d3 4108 	ldr.w	r4, [r3, #264]	; 0x108
 800117e:	f006 fb89 	bl	8007894 <xTaskGetTickCountFromISR>
 8001182:	4602      	mov	r2, r0
 8001184:	f107 0308 	add.w	r3, r7, #8
 8001188:	2100      	movs	r1, #0
 800118a:	9100      	str	r1, [sp, #0]
 800118c:	2107      	movs	r1, #7
 800118e:	4620      	mov	r0, r4
 8001190:	f007 fa70 	bl	8008674 <xTimerGenericCommand>
    		break;
 8001194:	e009      	b.n	80011aa <HAL_UART_RxCpltCallback+0x96>
    for (i = 0; i < numberHandlers; i++ )
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3301      	adds	r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_UART_RxCpltCallback+0xa4>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4293      	cmp	r3, r2
 80011a6:	dbbe      	blt.n	8001126 <HAL_UART_RxCpltCallback+0x12>
    	}
    }
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd90      	pop	{r4, r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000090 	.word	0x20000090
 80011b8:	20000098 	.word	0x20000098

080011bc <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	// check message crc vs calculated crc
	    uint16_t u16MsgCRC =
	        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 80011ca:	3b02      	subs	r3, #2
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	4413      	add	r3, r2
 80011d0:	7cdb      	ldrb	r3, [r3, #19]
 80011d2:	021b      	lsls	r3, r3, #8
	         | modH->au8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 80011dc:	3b01      	subs	r3, #1
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	440b      	add	r3, r1
 80011e2:	7cdb      	ldrb	r3, [r3, #19]
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	4313      	orrs	r3, r2
 80011e8:	b21b      	sxth	r3, r3
	    uint16_t u16MsgCRC =
 80011ea:	81bb      	strh	r3, [r7, #12]
	    if ( calcCRC( modH->au8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f103 0213 	add.w	r2, r3, #19
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 80011f8:	3b02      	subs	r3, #2
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	4619      	mov	r1, r3
 80011fe:	4610      	mov	r0, r2
 8001200:	f000 f8ef 	bl	80013e2 <calcCRC>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	89bb      	ldrh	r3, [r7, #12]
 800120a:	4293      	cmp	r3, r2
 800120c:	d009      	beq.n	8001222 <validateRequest+0x66>
	    {
	    	modH->u16errCnt ++;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 8001214:	3301      	adds	r3, #1
 8001216:	b29a      	uxth	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
	        return NO_REPLY;
 800121e:	23ff      	movs	r3, #255	; 0xff
 8001220:	e0c6      	b.n	80013b0 <validateRequest+0x1f4>
	    }

	    // check fct code
	    bool isSupported = false;
 8001222:	2300      	movs	r3, #0
 8001224:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8001226:	2300      	movs	r3, #0
 8001228:	73bb      	strb	r3, [r7, #14]
 800122a:	e00c      	b.n	8001246 <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->au8Buffer[FUNC])
 800122c:	7bbb      	ldrb	r3, [r7, #14]
 800122e:	4a62      	ldr	r2, [pc, #392]	; (80013b8 <validateRequest+0x1fc>)
 8001230:	5cd2      	ldrb	r2, [r2, r3]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7d1b      	ldrb	r3, [r3, #20]
 8001236:	429a      	cmp	r2, r3
 8001238:	d102      	bne.n	8001240 <validateRequest+0x84>
	        {
	            isSupported = 1;
 800123a:	2301      	movs	r3, #1
 800123c:	73fb      	strb	r3, [r7, #15]
	            break;
 800123e:	e005      	b.n	800124c <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8001240:	7bbb      	ldrb	r3, [r7, #14]
 8001242:	3301      	adds	r3, #1
 8001244:	73bb      	strb	r3, [r7, #14]
 8001246:	7bbb      	ldrb	r3, [r7, #14]
 8001248:	2b07      	cmp	r3, #7
 800124a:	d9ef      	bls.n	800122c <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	f083 0301 	eor.w	r3, r3, #1
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d009      	beq.n	800126c <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 800125e:	3301      	adds	r3, #1
 8001260:	b29a      	uxth	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
	        return EXC_FUNC_CODE;
 8001268:	2301      	movs	r3, #1
 800126a:	e0a1      	b.n	80013b0 <validateRequest+0x1f4>
	    }

	    // check start address & nb range
	    uint16_t u16regs = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	817b      	strh	r3, [r7, #10]
	    uint8_t u8regs;
	    switch ( modH->au8Buffer[ FUNC ] )
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	7d1b      	ldrb	r3, [r3, #20]
 8001274:	3b01      	subs	r3, #1
 8001276:	2b0f      	cmp	r3, #15
 8001278:	f200 8099 	bhi.w	80013ae <validateRequest+0x1f2>
 800127c:	a201      	add	r2, pc, #4	; (adr r2, 8001284 <validateRequest+0xc8>)
 800127e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001282:	bf00      	nop
 8001284:	080012c5 	.word	0x080012c5
 8001288:	080012c5 	.word	0x080012c5
 800128c:	0800135f 	.word	0x0800135f
 8001290:	0800135f 	.word	0x0800135f
 8001294:	0800130d 	.word	0x0800130d
 8001298:	08001337 	.word	0x08001337
 800129c:	080013af 	.word	0x080013af
 80012a0:	080013af 	.word	0x080013af
 80012a4:	080013af 	.word	0x080013af
 80012a8:	080013af 	.word	0x080013af
 80012ac:	080013af 	.word	0x080013af
 80012b0:	080013af 	.word	0x080013af
 80012b4:	080013af 	.word	0x080013af
 80012b8:	080013af 	.word	0x080013af
 80012bc:	080012c5 	.word	0x080012c5
 80012c0:	0800135f 	.word	0x0800135f
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]) / 16;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7d5a      	ldrb	r2, [r3, #21]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	7d9b      	ldrb	r3, [r3, #22]
 80012cc:	4619      	mov	r1, r3
 80012ce:	4610      	mov	r0, r2
 80012d0:	f000 f874 	bl	80013bc <word>
 80012d4:	4603      	mov	r3, r0
 80012d6:	091b      	lsrs	r3, r3, #4
 80012d8:	817b      	strh	r3, [r7, #10]
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]) /16;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7dda      	ldrb	r2, [r3, #23]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	7e1b      	ldrb	r3, [r3, #24]
 80012e2:	4619      	mov	r1, r3
 80012e4:	4610      	mov	r0, r2
 80012e6:	f000 f869 	bl	80013bc <word>
 80012ea:	4603      	mov	r3, r0
 80012ec:	091b      	lsrs	r3, r3, #4
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	897b      	ldrh	r3, [r7, #10]
 80012f4:	4413      	add	r3, r2
 80012f6:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 80012f8:	897b      	ldrh	r3, [r7, #10]
 80012fa:	727b      	strb	r3, [r7, #9]
	        if (u8regs > modH->u8regsize) return EXC_ADDR_RANGE;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 8001302:	7a7a      	ldrb	r2, [r7, #9]
 8001304:	429a      	cmp	r2, r3
 8001306:	d94b      	bls.n	80013a0 <validateRequest+0x1e4>
 8001308:	2302      	movs	r3, #2
 800130a:	e051      	b.n	80013b0 <validateRequest+0x1f4>
	        break;
	    case MB_FC_WRITE_COIL:
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]) / 16;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7d5a      	ldrb	r2, [r3, #21]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	7d9b      	ldrb	r3, [r3, #22]
 8001314:	4619      	mov	r1, r3
 8001316:	4610      	mov	r0, r2
 8001318:	f000 f850 	bl	80013bc <word>
 800131c:	4603      	mov	r3, r0
 800131e:	091b      	lsrs	r3, r3, #4
 8001320:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 8001322:	897b      	ldrh	r3, [r7, #10]
 8001324:	727b      	strb	r3, [r7, #9]
	        if (u8regs > modH->u8regsize) return EXC_ADDR_RANGE;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 800132c:	7a7a      	ldrb	r2, [r7, #9]
 800132e:	429a      	cmp	r2, r3
 8001330:	d938      	bls.n	80013a4 <validateRequest+0x1e8>
 8001332:	2302      	movs	r3, #2
 8001334:	e03c      	b.n	80013b0 <validateRequest+0x1f4>
	        break;
	    case MB_FC_WRITE_REGISTER :
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	7d5a      	ldrb	r2, [r3, #21]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	7d9b      	ldrb	r3, [r3, #22]
 800133e:	4619      	mov	r1, r3
 8001340:	4610      	mov	r0, r2
 8001342:	f000 f83b 	bl	80013bc <word>
 8001346:	4603      	mov	r3, r0
 8001348:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 800134a:	897b      	ldrh	r3, [r7, #10]
 800134c:	727b      	strb	r3, [r7, #9]
	        if (u8regs >modH-> u8regsize) return EXC_ADDR_RANGE;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 8001354:	7a7a      	ldrb	r2, [r7, #9]
 8001356:	429a      	cmp	r2, r3
 8001358:	d926      	bls.n	80013a8 <validateRequest+0x1ec>
 800135a:	2302      	movs	r3, #2
 800135c:	e028      	b.n	80013b0 <validateRequest+0x1f4>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7d5a      	ldrb	r2, [r3, #21]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	7d9b      	ldrb	r3, [r3, #22]
 8001366:	4619      	mov	r1, r3
 8001368:	4610      	mov	r0, r2
 800136a:	f000 f827 	bl	80013bc <word>
 800136e:	4603      	mov	r3, r0
 8001370:	817b      	strh	r3, [r7, #10]
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	7dda      	ldrb	r2, [r3, #23]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	7e1b      	ldrb	r3, [r3, #24]
 800137a:	4619      	mov	r1, r3
 800137c:	4610      	mov	r0, r2
 800137e:	f000 f81d 	bl	80013bc <word>
 8001382:	4603      	mov	r3, r0
 8001384:	461a      	mov	r2, r3
 8001386:	897b      	ldrh	r3, [r7, #10]
 8001388:	4413      	add	r3, r2
 800138a:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 800138c:	897b      	ldrh	r3, [r7, #10]
 800138e:	727b      	strb	r3, [r7, #9]
	        if (u8regs > modH->u8regsize) return EXC_ADDR_RANGE;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 8001396:	7a7a      	ldrb	r2, [r7, #9]
 8001398:	429a      	cmp	r2, r3
 800139a:	d907      	bls.n	80013ac <validateRequest+0x1f0>
 800139c:	2302      	movs	r3, #2
 800139e:	e007      	b.n	80013b0 <validateRequest+0x1f4>
	        break;
 80013a0:	bf00      	nop
 80013a2:	e004      	b.n	80013ae <validateRequest+0x1f2>
	        break;
 80013a4:	bf00      	nop
 80013a6:	e002      	b.n	80013ae <validateRequest+0x1f2>
	        break;
 80013a8:	bf00      	nop
 80013aa:	e000      	b.n	80013ae <validateRequest+0x1f2>
	        break;
 80013ac:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 80013ae:	2300      	movs	r3, #0

}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	0800a79c 	.word	0x0800a79c

080013bc <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	460a      	mov	r2, r1
 80013c6:	71fb      	strb	r3, [r7, #7]
 80013c8:	4613      	mov	r3, r2
 80013ca:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 80013cc:	79bb      	ldrb	r3, [r7, #6]
 80013ce:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 80013d4:	89bb      	ldrh	r3, [r7, #12]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b087      	sub	sp, #28
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	460b      	mov	r3, r1
 80013ec:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 80013ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013f2:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 80013f4:	2300      	movs	r3, #0
 80013f6:	74fb      	strb	r3, [r7, #19]
 80013f8:	e022      	b.n	8001440 <calcCRC+0x5e>
    {
        temp = temp ^ Buffer[i];
 80013fa:	7cfb      	ldrb	r3, [r7, #19]
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	4413      	add	r3, r2
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	4053      	eors	r3, r2
 8001408:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800140a:	2301      	movs	r3, #1
 800140c:	74bb      	strb	r3, [r7, #18]
 800140e:	e011      	b.n	8001434 <calcCRC+0x52>
        {
            flag = temp & 0x0001;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	085b      	lsrs	r3, r3, #1
 800141c:	617b      	str	r3, [r7, #20]
            if (flag)
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d004      	beq.n	800142e <calcCRC+0x4c>
                temp ^= 0xA001;
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	f24a 0301 	movw	r3, #40961	; 0xa001
 800142a:	4053      	eors	r3, r2
 800142c:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800142e:	7cbb      	ldrb	r3, [r7, #18]
 8001430:	3301      	adds	r3, #1
 8001432:	74bb      	strb	r3, [r7, #18]
 8001434:	7cbb      	ldrb	r3, [r7, #18]
 8001436:	2b08      	cmp	r3, #8
 8001438:	d9ea      	bls.n	8001410 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 800143a:	7cfb      	ldrb	r3, [r7, #19]
 800143c:	3301      	adds	r3, #1
 800143e:	74fb      	strb	r3, [r7, #19]
 8001440:	7cfa      	ldrb	r2, [r7, #19]
 8001442:	78fb      	ldrb	r3, [r7, #3]
 8001444:	429a      	cmp	r2, r3
 8001446:	d3d8      	bcc.n	80013fa <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	0a1b      	lsrs	r3, r3, #8
 800144c:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	4313      	orrs	r3, r2
 8001456:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	b29b      	uxth	r3, r3
 800145c:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	b29b      	uxth	r3, r3

}
 8001462:	4618      	mov	r0, r3
 8001464:	371c      	adds	r7, #28
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 800146e:	b480      	push	{r7}
 8001470:	b085      	sub	sp, #20
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	6039      	str	r1, [r7, #0]
 8001478:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->au8Buffer[ FUNC ];  // get the original FUNC code
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	7d1b      	ldrb	r3, [r3, #20]
 800147e:	73fb      	strb	r3, [r7, #15]

    modH->au8Buffer[ ID ]      = modH->u8id;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	7a1a      	ldrb	r2, [r3, #8]
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	74da      	strb	r2, [r3, #19]
    modH->au8Buffer[ FUNC ]    = u8func + 0x80;
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	3b80      	subs	r3, #128	; 0x80
 800148c:	b2da      	uxtb	r2, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	751a      	strb	r2, [r3, #20]
    modH->au8Buffer[ 2 ]       = u8exception;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	79fa      	ldrb	r2, [r7, #7]
 8001496:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	2203      	movs	r2, #3
 800149c:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
void sendTxBuffer(modbusHandler_t *modH)
{
 80014ac:	b590      	push	{r4, r7, lr}
 80014ae:	b087      	sub	sp, #28
 80014b0:	af02      	add	r7, sp, #8
 80014b2:	6078      	str	r0, [r7, #4]
    // append CRC to message
    uint16_t u16crc = calcCRC(modH->au8Buffer, modH->u8BufferSize);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f103 0213 	add.w	r2, r3, #19
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 80014c0:	4619      	mov	r1, r3
 80014c2:	4610      	mov	r0, r2
 80014c4:	f7ff ff8d 	bl	80013e2 <calcCRC>
 80014c8:	4603      	mov	r3, r0
 80014ca:	81fb      	strh	r3, [r7, #14]
    modH->au8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 80014cc:	89fb      	ldrh	r3, [r7, #14]
 80014ce:	0a1b      	lsrs	r3, r3, #8
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 80014d8:	4619      	mov	r1, r3
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	440b      	add	r3, r1
 80014e0:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 80014e8:	3301      	adds	r3, #1
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
    modH->au8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 80014f8:	4619      	mov	r1, r3
 80014fa:	89fb      	ldrh	r3, [r7, #14]
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	440b      	add	r3, r1
 8001502:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 800150a:	3301      	adds	r3, #1
 800150c:	b2da      	uxtb	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb

    if (modH->EN_Port != NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d007      	beq.n	800152c <sendTxBuffer+0x80>
    {
        // set RS485 transceiver to transmit mode
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68d8      	ldr	r0, [r3, #12]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	8a1b      	ldrh	r3, [r3, #16]
 8001524:	2201      	movs	r2, #1
 8001526:	4619      	mov	r1, r3
 8001528:	f001 fb06 	bl	8002b38 <HAL_GPIO_WritePin>
    }

    // transfer buffer to serial line
    //port->write( au8Buffer, u8BufferSize );
    //HAL_UART_Transmit(modH->port, modH->au8Buffer , modH->u8BufferSize, 100);
    HAL_UART_Transmit_IT(modH->port, modH->au8Buffer,  modH->u8BufferSize);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6858      	ldr	r0, [r3, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f103 0113 	add.w	r1, r3, #19
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 800153c:	b29b      	uxth	r3, r3
 800153e:	461a      	mov	r2, r3
 8001540:	f003 f864 	bl	800460c <HAL_UART_Transmit_IT>

    ulTaskNotifyTake(pdTRUE, portMAX_DELAY); //wait notification from TXE interrupt
 8001544:	f04f 31ff 	mov.w	r1, #4294967295
 8001548:	2001      	movs	r0, #1
 800154a:	f006 fe87 	bl	800825c <ulTaskNotifyTake>


     if (modH->EN_Port != NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d018      	beq.n	8001588 <sendTxBuffer+0xdc>
     {
         // must wait transmission end before changing pin state
         //return RS485 transceiver to receive mode


    	 while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )  //USART_SR_TC
 8001556:	e007      	b.n	8001568 <sendTxBuffer+0xbc>
	   	 {
    		taskYIELD();
 8001558:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <sendTxBuffer+0x12c>)
 800155a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	f3bf 8f4f 	dsb	sy
 8001564:	f3bf 8f6f 	isb	sy
    	 while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )  //USART_SR_TC
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0ef      	beq.n	8001558 <sendTxBuffer+0xac>
    	 }
    	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68d8      	ldr	r0, [r3, #12]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	8a1b      	ldrh	r3, [r3, #16]
 8001580:	2200      	movs	r2, #0
 8001582:	4619      	mov	r1, r3
 8001584:	f001 fad8 	bl	8002b38 <HAL_GPIO_WritePin>
     }

     xQueueGenericReset(modH->QueueModbusHandle, pdFALSE);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800158e:	2100      	movs	r1, #0
 8001590:	4618      	mov	r0, r3
 8001592:	f004 fefd 	bl	8006390 <xQueueGenericReset>

     modH->u8BufferSize = 0;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb

     // set timeout for master query
     if(modH->uiModbusType == MASTER_RTU )
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d10c      	bne.n	80015c0 <sendTxBuffer+0x114>
     {
 		xTimerReset(modH->xTimerTimeout,0);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 80015ac:	f006 f962 	bl	8007874 <xTaskGetTickCount>
 80015b0:	4602      	mov	r2, r0
 80015b2:	2300      	movs	r3, #0
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	2300      	movs	r3, #0
 80015b8:	2102      	movs	r1, #2
 80015ba:	4620      	mov	r0, r4
 80015bc:	f007 f85a 	bl	8008674 <xTimerGenericCommand>
     }

     // increase message counter
     modH->u16OutCnt++;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f8b3 30e6 	ldrh.w	r3, [r3, #230]	; 0xe6
 80015c6:	3301      	adds	r3, #1
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f8a3 20e6 	strh.w	r2, [r3, #230]	; 0xe6

}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd90      	pop	{r4, r7, pc}
 80015d8:	e000ed04 	.word	0xe000ed04

080015dc <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
    uint8_t u8currentRegister, u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7d5a      	ldrb	r2, [r3, #21]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	7d9b      	ldrb	r3, [r3, #22]
 80015ec:	4619      	mov	r1, r3
 80015ee:	4610      	mov	r0, r2
 80015f0:	f7ff fee4 	bl	80013bc <word>
 80015f4:	4603      	mov	r3, r0
 80015f6:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	7dda      	ldrb	r2, [r3, #23]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7e1b      	ldrb	r3, [r3, #24]
 8001600:	4619      	mov	r1, r3
 8001602:	4610      	mov	r0, r2
 8001604:	f7ff feda 	bl	80013bc <word>
 8001608:	4603      	mov	r3, r0
 800160a:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 800160c:	8a3b      	ldrh	r3, [r7, #16]
 800160e:	08db      	lsrs	r3, r3, #3
 8001610:	b29b      	uxth	r3, r3
 8001612:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8001614:	8a3b      	ldrh	r3, [r7, #16]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	b29b      	uxth	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d002      	beq.n	8001626 <process_FC1+0x4a>
 8001620:	7dfb      	ldrb	r3, [r7, #23]
 8001622:	3301      	adds	r3, #1
 8001624:	75fb      	strb	r3, [r7, #23]
    modH->au8Buffer[ ADD_HI ]  = u8bytesno;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	7dfa      	ldrb	r2, [r7, #23]
 800162a:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2203      	movs	r2, #3
 8001630:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
    modH->au8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 800163a:	461a      	mov	r2, r3
 800163c:	7dfb      	ldrb	r3, [r7, #23]
 800163e:	4413      	add	r3, r2
 8001640:	3b01      	subs	r3, #1
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	2200      	movs	r2, #0
 8001648:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800164e:	2300      	movs	r3, #0
 8001650:	82bb      	strh	r3, [r7, #20]
 8001652:	e059      	b.n	8001708 <process_FC1+0x12c>
    {
        u16coil = u16StartCoil + u16currentCoil;
 8001654:	8a7a      	ldrh	r2, [r7, #18]
 8001656:	8abb      	ldrh	r3, [r7, #20]
 8001658:	4413      	add	r3, r2
 800165a:	81bb      	strh	r3, [r7, #12]
        u8currentRegister = (uint8_t) (u16coil / 16);
 800165c:	89bb      	ldrh	r3, [r7, #12]
 800165e:	091b      	lsrs	r3, r3, #4
 8001660:	b29b      	uxth	r3, r3
 8001662:	72fb      	strb	r3, [r7, #11]
        u8currentBit = (uint8_t) (u16coil % 16);
 8001664:	89bb      	ldrh	r3, [r7, #12]
 8001666:	b2db      	uxtb	r3, r3
 8001668:	f003 030f 	and.w	r3, r3, #15
 800166c:	72bb      	strb	r3, [r7, #10]

        bitWrite(
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001674:	7afb      	ldrb	r3, [r7, #11]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	4413      	add	r3, r2
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	7abb      	ldrb	r3, [r7, #10]
 8001680:	fa42 f303 	asr.w	r3, r2, r3
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b00      	cmp	r3, #0
 800168a:	d014      	beq.n	80016b6 <process_FC1+0xda>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 8001692:	461a      	mov	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4413      	add	r3, r2
 8001698:	7cda      	ldrb	r2, [r3, #19]
 800169a:	7dbb      	ldrb	r3, [r7, #22]
 800169c:	2101      	movs	r1, #1
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	f891 10db 	ldrb.w	r1, [r1, #219]	; 0xdb
 80016aa:	4313      	orrs	r3, r2
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	440b      	add	r3, r1
 80016b2:	74da      	strb	r2, [r3, #19]
 80016b4:	e015      	b.n	80016e2 <process_FC1+0x106>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 80016bc:	461a      	mov	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	7cda      	ldrb	r2, [r3, #19]
 80016c4:	7dbb      	ldrb	r3, [r7, #22]
 80016c6:	2101      	movs	r1, #1
 80016c8:	fa01 f303 	lsl.w	r3, r1, r3
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	f891 10db 	ldrb.w	r1, [r1, #219]	; 0xdb
 80016d8:	4013      	ands	r3, r2
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	440b      	add	r3, r1
 80016e0:	74da      	strb	r2, [r3, #19]
        	modH->au8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->au16regs[ u8currentRegister ], u8currentBit ) );
        u8bitsno ++;
 80016e2:	7dbb      	ldrb	r3, [r7, #22]
 80016e4:	3301      	adds	r3, #1
 80016e6:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 80016e8:	7dbb      	ldrb	r3, [r7, #22]
 80016ea:	2b07      	cmp	r3, #7
 80016ec:	d909      	bls.n	8001702 <process_FC1+0x126>
        {
            u8bitsno = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 80016f8:	3301      	adds	r3, #1
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8001702:	8abb      	ldrh	r3, [r7, #20]
 8001704:	3301      	adds	r3, #1
 8001706:	82bb      	strh	r3, [r7, #20]
 8001708:	8aba      	ldrh	r2, [r7, #20]
 800170a:	8a3b      	ldrh	r3, [r7, #16]
 800170c:	429a      	cmp	r2, r3
 800170e:	d3a1      	bcc.n	8001654 <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8001710:	8a3b      	ldrh	r3, [r7, #16]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	b29b      	uxth	r3, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	d007      	beq.n	800172c <process_FC1+0x150>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 8001722:	3301      	adds	r3, #1
 8001724:	b2da      	uxtb	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
    u8CopyBufferSize = modH->u8BufferSize +2;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 8001732:	3302      	adds	r3, #2
 8001734:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff feb8 	bl	80014ac <sendTxBuffer>
    return u8CopyBufferSize;
 800173c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]

    uint8_t u8StartAdd = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	7d5a      	ldrb	r2, [r3, #21]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7d9b      	ldrb	r3, [r3, #22]
 8001758:	4619      	mov	r1, r3
 800175a:	4610      	mov	r0, r2
 800175c:	f7ff fe2e 	bl	80013bc <word>
 8001760:	4603      	mov	r3, r0
 8001762:	73bb      	strb	r3, [r7, #14]
    uint8_t u8regsno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	7dda      	ldrb	r2, [r3, #23]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7e1b      	ldrb	r3, [r3, #24]
 800176c:	4619      	mov	r1, r3
 800176e:	4610      	mov	r0, r2
 8001770:	f7ff fe24 	bl	80013bc <word>
 8001774:	4603      	mov	r3, r0
 8001776:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint8_t i;

    modH->au8Buffer[ 2 ]       = u8regsno * 2;
 8001778:	7b7b      	ldrb	r3, [r7, #13]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	b2da      	uxtb	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2203      	movs	r2, #3
 8001786:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb

    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 800178a:	7bbb      	ldrb	r3, [r7, #14]
 800178c:	73fb      	strb	r3, [r7, #15]
 800178e:	e032      	b.n	80017f6 <process_FC3+0xae>
    {
    	modH->au8Buffer[ modH->u8BufferSize ] = highByte(modH->au16regs[i]);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	4413      	add	r3, r2
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	0a1b      	lsrs	r3, r3, #8
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 80017a8:	4619      	mov	r1, r3
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	440b      	add	r3, r1
 80017b0:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 80017b8:	3301      	adds	r3, #1
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
    	modH->au8Buffer[ modH->u8BufferSize ] = lowByte(modH->au16regs[i]);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	4413      	add	r3, r2
 80017ce:	881a      	ldrh	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 80017d6:	4619      	mov	r1, r3
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	440b      	add	r3, r1
 80017de:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 80017e6:	3301      	adds	r3, #1
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	3301      	adds	r3, #1
 80017f4:	73fb      	strb	r3, [r7, #15]
 80017f6:	7bfa      	ldrb	r2, [r7, #15]
 80017f8:	7bb9      	ldrb	r1, [r7, #14]
 80017fa:	7b7b      	ldrb	r3, [r7, #13]
 80017fc:	440b      	add	r3, r1
 80017fe:	429a      	cmp	r2, r3
 8001800:	dbc6      	blt.n	8001790 <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 8001808:	3302      	adds	r3, #2
 800180a:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff fe4d 	bl	80014ac <sendTxBuffer>

    return u8CopyBufferSize;
 8001812:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b084      	sub	sp, #16
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
    uint8_t u8currentRegister, u8currentBit;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	7d5a      	ldrb	r2, [r3, #21]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	7d9b      	ldrb	r3, [r3, #22]
 800182e:	4619      	mov	r1, r3
 8001830:	4610      	mov	r0, r2
 8001832:	f7ff fdc3 	bl	80013bc <word>
 8001836:	4603      	mov	r3, r0
 8001838:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u8currentRegister = (uint8_t) (u16coil / 16);
 800183a:	89fb      	ldrh	r3, [r7, #14]
 800183c:	091b      	lsrs	r3, r3, #4
 800183e:	b29b      	uxth	r3, r3
 8001840:	737b      	strb	r3, [r7, #13]
    u8currentBit = (uint8_t) (u16coil % 16);
 8001842:	89fb      	ldrh	r3, [r7, #14]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	733b      	strb	r3, [r7, #12]

    // write to coil
    bitWrite(
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	7ddb      	ldrb	r3, [r3, #23]
 8001850:	2bff      	cmp	r3, #255	; 0xff
 8001852:	d115      	bne.n	8001880 <process_FC5+0x62>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800185a:	7b7b      	ldrb	r3, [r7, #13]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	4413      	add	r3, r2
 8001860:	8819      	ldrh	r1, [r3, #0]
 8001862:	7b3b      	ldrb	r3, [r7, #12]
 8001864:	2201      	movs	r2, #1
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	b29a      	uxth	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8001872:	7b7b      	ldrb	r3, [r7, #13]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4403      	add	r3, r0
 8001878:	430a      	orrs	r2, r1
 800187a:	b292      	uxth	r2, r2
 800187c:	801a      	strh	r2, [r3, #0]
 800187e:	e016      	b.n	80018ae <process_FC5+0x90>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001886:	7b7b      	ldrb	r3, [r7, #13]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	4413      	add	r3, r2
 800188c:	8819      	ldrh	r1, [r3, #0]
 800188e:	7b3b      	ldrb	r3, [r7, #12]
 8001890:	2201      	movs	r2, #1
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	b29b      	uxth	r3, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	b29a      	uxth	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 80018a2:	7b7b      	ldrb	r3, [r7, #13]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4403      	add	r3, r0
 80018a8:	400a      	ands	r2, r1
 80018aa:	b292      	uxth	r2, r2
 80018ac:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->au8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2206      	movs	r2, #6
 80018b2:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
    u8CopyBufferSize =  modH->u8BufferSize +2;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 80018bc:	3302      	adds	r3, #2
 80018be:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff fdf3 	bl	80014ac <sendTxBuffer>

    return u8CopyBufferSize;
 80018c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b084      	sub	sp, #16
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]

    uint8_t u8add = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	7d5a      	ldrb	r2, [r3, #21]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	7d9b      	ldrb	r3, [r3, #22]
 80018e2:	4619      	mov	r1, r3
 80018e4:	4610      	mov	r0, r2
 80018e6:	f7ff fd69 	bl	80013bc <word>
 80018ea:	4603      	mov	r3, r0
 80018ec:	73fb      	strb	r3, [r7, #15]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	7dda      	ldrb	r2, [r3, #23]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	7e1b      	ldrb	r3, [r3, #24]
 80018f6:	4619      	mov	r1, r3
 80018f8:	4610      	mov	r0, r2
 80018fa:	f7ff fd5f 	bl	80013bc <word>
 80018fe:	4603      	mov	r3, r0
 8001900:	81bb      	strh	r3, [r7, #12]

    modH->au16regs[ u8add ] = u16val;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	89ba      	ldrh	r2, [r7, #12]
 8001910:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2206      	movs	r2, #6
 8001916:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb

    u8CopyBufferSize = modH->u8BufferSize +2;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 8001920:	3302      	adds	r3, #2
 8001922:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff fdc1 	bl	80014ac <sendTxBuffer>

    return u8CopyBufferSize;
 800192a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	7d5a      	ldrb	r2, [r3, #21]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	7d9b      	ldrb	r3, [r3, #22]
 8001946:	4619      	mov	r1, r3
 8001948:	4610      	mov	r0, r2
 800194a:	f7ff fd37 	bl	80013bc <word>
 800194e:	4603      	mov	r3, r0
 8001950:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	7dda      	ldrb	r2, [r3, #23]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	7e1b      	ldrb	r3, [r3, #24]
 800195a:	4619      	mov	r1, r3
 800195c:	4610      	mov	r0, r2
 800195e:	f7ff fd2d 	bl	80013bc <word>
 8001962:	4603      	mov	r3, r0
 8001964:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 800196a:	2307      	movs	r3, #7
 800196c:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800196e:	2300      	movs	r3, #0
 8001970:	82bb      	strh	r3, [r7, #20]
 8001972:	e059      	b.n	8001a28 <process_FC15+0xf2>
    {

        u16coil = u16StartCoil + u16currentCoil;
 8001974:	8a7a      	ldrh	r2, [r7, #18]
 8001976:	8abb      	ldrh	r3, [r7, #20]
 8001978:	4413      	add	r3, r2
 800197a:	81bb      	strh	r3, [r7, #12]
        u8currentRegister = (uint8_t) (u16coil / 16);
 800197c:	89bb      	ldrh	r3, [r7, #12]
 800197e:	091b      	lsrs	r3, r3, #4
 8001980:	b29b      	uxth	r3, r3
 8001982:	72fb      	strb	r3, [r7, #11]
        u8currentBit = (uint8_t) (u16coil % 16);
 8001984:	89bb      	ldrh	r3, [r7, #12]
 8001986:	b2db      	uxtb	r3, r3
 8001988:	f003 030f 	and.w	r3, r3, #15
 800198c:	72bb      	strb	r3, [r7, #10]

        bTemp = bitRead(
 800198e:	7dfb      	ldrb	r3, [r7, #23]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	4413      	add	r3, r2
 8001994:	7cdb      	ldrb	r3, [r3, #19]
 8001996:	461a      	mov	r2, r3
 8001998:	7dbb      	ldrb	r3, [r7, #22]
 800199a:	fa42 f303 	asr.w	r3, r2, r3
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	bf14      	ite	ne
 80019a6:	2301      	movne	r3, #1
 80019a8:	2300      	moveq	r3, #0
 80019aa:	727b      	strb	r3, [r7, #9]
        			modH->au8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 80019ac:	7a7b      	ldrb	r3, [r7, #9]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d015      	beq.n	80019de <process_FC15+0xa8>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80019b8:	7afb      	ldrb	r3, [r7, #11]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	4413      	add	r3, r2
 80019be:	8819      	ldrh	r1, [r3, #0]
 80019c0:	7abb      	ldrb	r3, [r7, #10]
 80019c2:	2201      	movs	r2, #1
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 80019d0:	7afb      	ldrb	r3, [r7, #11]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	4403      	add	r3, r0
 80019d6:	430a      	orrs	r2, r1
 80019d8:	b292      	uxth	r2, r2
 80019da:	801a      	strh	r2, [r3, #0]
 80019dc:	e016      	b.n	8001a0c <process_FC15+0xd6>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80019e4:	7afb      	ldrb	r3, [r7, #11]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	4413      	add	r3, r2
 80019ea:	8819      	ldrh	r1, [r3, #0]
 80019ec:	7abb      	ldrb	r3, [r7, #10]
 80019ee:	2201      	movs	r2, #1
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8001a00:	7afb      	ldrb	r3, [r7, #11]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4403      	add	r3, r0
 8001a06:	400a      	ands	r2, r1
 8001a08:	b292      	uxth	r2, r2
 8001a0a:	801a      	strh	r2, [r3, #0]
            modH->au16regs[ u8currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 8001a0c:	7dbb      	ldrb	r3, [r7, #22]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8001a12:	7dbb      	ldrb	r3, [r7, #22]
 8001a14:	2b07      	cmp	r3, #7
 8001a16:	d904      	bls.n	8001a22 <process_FC15+0xec>
        {
            u8bitsno = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 8001a1c:	7dfb      	ldrb	r3, [r7, #23]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8001a22:	8abb      	ldrh	r3, [r7, #20]
 8001a24:	3301      	adds	r3, #1
 8001a26:	82bb      	strh	r3, [r7, #20]
 8001a28:	8aba      	ldrh	r2, [r7, #20]
 8001a2a:	8a3b      	ldrh	r3, [r7, #16]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d3a1      	bcc.n	8001974 <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2206      	movs	r2, #6
 8001a34:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
    u8CopyBufferSize = modH->u8BufferSize +2;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 8001a3e:	3302      	adds	r3, #2
 8001a40:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff fd32 	bl	80014ac <sendTxBuffer>
    return u8CopyBufferSize;
 8001a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
    uint8_t u8StartAdd = modH->au8Buffer[ ADD_HI ] << 8 | modH->au8Buffer[ ADD_LO ];
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	7d5b      	ldrb	r3, [r3, #21]
 8001a60:	021b      	lsls	r3, r3, #8
 8001a62:	b25a      	sxtb	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7d9b      	ldrb	r3, [r3, #22]
 8001a68:	b25b      	sxtb	r3, r3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b25b      	sxtb	r3, r3
 8001a6e:	73bb      	strb	r3, [r7, #14]
    uint8_t u8regsno = modH->au8Buffer[ NB_HI ] << 8 | modH->au8Buffer[ NB_LO ];
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	7ddb      	ldrb	r3, [r3, #23]
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	b25a      	sxtb	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	7e1b      	ldrb	r3, [r3, #24]
 8001a7c:	b25b      	sxtb	r3, r3
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	b25b      	sxtb	r3, r3
 8001a82:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint8_t i;
    uint16_t temp;

    // build header
    modH->au8Buffer[ NB_HI ]   = 0;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	75da      	strb	r2, [r3, #23]
    modH->au8Buffer[ NB_LO ]   = u8regsno;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	7b7a      	ldrb	r2, [r7, #13]
 8001a8e:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2206      	movs	r2, #6
 8001a94:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb

    // write registers
    printf("____________Recived data from Master !______\r\n");
 8001a98:	4823      	ldr	r0, [pc, #140]	; (8001b28 <process_FC16+0xd4>)
 8001a9a:	f007 ff6b 	bl	8009974 <puts>

    for (i = 0; i < u8regsno; i++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	73fb      	strb	r3, [r7, #15]
 8001aa2:	e02c      	b.n	8001afe <process_FC16+0xaa>
    {
        temp = word(
        		modH->au8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	3307      	adds	r3, #7
        temp = word(
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	7cd8      	ldrb	r0, [r3, #19]
				modH->au8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	005b      	lsls	r3, r3, #1
        temp = word(
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	7cdb      	ldrb	r3, [r3, #19]
 8001abc:	4619      	mov	r1, r3
 8001abe:	f7ff fc7d 	bl	80013bc <word>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	817b      	strh	r3, [r7, #10]

        modH->au16regs[ u8StartAdd + i ] = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001acc:	7bb9      	ldrb	r1, [r7, #14]
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	440b      	add	r3, r1
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	897a      	ldrh	r2, [r7, #10]
 8001ad8:	801a      	strh	r2, [r3, #0]
        printf("data[%d] : %02X \r\n",i, modH->au16regs[ u8StartAdd + i ]);
 8001ada:	7bf8      	ldrb	r0, [r7, #15]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001ae2:	7bb9      	ldrb	r1, [r7, #14]
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
 8001ae6:	440b      	add	r3, r1
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4413      	add	r3, r2
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	4601      	mov	r1, r0
 8001af2:	480e      	ldr	r0, [pc, #56]	; (8001b2c <process_FC16+0xd8>)
 8001af4:	f007 feb8 	bl	8009868 <iprintf>
    for (i = 0; i < u8regsno; i++)
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	3301      	adds	r3, #1
 8001afc:	73fb      	strb	r3, [r7, #15]
 8001afe:	7bfa      	ldrb	r2, [r7, #15]
 8001b00:	7b7b      	ldrb	r3, [r7, #13]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d3ce      	bcc.n	8001aa4 <process_FC16+0x50>
    }
    printf("\r\n");
 8001b06:	480a      	ldr	r0, [pc, #40]	; (8001b30 <process_FC16+0xdc>)
 8001b08:	f007 ff34 	bl	8009974 <puts>
    u8CopyBufferSize = modH->u8BufferSize +2;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 8001b12:	3302      	adds	r3, #2
 8001b14:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff fcc8 	bl	80014ac <sendTxBuffer>

    return u8CopyBufferSize;
 8001b1c:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	0800a6a8 	.word	0x0800a6a8
 8001b2c:	0800a6d8 	.word	0x0800a6d8
 8001b30:	0800a6ec 	.word	0x0800a6ec

08001b34 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (char*)ptr, len, HAL_MAX_DELAY);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	f04f 33ff 	mov.w	r3, #4294967295
 8001b48:	68b9      	ldr	r1, [r7, #8]
 8001b4a:	4804      	ldr	r0, [pc, #16]	; (8001b5c <_write+0x28>)
 8001b4c:	f002 fcca 	bl	80044e4 <HAL_UART_Transmit>
	return len;
 8001b50:	687b      	ldr	r3, [r7, #4]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000120 	.word	0x20000120

08001b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b0b2      	sub	sp, #200	; 0xc8
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b66:	f000 fc9a 	bl	800249e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b6a:	f000 f843 	bl	8001bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b6e:	f000 f913 	bl	8001d98 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001b72:	f000 f8e1 	bl	8001d38 <MX_USART3_UART_Init>
  MX_UART4_Init();
 8001b76:	f000 f8af 	bl	8001cd8 <MX_UART4_Init>
   /* Slave initialization */
//
//
  uint16_t rcvd_data[100];

   ModbusH2.uiModbusType = SLAVE_RTU;
 8001b7a:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <main+0x7c>)
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	701a      	strb	r2, [r3, #0]
   ModbusH2.port =  &huart4;
 8001b80:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <main+0x7c>)
 8001b82:	4a17      	ldr	r2, [pc, #92]	; (8001be0 <main+0x80>)
 8001b84:	605a      	str	r2, [r3, #4]
   ModbusH2.u8id = 10;
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <main+0x7c>)
 8001b88:	220a      	movs	r2, #10
 8001b8a:	721a      	strb	r2, [r3, #8]
   ModbusH2.u16timeOut = 1000;
 8001b8c:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <main+0x7c>)
 8001b8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b92:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
   ModbusH2.EN_Port = NULL;
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <main+0x7c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	60da      	str	r2, [r3, #12]
   //ModbusH2.EN_Port = LD2_GPIO_Port;
   //ModbusH2.EN_Pin = LD2_Pin;
   ModbusH2.u32overTime = 0;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <main+0x7c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
   ModbusH2.au16regs = ModbusDATA2;
 8001ba4:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <main+0x7c>)
 8001ba6:	4a0f      	ldr	r2, [pc, #60]	; (8001be4 <main+0x84>)
 8001ba8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
   ModbusH2.u8regsize= sizeof(ModbusDATA2)/sizeof(ModbusDATA2[0]);
 8001bac:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <main+0x7c>)
 8001bae:	2208      	movs	r2, #8
 8001bb0:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   //Initialize Modbus library
   ModbusInit(&ModbusH2);
 8001bb4:	4809      	ldr	r0, [pc, #36]	; (8001bdc <main+0x7c>)
 8001bb6:	f7fe fd15 	bl	80005e4 <ModbusInit>
   //Start capturing traffic on serial Port
   ModbusStart(&ModbusH2);
 8001bba:	4808      	ldr	r0, [pc, #32]	; (8001bdc <main+0x7c>)
 8001bbc:	f7fe fd9e 	bl	80006fc <ModbusStart>

//   printf("main runnuing\r\n");
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001bc0:	f004 f89e 	bl	8005d00 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001bc4:	4a08      	ldr	r2, [pc, #32]	; (8001be8 <main+0x88>)
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4808      	ldr	r0, [pc, #32]	; (8001bec <main+0x8c>)
 8001bca:	f004 f903 	bl	8005dd4 <osThreadNew>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4a07      	ldr	r2, [pc, #28]	; (8001bf0 <main+0x90>)
 8001bd2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001bd4:	f004 f8c8 	bl	8005d68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <main+0x78>
 8001bda:	bf00      	nop
 8001bdc:	200001a8 	.word	0x200001a8
 8001be0:	2000009c 	.word	0x2000009c
 8001be4:	200002bc 	.word	0x200002bc
 8001be8:	0800a7a4 	.word	0x0800a7a4
 8001bec:	08001fc5 	.word	0x08001fc5
 8001bf0:	200001a4 	.word	0x200001a4

08001bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b094      	sub	sp, #80	; 0x50
 8001bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bfa:	f107 031c 	add.w	r3, r7, #28
 8001bfe:	2234      	movs	r2, #52	; 0x34
 8001c00:	2100      	movs	r1, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f007 fd93 	bl	800972e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c08:	f107 0308 	add.w	r3, r7, #8
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001c18:	f000 ffa8 	bl	8002b6c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1c:	4b2c      	ldr	r3, [pc, #176]	; (8001cd0 <SystemClock_Config+0xdc>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	4a2b      	ldr	r2, [pc, #172]	; (8001cd0 <SystemClock_Config+0xdc>)
 8001c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c26:	6413      	str	r3, [r2, #64]	; 0x40
 8001c28:	4b29      	ldr	r3, [pc, #164]	; (8001cd0 <SystemClock_Config+0xdc>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c34:	4b27      	ldr	r3, [pc, #156]	; (8001cd4 <SystemClock_Config+0xe0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c3c:	4a25      	ldr	r2, [pc, #148]	; (8001cd4 <SystemClock_Config+0xe0>)
 8001c3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <SystemClock_Config+0xe0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c4c:	603b      	str	r3, [r7, #0]
 8001c4e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c50:	2301      	movs	r3, #1
 8001c52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c54:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c58:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c64:	2304      	movs	r3, #4
 8001c66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001c68:	2360      	movs	r3, #96	; 0x60
 8001c6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c70:	2304      	movs	r3, #4
 8001c72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c74:	2302      	movs	r3, #2
 8001c76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c78:	f107 031c 	add.w	r3, r7, #28
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 ffd5 	bl	8002c2c <HAL_RCC_OscConfig>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c88:	f000 f9b3 	bl	8001ff2 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c8c:	f000 ff7e 	bl	8002b8c <HAL_PWREx_EnableOverDrive>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c96:	f000 f9ac 	bl	8001ff2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c9a:	230f      	movs	r3, #15
 8001c9c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001caa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001cb0:	f107 0308 	add.w	r3, r7, #8
 8001cb4:	2103      	movs	r1, #3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f001 fa66 	bl	8003188 <HAL_RCC_ClockConfig>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001cc2:	f000 f996 	bl	8001ff2 <Error_Handler>
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	3750      	adds	r7, #80	; 0x50
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40007000 	.word	0x40007000

08001cd8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001cdc:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <MX_UART4_Init+0x58>)
 8001cde:	4a15      	ldr	r2, [pc, #84]	; (8001d34 <MX_UART4_Init+0x5c>)
 8001ce0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001ce2:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <MX_UART4_Init+0x58>)
 8001ce4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ce8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001cea:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <MX_UART4_Init+0x58>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <MX_UART4_Init+0x58>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <MX_UART4_Init+0x58>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <MX_UART4_Init+0x58>)
 8001cfe:	220c      	movs	r2, #12
 8001d00:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d02:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <MX_UART4_Init+0x58>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d08:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <MX_UART4_Init+0x58>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d0e:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <MX_UART4_Init+0x58>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <MX_UART4_Init+0x58>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d1a:	4805      	ldr	r0, [pc, #20]	; (8001d30 <MX_UART4_Init+0x58>)
 8001d1c:	f002 fb94 	bl	8004448 <HAL_UART_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001d26:	f000 f964 	bl	8001ff2 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	2000009c 	.word	0x2000009c
 8001d34:	40004c00 	.word	0x40004c00

08001d38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d3c:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <MX_USART3_UART_Init+0x58>)
 8001d3e:	4a15      	ldr	r2, [pc, #84]	; (8001d94 <MX_USART3_UART_Init+0x5c>)
 8001d40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d42:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <MX_USART3_UART_Init+0x58>)
 8001d44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <MX_USART3_UART_Init+0x58>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <MX_USART3_UART_Init+0x58>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <MX_USART3_UART_Init+0x58>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <MX_USART3_UART_Init+0x58>)
 8001d5e:	220c      	movs	r2, #12
 8001d60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <MX_USART3_UART_Init+0x58>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <MX_USART3_UART_Init+0x58>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <MX_USART3_UART_Init+0x58>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <MX_USART3_UART_Init+0x58>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d7a:	4805      	ldr	r0, [pc, #20]	; (8001d90 <MX_USART3_UART_Init+0x58>)
 8001d7c:	f002 fb64 	bl	8004448 <HAL_UART_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001d86:	f000 f934 	bl	8001ff2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000120 	.word	0x20000120
 8001d94:	40004800 	.word	0x40004800

08001d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08c      	sub	sp, #48	; 0x30
 8001d9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9e:	f107 031c 	add.w	r3, r7, #28
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	60da      	str	r2, [r3, #12]
 8001dac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dae:	4b80      	ldr	r3, [pc, #512]	; (8001fb0 <MX_GPIO_Init+0x218>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a7f      	ldr	r2, [pc, #508]	; (8001fb0 <MX_GPIO_Init+0x218>)
 8001db4:	f043 0304 	orr.w	r3, r3, #4
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b7d      	ldr	r3, [pc, #500]	; (8001fb0 <MX_GPIO_Init+0x218>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	61bb      	str	r3, [r7, #24]
 8001dc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dc6:	4b7a      	ldr	r3, [pc, #488]	; (8001fb0 <MX_GPIO_Init+0x218>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a79      	ldr	r2, [pc, #484]	; (8001fb0 <MX_GPIO_Init+0x218>)
 8001dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b77      	ldr	r3, [pc, #476]	; (8001fb0 <MX_GPIO_Init+0x218>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dde:	4b74      	ldr	r3, [pc, #464]	; (8001fb0 <MX_GPIO_Init+0x218>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a73      	ldr	r2, [pc, #460]	; (8001fb0 <MX_GPIO_Init+0x218>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b71      	ldr	r3, [pc, #452]	; (8001fb0 <MX_GPIO_Init+0x218>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df6:	4b6e      	ldr	r3, [pc, #440]	; (8001fb0 <MX_GPIO_Init+0x218>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a6d      	ldr	r2, [pc, #436]	; (8001fb0 <MX_GPIO_Init+0x218>)
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b6b      	ldr	r3, [pc, #428]	; (8001fb0 <MX_GPIO_Init+0x218>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e0e:	4b68      	ldr	r3, [pc, #416]	; (8001fb0 <MX_GPIO_Init+0x218>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	4a67      	ldr	r2, [pc, #412]	; (8001fb0 <MX_GPIO_Init+0x218>)
 8001e14:	f043 0308 	orr.w	r3, r3, #8
 8001e18:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1a:	4b65      	ldr	r3, [pc, #404]	; (8001fb0 <MX_GPIO_Init+0x218>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e26:	4b62      	ldr	r3, [pc, #392]	; (8001fb0 <MX_GPIO_Init+0x218>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4a61      	ldr	r2, [pc, #388]	; (8001fb0 <MX_GPIO_Init+0x218>)
 8001e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
 8001e32:	4b5f      	ldr	r3, [pc, #380]	; (8001fb0 <MX_GPIO_Init+0x218>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_485_GPIO_Port, EN_485_Pin, GPIO_PIN_RESET);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2101      	movs	r1, #1
 8001e42:	485c      	ldr	r0, [pc, #368]	; (8001fb4 <MX_GPIO_Init+0x21c>)
 8001e44:	f000 fe78 	bl	8002b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f244 0181 	movw	r1, #16513	; 0x4081
 8001e4e:	485a      	ldr	r0, [pc, #360]	; (8001fb8 <MX_GPIO_Init+0x220>)
 8001e50:	f000 fe72 	bl	8002b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001e54:	2200      	movs	r2, #0
 8001e56:	2140      	movs	r1, #64	; 0x40
 8001e58:	4858      	ldr	r0, [pc, #352]	; (8001fbc <MX_GPIO_Init+0x224>)
 8001e5a:	f000 fe6d 	bl	8002b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001e5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e64:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001e6e:	f107 031c 	add.w	r3, r7, #28
 8001e72:	4619      	mov	r1, r3
 8001e74:	484f      	ldr	r0, [pc, #316]	; (8001fb4 <MX_GPIO_Init+0x21c>)
 8001e76:	f000 fcb3 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_485_Pin */
  GPIO_InitStruct.Pin = EN_485_Pin;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2300      	movs	r3, #0
 8001e88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(EN_485_GPIO_Port, &GPIO_InitStruct);
 8001e8a:	f107 031c 	add.w	r3, r7, #28
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4848      	ldr	r0, [pc, #288]	; (8001fb4 <MX_GPIO_Init+0x21c>)
 8001e92:	f000 fca5 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001e96:	2332      	movs	r3, #50	; 0x32
 8001e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ea6:	230b      	movs	r3, #11
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eaa:	f107 031c 	add.w	r3, r7, #28
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4840      	ldr	r0, [pc, #256]	; (8001fb4 <MX_GPIO_Init+0x21c>)
 8001eb2:	f000 fc95 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001eb6:	2386      	movs	r3, #134	; 0x86
 8001eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ec6:	230b      	movs	r3, #11
 8001ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eca:	f107 031c 	add.w	r3, r7, #28
 8001ece:	4619      	mov	r1, r3
 8001ed0:	483b      	ldr	r0, [pc, #236]	; (8001fc0 <MX_GPIO_Init+0x228>)
 8001ed2:	f000 fc85 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001ed6:	f244 0381 	movw	r3, #16513	; 0x4081
 8001eda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001edc:	2301      	movs	r3, #1
 8001ede:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee8:	f107 031c 	add.w	r3, r7, #28
 8001eec:	4619      	mov	r1, r3
 8001eee:	4832      	ldr	r0, [pc, #200]	; (8001fb8 <MX_GPIO_Init+0x220>)
 8001ef0:	f000 fc76 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001ef4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f02:	2303      	movs	r3, #3
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f06:	230b      	movs	r3, #11
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001f0a:	f107 031c 	add.w	r3, r7, #28
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4829      	ldr	r0, [pc, #164]	; (8001fb8 <MX_GPIO_Init+0x220>)
 8001f12:	f000 fc65 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001f16:	2340      	movs	r3, #64	; 0x40
 8001f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f22:	2300      	movs	r3, #0
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001f26:	f107 031c 	add.w	r3, r7, #28
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4823      	ldr	r0, [pc, #140]	; (8001fbc <MX_GPIO_Init+0x224>)
 8001f2e:	f000 fc57 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f36:	2300      	movs	r3, #0
 8001f38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f3e:	f107 031c 	add.w	r3, r7, #28
 8001f42:	4619      	mov	r1, r3
 8001f44:	481d      	ldr	r0, [pc, #116]	; (8001fbc <MX_GPIO_Init+0x224>)
 8001f46:	f000 fc4b 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001f4a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f50:	2302      	movs	r3, #2
 8001f52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f5c:	230a      	movs	r3, #10
 8001f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f60:	f107 031c 	add.w	r3, r7, #28
 8001f64:	4619      	mov	r1, r3
 8001f66:	4816      	ldr	r0, [pc, #88]	; (8001fc0 <MX_GPIO_Init+0x228>)
 8001f68:	f000 fc3a 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001f6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f72:	2300      	movs	r3, #0
 8001f74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f7a:	f107 031c 	add.w	r3, r7, #28
 8001f7e:	4619      	mov	r1, r3
 8001f80:	480f      	ldr	r0, [pc, #60]	; (8001fc0 <MX_GPIO_Init+0x228>)
 8001f82:	f000 fc2d 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001f86:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f94:	2303      	movs	r3, #3
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f98:	230b      	movs	r3, #11
 8001f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f9c:	f107 031c 	add.w	r3, r7, #28
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4806      	ldr	r0, [pc, #24]	; (8001fbc <MX_GPIO_Init+0x224>)
 8001fa4:	f000 fc1c 	bl	80027e0 <HAL_GPIO_Init>

}
 8001fa8:	bf00      	nop
 8001faa:	3730      	adds	r7, #48	; 0x30
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40020800 	.word	0x40020800
 8001fb8:	40020400 	.word	0x40020400
 8001fbc:	40021800 	.word	0x40021800
 8001fc0:	40020000 	.word	0x40020000

08001fc4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001fcc:	2001      	movs	r0, #1
 8001fce:	f003 ffa7 	bl	8005f20 <osDelay>
 8001fd2:	e7fb      	b.n	8001fcc <StartDefaultTask+0x8>

08001fd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe4:	d101      	bne.n	8001fea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fe6:	f000 fa67 	bl	80024b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff6:	b672      	cpsid	i
}
 8001ff8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ffa:	e7fe      	b.n	8001ffa <Error_Handler+0x8>

08001ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002002:	4b11      	ldr	r3, [pc, #68]	; (8002048 <HAL_MspInit+0x4c>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	4a10      	ldr	r2, [pc, #64]	; (8002048 <HAL_MspInit+0x4c>)
 8002008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800200c:	6413      	str	r3, [r2, #64]	; 0x40
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <HAL_MspInit+0x4c>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201a:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_MspInit+0x4c>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <HAL_MspInit+0x4c>)
 8002020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002024:	6453      	str	r3, [r2, #68]	; 0x44
 8002026:	4b08      	ldr	r3, [pc, #32]	; (8002048 <HAL_MspInit+0x4c>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	210f      	movs	r1, #15
 8002036:	f06f 0001 	mvn.w	r0, #1
 800203a:	f000 fb15 	bl	8002668 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40023800 	.word	0x40023800

0800204c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b0b0      	sub	sp, #192	; 0xc0
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	2290      	movs	r2, #144	; 0x90
 800206a:	2100      	movs	r1, #0
 800206c:	4618      	mov	r0, r3
 800206e:	f007 fb5e 	bl	800972e <memset>
  if(huart->Instance==UART4)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a5c      	ldr	r2, [pc, #368]	; (80021e8 <HAL_UART_MspInit+0x19c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d166      	bne.n	800214a <HAL_UART_MspInit+0xfe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800207c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002080:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002082:	2300      	movs	r3, #0
 8002084:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002086:	f107 031c 	add.w	r3, r7, #28
 800208a:	4618      	mov	r0, r3
 800208c:	f001 fad4 	bl	8003638 <HAL_RCCEx_PeriphCLKConfig>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002096:	f7ff ffac 	bl	8001ff2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800209a:	4b54      	ldr	r3, [pc, #336]	; (80021ec <HAL_UART_MspInit+0x1a0>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4a53      	ldr	r2, [pc, #332]	; (80021ec <HAL_UART_MspInit+0x1a0>)
 80020a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020a4:	6413      	str	r3, [r2, #64]	; 0x40
 80020a6:	4b51      	ldr	r3, [pc, #324]	; (80021ec <HAL_UART_MspInit+0x1a0>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ae:	61bb      	str	r3, [r7, #24]
 80020b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	4b4e      	ldr	r3, [pc, #312]	; (80021ec <HAL_UART_MspInit+0x1a0>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a4d      	ldr	r2, [pc, #308]	; (80021ec <HAL_UART_MspInit+0x1a0>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b4b      	ldr	r3, [pc, #300]	; (80021ec <HAL_UART_MspInit+0x1a0>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ca:	4b48      	ldr	r3, [pc, #288]	; (80021ec <HAL_UART_MspInit+0x1a0>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a47      	ldr	r2, [pc, #284]	; (80021ec <HAL_UART_MspInit+0x1a0>)
 80020d0:	f043 0304 	orr.w	r3, r3, #4
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b45      	ldr	r3, [pc, #276]	; (80021ec <HAL_UART_MspInit+0x1a0>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020e2:	2301      	movs	r3, #1
 80020e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f4:	2303      	movs	r3, #3
 80020f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80020fa:	2308      	movs	r3, #8
 80020fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002100:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002104:	4619      	mov	r1, r3
 8002106:	483a      	ldr	r0, [pc, #232]	; (80021f0 <HAL_UART_MspInit+0x1a4>)
 8002108:	f000 fb6a 	bl	80027e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800210c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002110:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002120:	2303      	movs	r3, #3
 8002122:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002126:	2308      	movs	r3, #8
 8002128:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800212c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002130:	4619      	mov	r1, r3
 8002132:	4830      	ldr	r0, [pc, #192]	; (80021f4 <HAL_UART_MspInit+0x1a8>)
 8002134:	f000 fb54 	bl	80027e0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002138:	2200      	movs	r2, #0
 800213a:	2105      	movs	r1, #5
 800213c:	2034      	movs	r0, #52	; 0x34
 800213e:	f000 fa93 	bl	8002668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002142:	2034      	movs	r0, #52	; 0x34
 8002144:	f000 faac 	bl	80026a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002148:	e049      	b.n	80021de <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART3)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a2a      	ldr	r2, [pc, #168]	; (80021f8 <HAL_UART_MspInit+0x1ac>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d144      	bne.n	80021de <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002154:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002158:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800215a:	2300      	movs	r3, #0
 800215c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800215e:	f107 031c 	add.w	r3, r7, #28
 8002162:	4618      	mov	r0, r3
 8002164:	f001 fa68 	bl	8003638 <HAL_RCCEx_PeriphCLKConfig>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_UART_MspInit+0x126>
      Error_Handler();
 800216e:	f7ff ff40 	bl	8001ff2 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002172:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <HAL_UART_MspInit+0x1a0>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	4a1d      	ldr	r2, [pc, #116]	; (80021ec <HAL_UART_MspInit+0x1a0>)
 8002178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800217c:	6413      	str	r3, [r2, #64]	; 0x40
 800217e:	4b1b      	ldr	r3, [pc, #108]	; (80021ec <HAL_UART_MspInit+0x1a0>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800218a:	4b18      	ldr	r3, [pc, #96]	; (80021ec <HAL_UART_MspInit+0x1a0>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	4a17      	ldr	r2, [pc, #92]	; (80021ec <HAL_UART_MspInit+0x1a0>)
 8002190:	f043 0308 	orr.w	r3, r3, #8
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <HAL_UART_MspInit+0x1a0>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80021a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b6:	2303      	movs	r3, #3
 80021b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021bc:	2307      	movs	r3, #7
 80021be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021c2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80021c6:	4619      	mov	r1, r3
 80021c8:	480c      	ldr	r0, [pc, #48]	; (80021fc <HAL_UART_MspInit+0x1b0>)
 80021ca:	f000 fb09 	bl	80027e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2105      	movs	r1, #5
 80021d2:	2027      	movs	r0, #39	; 0x27
 80021d4:	f000 fa48 	bl	8002668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80021d8:	2027      	movs	r0, #39	; 0x27
 80021da:	f000 fa61 	bl	80026a0 <HAL_NVIC_EnableIRQ>
}
 80021de:	bf00      	nop
 80021e0:	37c0      	adds	r7, #192	; 0xc0
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40004c00 	.word	0x40004c00
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40020000 	.word	0x40020000
 80021f4:	40020800 	.word	0x40020800
 80021f8:	40004800 	.word	0x40004800
 80021fc:	40020c00 	.word	0x40020c00

08002200 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08c      	sub	sp, #48	; 0x30
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8002210:	2200      	movs	r2, #0
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	201c      	movs	r0, #28
 8002216:	f000 fa27 	bl	8002668 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800221a:	201c      	movs	r0, #28
 800221c:	f000 fa40 	bl	80026a0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002220:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <HAL_InitTick+0xa4>)
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	4a1f      	ldr	r2, [pc, #124]	; (80022a4 <HAL_InitTick+0xa4>)
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	6413      	str	r3, [r2, #64]	; 0x40
 800222c:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <HAL_InitTick+0xa4>)
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002238:	f107 0210 	add.w	r2, r7, #16
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	4611      	mov	r1, r2
 8002242:	4618      	mov	r0, r3
 8002244:	f001 f9c6 	bl	80035d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002248:	f001 f99c 	bl	8003584 <HAL_RCC_GetPCLK1Freq>
 800224c:	4603      	mov	r3, r0
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002254:	4a14      	ldr	r2, [pc, #80]	; (80022a8 <HAL_InitTick+0xa8>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	0c9b      	lsrs	r3, r3, #18
 800225c:	3b01      	subs	r3, #1
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002260:	4b12      	ldr	r3, [pc, #72]	; (80022ac <HAL_InitTick+0xac>)
 8002262:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002266:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002268:	4b10      	ldr	r3, [pc, #64]	; (80022ac <HAL_InitTick+0xac>)
 800226a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800226e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002270:	4a0e      	ldr	r2, [pc, #56]	; (80022ac <HAL_InitTick+0xac>)
 8002272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002274:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002276:	4b0d      	ldr	r3, [pc, #52]	; (80022ac <HAL_InitTick+0xac>)
 8002278:	2200      	movs	r2, #0
 800227a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_InitTick+0xac>)
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8002282:	480a      	ldr	r0, [pc, #40]	; (80022ac <HAL_InitTick+0xac>)
 8002284:	f001 fe00 	bl	8003e88 <HAL_TIM_Base_Init>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d104      	bne.n	8002298 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800228e:	4807      	ldr	r0, [pc, #28]	; (80022ac <HAL_InitTick+0xac>)
 8002290:	f001 fe5c 	bl	8003f4c <HAL_TIM_Base_Start_IT>
 8002294:	4603      	mov	r3, r0
 8002296:	e000      	b.n	800229a <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
}
 800229a:	4618      	mov	r0, r3
 800229c:	3730      	adds	r7, #48	; 0x30
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40023800 	.word	0x40023800
 80022a8:	431bde83 	.word	0x431bde83
 80022ac:	200002cc 	.word	0x200002cc

080022b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022b4:	e7fe      	b.n	80022b4 <NMI_Handler+0x4>

080022b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ba:	e7fe      	b.n	80022ba <HardFault_Handler+0x4>

080022bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c0:	e7fe      	b.n	80022c0 <MemManage_Handler+0x4>

080022c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c6:	e7fe      	b.n	80022c6 <BusFault_Handler+0x4>

080022c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022cc:	e7fe      	b.n	80022cc <UsageFault_Handler+0x4>

080022ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ce:	b480      	push	{r7}
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <TIM2_IRQHandler+0x10>)
 80022e2:	f001 feab 	bl	800403c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	200002cc 	.word	0x200002cc

080022f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80022f4:	4802      	ldr	r0, [pc, #8]	; (8002300 <USART3_IRQHandler+0x10>)
 80022f6:	f002 fa45 	bl	8004784 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000120 	.word	0x20000120

08002304 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002308:	4802      	ldr	r0, [pc, #8]	; (8002314 <UART4_IRQHandler+0x10>)
 800230a:	f002 fa3b 	bl	8004784 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	2000009c 	.word	0x2000009c

08002318 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	e00a      	b.n	8002340 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800232a:	f3af 8000 	nop.w
 800232e:	4601      	mov	r1, r0
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	60ba      	str	r2, [r7, #8]
 8002336:	b2ca      	uxtb	r2, r1
 8002338:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	3301      	adds	r3, #1
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	429a      	cmp	r2, r3
 8002346:	dbf0      	blt.n	800232a <_read+0x12>
	}

return len;
 8002348:	687b      	ldr	r3, [r7, #4]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
	return -1;
 800235a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800237a:	605a      	str	r2, [r3, #4]
	return 0;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <_isatty>:

int _isatty(int file)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
	return 1;
 8002392:	2301      	movs	r3, #1
}
 8002394:	4618      	mov	r0, r3
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
	return 0;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023c4:	4a14      	ldr	r2, [pc, #80]	; (8002418 <_sbrk+0x5c>)
 80023c6:	4b15      	ldr	r3, [pc, #84]	; (800241c <_sbrk+0x60>)
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023d0:	4b13      	ldr	r3, [pc, #76]	; (8002420 <_sbrk+0x64>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d102      	bne.n	80023de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <_sbrk+0x64>)
 80023da:	4a12      	ldr	r2, [pc, #72]	; (8002424 <_sbrk+0x68>)
 80023dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023de:	4b10      	ldr	r3, [pc, #64]	; (8002420 <_sbrk+0x64>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d207      	bcs.n	80023fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023ec:	f007 f86e 	bl	80094cc <__errno>
 80023f0:	4603      	mov	r3, r0
 80023f2:	220c      	movs	r2, #12
 80023f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023f6:	f04f 33ff 	mov.w	r3, #4294967295
 80023fa:	e009      	b.n	8002410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023fc:	4b08      	ldr	r3, [pc, #32]	; (8002420 <_sbrk+0x64>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002402:	4b07      	ldr	r3, [pc, #28]	; (8002420 <_sbrk+0x64>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	4a05      	ldr	r2, [pc, #20]	; (8002420 <_sbrk+0x64>)
 800240c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800240e:	68fb      	ldr	r3, [r7, #12]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20080000 	.word	0x20080000
 800241c:	00000400 	.word	0x00000400
 8002420:	20000318 	.word	0x20000318
 8002424:	20004d38 	.word	0x20004d38

08002428 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800242c:	4b06      	ldr	r3, [pc, #24]	; (8002448 <SystemInit+0x20>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002432:	4a05      	ldr	r2, [pc, #20]	; (8002448 <SystemInit+0x20>)
 8002434:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002438:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800244c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002484 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002450:	480d      	ldr	r0, [pc, #52]	; (8002488 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002452:	490e      	ldr	r1, [pc, #56]	; (800248c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002454:	4a0e      	ldr	r2, [pc, #56]	; (8002490 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002458:	e002      	b.n	8002460 <LoopCopyDataInit>

0800245a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800245a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800245c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800245e:	3304      	adds	r3, #4

08002460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002464:	d3f9      	bcc.n	800245a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002466:	4a0b      	ldr	r2, [pc, #44]	; (8002494 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002468:	4c0b      	ldr	r4, [pc, #44]	; (8002498 <LoopFillZerobss+0x26>)
  movs r3, #0
 800246a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800246c:	e001      	b.n	8002472 <LoopFillZerobss>

0800246e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800246e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002470:	3204      	adds	r2, #4

08002472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002474:	d3fb      	bcc.n	800246e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002476:	f7ff ffd7 	bl	8002428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800247a:	f007 f923 	bl	80096c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800247e:	f7ff fb6f 	bl	8001b60 <main>
  bx  lr    
 8002482:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002484:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800248c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002490:	0800a888 	.word	0x0800a888
  ldr r2, =_sbss
 8002494:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002498:	20004d38 	.word	0x20004d38

0800249c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800249c:	e7fe      	b.n	800249c <ADC_IRQHandler>

0800249e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a2:	2003      	movs	r0, #3
 80024a4:	f000 f8d5 	bl	8002652 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024a8:	200f      	movs	r0, #15
 80024aa:	f7ff fea9 	bl	8002200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024ae:	f7ff fda5 	bl	8001ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_IncTick+0x20>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_IncTick+0x24>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4413      	add	r3, r2
 80024c8:	4a04      	ldr	r2, [pc, #16]	; (80024dc <HAL_IncTick+0x24>)
 80024ca:	6013      	str	r3, [r2, #0]
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	20000008 	.word	0x20000008
 80024dc:	2000031c 	.word	0x2000031c

080024e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return uwTick;
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <HAL_GetTick+0x14>)
 80024e6:	681b      	ldr	r3, [r3, #0]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	2000031c 	.word	0x2000031c

080024f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002508:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <__NVIC_SetPriorityGrouping+0x40>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002514:	4013      	ands	r3, r2
 8002516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <__NVIC_SetPriorityGrouping+0x44>)
 8002522:	4313      	orrs	r3, r2
 8002524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002526:	4a04      	ldr	r2, [pc, #16]	; (8002538 <__NVIC_SetPriorityGrouping+0x40>)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	60d3      	str	r3, [r2, #12]
}
 800252c:	bf00      	nop
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	e000ed00 	.word	0xe000ed00
 800253c:	05fa0000 	.word	0x05fa0000

08002540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002544:	4b04      	ldr	r3, [pc, #16]	; (8002558 <__NVIC_GetPriorityGrouping+0x18>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	0a1b      	lsrs	r3, r3, #8
 800254a:	f003 0307 	and.w	r3, r3, #7
}
 800254e:	4618      	mov	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	2b00      	cmp	r3, #0
 800256c:	db0b      	blt.n	8002586 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	f003 021f 	and.w	r2, r3, #31
 8002574:	4907      	ldr	r1, [pc, #28]	; (8002594 <__NVIC_EnableIRQ+0x38>)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	095b      	lsrs	r3, r3, #5
 800257c:	2001      	movs	r0, #1
 800257e:	fa00 f202 	lsl.w	r2, r0, r2
 8002582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	e000e100 	.word	0xe000e100

08002598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	6039      	str	r1, [r7, #0]
 80025a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	db0a      	blt.n	80025c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	490c      	ldr	r1, [pc, #48]	; (80025e4 <__NVIC_SetPriority+0x4c>)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	0112      	lsls	r2, r2, #4
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	440b      	add	r3, r1
 80025bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c0:	e00a      	b.n	80025d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4908      	ldr	r1, [pc, #32]	; (80025e8 <__NVIC_SetPriority+0x50>)
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	3b04      	subs	r3, #4
 80025d0:	0112      	lsls	r2, r2, #4
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	440b      	add	r3, r1
 80025d6:	761a      	strb	r2, [r3, #24]
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	e000e100 	.word	0xe000e100
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b089      	sub	sp, #36	; 0x24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f1c3 0307 	rsb	r3, r3, #7
 8002606:	2b04      	cmp	r3, #4
 8002608:	bf28      	it	cs
 800260a:	2304      	movcs	r3, #4
 800260c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3304      	adds	r3, #4
 8002612:	2b06      	cmp	r3, #6
 8002614:	d902      	bls.n	800261c <NVIC_EncodePriority+0x30>
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3b03      	subs	r3, #3
 800261a:	e000      	b.n	800261e <NVIC_EncodePriority+0x32>
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002620:	f04f 32ff 	mov.w	r2, #4294967295
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43da      	mvns	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	401a      	ands	r2, r3
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002634:	f04f 31ff 	mov.w	r1, #4294967295
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	fa01 f303 	lsl.w	r3, r1, r3
 800263e:	43d9      	mvns	r1, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002644:	4313      	orrs	r3, r2
         );
}
 8002646:	4618      	mov	r0, r3
 8002648:	3724      	adds	r7, #36	; 0x24
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff ff4c 	bl	80024f8 <__NVIC_SetPriorityGrouping>
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800267a:	f7ff ff61 	bl	8002540 <__NVIC_GetPriorityGrouping>
 800267e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	68b9      	ldr	r1, [r7, #8]
 8002684:	6978      	ldr	r0, [r7, #20]
 8002686:	f7ff ffb1 	bl	80025ec <NVIC_EncodePriority>
 800268a:	4602      	mov	r2, r0
 800268c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002690:	4611      	mov	r1, r2
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff ff80 	bl	8002598 <__NVIC_SetPriority>
}
 8002698:	bf00      	nop
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff ff54 	bl	800255c <__NVIC_EnableIRQ>
}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026ca:	f7ff ff09 	bl	80024e0 <HAL_GetTick>
 80026ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d008      	beq.n	80026ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2280      	movs	r2, #128	; 0x80
 80026e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e052      	b.n	8002794 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0216 	bic.w	r2, r2, #22
 80026fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	695a      	ldr	r2, [r3, #20]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800270c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	2b00      	cmp	r3, #0
 8002714:	d103      	bne.n	800271e <HAL_DMA_Abort+0x62>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800271a:	2b00      	cmp	r3, #0
 800271c:	d007      	beq.n	800272e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0208 	bic.w	r2, r2, #8
 800272c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0201 	bic.w	r2, r2, #1
 800273c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800273e:	e013      	b.n	8002768 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002740:	f7ff fece 	bl	80024e0 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b05      	cmp	r3, #5
 800274c:	d90c      	bls.n	8002768 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2220      	movs	r2, #32
 8002752:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2203      	movs	r2, #3
 8002758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e015      	b.n	8002794 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1e4      	bne.n	8002740 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277a:	223f      	movs	r2, #63	; 0x3f
 800277c:	409a      	lsls	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d004      	beq.n	80027ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2280      	movs	r2, #128	; 0x80
 80027b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e00c      	b.n	80027d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2205      	movs	r2, #5
 80027be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0201 	bic.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b089      	sub	sp, #36	; 0x24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80027fa:	2300      	movs	r3, #0
 80027fc:	61fb      	str	r3, [r7, #28]
 80027fe:	e175      	b.n	8002aec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002800:	2201      	movs	r2, #1
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	4013      	ands	r3, r2
 8002812:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	429a      	cmp	r2, r3
 800281a:	f040 8164 	bne.w	8002ae6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	2b01      	cmp	r3, #1
 8002828:	d005      	beq.n	8002836 <HAL_GPIO_Init+0x56>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d130      	bne.n	8002898 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	2203      	movs	r2, #3
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800286c:	2201      	movs	r2, #1
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	f003 0201 	and.w	r2, r3, #1
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d017      	beq.n	80028d4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	2203      	movs	r2, #3
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d123      	bne.n	8002928 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	08da      	lsrs	r2, r3, #3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3208      	adds	r2, #8
 80028e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	220f      	movs	r2, #15
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	691a      	ldr	r2, [r3, #16]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4313      	orrs	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	08da      	lsrs	r2, r3, #3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3208      	adds	r2, #8
 8002922:	69b9      	ldr	r1, [r7, #24]
 8002924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	2203      	movs	r2, #3
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 0203 	and.w	r2, r3, #3
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 80be 	beq.w	8002ae6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296a:	4b66      	ldr	r3, [pc, #408]	; (8002b04 <HAL_GPIO_Init+0x324>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	4a65      	ldr	r2, [pc, #404]	; (8002b04 <HAL_GPIO_Init+0x324>)
 8002970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002974:	6453      	str	r3, [r2, #68]	; 0x44
 8002976:	4b63      	ldr	r3, [pc, #396]	; (8002b04 <HAL_GPIO_Init+0x324>)
 8002978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002982:	4a61      	ldr	r2, [pc, #388]	; (8002b08 <HAL_GPIO_Init+0x328>)
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	089b      	lsrs	r3, r3, #2
 8002988:	3302      	adds	r3, #2
 800298a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	220f      	movs	r2, #15
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43db      	mvns	r3, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a58      	ldr	r2, [pc, #352]	; (8002b0c <HAL_GPIO_Init+0x32c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d037      	beq.n	8002a1e <HAL_GPIO_Init+0x23e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a57      	ldr	r2, [pc, #348]	; (8002b10 <HAL_GPIO_Init+0x330>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d031      	beq.n	8002a1a <HAL_GPIO_Init+0x23a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a56      	ldr	r2, [pc, #344]	; (8002b14 <HAL_GPIO_Init+0x334>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d02b      	beq.n	8002a16 <HAL_GPIO_Init+0x236>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a55      	ldr	r2, [pc, #340]	; (8002b18 <HAL_GPIO_Init+0x338>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d025      	beq.n	8002a12 <HAL_GPIO_Init+0x232>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a54      	ldr	r2, [pc, #336]	; (8002b1c <HAL_GPIO_Init+0x33c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d01f      	beq.n	8002a0e <HAL_GPIO_Init+0x22e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a53      	ldr	r2, [pc, #332]	; (8002b20 <HAL_GPIO_Init+0x340>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d019      	beq.n	8002a0a <HAL_GPIO_Init+0x22a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a52      	ldr	r2, [pc, #328]	; (8002b24 <HAL_GPIO_Init+0x344>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d013      	beq.n	8002a06 <HAL_GPIO_Init+0x226>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a51      	ldr	r2, [pc, #324]	; (8002b28 <HAL_GPIO_Init+0x348>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00d      	beq.n	8002a02 <HAL_GPIO_Init+0x222>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a50      	ldr	r2, [pc, #320]	; (8002b2c <HAL_GPIO_Init+0x34c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d007      	beq.n	80029fe <HAL_GPIO_Init+0x21e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a4f      	ldr	r2, [pc, #316]	; (8002b30 <HAL_GPIO_Init+0x350>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d101      	bne.n	80029fa <HAL_GPIO_Init+0x21a>
 80029f6:	2309      	movs	r3, #9
 80029f8:	e012      	b.n	8002a20 <HAL_GPIO_Init+0x240>
 80029fa:	230a      	movs	r3, #10
 80029fc:	e010      	b.n	8002a20 <HAL_GPIO_Init+0x240>
 80029fe:	2308      	movs	r3, #8
 8002a00:	e00e      	b.n	8002a20 <HAL_GPIO_Init+0x240>
 8002a02:	2307      	movs	r3, #7
 8002a04:	e00c      	b.n	8002a20 <HAL_GPIO_Init+0x240>
 8002a06:	2306      	movs	r3, #6
 8002a08:	e00a      	b.n	8002a20 <HAL_GPIO_Init+0x240>
 8002a0a:	2305      	movs	r3, #5
 8002a0c:	e008      	b.n	8002a20 <HAL_GPIO_Init+0x240>
 8002a0e:	2304      	movs	r3, #4
 8002a10:	e006      	b.n	8002a20 <HAL_GPIO_Init+0x240>
 8002a12:	2303      	movs	r3, #3
 8002a14:	e004      	b.n	8002a20 <HAL_GPIO_Init+0x240>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e002      	b.n	8002a20 <HAL_GPIO_Init+0x240>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <HAL_GPIO_Init+0x240>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	69fa      	ldr	r2, [r7, #28]
 8002a22:	f002 0203 	and.w	r2, r2, #3
 8002a26:	0092      	lsls	r2, r2, #2
 8002a28:	4093      	lsls	r3, r2
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a30:	4935      	ldr	r1, [pc, #212]	; (8002b08 <HAL_GPIO_Init+0x328>)
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	089b      	lsrs	r3, r3, #2
 8002a36:	3302      	adds	r3, #2
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a3e:	4b3d      	ldr	r3, [pc, #244]	; (8002b34 <HAL_GPIO_Init+0x354>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a62:	4a34      	ldr	r2, [pc, #208]	; (8002b34 <HAL_GPIO_Init+0x354>)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a68:	4b32      	ldr	r3, [pc, #200]	; (8002b34 <HAL_GPIO_Init+0x354>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a8c:	4a29      	ldr	r2, [pc, #164]	; (8002b34 <HAL_GPIO_Init+0x354>)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a92:	4b28      	ldr	r3, [pc, #160]	; (8002b34 <HAL_GPIO_Init+0x354>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ab6:	4a1f      	ldr	r2, [pc, #124]	; (8002b34 <HAL_GPIO_Init+0x354>)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002abc:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <HAL_GPIO_Init+0x354>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ae0:	4a14      	ldr	r2, [pc, #80]	; (8002b34 <HAL_GPIO_Init+0x354>)
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	61fb      	str	r3, [r7, #28]
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	2b0f      	cmp	r3, #15
 8002af0:	f67f ae86 	bls.w	8002800 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	3724      	adds	r7, #36	; 0x24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800
 8002b08:	40013800 	.word	0x40013800
 8002b0c:	40020000 	.word	0x40020000
 8002b10:	40020400 	.word	0x40020400
 8002b14:	40020800 	.word	0x40020800
 8002b18:	40020c00 	.word	0x40020c00
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40021400 	.word	0x40021400
 8002b24:	40021800 	.word	0x40021800
 8002b28:	40021c00 	.word	0x40021c00
 8002b2c:	40022000 	.word	0x40022000
 8002b30:	40022400 	.word	0x40022400
 8002b34:	40013c00 	.word	0x40013c00

08002b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	807b      	strh	r3, [r7, #2]
 8002b44:	4613      	mov	r3, r2
 8002b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b48:	787b      	ldrb	r3, [r7, #1]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b4e:	887a      	ldrh	r2, [r7, #2]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b54:	e003      	b.n	8002b5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b56:	887b      	ldrh	r3, [r7, #2]
 8002b58:	041a      	lsls	r2, r3, #16
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	619a      	str	r2, [r3, #24]
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
	...

08002b6c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b70:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a04      	ldr	r2, [pc, #16]	; (8002b88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b7a:	6013      	str	r3, [r2, #0]
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40007000 	.word	0x40007000

08002b8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b96:	4b23      	ldr	r3, [pc, #140]	; (8002c24 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	4a22      	ldr	r2, [pc, #136]	; (8002c24 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba2:	4b20      	ldr	r3, [pc, #128]	; (8002c24 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002bae:	4b1e      	ldr	r3, [pc, #120]	; (8002c28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a1d      	ldr	r2, [pc, #116]	; (8002c28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bba:	f7ff fc91 	bl	80024e0 <HAL_GetTick>
 8002bbe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bc0:	e009      	b.n	8002bd6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bc2:	f7ff fc8d 	bl	80024e0 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bd0:	d901      	bls.n	8002bd6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e022      	b.n	8002c1c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bd6:	4b14      	ldr	r3, [pc, #80]	; (8002c28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be2:	d1ee      	bne.n	8002bc2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002be4:	4b10      	ldr	r3, [pc, #64]	; (8002c28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a0f      	ldr	r2, [pc, #60]	; (8002c28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bf0:	f7ff fc76 	bl	80024e0 <HAL_GetTick>
 8002bf4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bf6:	e009      	b.n	8002c0c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bf8:	f7ff fc72 	bl	80024e0 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c06:	d901      	bls.n	8002c0c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e007      	b.n	8002c1c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c0c:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c18:	d1ee      	bne.n	8002bf8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40007000 	.word	0x40007000

08002c2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c34:	2300      	movs	r3, #0
 8002c36:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e29b      	b.n	800317a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 8087 	beq.w	8002d5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c50:	4b96      	ldr	r3, [pc, #600]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 030c 	and.w	r3, r3, #12
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d00c      	beq.n	8002c76 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c5c:	4b93      	ldr	r3, [pc, #588]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 030c 	and.w	r3, r3, #12
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d112      	bne.n	8002c8e <HAL_RCC_OscConfig+0x62>
 8002c68:	4b90      	ldr	r3, [pc, #576]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c74:	d10b      	bne.n	8002c8e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c76:	4b8d      	ldr	r3, [pc, #564]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d06c      	beq.n	8002d5c <HAL_RCC_OscConfig+0x130>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d168      	bne.n	8002d5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e275      	b.n	800317a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c96:	d106      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x7a>
 8002c98:	4b84      	ldr	r3, [pc, #528]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a83      	ldr	r2, [pc, #524]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	e02e      	b.n	8002d04 <HAL_RCC_OscConfig+0xd8>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x9c>
 8002cae:	4b7f      	ldr	r3, [pc, #508]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a7e      	ldr	r2, [pc, #504]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	4b7c      	ldr	r3, [pc, #496]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a7b      	ldr	r2, [pc, #492]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002cc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	e01d      	b.n	8002d04 <HAL_RCC_OscConfig+0xd8>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cd0:	d10c      	bne.n	8002cec <HAL_RCC_OscConfig+0xc0>
 8002cd2:	4b76      	ldr	r3, [pc, #472]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a75      	ldr	r2, [pc, #468]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	4b73      	ldr	r3, [pc, #460]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a72      	ldr	r2, [pc, #456]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	e00b      	b.n	8002d04 <HAL_RCC_OscConfig+0xd8>
 8002cec:	4b6f      	ldr	r3, [pc, #444]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a6e      	ldr	r2, [pc, #440]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	4b6c      	ldr	r3, [pc, #432]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a6b      	ldr	r2, [pc, #428]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d013      	beq.n	8002d34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0c:	f7ff fbe8 	bl	80024e0 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d14:	f7ff fbe4 	bl	80024e0 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b64      	cmp	r3, #100	; 0x64
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e229      	b.n	800317a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d26:	4b61      	ldr	r3, [pc, #388]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0f0      	beq.n	8002d14 <HAL_RCC_OscConfig+0xe8>
 8002d32:	e014      	b.n	8002d5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	f7ff fbd4 	bl	80024e0 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d3c:	f7ff fbd0 	bl	80024e0 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b64      	cmp	r3, #100	; 0x64
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e215      	b.n	800317a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d4e:	4b57      	ldr	r3, [pc, #348]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x110>
 8002d5a:	e000      	b.n	8002d5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d069      	beq.n	8002e3e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d6a:	4b50      	ldr	r3, [pc, #320]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00b      	beq.n	8002d8e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d76:	4b4d      	ldr	r3, [pc, #308]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 030c 	and.w	r3, r3, #12
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d11c      	bne.n	8002dbc <HAL_RCC_OscConfig+0x190>
 8002d82:	4b4a      	ldr	r3, [pc, #296]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d116      	bne.n	8002dbc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d8e:	4b47      	ldr	r3, [pc, #284]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d005      	beq.n	8002da6 <HAL_RCC_OscConfig+0x17a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d001      	beq.n	8002da6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e1e9      	b.n	800317a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da6:	4b41      	ldr	r3, [pc, #260]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	493d      	ldr	r1, [pc, #244]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dba:	e040      	b.n	8002e3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d023      	beq.n	8002e0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dc4:	4b39      	ldr	r3, [pc, #228]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a38      	ldr	r2, [pc, #224]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd0:	f7ff fb86 	bl	80024e0 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd8:	f7ff fb82 	bl	80024e0 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e1c7      	b.n	800317a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dea:	4b30      	ldr	r3, [pc, #192]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f0      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df6:	4b2d      	ldr	r3, [pc, #180]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4929      	ldr	r1, [pc, #164]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	600b      	str	r3, [r1, #0]
 8002e0a:	e018      	b.n	8002e3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e0c:	4b27      	ldr	r3, [pc, #156]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a26      	ldr	r2, [pc, #152]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002e12:	f023 0301 	bic.w	r3, r3, #1
 8002e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7ff fb62 	bl	80024e0 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e20:	f7ff fb5e 	bl	80024e0 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e1a3      	b.n	800317a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e32:	4b1e      	ldr	r3, [pc, #120]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f0      	bne.n	8002e20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d038      	beq.n	8002ebc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d019      	beq.n	8002e86 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e52:	4b16      	ldr	r3, [pc, #88]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e56:	4a15      	ldr	r2, [pc, #84]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002e58:	f043 0301 	orr.w	r3, r3, #1
 8002e5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5e:	f7ff fb3f 	bl	80024e0 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e66:	f7ff fb3b 	bl	80024e0 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e180      	b.n	800317a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e78:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x23a>
 8002e84:	e01a      	b.n	8002ebc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e86:	4b09      	ldr	r3, [pc, #36]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e8a:	4a08      	ldr	r2, [pc, #32]	; (8002eac <HAL_RCC_OscConfig+0x280>)
 8002e8c:	f023 0301 	bic.w	r3, r3, #1
 8002e90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e92:	f7ff fb25 	bl	80024e0 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e98:	e00a      	b.n	8002eb0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e9a:	f7ff fb21 	bl	80024e0 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d903      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e166      	b.n	800317a <HAL_RCC_OscConfig+0x54e>
 8002eac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb0:	4b92      	ldr	r3, [pc, #584]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 8002eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1ee      	bne.n	8002e9a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 80a4 	beq.w	8003012 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eca:	4b8c      	ldr	r3, [pc, #560]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10d      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed6:	4b89      	ldr	r3, [pc, #548]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	4a88      	ldr	r2, [pc, #544]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 8002edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee2:	4b86      	ldr	r3, [pc, #536]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ef2:	4b83      	ldr	r3, [pc, #524]	; (8003100 <HAL_RCC_OscConfig+0x4d4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d118      	bne.n	8002f30 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002efe:	4b80      	ldr	r3, [pc, #512]	; (8003100 <HAL_RCC_OscConfig+0x4d4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a7f      	ldr	r2, [pc, #508]	; (8003100 <HAL_RCC_OscConfig+0x4d4>)
 8002f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f0a:	f7ff fae9 	bl	80024e0 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f12:	f7ff fae5 	bl	80024e0 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b64      	cmp	r3, #100	; 0x64
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e12a      	b.n	800317a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f24:	4b76      	ldr	r3, [pc, #472]	; (8003100 <HAL_RCC_OscConfig+0x4d4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0f0      	beq.n	8002f12 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d106      	bne.n	8002f46 <HAL_RCC_OscConfig+0x31a>
 8002f38:	4b70      	ldr	r3, [pc, #448]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 8002f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3c:	4a6f      	ldr	r2, [pc, #444]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 8002f3e:	f043 0301 	orr.w	r3, r3, #1
 8002f42:	6713      	str	r3, [r2, #112]	; 0x70
 8002f44:	e02d      	b.n	8002fa2 <HAL_RCC_OscConfig+0x376>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10c      	bne.n	8002f68 <HAL_RCC_OscConfig+0x33c>
 8002f4e:	4b6b      	ldr	r3, [pc, #428]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	4a6a      	ldr	r2, [pc, #424]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 8002f54:	f023 0301 	bic.w	r3, r3, #1
 8002f58:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5a:	4b68      	ldr	r3, [pc, #416]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5e:	4a67      	ldr	r2, [pc, #412]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 8002f60:	f023 0304 	bic.w	r3, r3, #4
 8002f64:	6713      	str	r3, [r2, #112]	; 0x70
 8002f66:	e01c      	b.n	8002fa2 <HAL_RCC_OscConfig+0x376>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	2b05      	cmp	r3, #5
 8002f6e:	d10c      	bne.n	8002f8a <HAL_RCC_OscConfig+0x35e>
 8002f70:	4b62      	ldr	r3, [pc, #392]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 8002f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f74:	4a61      	ldr	r2, [pc, #388]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 8002f76:	f043 0304 	orr.w	r3, r3, #4
 8002f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7c:	4b5f      	ldr	r3, [pc, #380]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f80:	4a5e      	ldr	r2, [pc, #376]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	6713      	str	r3, [r2, #112]	; 0x70
 8002f88:	e00b      	b.n	8002fa2 <HAL_RCC_OscConfig+0x376>
 8002f8a:	4b5c      	ldr	r3, [pc, #368]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8e:	4a5b      	ldr	r2, [pc, #364]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 8002f90:	f023 0301 	bic.w	r3, r3, #1
 8002f94:	6713      	str	r3, [r2, #112]	; 0x70
 8002f96:	4b59      	ldr	r3, [pc, #356]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9a:	4a58      	ldr	r2, [pc, #352]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 8002f9c:	f023 0304 	bic.w	r3, r3, #4
 8002fa0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d015      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002faa:	f7ff fa99 	bl	80024e0 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb0:	e00a      	b.n	8002fc8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb2:	f7ff fa95 	bl	80024e0 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e0d8      	b.n	800317a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc8:	4b4c      	ldr	r3, [pc, #304]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0ee      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x386>
 8002fd4:	e014      	b.n	8003000 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd6:	f7ff fa83 	bl	80024e0 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fdc:	e00a      	b.n	8002ff4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fde:	f7ff fa7f 	bl	80024e0 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e0c2      	b.n	800317a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff4:	4b41      	ldr	r3, [pc, #260]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1ee      	bne.n	8002fde <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003000:	7dfb      	ldrb	r3, [r7, #23]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d105      	bne.n	8003012 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003006:	4b3d      	ldr	r3, [pc, #244]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	4a3c      	ldr	r2, [pc, #240]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 800300c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003010:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 80ae 	beq.w	8003178 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800301c:	4b37      	ldr	r3, [pc, #220]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 030c 	and.w	r3, r3, #12
 8003024:	2b08      	cmp	r3, #8
 8003026:	d06d      	beq.n	8003104 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	2b02      	cmp	r3, #2
 800302e:	d14b      	bne.n	80030c8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003030:	4b32      	ldr	r3, [pc, #200]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a31      	ldr	r2, [pc, #196]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 8003036:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800303a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7ff fa50 	bl	80024e0 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003044:	f7ff fa4c 	bl	80024e0 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e091      	b.n	800317a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003056:	4b29      	ldr	r3, [pc, #164]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69da      	ldr	r2, [r3, #28]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	019b      	lsls	r3, r3, #6
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003078:	085b      	lsrs	r3, r3, #1
 800307a:	3b01      	subs	r3, #1
 800307c:	041b      	lsls	r3, r3, #16
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003084:	061b      	lsls	r3, r3, #24
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308c:	071b      	lsls	r3, r3, #28
 800308e:	491b      	ldr	r1, [pc, #108]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 8003090:	4313      	orrs	r3, r2
 8003092:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a18      	ldr	r2, [pc, #96]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 800309a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800309e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a0:	f7ff fa1e 	bl	80024e0 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a8:	f7ff fa1a 	bl	80024e0 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e05f      	b.n	800317a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ba:	4b10      	ldr	r3, [pc, #64]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0x47c>
 80030c6:	e057      	b.n	8003178 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c8:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a0b      	ldr	r2, [pc, #44]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 80030ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d4:	f7ff fa04 	bl	80024e0 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030dc:	f7ff fa00 	bl	80024e0 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e045      	b.n	800317a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ee:	4b03      	ldr	r3, [pc, #12]	; (80030fc <HAL_RCC_OscConfig+0x4d0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0x4b0>
 80030fa:	e03d      	b.n	8003178 <HAL_RCC_OscConfig+0x54c>
 80030fc:	40023800 	.word	0x40023800
 8003100:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003104:	4b1f      	ldr	r3, [pc, #124]	; (8003184 <HAL_RCC_OscConfig+0x558>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d030      	beq.n	8003174 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800311c:	429a      	cmp	r2, r3
 800311e:	d129      	bne.n	8003174 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312a:	429a      	cmp	r2, r3
 800312c:	d122      	bne.n	8003174 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003134:	4013      	ands	r3, r2
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800313a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800313c:	4293      	cmp	r3, r2
 800313e:	d119      	bne.n	8003174 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314a:	085b      	lsrs	r3, r3, #1
 800314c:	3b01      	subs	r3, #1
 800314e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003150:	429a      	cmp	r2, r3
 8003152:	d10f      	bne.n	8003174 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003160:	429a      	cmp	r2, r3
 8003162:	d107      	bne.n	8003174 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003170:	429a      	cmp	r2, r3
 8003172:	d001      	beq.n	8003178 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800

08003188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003192:	2300      	movs	r3, #0
 8003194:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0d0      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031a0:	4b6a      	ldr	r3, [pc, #424]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d910      	bls.n	80031d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ae:	4b67      	ldr	r3, [pc, #412]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 020f 	bic.w	r2, r3, #15
 80031b6:	4965      	ldr	r1, [pc, #404]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031be:	4b63      	ldr	r3, [pc, #396]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0b8      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d020      	beq.n	800321e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e8:	4b59      	ldr	r3, [pc, #356]	; (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	4a58      	ldr	r2, [pc, #352]	; (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 80031ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003200:	4b53      	ldr	r3, [pc, #332]	; (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4a52      	ldr	r2, [pc, #328]	; (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 8003206:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800320a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800320c:	4b50      	ldr	r3, [pc, #320]	; (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	494d      	ldr	r1, [pc, #308]	; (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 800321a:	4313      	orrs	r3, r2
 800321c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d040      	beq.n	80032ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d107      	bne.n	8003242 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003232:	4b47      	ldr	r3, [pc, #284]	; (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d115      	bne.n	800326a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e07f      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d107      	bne.n	800325a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324a:	4b41      	ldr	r3, [pc, #260]	; (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d109      	bne.n	800326a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e073      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325a:	4b3d      	ldr	r3, [pc, #244]	; (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e06b      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800326a:	4b39      	ldr	r3, [pc, #228]	; (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f023 0203 	bic.w	r2, r3, #3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	4936      	ldr	r1, [pc, #216]	; (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 8003278:	4313      	orrs	r3, r2
 800327a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800327c:	f7ff f930 	bl	80024e0 <HAL_GetTick>
 8003280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003282:	e00a      	b.n	800329a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003284:	f7ff f92c 	bl	80024e0 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003292:	4293      	cmp	r3, r2
 8003294:	d901      	bls.n	800329a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e053      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329a:	4b2d      	ldr	r3, [pc, #180]	; (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 020c 	and.w	r2, r3, #12
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d1eb      	bne.n	8003284 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032ac:	4b27      	ldr	r3, [pc, #156]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d210      	bcs.n	80032dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ba:	4b24      	ldr	r3, [pc, #144]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f023 020f 	bic.w	r2, r3, #15
 80032c2:	4922      	ldr	r1, [pc, #136]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ca:	4b20      	ldr	r3, [pc, #128]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e032      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e8:	4b19      	ldr	r3, [pc, #100]	; (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4916      	ldr	r1, [pc, #88]	; (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d009      	beq.n	800331a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003306:	4b12      	ldr	r3, [pc, #72]	; (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	490e      	ldr	r1, [pc, #56]	; (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800331a:	f000 f821 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 800331e:	4602      	mov	r2, r0
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	490a      	ldr	r1, [pc, #40]	; (8003354 <HAL_RCC_ClockConfig+0x1cc>)
 800332c:	5ccb      	ldrb	r3, [r1, r3]
 800332e:	fa22 f303 	lsr.w	r3, r2, r3
 8003332:	4a09      	ldr	r2, [pc, #36]	; (8003358 <HAL_RCC_ClockConfig+0x1d0>)
 8003334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003336:	4b09      	ldr	r3, [pc, #36]	; (800335c <HAL_RCC_ClockConfig+0x1d4>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7fe ff60 	bl	8002200 <HAL_InitTick>

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40023c00 	.word	0x40023c00
 8003350:	40023800 	.word	0x40023800
 8003354:	0800a7c8 	.word	0x0800a7c8
 8003358:	20000000 	.word	0x20000000
 800335c:	20000004 	.word	0x20000004

08003360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003364:	b094      	sub	sp, #80	; 0x50
 8003366:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	647b      	str	r3, [r7, #68]	; 0x44
 800336c:	2300      	movs	r3, #0
 800336e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003370:	2300      	movs	r3, #0
 8003372:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003374:	2300      	movs	r3, #0
 8003376:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003378:	4b79      	ldr	r3, [pc, #484]	; (8003560 <HAL_RCC_GetSysClockFreq+0x200>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 030c 	and.w	r3, r3, #12
 8003380:	2b08      	cmp	r3, #8
 8003382:	d00d      	beq.n	80033a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003384:	2b08      	cmp	r3, #8
 8003386:	f200 80e1 	bhi.w	800354c <HAL_RCC_GetSysClockFreq+0x1ec>
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x34>
 800338e:	2b04      	cmp	r3, #4
 8003390:	d003      	beq.n	800339a <HAL_RCC_GetSysClockFreq+0x3a>
 8003392:	e0db      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003394:	4b73      	ldr	r3, [pc, #460]	; (8003564 <HAL_RCC_GetSysClockFreq+0x204>)
 8003396:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003398:	e0db      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800339a:	4b73      	ldr	r3, [pc, #460]	; (8003568 <HAL_RCC_GetSysClockFreq+0x208>)
 800339c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800339e:	e0d8      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033a0:	4b6f      	ldr	r3, [pc, #444]	; (8003560 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033a8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80033aa:	4b6d      	ldr	r3, [pc, #436]	; (8003560 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d063      	beq.n	800347e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b6:	4b6a      	ldr	r3, [pc, #424]	; (8003560 <HAL_RCC_GetSysClockFreq+0x200>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	099b      	lsrs	r3, r3, #6
 80033bc:	2200      	movs	r2, #0
 80033be:	63bb      	str	r3, [r7, #56]	; 0x38
 80033c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033c8:	633b      	str	r3, [r7, #48]	; 0x30
 80033ca:	2300      	movs	r3, #0
 80033cc:	637b      	str	r3, [r7, #52]	; 0x34
 80033ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033d2:	4622      	mov	r2, r4
 80033d4:	462b      	mov	r3, r5
 80033d6:	f04f 0000 	mov.w	r0, #0
 80033da:	f04f 0100 	mov.w	r1, #0
 80033de:	0159      	lsls	r1, r3, #5
 80033e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033e4:	0150      	lsls	r0, r2, #5
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	4621      	mov	r1, r4
 80033ec:	1a51      	subs	r1, r2, r1
 80033ee:	6139      	str	r1, [r7, #16]
 80033f0:	4629      	mov	r1, r5
 80033f2:	eb63 0301 	sbc.w	r3, r3, r1
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003404:	4659      	mov	r1, fp
 8003406:	018b      	lsls	r3, r1, #6
 8003408:	4651      	mov	r1, sl
 800340a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800340e:	4651      	mov	r1, sl
 8003410:	018a      	lsls	r2, r1, #6
 8003412:	4651      	mov	r1, sl
 8003414:	ebb2 0801 	subs.w	r8, r2, r1
 8003418:	4659      	mov	r1, fp
 800341a:	eb63 0901 	sbc.w	r9, r3, r1
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800342a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800342e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003432:	4690      	mov	r8, r2
 8003434:	4699      	mov	r9, r3
 8003436:	4623      	mov	r3, r4
 8003438:	eb18 0303 	adds.w	r3, r8, r3
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	462b      	mov	r3, r5
 8003440:	eb49 0303 	adc.w	r3, r9, r3
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003452:	4629      	mov	r1, r5
 8003454:	024b      	lsls	r3, r1, #9
 8003456:	4621      	mov	r1, r4
 8003458:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800345c:	4621      	mov	r1, r4
 800345e:	024a      	lsls	r2, r1, #9
 8003460:	4610      	mov	r0, r2
 8003462:	4619      	mov	r1, r3
 8003464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003466:	2200      	movs	r2, #0
 8003468:	62bb      	str	r3, [r7, #40]	; 0x28
 800346a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800346c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003470:	f7fc ff36 	bl	80002e0 <__aeabi_uldivmod>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4613      	mov	r3, r2
 800347a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800347c:	e058      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347e:	4b38      	ldr	r3, [pc, #224]	; (8003560 <HAL_RCC_GetSysClockFreq+0x200>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	099b      	lsrs	r3, r3, #6
 8003484:	2200      	movs	r2, #0
 8003486:	4618      	mov	r0, r3
 8003488:	4611      	mov	r1, r2
 800348a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800348e:	623b      	str	r3, [r7, #32]
 8003490:	2300      	movs	r3, #0
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
 8003494:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003498:	4642      	mov	r2, r8
 800349a:	464b      	mov	r3, r9
 800349c:	f04f 0000 	mov.w	r0, #0
 80034a0:	f04f 0100 	mov.w	r1, #0
 80034a4:	0159      	lsls	r1, r3, #5
 80034a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034aa:	0150      	lsls	r0, r2, #5
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4641      	mov	r1, r8
 80034b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80034b6:	4649      	mov	r1, r9
 80034b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034d0:	ebb2 040a 	subs.w	r4, r2, sl
 80034d4:	eb63 050b 	sbc.w	r5, r3, fp
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	00eb      	lsls	r3, r5, #3
 80034e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034e6:	00e2      	lsls	r2, r4, #3
 80034e8:	4614      	mov	r4, r2
 80034ea:	461d      	mov	r5, r3
 80034ec:	4643      	mov	r3, r8
 80034ee:	18e3      	adds	r3, r4, r3
 80034f0:	603b      	str	r3, [r7, #0]
 80034f2:	464b      	mov	r3, r9
 80034f4:	eb45 0303 	adc.w	r3, r5, r3
 80034f8:	607b      	str	r3, [r7, #4]
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003506:	4629      	mov	r1, r5
 8003508:	028b      	lsls	r3, r1, #10
 800350a:	4621      	mov	r1, r4
 800350c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003510:	4621      	mov	r1, r4
 8003512:	028a      	lsls	r2, r1, #10
 8003514:	4610      	mov	r0, r2
 8003516:	4619      	mov	r1, r3
 8003518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800351a:	2200      	movs	r2, #0
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	61fa      	str	r2, [r7, #28]
 8003520:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003524:	f7fc fedc 	bl	80002e0 <__aeabi_uldivmod>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4613      	mov	r3, r2
 800352e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCC_GetSysClockFreq+0x200>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	0c1b      	lsrs	r3, r3, #16
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	3301      	adds	r3, #1
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003540:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003544:	fbb2 f3f3 	udiv	r3, r2, r3
 8003548:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800354a:	e002      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <HAL_RCC_GetSysClockFreq+0x204>)
 800354e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003554:	4618      	mov	r0, r3
 8003556:	3750      	adds	r7, #80	; 0x50
 8003558:	46bd      	mov	sp, r7
 800355a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800
 8003564:	00f42400 	.word	0x00f42400
 8003568:	007a1200 	.word	0x007a1200

0800356c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003570:	4b03      	ldr	r3, [pc, #12]	; (8003580 <HAL_RCC_GetHCLKFreq+0x14>)
 8003572:	681b      	ldr	r3, [r3, #0]
}
 8003574:	4618      	mov	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	20000000 	.word	0x20000000

08003584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003588:	f7ff fff0 	bl	800356c <HAL_RCC_GetHCLKFreq>
 800358c:	4602      	mov	r2, r0
 800358e:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	0a9b      	lsrs	r3, r3, #10
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	4903      	ldr	r1, [pc, #12]	; (80035a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800359a:	5ccb      	ldrb	r3, [r1, r3]
 800359c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40023800 	.word	0x40023800
 80035a8:	0800a7d8 	.word	0x0800a7d8

080035ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035b0:	f7ff ffdc 	bl	800356c <HAL_RCC_GetHCLKFreq>
 80035b4:	4602      	mov	r2, r0
 80035b6:	4b05      	ldr	r3, [pc, #20]	; (80035cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	0b5b      	lsrs	r3, r3, #13
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	4903      	ldr	r1, [pc, #12]	; (80035d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035c2:	5ccb      	ldrb	r3, [r1, r3]
 80035c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40023800 	.word	0x40023800
 80035d0:	0800a7d8 	.word	0x0800a7d8

080035d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	220f      	movs	r2, #15
 80035e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035e4:	4b12      	ldr	r3, [pc, #72]	; (8003630 <HAL_RCC_GetClockConfig+0x5c>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 0203 	and.w	r2, r3, #3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80035f0:	4b0f      	ldr	r3, [pc, #60]	; (8003630 <HAL_RCC_GetClockConfig+0x5c>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80035fc:	4b0c      	ldr	r3, [pc, #48]	; (8003630 <HAL_RCC_GetClockConfig+0x5c>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003608:	4b09      	ldr	r3, [pc, #36]	; (8003630 <HAL_RCC_GetClockConfig+0x5c>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	08db      	lsrs	r3, r3, #3
 800360e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003616:	4b07      	ldr	r3, [pc, #28]	; (8003634 <HAL_RCC_GetClockConfig+0x60>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 020f 	and.w	r2, r3, #15
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	601a      	str	r2, [r3, #0]
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40023800 	.word	0x40023800
 8003634:	40023c00 	.word	0x40023c00

08003638 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b088      	sub	sp, #32
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003640:	2300      	movs	r3, #0
 8003642:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003644:	2300      	movs	r3, #0
 8003646:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003650:	2300      	movs	r3, #0
 8003652:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d012      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003660:	4b69      	ldr	r3, [pc, #420]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	4a68      	ldr	r2, [pc, #416]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003666:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800366a:	6093      	str	r3, [r2, #8]
 800366c:	4b66      	ldr	r3, [pc, #408]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003674:	4964      	ldr	r1, [pc, #400]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003676:	4313      	orrs	r3, r2
 8003678:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003682:	2301      	movs	r3, #1
 8003684:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d017      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003692:	4b5d      	ldr	r3, [pc, #372]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003694:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003698:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a0:	4959      	ldr	r1, [pc, #356]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036b0:	d101      	bne.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80036b2:	2301      	movs	r3, #1
 80036b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80036be:	2301      	movs	r3, #1
 80036c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d017      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036ce:	4b4e      	ldr	r3, [pc, #312]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	494a      	ldr	r1, [pc, #296]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ec:	d101      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80036ee:	2301      	movs	r3, #1
 80036f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80036fa:	2301      	movs	r3, #1
 80036fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800370a:	2301      	movs	r3, #1
 800370c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 808b 	beq.w	8003832 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800371c:	4b3a      	ldr	r3, [pc, #232]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	4a39      	ldr	r2, [pc, #228]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003726:	6413      	str	r3, [r2, #64]	; 0x40
 8003728:	4b37      	ldr	r3, [pc, #220]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003734:	4b35      	ldr	r3, [pc, #212]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a34      	ldr	r2, [pc, #208]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800373a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800373e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003740:	f7fe fece 	bl	80024e0 <HAL_GetTick>
 8003744:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003746:	e008      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003748:	f7fe feca 	bl	80024e0 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b64      	cmp	r3, #100	; 0x64
 8003754:	d901      	bls.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e38f      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800375a:	4b2c      	ldr	r3, [pc, #176]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003766:	4b28      	ldr	r3, [pc, #160]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800376e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d035      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	429a      	cmp	r2, r3
 8003782:	d02e      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003784:	4b20      	ldr	r3, [pc, #128]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800378c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800378e:	4b1e      	ldr	r3, [pc, #120]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003792:	4a1d      	ldr	r2, [pc, #116]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003798:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800379a:	4b1b      	ldr	r3, [pc, #108]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800379c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379e:	4a1a      	ldr	r2, [pc, #104]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80037a6:	4a18      	ldr	r2, [pc, #96]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037ac:	4b16      	ldr	r3, [pc, #88]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d114      	bne.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b8:	f7fe fe92 	bl	80024e0 <HAL_GetTick>
 80037bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037be:	e00a      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037c0:	f7fe fe8e 	bl	80024e0 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e351      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d6:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0ee      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ee:	d111      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037fc:	4b04      	ldr	r3, [pc, #16]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037fe:	400b      	ands	r3, r1
 8003800:	4901      	ldr	r1, [pc, #4]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003802:	4313      	orrs	r3, r2
 8003804:	608b      	str	r3, [r1, #8]
 8003806:	e00b      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003808:	40023800 	.word	0x40023800
 800380c:	40007000 	.word	0x40007000
 8003810:	0ffffcff 	.word	0x0ffffcff
 8003814:	4bac      	ldr	r3, [pc, #688]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	4aab      	ldr	r2, [pc, #684]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800381a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800381e:	6093      	str	r3, [r2, #8]
 8003820:	4ba9      	ldr	r3, [pc, #676]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003822:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800382c:	49a6      	ldr	r1, [pc, #664]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800382e:	4313      	orrs	r3, r2
 8003830:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0310 	and.w	r3, r3, #16
 800383a:	2b00      	cmp	r3, #0
 800383c:	d010      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800383e:	4ba2      	ldr	r3, [pc, #648]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003844:	4aa0      	ldr	r2, [pc, #640]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003846:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800384a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800384e:	4b9e      	ldr	r3, [pc, #632]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003850:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003858:	499b      	ldr	r1, [pc, #620]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00a      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800386c:	4b96      	ldr	r3, [pc, #600]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003872:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800387a:	4993      	ldr	r1, [pc, #588]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800387c:	4313      	orrs	r3, r2
 800387e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800388e:	4b8e      	ldr	r3, [pc, #568]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003894:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800389c:	498a      	ldr	r1, [pc, #552]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038b0:	4b85      	ldr	r3, [pc, #532]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038be:	4982      	ldr	r1, [pc, #520]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038d2:	4b7d      	ldr	r3, [pc, #500]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e0:	4979      	ldr	r1, [pc, #484]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00a      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038f4:	4b74      	ldr	r3, [pc, #464]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fa:	f023 0203 	bic.w	r2, r3, #3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003902:	4971      	ldr	r1, [pc, #452]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003916:	4b6c      	ldr	r3, [pc, #432]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391c:	f023 020c 	bic.w	r2, r3, #12
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003924:	4968      	ldr	r1, [pc, #416]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003938:	4b63      	ldr	r3, [pc, #396]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003946:	4960      	ldr	r1, [pc, #384]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800395a:	4b5b      	ldr	r3, [pc, #364]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800395c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003960:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003968:	4957      	ldr	r1, [pc, #348]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800397c:	4b52      	ldr	r3, [pc, #328]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800397e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003982:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398a:	494f      	ldr	r1, [pc, #316]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800399e:	4b4a      	ldr	r3, [pc, #296]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ac:	4946      	ldr	r1, [pc, #280]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00a      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80039c0:	4b41      	ldr	r3, [pc, #260]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ce:	493e      	ldr	r1, [pc, #248]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80039e2:	4b39      	ldr	r3, [pc, #228]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f0:	4935      	ldr	r1, [pc, #212]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00a      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a04:	4b30      	ldr	r3, [pc, #192]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a12:	492d      	ldr	r1, [pc, #180]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d011      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a26:	4b28      	ldr	r3, [pc, #160]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a34:	4924      	ldr	r1, [pc, #144]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a44:	d101      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a46:	2301      	movs	r3, #1
 8003a48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003a56:	2301      	movs	r3, #1
 8003a58:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a66:	4b18      	ldr	r3, [pc, #96]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a74:	4914      	ldr	r1, [pc, #80]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00b      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a88:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a98:	490b      	ldr	r1, [pc, #44]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00f      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003aac:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003abc:	4902      	ldr	r1, [pc, #8]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ac4:	e002      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003ac6:	bf00      	nop
 8003ac8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00b      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ad8:	4b8a      	ldr	r3, [pc, #552]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ade:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae8:	4986      	ldr	r1, [pc, #536]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00b      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003afc:	4b81      	ldr	r3, [pc, #516]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b02:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b0c:	497d      	ldr	r1, [pc, #500]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d006      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 80d6 	beq.w	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b28:	4b76      	ldr	r3, [pc, #472]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a75      	ldr	r2, [pc, #468]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b34:	f7fe fcd4 	bl	80024e0 <HAL_GetTick>
 8003b38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b3c:	f7fe fcd0 	bl	80024e0 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b64      	cmp	r3, #100	; 0x64
 8003b48:	d901      	bls.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e195      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b4e:	4b6d      	ldr	r3, [pc, #436]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f0      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d021      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d11d      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b6e:	4b65      	ldr	r3, [pc, #404]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b74:	0c1b      	lsrs	r3, r3, #16
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b7c:	4b61      	ldr	r3, [pc, #388]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b82:	0e1b      	lsrs	r3, r3, #24
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	019a      	lsls	r2, r3, #6
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	041b      	lsls	r3, r3, #16
 8003b94:	431a      	orrs	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	061b      	lsls	r3, r3, #24
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	071b      	lsls	r3, r3, #28
 8003ba2:	4958      	ldr	r1, [pc, #352]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d004      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bbe:	d00a      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d02e      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd4:	d129      	bne.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003bd6:	4b4b      	ldr	r3, [pc, #300]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bdc:	0c1b      	lsrs	r3, r3, #16
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003be4:	4b47      	ldr	r3, [pc, #284]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bea:	0f1b      	lsrs	r3, r3, #28
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	019a      	lsls	r2, r3, #6
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	041b      	lsls	r3, r3, #16
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	061b      	lsls	r3, r3, #24
 8003c04:	431a      	orrs	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	071b      	lsls	r3, r3, #28
 8003c0a:	493e      	ldr	r1, [pc, #248]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c12:	4b3c      	ldr	r3, [pc, #240]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c18:	f023 021f 	bic.w	r2, r3, #31
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	3b01      	subs	r3, #1
 8003c22:	4938      	ldr	r1, [pc, #224]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d01d      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c36:	4b33      	ldr	r3, [pc, #204]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c3c:	0e1b      	lsrs	r3, r3, #24
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c44:	4b2f      	ldr	r3, [pc, #188]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c4a:	0f1b      	lsrs	r3, r3, #28
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	019a      	lsls	r2, r3, #6
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	041b      	lsls	r3, r3, #16
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	061b      	lsls	r3, r3, #24
 8003c64:	431a      	orrs	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	071b      	lsls	r3, r3, #28
 8003c6a:	4926      	ldr	r1, [pc, #152]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d011      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	019a      	lsls	r2, r3, #6
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	041b      	lsls	r3, r3, #16
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	061b      	lsls	r3, r3, #24
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	071b      	lsls	r3, r3, #28
 8003c9a:	491a      	ldr	r1, [pc, #104]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ca2:	4b18      	ldr	r3, [pc, #96]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a17      	ldr	r2, [pc, #92]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ca8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cae:	f7fe fc17 	bl	80024e0 <HAL_GetTick>
 8003cb2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003cb6:	f7fe fc13 	bl	80024e0 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b64      	cmp	r3, #100	; 0x64
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e0d8      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cc8:	4b0e      	ldr	r3, [pc, #56]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0f0      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	f040 80ce 	bne.w	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003cdc:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a08      	ldr	r2, [pc, #32]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ce8:	f7fe fbfa 	bl	80024e0 <HAL_GetTick>
 8003cec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cee:	e00b      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cf0:	f7fe fbf6 	bl	80024e0 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b64      	cmp	r3, #100	; 0x64
 8003cfc:	d904      	bls.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e0bb      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003d02:	bf00      	nop
 8003d04:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d08:	4b5e      	ldr	r3, [pc, #376]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d14:	d0ec      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d009      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d02e      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d12a      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d3e:	4b51      	ldr	r3, [pc, #324]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d44:	0c1b      	lsrs	r3, r3, #16
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d4c:	4b4d      	ldr	r3, [pc, #308]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d52:	0f1b      	lsrs	r3, r3, #28
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	019a      	lsls	r2, r3, #6
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	041b      	lsls	r3, r3, #16
 8003d64:	431a      	orrs	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	061b      	lsls	r3, r3, #24
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	071b      	lsls	r3, r3, #28
 8003d72:	4944      	ldr	r1, [pc, #272]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d7a:	4b42      	ldr	r3, [pc, #264]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d80:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	021b      	lsls	r3, r3, #8
 8003d8c:	493d      	ldr	r1, [pc, #244]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d022      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003da4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003da8:	d11d      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003daa:	4b36      	ldr	r3, [pc, #216]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db0:	0e1b      	lsrs	r3, r3, #24
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003db8:	4b32      	ldr	r3, [pc, #200]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbe:	0f1b      	lsrs	r3, r3, #28
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	019a      	lsls	r2, r3, #6
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	041b      	lsls	r3, r3, #16
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	061b      	lsls	r3, r3, #24
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	071b      	lsls	r3, r3, #28
 8003dde:	4929      	ldr	r1, [pc, #164]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d028      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003df2:	4b24      	ldr	r3, [pc, #144]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df8:	0e1b      	lsrs	r3, r3, #24
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e00:	4b20      	ldr	r3, [pc, #128]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e06:	0c1b      	lsrs	r3, r3, #16
 8003e08:	f003 0303 	and.w	r3, r3, #3
 8003e0c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	019a      	lsls	r2, r3, #6
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	041b      	lsls	r3, r3, #16
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	061b      	lsls	r3, r3, #24
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	071b      	lsls	r3, r3, #28
 8003e26:	4917      	ldr	r1, [pc, #92]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e2e:	4b15      	ldr	r3, [pc, #84]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	4911      	ldr	r1, [pc, #68]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e44:	4b0f      	ldr	r3, [pc, #60]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a0e      	ldr	r2, [pc, #56]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e50:	f7fe fb46 	bl	80024e0 <HAL_GetTick>
 8003e54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e58:	f7fe fb42 	bl	80024e0 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b64      	cmp	r3, #100	; 0x64
 8003e64:	d901      	bls.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e007      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e6a:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e76:	d1ef      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3720      	adds	r7, #32
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	40023800 	.word	0x40023800

08003e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e049      	b.n	8003f2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d106      	bne.n	8003eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f841 	bl	8003f36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	f000 fa00 	bl	80042cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
	...

08003f4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d001      	beq.n	8003f64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e054      	b.n	800400e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68da      	ldr	r2, [r3, #12]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0201 	orr.w	r2, r2, #1
 8003f7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a26      	ldr	r2, [pc, #152]	; (800401c <HAL_TIM_Base_Start_IT+0xd0>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d022      	beq.n	8003fcc <HAL_TIM_Base_Start_IT+0x80>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f8e:	d01d      	beq.n	8003fcc <HAL_TIM_Base_Start_IT+0x80>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a22      	ldr	r2, [pc, #136]	; (8004020 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d018      	beq.n	8003fcc <HAL_TIM_Base_Start_IT+0x80>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a21      	ldr	r2, [pc, #132]	; (8004024 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d013      	beq.n	8003fcc <HAL_TIM_Base_Start_IT+0x80>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a1f      	ldr	r2, [pc, #124]	; (8004028 <HAL_TIM_Base_Start_IT+0xdc>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d00e      	beq.n	8003fcc <HAL_TIM_Base_Start_IT+0x80>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a1e      	ldr	r2, [pc, #120]	; (800402c <HAL_TIM_Base_Start_IT+0xe0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d009      	beq.n	8003fcc <HAL_TIM_Base_Start_IT+0x80>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a1c      	ldr	r2, [pc, #112]	; (8004030 <HAL_TIM_Base_Start_IT+0xe4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d004      	beq.n	8003fcc <HAL_TIM_Base_Start_IT+0x80>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a1b      	ldr	r2, [pc, #108]	; (8004034 <HAL_TIM_Base_Start_IT+0xe8>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d115      	bne.n	8003ff8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	4b19      	ldr	r3, [pc, #100]	; (8004038 <HAL_TIM_Base_Start_IT+0xec>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2b06      	cmp	r3, #6
 8003fdc:	d015      	beq.n	800400a <HAL_TIM_Base_Start_IT+0xbe>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe4:	d011      	beq.n	800400a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f042 0201 	orr.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff6:	e008      	b.n	800400a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0201 	orr.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	e000      	b.n	800400c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40010000 	.word	0x40010000
 8004020:	40000400 	.word	0x40000400
 8004024:	40000800 	.word	0x40000800
 8004028:	40000c00 	.word	0x40000c00
 800402c:	40010400 	.word	0x40010400
 8004030:	40014000 	.word	0x40014000
 8004034:	40001800 	.word	0x40001800
 8004038:	00010007 	.word	0x00010007

0800403c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b02      	cmp	r3, #2
 8004050:	d122      	bne.n	8004098 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b02      	cmp	r3, #2
 800405e:	d11b      	bne.n	8004098 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f06f 0202 	mvn.w	r2, #2
 8004068:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	f003 0303 	and.w	r3, r3, #3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f905 	bl	800428e <HAL_TIM_IC_CaptureCallback>
 8004084:	e005      	b.n	8004092 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f8f7 	bl	800427a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f908 	bl	80042a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	f003 0304 	and.w	r3, r3, #4
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d122      	bne.n	80040ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d11b      	bne.n	80040ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f06f 0204 	mvn.w	r2, #4
 80040bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2202      	movs	r2, #2
 80040c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f8db 	bl	800428e <HAL_TIM_IC_CaptureCallback>
 80040d8:	e005      	b.n	80040e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f8cd 	bl	800427a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f8de 	bl	80042a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d122      	bne.n	8004140 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b08      	cmp	r3, #8
 8004106:	d11b      	bne.n	8004140 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f06f 0208 	mvn.w	r2, #8
 8004110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2204      	movs	r2, #4
 8004116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f8b1 	bl	800428e <HAL_TIM_IC_CaptureCallback>
 800412c:	e005      	b.n	800413a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f8a3 	bl	800427a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f8b4 	bl	80042a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	f003 0310 	and.w	r3, r3, #16
 800414a:	2b10      	cmp	r3, #16
 800414c:	d122      	bne.n	8004194 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f003 0310 	and.w	r3, r3, #16
 8004158:	2b10      	cmp	r3, #16
 800415a:	d11b      	bne.n	8004194 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f06f 0210 	mvn.w	r2, #16
 8004164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2208      	movs	r2, #8
 800416a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f887 	bl	800428e <HAL_TIM_IC_CaptureCallback>
 8004180:	e005      	b.n	800418e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f879 	bl	800427a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f88a 	bl	80042a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d10e      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d107      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f06f 0201 	mvn.w	r2, #1
 80041b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7fd ff0a 	bl	8001fd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ca:	2b80      	cmp	r3, #128	; 0x80
 80041cc:	d10e      	bne.n	80041ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d8:	2b80      	cmp	r3, #128	; 0x80
 80041da:	d107      	bne.n	80041ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f91a 	bl	8004420 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041fa:	d10e      	bne.n	800421a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004206:	2b80      	cmp	r3, #128	; 0x80
 8004208:	d107      	bne.n	800421a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f90d 	bl	8004434 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004224:	2b40      	cmp	r3, #64	; 0x40
 8004226:	d10e      	bne.n	8004246 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004232:	2b40      	cmp	r3, #64	; 0x40
 8004234:	d107      	bne.n	8004246 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800423e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f838 	bl	80042b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f003 0320 	and.w	r3, r3, #32
 8004250:	2b20      	cmp	r3, #32
 8004252:	d10e      	bne.n	8004272 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f003 0320 	and.w	r3, r3, #32
 800425e:	2b20      	cmp	r3, #32
 8004260:	d107      	bne.n	8004272 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f06f 0220 	mvn.w	r2, #32
 800426a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f8cd 	bl	800440c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004272:	bf00      	nop
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
	...

080042cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a40      	ldr	r2, [pc, #256]	; (80043e0 <TIM_Base_SetConfig+0x114>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d013      	beq.n	800430c <TIM_Base_SetConfig+0x40>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ea:	d00f      	beq.n	800430c <TIM_Base_SetConfig+0x40>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a3d      	ldr	r2, [pc, #244]	; (80043e4 <TIM_Base_SetConfig+0x118>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d00b      	beq.n	800430c <TIM_Base_SetConfig+0x40>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a3c      	ldr	r2, [pc, #240]	; (80043e8 <TIM_Base_SetConfig+0x11c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d007      	beq.n	800430c <TIM_Base_SetConfig+0x40>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a3b      	ldr	r2, [pc, #236]	; (80043ec <TIM_Base_SetConfig+0x120>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d003      	beq.n	800430c <TIM_Base_SetConfig+0x40>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a3a      	ldr	r2, [pc, #232]	; (80043f0 <TIM_Base_SetConfig+0x124>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d108      	bne.n	800431e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	4313      	orrs	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a2f      	ldr	r2, [pc, #188]	; (80043e0 <TIM_Base_SetConfig+0x114>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d02b      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800432c:	d027      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a2c      	ldr	r2, [pc, #176]	; (80043e4 <TIM_Base_SetConfig+0x118>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d023      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a2b      	ldr	r2, [pc, #172]	; (80043e8 <TIM_Base_SetConfig+0x11c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d01f      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a2a      	ldr	r2, [pc, #168]	; (80043ec <TIM_Base_SetConfig+0x120>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d01b      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a29      	ldr	r2, [pc, #164]	; (80043f0 <TIM_Base_SetConfig+0x124>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d017      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a28      	ldr	r2, [pc, #160]	; (80043f4 <TIM_Base_SetConfig+0x128>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d013      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a27      	ldr	r2, [pc, #156]	; (80043f8 <TIM_Base_SetConfig+0x12c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00f      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a26      	ldr	r2, [pc, #152]	; (80043fc <TIM_Base_SetConfig+0x130>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d00b      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a25      	ldr	r2, [pc, #148]	; (8004400 <TIM_Base_SetConfig+0x134>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d007      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a24      	ldr	r2, [pc, #144]	; (8004404 <TIM_Base_SetConfig+0x138>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d003      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a23      	ldr	r2, [pc, #140]	; (8004408 <TIM_Base_SetConfig+0x13c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d108      	bne.n	8004390 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a0a      	ldr	r2, [pc, #40]	; (80043e0 <TIM_Base_SetConfig+0x114>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d003      	beq.n	80043c4 <TIM_Base_SetConfig+0xf8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a0c      	ldr	r2, [pc, #48]	; (80043f0 <TIM_Base_SetConfig+0x124>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d103      	bne.n	80043cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	615a      	str	r2, [r3, #20]
}
 80043d2:	bf00      	nop
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40010000 	.word	0x40010000
 80043e4:	40000400 	.word	0x40000400
 80043e8:	40000800 	.word	0x40000800
 80043ec:	40000c00 	.word	0x40000c00
 80043f0:	40010400 	.word	0x40010400
 80043f4:	40014000 	.word	0x40014000
 80043f8:	40014400 	.word	0x40014400
 80043fc:	40014800 	.word	0x40014800
 8004400:	40001800 	.word	0x40001800
 8004404:	40001c00 	.word	0x40001c00
 8004408:	40002000 	.word	0x40002000

0800440c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e040      	b.n	80044dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800445e:	2b00      	cmp	r3, #0
 8004460:	d106      	bne.n	8004470 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7fd fdee 	bl	800204c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2224      	movs	r2, #36	; 0x24
 8004474:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0201 	bic.w	r2, r2, #1
 8004484:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fc9a 	bl	8004dc0 <UART_SetConfig>
 800448c:	4603      	mov	r3, r0
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e022      	b.n	80044dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fef2 	bl	8005288 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689a      	ldr	r2, [r3, #8]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0201 	orr.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 ff79 	bl	80053cc <UART_CheckIdleState>
 80044da:	4603      	mov	r3, r0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08a      	sub	sp, #40	; 0x28
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	4613      	mov	r3, r2
 80044f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044f8:	2b20      	cmp	r3, #32
 80044fa:	f040 8081 	bne.w	8004600 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <HAL_UART_Transmit+0x26>
 8004504:	88fb      	ldrh	r3, [r7, #6]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e079      	b.n	8004602 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_UART_Transmit+0x38>
 8004518:	2302      	movs	r3, #2
 800451a:	e072      	b.n	8004602 <HAL_UART_Transmit+0x11e>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2221      	movs	r2, #33	; 0x21
 8004530:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004532:	f7fd ffd5 	bl	80024e0 <HAL_GetTick>
 8004536:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	88fa      	ldrh	r2, [r7, #6]
 800453c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	88fa      	ldrh	r2, [r7, #6]
 8004544:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004550:	d108      	bne.n	8004564 <HAL_UART_Transmit+0x80>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d104      	bne.n	8004564 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800455a:	2300      	movs	r3, #0
 800455c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	61bb      	str	r3, [r7, #24]
 8004562:	e003      	b.n	800456c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004568:	2300      	movs	r3, #0
 800456a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004574:	e02c      	b.n	80045d0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2200      	movs	r2, #0
 800457e:	2180      	movs	r1, #128	; 0x80
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 ff6c 	bl	800545e <UART_WaitOnFlagUntilTimeout>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e038      	b.n	8004602 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10b      	bne.n	80045ae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	461a      	mov	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	3302      	adds	r3, #2
 80045aa:	61bb      	str	r3, [r7, #24]
 80045ac:	e007      	b.n	80045be <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	781a      	ldrb	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	3301      	adds	r3, #1
 80045bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1cc      	bne.n	8004576 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2200      	movs	r2, #0
 80045e4:	2140      	movs	r1, #64	; 0x40
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 ff39 	bl	800545e <UART_WaitOnFlagUntilTimeout>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e005      	b.n	8004602 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2220      	movs	r2, #32
 80045fa:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	e000      	b.n	8004602 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004600:	2302      	movs	r3, #2
  }
}
 8004602:	4618      	mov	r0, r3
 8004604:	3720      	adds	r7, #32
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800460c:	b480      	push	{r7}
 800460e:	b08b      	sub	sp, #44	; 0x2c
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	4613      	mov	r3, r2
 8004618:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800461e:	2b20      	cmp	r3, #32
 8004620:	d156      	bne.n	80046d0 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <HAL_UART_Transmit_IT+0x22>
 8004628:	88fb      	ldrh	r3, [r7, #6]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e04f      	b.n	80046d2 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004638:	2b01      	cmp	r3, #1
 800463a:	d101      	bne.n	8004640 <HAL_UART_Transmit_IT+0x34>
 800463c:	2302      	movs	r3, #2
 800463e:	e048      	b.n	80046d2 <HAL_UART_Transmit_IT+0xc6>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	88fa      	ldrh	r2, [r7, #6]
 8004652:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	88fa      	ldrh	r2, [r7, #6]
 800465a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2221      	movs	r2, #33	; 0x21
 8004670:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467a:	d107      	bne.n	800468c <HAL_UART_Transmit_IT+0x80>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d103      	bne.n	800468c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4a16      	ldr	r2, [pc, #88]	; (80046e0 <HAL_UART_Transmit_IT+0xd4>)
 8004688:	669a      	str	r2, [r3, #104]	; 0x68
 800468a:	e002      	b.n	8004692 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4a15      	ldr	r2, [pc, #84]	; (80046e4 <HAL_UART_Transmit_IT+0xd8>)
 8004690:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	e853 3f00 	ldrex	r3, [r3]
 80046a6:	613b      	str	r3, [r7, #16]
   return(result);
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	461a      	mov	r2, r3
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	623b      	str	r3, [r7, #32]
 80046ba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046bc:	69f9      	ldr	r1, [r7, #28]
 80046be:	6a3a      	ldr	r2, [r7, #32]
 80046c0:	e841 2300 	strex	r3, r2, [r1]
 80046c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1e6      	bne.n	800469a <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	e000      	b.n	80046d2 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80046d0:	2302      	movs	r3, #2
  }
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	372c      	adds	r7, #44	; 0x2c
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	08005925 	.word	0x08005925
 80046e4:	0800586f 	.word	0x0800586f

080046e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b08a      	sub	sp, #40	; 0x28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	4613      	mov	r3, r2
 80046f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046fa:	2b20      	cmp	r3, #32
 80046fc:	d13d      	bne.n	800477a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d002      	beq.n	800470a <HAL_UART_Receive_IT+0x22>
 8004704:	88fb      	ldrh	r3, [r7, #6]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e036      	b.n	800477c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <HAL_UART_Receive_IT+0x34>
 8004718:	2302      	movs	r3, #2
 800471a:	e02f      	b.n	800477c <HAL_UART_Receive_IT+0x94>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d018      	beq.n	800476a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	e853 3f00 	ldrex	r3, [r3]
 8004744:	613b      	str	r3, [r7, #16]
   return(result);
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800474c:	627b      	str	r3, [r7, #36]	; 0x24
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	461a      	mov	r2, r3
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	623b      	str	r3, [r7, #32]
 8004758:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475a:	69f9      	ldr	r1, [r7, #28]
 800475c:	6a3a      	ldr	r2, [r7, #32]
 800475e:	e841 2300 	strex	r3, r2, [r1]
 8004762:	61bb      	str	r3, [r7, #24]
   return(result);
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1e6      	bne.n	8004738 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800476a:	88fb      	ldrh	r3, [r7, #6]
 800476c:	461a      	mov	r2, r3
 800476e:	68b9      	ldr	r1, [r7, #8]
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 ff39 	bl	80055e8 <UART_Start_Receive_IT>
 8004776:	4603      	mov	r3, r0
 8004778:	e000      	b.n	800477c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800477a:	2302      	movs	r3, #2
  }
}
 800477c:	4618      	mov	r0, r3
 800477e:	3728      	adds	r7, #40	; 0x28
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b0ba      	sub	sp, #232	; 0xe8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80047ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80047b2:	4013      	ands	r3, r2
 80047b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80047b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d115      	bne.n	80047ec <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80047c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00f      	beq.n	80047ec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047d0:	f003 0320 	and.w	r3, r3, #32
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d009      	beq.n	80047ec <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 82a4 	beq.w	8004d2a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	4798      	blx	r3
      }
      return;
 80047ea:	e29e      	b.n	8004d2a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80047ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 8117 	beq.w	8004a24 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80047f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004802:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004806:	4b85      	ldr	r3, [pc, #532]	; (8004a1c <HAL_UART_IRQHandler+0x298>)
 8004808:	4013      	ands	r3, r2
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 810a 	beq.w	8004a24 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b00      	cmp	r3, #0
 800481a:	d011      	beq.n	8004840 <HAL_UART_IRQHandler+0xbc>
 800481c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00b      	beq.n	8004840 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2201      	movs	r2, #1
 800482e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004836:	f043 0201 	orr.w	r2, r3, #1
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d011      	beq.n	8004870 <HAL_UART_IRQHandler+0xec>
 800484c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00b      	beq.n	8004870 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2202      	movs	r2, #2
 800485e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004866:	f043 0204 	orr.w	r2, r3, #4
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d011      	beq.n	80048a0 <HAL_UART_IRQHandler+0x11c>
 800487c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00b      	beq.n	80048a0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2204      	movs	r2, #4
 800488e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004896:	f043 0202 	orr.w	r2, r3, #2
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d017      	beq.n	80048dc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048b0:	f003 0320 	and.w	r3, r3, #32
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d105      	bne.n	80048c4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80048b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00b      	beq.n	80048dc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2208      	movs	r2, #8
 80048ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048d2:	f043 0208 	orr.w	r2, r3, #8
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80048dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d012      	beq.n	800490e <HAL_UART_IRQHandler+0x18a>
 80048e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00c      	beq.n	800490e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004904:	f043 0220 	orr.w	r2, r3, #32
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 820a 	beq.w	8004d2e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800491a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800491e:	f003 0320 	and.w	r3, r3, #32
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00d      	beq.n	8004942 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	2b00      	cmp	r3, #0
 8004930:	d007      	beq.n	8004942 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004948:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004956:	2b40      	cmp	r3, #64	; 0x40
 8004958:	d005      	beq.n	8004966 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800495a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800495e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004962:	2b00      	cmp	r3, #0
 8004964:	d04f      	beq.n	8004a06 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 ff08 	bl	800577c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004976:	2b40      	cmp	r3, #64	; 0x40
 8004978:	d141      	bne.n	80049fe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3308      	adds	r3, #8
 8004980:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004984:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004990:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004998:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3308      	adds	r3, #8
 80049a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049b6:	e841 2300 	strex	r3, r2, [r1]
 80049ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80049be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1d9      	bne.n	800497a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d013      	beq.n	80049f6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d2:	4a13      	ldr	r2, [pc, #76]	; (8004a20 <HAL_UART_IRQHandler+0x29c>)
 80049d4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fd fede 	bl	800279c <HAL_DMA_Abort_IT>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d017      	beq.n	8004a16 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80049f0:	4610      	mov	r0, r2
 80049f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f4:	e00f      	b.n	8004a16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f9ae 	bl	8004d58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049fc:	e00b      	b.n	8004a16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f9aa 	bl	8004d58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a04:	e007      	b.n	8004a16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f9a6 	bl	8004d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004a14:	e18b      	b.n	8004d2e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a16:	bf00      	nop
    return;
 8004a18:	e189      	b.n	8004d2e <HAL_UART_IRQHandler+0x5aa>
 8004a1a:	bf00      	nop
 8004a1c:	04000120 	.word	0x04000120
 8004a20:	08005843 	.word	0x08005843

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	f040 8144 	bne.w	8004cb6 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a32:	f003 0310 	and.w	r3, r3, #16
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 813d 	beq.w	8004cb6 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a40:	f003 0310 	and.w	r3, r3, #16
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 8136 	beq.w	8004cb6 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2210      	movs	r2, #16
 8004a50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5c:	2b40      	cmp	r3, #64	; 0x40
 8004a5e:	f040 80b2 	bne.w	8004bc6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a6e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 815d 	beq.w	8004d32 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a82:	429a      	cmp	r2, r3
 8004a84:	f080 8155 	bcs.w	8004d32 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a9c:	f000 8085 	beq.w	8004baa <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004aac:	e853 3f00 	ldrex	r3, [r3]
 8004ab0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ab4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004abc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004aca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ace:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ad6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ada:	e841 2300 	strex	r3, r2, [r1]
 8004ade:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1da      	bne.n	8004aa0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3308      	adds	r3, #8
 8004af0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004af4:	e853 3f00 	ldrex	r3, [r3]
 8004af8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004afa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004afc:	f023 0301 	bic.w	r3, r3, #1
 8004b00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3308      	adds	r3, #8
 8004b0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b1a:	e841 2300 	strex	r3, r2, [r1]
 8004b1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1e1      	bne.n	8004aea <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	3308      	adds	r3, #8
 8004b2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b30:	e853 3f00 	ldrex	r3, [r3]
 8004b34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3308      	adds	r3, #8
 8004b46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b52:	e841 2300 	strex	r3, r2, [r1]
 8004b56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1e3      	bne.n	8004b26 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2220      	movs	r2, #32
 8004b62:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b72:	e853 3f00 	ldrex	r3, [r3]
 8004b76:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b7a:	f023 0310 	bic.w	r3, r3, #16
 8004b7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	461a      	mov	r2, r3
 8004b88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b8e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b94:	e841 2300 	strex	r3, r2, [r1]
 8004b98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1e4      	bne.n	8004b6a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7fd fd89 	bl	80026bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f8d4 	bl	8004d6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bc4:	e0b5      	b.n	8004d32 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 80a7 	beq.w	8004d36 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8004be8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 80a2 	beq.w	8004d36 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfa:	e853 3f00 	ldrex	r3, [r3]
 8004bfe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c14:	647b      	str	r3, [r7, #68]	; 0x44
 8004c16:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c1c:	e841 2300 	strex	r3, r2, [r1]
 8004c20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1e4      	bne.n	8004bf2 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	3308      	adds	r3, #8
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	e853 3f00 	ldrex	r3, [r3]
 8004c36:	623b      	str	r3, [r7, #32]
   return(result);
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	f023 0301 	bic.w	r3, r3, #1
 8004c3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3308      	adds	r3, #8
 8004c48:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c4c:	633a      	str	r2, [r7, #48]	; 0x30
 8004c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c54:	e841 2300 	strex	r3, r2, [r1]
 8004c58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1e3      	bne.n	8004c28 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2220      	movs	r2, #32
 8004c64:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	e853 3f00 	ldrex	r3, [r3]
 8004c7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f023 0310 	bic.w	r3, r3, #16
 8004c86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c94:	61fb      	str	r3, [r7, #28]
 8004c96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c98:	69b9      	ldr	r1, [r7, #24]
 8004c9a:	69fa      	ldr	r2, [r7, #28]
 8004c9c:	e841 2300 	strex	r3, r2, [r1]
 8004ca0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1e4      	bne.n	8004c72 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ca8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cac:	4619      	mov	r1, r3
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f85c 	bl	8004d6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cb4:	e03f      	b.n	8004d36 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00e      	beq.n	8004ce0 <HAL_UART_IRQHandler+0x55c>
 8004cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d008      	beq.n	8004ce0 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004cd6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f853 	bl	8004d84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cde:	e02d      	b.n	8004d3c <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00e      	beq.n	8004d0a <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d008      	beq.n	8004d0a <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d01c      	beq.n	8004d3a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	4798      	blx	r3
    }
    return;
 8004d08:	e017      	b.n	8004d3a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d012      	beq.n	8004d3c <HAL_UART_IRQHandler+0x5b8>
 8004d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00c      	beq.n	8004d3c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fe5e 	bl	80059e4 <UART_EndTransmit_IT>
    return;
 8004d28:	e008      	b.n	8004d3c <HAL_UART_IRQHandler+0x5b8>
      return;
 8004d2a:	bf00      	nop
 8004d2c:	e006      	b.n	8004d3c <HAL_UART_IRQHandler+0x5b8>
    return;
 8004d2e:	bf00      	nop
 8004d30:	e004      	b.n	8004d3c <HAL_UART_IRQHandler+0x5b8>
      return;
 8004d32:	bf00      	nop
 8004d34:	e002      	b.n	8004d3c <HAL_UART_IRQHandler+0x5b8>
      return;
 8004d36:	bf00      	nop
 8004d38:	e000      	b.n	8004d3c <HAL_UART_IRQHandler+0x5b8>
    return;
 8004d3a:	bf00      	nop
  }

}
 8004d3c:	37e8      	adds	r7, #232	; 0xe8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop

08004d44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004da4:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004daa:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	4313      	orrs	r3, r2
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
	...

08004dc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b088      	sub	sp, #32
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	69db      	ldr	r3, [r3, #28]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	4ba6      	ldr	r3, [pc, #664]	; (8005084 <UART_SetConfig+0x2c4>)
 8004dec:	4013      	ands	r3, r2
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6812      	ldr	r2, [r2, #0]
 8004df2:	6979      	ldr	r1, [r7, #20]
 8004df4:	430b      	orrs	r3, r1
 8004df6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68da      	ldr	r2, [r3, #12]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a94      	ldr	r2, [pc, #592]	; (8005088 <UART_SetConfig+0x2c8>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d120      	bne.n	8004e7e <UART_SetConfig+0xbe>
 8004e3c:	4b93      	ldr	r3, [pc, #588]	; (800508c <UART_SetConfig+0x2cc>)
 8004e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	2b03      	cmp	r3, #3
 8004e48:	d816      	bhi.n	8004e78 <UART_SetConfig+0xb8>
 8004e4a:	a201      	add	r2, pc, #4	; (adr r2, 8004e50 <UART_SetConfig+0x90>)
 8004e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e50:	08004e61 	.word	0x08004e61
 8004e54:	08004e6d 	.word	0x08004e6d
 8004e58:	08004e67 	.word	0x08004e67
 8004e5c:	08004e73 	.word	0x08004e73
 8004e60:	2301      	movs	r3, #1
 8004e62:	77fb      	strb	r3, [r7, #31]
 8004e64:	e150      	b.n	8005108 <UART_SetConfig+0x348>
 8004e66:	2302      	movs	r3, #2
 8004e68:	77fb      	strb	r3, [r7, #31]
 8004e6a:	e14d      	b.n	8005108 <UART_SetConfig+0x348>
 8004e6c:	2304      	movs	r3, #4
 8004e6e:	77fb      	strb	r3, [r7, #31]
 8004e70:	e14a      	b.n	8005108 <UART_SetConfig+0x348>
 8004e72:	2308      	movs	r3, #8
 8004e74:	77fb      	strb	r3, [r7, #31]
 8004e76:	e147      	b.n	8005108 <UART_SetConfig+0x348>
 8004e78:	2310      	movs	r3, #16
 8004e7a:	77fb      	strb	r3, [r7, #31]
 8004e7c:	e144      	b.n	8005108 <UART_SetConfig+0x348>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a83      	ldr	r2, [pc, #524]	; (8005090 <UART_SetConfig+0x2d0>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d132      	bne.n	8004eee <UART_SetConfig+0x12e>
 8004e88:	4b80      	ldr	r3, [pc, #512]	; (800508c <UART_SetConfig+0x2cc>)
 8004e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8e:	f003 030c 	and.w	r3, r3, #12
 8004e92:	2b0c      	cmp	r3, #12
 8004e94:	d828      	bhi.n	8004ee8 <UART_SetConfig+0x128>
 8004e96:	a201      	add	r2, pc, #4	; (adr r2, 8004e9c <UART_SetConfig+0xdc>)
 8004e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9c:	08004ed1 	.word	0x08004ed1
 8004ea0:	08004ee9 	.word	0x08004ee9
 8004ea4:	08004ee9 	.word	0x08004ee9
 8004ea8:	08004ee9 	.word	0x08004ee9
 8004eac:	08004edd 	.word	0x08004edd
 8004eb0:	08004ee9 	.word	0x08004ee9
 8004eb4:	08004ee9 	.word	0x08004ee9
 8004eb8:	08004ee9 	.word	0x08004ee9
 8004ebc:	08004ed7 	.word	0x08004ed7
 8004ec0:	08004ee9 	.word	0x08004ee9
 8004ec4:	08004ee9 	.word	0x08004ee9
 8004ec8:	08004ee9 	.word	0x08004ee9
 8004ecc:	08004ee3 	.word	0x08004ee3
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	77fb      	strb	r3, [r7, #31]
 8004ed4:	e118      	b.n	8005108 <UART_SetConfig+0x348>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	77fb      	strb	r3, [r7, #31]
 8004eda:	e115      	b.n	8005108 <UART_SetConfig+0x348>
 8004edc:	2304      	movs	r3, #4
 8004ede:	77fb      	strb	r3, [r7, #31]
 8004ee0:	e112      	b.n	8005108 <UART_SetConfig+0x348>
 8004ee2:	2308      	movs	r3, #8
 8004ee4:	77fb      	strb	r3, [r7, #31]
 8004ee6:	e10f      	b.n	8005108 <UART_SetConfig+0x348>
 8004ee8:	2310      	movs	r3, #16
 8004eea:	77fb      	strb	r3, [r7, #31]
 8004eec:	e10c      	b.n	8005108 <UART_SetConfig+0x348>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a68      	ldr	r2, [pc, #416]	; (8005094 <UART_SetConfig+0x2d4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d120      	bne.n	8004f3a <UART_SetConfig+0x17a>
 8004ef8:	4b64      	ldr	r3, [pc, #400]	; (800508c <UART_SetConfig+0x2cc>)
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f02:	2b30      	cmp	r3, #48	; 0x30
 8004f04:	d013      	beq.n	8004f2e <UART_SetConfig+0x16e>
 8004f06:	2b30      	cmp	r3, #48	; 0x30
 8004f08:	d814      	bhi.n	8004f34 <UART_SetConfig+0x174>
 8004f0a:	2b20      	cmp	r3, #32
 8004f0c:	d009      	beq.n	8004f22 <UART_SetConfig+0x162>
 8004f0e:	2b20      	cmp	r3, #32
 8004f10:	d810      	bhi.n	8004f34 <UART_SetConfig+0x174>
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d002      	beq.n	8004f1c <UART_SetConfig+0x15c>
 8004f16:	2b10      	cmp	r3, #16
 8004f18:	d006      	beq.n	8004f28 <UART_SetConfig+0x168>
 8004f1a:	e00b      	b.n	8004f34 <UART_SetConfig+0x174>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	77fb      	strb	r3, [r7, #31]
 8004f20:	e0f2      	b.n	8005108 <UART_SetConfig+0x348>
 8004f22:	2302      	movs	r3, #2
 8004f24:	77fb      	strb	r3, [r7, #31]
 8004f26:	e0ef      	b.n	8005108 <UART_SetConfig+0x348>
 8004f28:	2304      	movs	r3, #4
 8004f2a:	77fb      	strb	r3, [r7, #31]
 8004f2c:	e0ec      	b.n	8005108 <UART_SetConfig+0x348>
 8004f2e:	2308      	movs	r3, #8
 8004f30:	77fb      	strb	r3, [r7, #31]
 8004f32:	e0e9      	b.n	8005108 <UART_SetConfig+0x348>
 8004f34:	2310      	movs	r3, #16
 8004f36:	77fb      	strb	r3, [r7, #31]
 8004f38:	e0e6      	b.n	8005108 <UART_SetConfig+0x348>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a56      	ldr	r2, [pc, #344]	; (8005098 <UART_SetConfig+0x2d8>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d120      	bne.n	8004f86 <UART_SetConfig+0x1c6>
 8004f44:	4b51      	ldr	r3, [pc, #324]	; (800508c <UART_SetConfig+0x2cc>)
 8004f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f4e:	2bc0      	cmp	r3, #192	; 0xc0
 8004f50:	d013      	beq.n	8004f7a <UART_SetConfig+0x1ba>
 8004f52:	2bc0      	cmp	r3, #192	; 0xc0
 8004f54:	d814      	bhi.n	8004f80 <UART_SetConfig+0x1c0>
 8004f56:	2b80      	cmp	r3, #128	; 0x80
 8004f58:	d009      	beq.n	8004f6e <UART_SetConfig+0x1ae>
 8004f5a:	2b80      	cmp	r3, #128	; 0x80
 8004f5c:	d810      	bhi.n	8004f80 <UART_SetConfig+0x1c0>
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d002      	beq.n	8004f68 <UART_SetConfig+0x1a8>
 8004f62:	2b40      	cmp	r3, #64	; 0x40
 8004f64:	d006      	beq.n	8004f74 <UART_SetConfig+0x1b4>
 8004f66:	e00b      	b.n	8004f80 <UART_SetConfig+0x1c0>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	77fb      	strb	r3, [r7, #31]
 8004f6c:	e0cc      	b.n	8005108 <UART_SetConfig+0x348>
 8004f6e:	2302      	movs	r3, #2
 8004f70:	77fb      	strb	r3, [r7, #31]
 8004f72:	e0c9      	b.n	8005108 <UART_SetConfig+0x348>
 8004f74:	2304      	movs	r3, #4
 8004f76:	77fb      	strb	r3, [r7, #31]
 8004f78:	e0c6      	b.n	8005108 <UART_SetConfig+0x348>
 8004f7a:	2308      	movs	r3, #8
 8004f7c:	77fb      	strb	r3, [r7, #31]
 8004f7e:	e0c3      	b.n	8005108 <UART_SetConfig+0x348>
 8004f80:	2310      	movs	r3, #16
 8004f82:	77fb      	strb	r3, [r7, #31]
 8004f84:	e0c0      	b.n	8005108 <UART_SetConfig+0x348>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a44      	ldr	r2, [pc, #272]	; (800509c <UART_SetConfig+0x2dc>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d125      	bne.n	8004fdc <UART_SetConfig+0x21c>
 8004f90:	4b3e      	ldr	r3, [pc, #248]	; (800508c <UART_SetConfig+0x2cc>)
 8004f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f9e:	d017      	beq.n	8004fd0 <UART_SetConfig+0x210>
 8004fa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fa4:	d817      	bhi.n	8004fd6 <UART_SetConfig+0x216>
 8004fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004faa:	d00b      	beq.n	8004fc4 <UART_SetConfig+0x204>
 8004fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fb0:	d811      	bhi.n	8004fd6 <UART_SetConfig+0x216>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <UART_SetConfig+0x1fe>
 8004fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fba:	d006      	beq.n	8004fca <UART_SetConfig+0x20a>
 8004fbc:	e00b      	b.n	8004fd6 <UART_SetConfig+0x216>
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	77fb      	strb	r3, [r7, #31]
 8004fc2:	e0a1      	b.n	8005108 <UART_SetConfig+0x348>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	77fb      	strb	r3, [r7, #31]
 8004fc8:	e09e      	b.n	8005108 <UART_SetConfig+0x348>
 8004fca:	2304      	movs	r3, #4
 8004fcc:	77fb      	strb	r3, [r7, #31]
 8004fce:	e09b      	b.n	8005108 <UART_SetConfig+0x348>
 8004fd0:	2308      	movs	r3, #8
 8004fd2:	77fb      	strb	r3, [r7, #31]
 8004fd4:	e098      	b.n	8005108 <UART_SetConfig+0x348>
 8004fd6:	2310      	movs	r3, #16
 8004fd8:	77fb      	strb	r3, [r7, #31]
 8004fda:	e095      	b.n	8005108 <UART_SetConfig+0x348>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a2f      	ldr	r2, [pc, #188]	; (80050a0 <UART_SetConfig+0x2e0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d125      	bne.n	8005032 <UART_SetConfig+0x272>
 8004fe6:	4b29      	ldr	r3, [pc, #164]	; (800508c <UART_SetConfig+0x2cc>)
 8004fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ff0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ff4:	d017      	beq.n	8005026 <UART_SetConfig+0x266>
 8004ff6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ffa:	d817      	bhi.n	800502c <UART_SetConfig+0x26c>
 8004ffc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005000:	d00b      	beq.n	800501a <UART_SetConfig+0x25a>
 8005002:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005006:	d811      	bhi.n	800502c <UART_SetConfig+0x26c>
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <UART_SetConfig+0x254>
 800500c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005010:	d006      	beq.n	8005020 <UART_SetConfig+0x260>
 8005012:	e00b      	b.n	800502c <UART_SetConfig+0x26c>
 8005014:	2301      	movs	r3, #1
 8005016:	77fb      	strb	r3, [r7, #31]
 8005018:	e076      	b.n	8005108 <UART_SetConfig+0x348>
 800501a:	2302      	movs	r3, #2
 800501c:	77fb      	strb	r3, [r7, #31]
 800501e:	e073      	b.n	8005108 <UART_SetConfig+0x348>
 8005020:	2304      	movs	r3, #4
 8005022:	77fb      	strb	r3, [r7, #31]
 8005024:	e070      	b.n	8005108 <UART_SetConfig+0x348>
 8005026:	2308      	movs	r3, #8
 8005028:	77fb      	strb	r3, [r7, #31]
 800502a:	e06d      	b.n	8005108 <UART_SetConfig+0x348>
 800502c:	2310      	movs	r3, #16
 800502e:	77fb      	strb	r3, [r7, #31]
 8005030:	e06a      	b.n	8005108 <UART_SetConfig+0x348>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a1b      	ldr	r2, [pc, #108]	; (80050a4 <UART_SetConfig+0x2e4>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d138      	bne.n	80050ae <UART_SetConfig+0x2ee>
 800503c:	4b13      	ldr	r3, [pc, #76]	; (800508c <UART_SetConfig+0x2cc>)
 800503e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005042:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005046:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800504a:	d017      	beq.n	800507c <UART_SetConfig+0x2bc>
 800504c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005050:	d82a      	bhi.n	80050a8 <UART_SetConfig+0x2e8>
 8005052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005056:	d00b      	beq.n	8005070 <UART_SetConfig+0x2b0>
 8005058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800505c:	d824      	bhi.n	80050a8 <UART_SetConfig+0x2e8>
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <UART_SetConfig+0x2aa>
 8005062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005066:	d006      	beq.n	8005076 <UART_SetConfig+0x2b6>
 8005068:	e01e      	b.n	80050a8 <UART_SetConfig+0x2e8>
 800506a:	2300      	movs	r3, #0
 800506c:	77fb      	strb	r3, [r7, #31]
 800506e:	e04b      	b.n	8005108 <UART_SetConfig+0x348>
 8005070:	2302      	movs	r3, #2
 8005072:	77fb      	strb	r3, [r7, #31]
 8005074:	e048      	b.n	8005108 <UART_SetConfig+0x348>
 8005076:	2304      	movs	r3, #4
 8005078:	77fb      	strb	r3, [r7, #31]
 800507a:	e045      	b.n	8005108 <UART_SetConfig+0x348>
 800507c:	2308      	movs	r3, #8
 800507e:	77fb      	strb	r3, [r7, #31]
 8005080:	e042      	b.n	8005108 <UART_SetConfig+0x348>
 8005082:	bf00      	nop
 8005084:	efff69f3 	.word	0xefff69f3
 8005088:	40011000 	.word	0x40011000
 800508c:	40023800 	.word	0x40023800
 8005090:	40004400 	.word	0x40004400
 8005094:	40004800 	.word	0x40004800
 8005098:	40004c00 	.word	0x40004c00
 800509c:	40005000 	.word	0x40005000
 80050a0:	40011400 	.word	0x40011400
 80050a4:	40007800 	.word	0x40007800
 80050a8:	2310      	movs	r3, #16
 80050aa:	77fb      	strb	r3, [r7, #31]
 80050ac:	e02c      	b.n	8005108 <UART_SetConfig+0x348>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a72      	ldr	r2, [pc, #456]	; (800527c <UART_SetConfig+0x4bc>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d125      	bne.n	8005104 <UART_SetConfig+0x344>
 80050b8:	4b71      	ldr	r3, [pc, #452]	; (8005280 <UART_SetConfig+0x4c0>)
 80050ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80050c2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80050c6:	d017      	beq.n	80050f8 <UART_SetConfig+0x338>
 80050c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80050cc:	d817      	bhi.n	80050fe <UART_SetConfig+0x33e>
 80050ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d2:	d00b      	beq.n	80050ec <UART_SetConfig+0x32c>
 80050d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d8:	d811      	bhi.n	80050fe <UART_SetConfig+0x33e>
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <UART_SetConfig+0x326>
 80050de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050e2:	d006      	beq.n	80050f2 <UART_SetConfig+0x332>
 80050e4:	e00b      	b.n	80050fe <UART_SetConfig+0x33e>
 80050e6:	2300      	movs	r3, #0
 80050e8:	77fb      	strb	r3, [r7, #31]
 80050ea:	e00d      	b.n	8005108 <UART_SetConfig+0x348>
 80050ec:	2302      	movs	r3, #2
 80050ee:	77fb      	strb	r3, [r7, #31]
 80050f0:	e00a      	b.n	8005108 <UART_SetConfig+0x348>
 80050f2:	2304      	movs	r3, #4
 80050f4:	77fb      	strb	r3, [r7, #31]
 80050f6:	e007      	b.n	8005108 <UART_SetConfig+0x348>
 80050f8:	2308      	movs	r3, #8
 80050fa:	77fb      	strb	r3, [r7, #31]
 80050fc:	e004      	b.n	8005108 <UART_SetConfig+0x348>
 80050fe:	2310      	movs	r3, #16
 8005100:	77fb      	strb	r3, [r7, #31]
 8005102:	e001      	b.n	8005108 <UART_SetConfig+0x348>
 8005104:	2310      	movs	r3, #16
 8005106:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005110:	d15b      	bne.n	80051ca <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005112:	7ffb      	ldrb	r3, [r7, #31]
 8005114:	2b08      	cmp	r3, #8
 8005116:	d828      	bhi.n	800516a <UART_SetConfig+0x3aa>
 8005118:	a201      	add	r2, pc, #4	; (adr r2, 8005120 <UART_SetConfig+0x360>)
 800511a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511e:	bf00      	nop
 8005120:	08005145 	.word	0x08005145
 8005124:	0800514d 	.word	0x0800514d
 8005128:	08005155 	.word	0x08005155
 800512c:	0800516b 	.word	0x0800516b
 8005130:	0800515b 	.word	0x0800515b
 8005134:	0800516b 	.word	0x0800516b
 8005138:	0800516b 	.word	0x0800516b
 800513c:	0800516b 	.word	0x0800516b
 8005140:	08005163 	.word	0x08005163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005144:	f7fe fa1e 	bl	8003584 <HAL_RCC_GetPCLK1Freq>
 8005148:	61b8      	str	r0, [r7, #24]
        break;
 800514a:	e013      	b.n	8005174 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800514c:	f7fe fa2e 	bl	80035ac <HAL_RCC_GetPCLK2Freq>
 8005150:	61b8      	str	r0, [r7, #24]
        break;
 8005152:	e00f      	b.n	8005174 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005154:	4b4b      	ldr	r3, [pc, #300]	; (8005284 <UART_SetConfig+0x4c4>)
 8005156:	61bb      	str	r3, [r7, #24]
        break;
 8005158:	e00c      	b.n	8005174 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800515a:	f7fe f901 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 800515e:	61b8      	str	r0, [r7, #24]
        break;
 8005160:	e008      	b.n	8005174 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005166:	61bb      	str	r3, [r7, #24]
        break;
 8005168:	e004      	b.n	8005174 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	77bb      	strb	r3, [r7, #30]
        break;
 8005172:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d074      	beq.n	8005264 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	005a      	lsls	r2, r3, #1
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	085b      	lsrs	r3, r3, #1
 8005184:	441a      	add	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	fbb2 f3f3 	udiv	r3, r2, r3
 800518e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	2b0f      	cmp	r3, #15
 8005194:	d916      	bls.n	80051c4 <UART_SetConfig+0x404>
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800519c:	d212      	bcs.n	80051c4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	f023 030f 	bic.w	r3, r3, #15
 80051a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	085b      	lsrs	r3, r3, #1
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	f003 0307 	and.w	r3, r3, #7
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	89fb      	ldrh	r3, [r7, #14]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	89fa      	ldrh	r2, [r7, #14]
 80051c0:	60da      	str	r2, [r3, #12]
 80051c2:	e04f      	b.n	8005264 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	77bb      	strb	r3, [r7, #30]
 80051c8:	e04c      	b.n	8005264 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051ca:	7ffb      	ldrb	r3, [r7, #31]
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	d828      	bhi.n	8005222 <UART_SetConfig+0x462>
 80051d0:	a201      	add	r2, pc, #4	; (adr r2, 80051d8 <UART_SetConfig+0x418>)
 80051d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d6:	bf00      	nop
 80051d8:	080051fd 	.word	0x080051fd
 80051dc:	08005205 	.word	0x08005205
 80051e0:	0800520d 	.word	0x0800520d
 80051e4:	08005223 	.word	0x08005223
 80051e8:	08005213 	.word	0x08005213
 80051ec:	08005223 	.word	0x08005223
 80051f0:	08005223 	.word	0x08005223
 80051f4:	08005223 	.word	0x08005223
 80051f8:	0800521b 	.word	0x0800521b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051fc:	f7fe f9c2 	bl	8003584 <HAL_RCC_GetPCLK1Freq>
 8005200:	61b8      	str	r0, [r7, #24]
        break;
 8005202:	e013      	b.n	800522c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005204:	f7fe f9d2 	bl	80035ac <HAL_RCC_GetPCLK2Freq>
 8005208:	61b8      	str	r0, [r7, #24]
        break;
 800520a:	e00f      	b.n	800522c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800520c:	4b1d      	ldr	r3, [pc, #116]	; (8005284 <UART_SetConfig+0x4c4>)
 800520e:	61bb      	str	r3, [r7, #24]
        break;
 8005210:	e00c      	b.n	800522c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005212:	f7fe f8a5 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 8005216:	61b8      	str	r0, [r7, #24]
        break;
 8005218:	e008      	b.n	800522c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800521a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800521e:	61bb      	str	r3, [r7, #24]
        break;
 8005220:	e004      	b.n	800522c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	77bb      	strb	r3, [r7, #30]
        break;
 800522a:	bf00      	nop
    }

    if (pclk != 0U)
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d018      	beq.n	8005264 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	085a      	lsrs	r2, r3, #1
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	441a      	add	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	fbb2 f3f3 	udiv	r3, r2, r3
 8005244:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	2b0f      	cmp	r3, #15
 800524a:	d909      	bls.n	8005260 <UART_SetConfig+0x4a0>
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005252:	d205      	bcs.n	8005260 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	b29a      	uxth	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	60da      	str	r2, [r3, #12]
 800525e:	e001      	b.n	8005264 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005270:	7fbb      	ldrb	r3, [r7, #30]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3720      	adds	r7, #32
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	40007c00 	.word	0x40007c00
 8005280:	40023800 	.word	0x40023800
 8005284:	00f42400 	.word	0x00f42400

08005288 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00a      	beq.n	80052f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	f003 0310 	and.w	r3, r3, #16
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00a      	beq.n	800533a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	f003 0320 	and.w	r3, r3, #32
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00a      	beq.n	800535c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005364:	2b00      	cmp	r3, #0
 8005366:	d01a      	beq.n	800539e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005386:	d10a      	bne.n	800539e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	605a      	str	r2, [r3, #4]
  }
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af02      	add	r7, sp, #8
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053dc:	f7fd f880 	bl	80024e0 <HAL_GetTick>
 80053e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0308 	and.w	r3, r3, #8
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d10e      	bne.n	800540e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f82d 	bl	800545e <UART_WaitOnFlagUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e023      	b.n	8005456 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b04      	cmp	r3, #4
 800541a:	d10e      	bne.n	800543a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800541c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f817 	bl	800545e <UART_WaitOnFlagUntilTimeout>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e00d      	b.n	8005456 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2220      	movs	r2, #32
 800543e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2220      	movs	r2, #32
 8005444:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b09c      	sub	sp, #112	; 0x70
 8005462:	af00      	add	r7, sp, #0
 8005464:	60f8      	str	r0, [r7, #12]
 8005466:	60b9      	str	r1, [r7, #8]
 8005468:	603b      	str	r3, [r7, #0]
 800546a:	4613      	mov	r3, r2
 800546c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800546e:	e0a5      	b.n	80055bc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005470:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005476:	f000 80a1 	beq.w	80055bc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800547a:	f7fd f831 	bl	80024e0 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005486:	429a      	cmp	r2, r3
 8005488:	d302      	bcc.n	8005490 <UART_WaitOnFlagUntilTimeout+0x32>
 800548a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800548c:	2b00      	cmp	r3, #0
 800548e:	d13e      	bne.n	800550e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800549e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054a4:	667b      	str	r3, [r7, #100]	; 0x64
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	461a      	mov	r2, r3
 80054ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054b0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054b6:	e841 2300 	strex	r3, r2, [r1]
 80054ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80054bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1e6      	bne.n	8005490 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	3308      	adds	r3, #8
 80054c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054cc:	e853 3f00 	ldrex	r3, [r3]
 80054d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d4:	f023 0301 	bic.w	r3, r3, #1
 80054d8:	663b      	str	r3, [r7, #96]	; 0x60
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3308      	adds	r3, #8
 80054e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80054e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054ea:	e841 2300 	strex	r3, r2, [r1]
 80054ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1e5      	bne.n	80054c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2220      	movs	r2, #32
 80054fa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2220      	movs	r2, #32
 8005500:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e067      	b.n	80055de <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b00      	cmp	r3, #0
 800551a:	d04f      	beq.n	80055bc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005526:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800552a:	d147      	bne.n	80055bc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005534:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553e:	e853 3f00 	ldrex	r3, [r3]
 8005542:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800554a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	461a      	mov	r2, r3
 8005552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005554:	637b      	str	r3, [r7, #52]	; 0x34
 8005556:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005558:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800555a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800555c:	e841 2300 	strex	r3, r2, [r1]
 8005560:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1e6      	bne.n	8005536 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3308      	adds	r3, #8
 800556e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	e853 3f00 	ldrex	r3, [r3]
 8005576:	613b      	str	r3, [r7, #16]
   return(result);
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	f023 0301 	bic.w	r3, r3, #1
 800557e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3308      	adds	r3, #8
 8005586:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005588:	623a      	str	r2, [r7, #32]
 800558a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558c:	69f9      	ldr	r1, [r7, #28]
 800558e:	6a3a      	ldr	r2, [r7, #32]
 8005590:	e841 2300 	strex	r3, r2, [r1]
 8005594:	61bb      	str	r3, [r7, #24]
   return(result);
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e5      	bne.n	8005568 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2220      	movs	r2, #32
 80055a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2220      	movs	r2, #32
 80055a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2220      	movs	r2, #32
 80055ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e010      	b.n	80055de <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	69da      	ldr	r2, [r3, #28]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	4013      	ands	r3, r2
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	bf0c      	ite	eq
 80055cc:	2301      	moveq	r3, #1
 80055ce:	2300      	movne	r3, #0
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	461a      	mov	r2, r3
 80055d4:	79fb      	ldrb	r3, [r7, #7]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	f43f af4a 	beq.w	8005470 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3770      	adds	r7, #112	; 0x70
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
	...

080055e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b097      	sub	sp, #92	; 0x5c
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	4613      	mov	r3, r2
 80055f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	88fa      	ldrh	r2, [r7, #6]
 8005600:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	88fa      	ldrh	r2, [r7, #6]
 8005608:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800561a:	d10e      	bne.n	800563a <UART_Start_Receive_IT+0x52>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d105      	bne.n	8005630 <UART_Start_Receive_IT+0x48>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f240 12ff 	movw	r2, #511	; 0x1ff
 800562a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800562e:	e02d      	b.n	800568c <UART_Start_Receive_IT+0xa4>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	22ff      	movs	r2, #255	; 0xff
 8005634:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005638:	e028      	b.n	800568c <UART_Start_Receive_IT+0xa4>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10d      	bne.n	800565e <UART_Start_Receive_IT+0x76>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d104      	bne.n	8005654 <UART_Start_Receive_IT+0x6c>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	22ff      	movs	r2, #255	; 0xff
 800564e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005652:	e01b      	b.n	800568c <UART_Start_Receive_IT+0xa4>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	227f      	movs	r2, #127	; 0x7f
 8005658:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800565c:	e016      	b.n	800568c <UART_Start_Receive_IT+0xa4>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005666:	d10d      	bne.n	8005684 <UART_Start_Receive_IT+0x9c>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d104      	bne.n	800567a <UART_Start_Receive_IT+0x92>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	227f      	movs	r2, #127	; 0x7f
 8005674:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005678:	e008      	b.n	800568c <UART_Start_Receive_IT+0xa4>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	223f      	movs	r2, #63	; 0x3f
 800567e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005682:	e003      	b.n	800568c <UART_Start_Receive_IT+0xa4>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2222      	movs	r2, #34	; 0x22
 8005698:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3308      	adds	r3, #8
 80056a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ac:	f043 0301 	orr.w	r3, r3, #1
 80056b0:	657b      	str	r3, [r7, #84]	; 0x54
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3308      	adds	r3, #8
 80056b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80056ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80056bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80056c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e5      	bne.n	800569a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d6:	d107      	bne.n	80056e8 <UART_Start_Receive_IT+0x100>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d103      	bne.n	80056e8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4a24      	ldr	r2, [pc, #144]	; (8005774 <UART_Start_Receive_IT+0x18c>)
 80056e4:	665a      	str	r2, [r3, #100]	; 0x64
 80056e6:	e002      	b.n	80056ee <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4a23      	ldr	r2, [pc, #140]	; (8005778 <UART_Start_Receive_IT+0x190>)
 80056ec:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d019      	beq.n	8005732 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005706:	e853 3f00 	ldrex	r3, [r3]
 800570a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	461a      	mov	r2, r3
 800571a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800571c:	637b      	str	r3, [r7, #52]	; 0x34
 800571e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005720:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005722:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005724:	e841 2300 	strex	r3, r2, [r1]
 8005728:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800572a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e6      	bne.n	80056fe <UART_Start_Receive_IT+0x116>
 8005730:	e018      	b.n	8005764 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	e853 3f00 	ldrex	r3, [r3]
 800573e:	613b      	str	r3, [r7, #16]
   return(result);
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f043 0320 	orr.w	r3, r3, #32
 8005746:	653b      	str	r3, [r7, #80]	; 0x50
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	461a      	mov	r2, r3
 800574e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005750:	623b      	str	r3, [r7, #32]
 8005752:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005754:	69f9      	ldr	r1, [r7, #28]
 8005756:	6a3a      	ldr	r2, [r7, #32]
 8005758:	e841 2300 	strex	r3, r2, [r1]
 800575c:	61bb      	str	r3, [r7, #24]
   return(result);
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1e6      	bne.n	8005732 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	375c      	adds	r7, #92	; 0x5c
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	08005b95 	.word	0x08005b95
 8005778:	08005a39 	.word	0x08005a39

0800577c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800577c:	b480      	push	{r7}
 800577e:	b095      	sub	sp, #84	; 0x54
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578c:	e853 3f00 	ldrex	r3, [r3]
 8005790:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005794:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005798:	64fb      	str	r3, [r7, #76]	; 0x4c
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	461a      	mov	r2, r3
 80057a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a2:	643b      	str	r3, [r7, #64]	; 0x40
 80057a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057aa:	e841 2300 	strex	r3, r2, [r1]
 80057ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1e6      	bne.n	8005784 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3308      	adds	r3, #8
 80057bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	e853 3f00 	ldrex	r3, [r3]
 80057c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	f023 0301 	bic.w	r3, r3, #1
 80057cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	3308      	adds	r3, #8
 80057d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057de:	e841 2300 	strex	r3, r2, [r1]
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1e5      	bne.n	80057b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d118      	bne.n	8005824 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	e853 3f00 	ldrex	r3, [r3]
 80057fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	f023 0310 	bic.w	r3, r3, #16
 8005806:	647b      	str	r3, [r7, #68]	; 0x44
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	461a      	mov	r2, r3
 800580e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005810:	61bb      	str	r3, [r7, #24]
 8005812:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005814:	6979      	ldr	r1, [r7, #20]
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	e841 2300 	strex	r3, r2, [r1]
 800581c:	613b      	str	r3, [r7, #16]
   return(result);
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1e6      	bne.n	80057f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2220      	movs	r2, #32
 8005828:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005836:	bf00      	nop
 8005838:	3754      	adds	r7, #84	; 0x54
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b084      	sub	sp, #16
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f7ff fa79 	bl	8004d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005866:	bf00      	nop
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800586e:	b480      	push	{r7}
 8005870:	b08f      	sub	sp, #60	; 0x3c
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800587a:	2b21      	cmp	r3, #33	; 0x21
 800587c:	d14c      	bne.n	8005918 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005884:	b29b      	uxth	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d132      	bne.n	80058f0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	e853 3f00 	ldrex	r3, [r3]
 8005896:	61fb      	str	r3, [r7, #28]
   return(result);
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800589e:	637b      	str	r3, [r7, #52]	; 0x34
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	461a      	mov	r2, r3
 80058a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058aa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058b0:	e841 2300 	strex	r3, r2, [r1]
 80058b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1e6      	bne.n	800588a <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	e853 3f00 	ldrex	r3, [r3]
 80058c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058d0:	633b      	str	r3, [r7, #48]	; 0x30
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	461a      	mov	r2, r3
 80058d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058da:	61bb      	str	r3, [r7, #24]
 80058dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058de:	6979      	ldr	r1, [r7, #20]
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	e841 2300 	strex	r3, r2, [r1]
 80058e6:	613b      	str	r3, [r7, #16]
   return(result);
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1e6      	bne.n	80058bc <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80058ee:	e013      	b.n	8005918 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058f4:	781a      	ldrb	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005900:	1c5a      	adds	r2, r3, #1
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800590c:	b29b      	uxth	r3, r3
 800590e:	3b01      	subs	r3, #1
 8005910:	b29a      	uxth	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005918:	bf00      	nop
 800591a:	373c      	adds	r7, #60	; 0x3c
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005924:	b480      	push	{r7}
 8005926:	b091      	sub	sp, #68	; 0x44
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005930:	2b21      	cmp	r3, #33	; 0x21
 8005932:	d151      	bne.n	80059d8 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800593a:	b29b      	uxth	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d132      	bne.n	80059a6 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005948:	e853 3f00 	ldrex	r3, [r3]
 800594c:	623b      	str	r3, [r7, #32]
   return(result);
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005954:	63bb      	str	r3, [r7, #56]	; 0x38
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	461a      	mov	r2, r3
 800595c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595e:	633b      	str	r3, [r7, #48]	; 0x30
 8005960:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005962:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005966:	e841 2300 	strex	r3, r2, [r1]
 800596a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800596c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1e6      	bne.n	8005940 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	e853 3f00 	ldrex	r3, [r3]
 800597e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005986:	637b      	str	r3, [r7, #52]	; 0x34
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	461a      	mov	r2, r3
 800598e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005990:	61fb      	str	r3, [r7, #28]
 8005992:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005994:	69b9      	ldr	r1, [r7, #24]
 8005996:	69fa      	ldr	r2, [r7, #28]
 8005998:	e841 2300 	strex	r3, r2, [r1]
 800599c:	617b      	str	r3, [r7, #20]
   return(result);
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1e6      	bne.n	8005972 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80059a4:	e018      	b.n	80059d8 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80059ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	461a      	mov	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059ba:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059c0:	1c9a      	adds	r2, r3, #2
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	3b01      	subs	r3, #1
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80059d8:	bf00      	nop
 80059da:	3744      	adds	r7, #68	; 0x44
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	e853 3f00 	ldrex	r3, [r3]
 80059f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a00:	61fb      	str	r3, [r7, #28]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	461a      	mov	r2, r3
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	61bb      	str	r3, [r7, #24]
 8005a0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0e:	6979      	ldr	r1, [r7, #20]
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	e841 2300 	strex	r3, r2, [r1]
 8005a16:	613b      	str	r3, [r7, #16]
   return(result);
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1e6      	bne.n	80059ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2220      	movs	r2, #32
 8005a22:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7ff f98a 	bl	8004d44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a30:	bf00      	nop
 8005a32:	3720      	adds	r7, #32
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b096      	sub	sp, #88	; 0x58
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a46:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a4e:	2b22      	cmp	r3, #34	; 0x22
 8005a50:	f040 8094 	bne.w	8005b7c <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a5e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005a62:	b2d9      	uxtb	r1, r3
 8005a64:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6e:	400a      	ands	r2, r1
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a78:	1c5a      	adds	r2, r3, #1
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	3b01      	subs	r3, #1
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d177      	bne.n	8005b8c <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa4:	e853 3f00 	ldrex	r3, [r3]
 8005aa8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ab0:	653b      	str	r3, [r7, #80]	; 0x50
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aba:	647b      	str	r3, [r7, #68]	; 0x44
 8005abc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ac0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ac2:	e841 2300 	strex	r3, r2, [r1]
 8005ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1e6      	bne.n	8005a9c <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	3308      	adds	r3, #8
 8005ad4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	e853 3f00 	ldrex	r3, [r3]
 8005adc:	623b      	str	r3, [r7, #32]
   return(result);
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	f023 0301 	bic.w	r3, r3, #1
 8005ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	3308      	adds	r3, #8
 8005aec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005aee:	633a      	str	r2, [r7, #48]	; 0x30
 8005af0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005af6:	e841 2300 	strex	r3, r2, [r1]
 8005afa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1e5      	bne.n	8005ace <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2220      	movs	r2, #32
 8005b06:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d12e      	bne.n	8005b74 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	e853 3f00 	ldrex	r3, [r3]
 8005b28:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f023 0310 	bic.w	r3, r3, #16
 8005b30:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	461a      	mov	r2, r3
 8005b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b3a:	61fb      	str	r3, [r7, #28]
 8005b3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	69b9      	ldr	r1, [r7, #24]
 8005b40:	69fa      	ldr	r2, [r7, #28]
 8005b42:	e841 2300 	strex	r3, r2, [r1]
 8005b46:	617b      	str	r3, [r7, #20]
   return(result);
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e6      	bne.n	8005b1c <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	f003 0310 	and.w	r3, r3, #16
 8005b58:	2b10      	cmp	r3, #16
 8005b5a:	d103      	bne.n	8005b64 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2210      	movs	r2, #16
 8005b62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7ff f8fd 	bl	8004d6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b72:	e00b      	b.n	8005b8c <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7fb facd 	bl	8001114 <HAL_UART_RxCpltCallback>
}
 8005b7a:	e007      	b.n	8005b8c <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699a      	ldr	r2, [r3, #24]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0208 	orr.w	r2, r2, #8
 8005b8a:	619a      	str	r2, [r3, #24]
}
 8005b8c:	bf00      	nop
 8005b8e:	3758      	adds	r7, #88	; 0x58
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b096      	sub	sp, #88	; 0x58
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ba2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005baa:	2b22      	cmp	r3, #34	; 0x22
 8005bac:	f040 8094 	bne.w	8005cd8 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bbe:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005bc0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005bc4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005bc8:	4013      	ands	r3, r2
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bce:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd4:	1c9a      	adds	r2, r3, #2
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	3b01      	subs	r3, #1
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d177      	bne.n	8005ce8 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	461a      	mov	r2, r3
 8005c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c16:	643b      	str	r3, [r7, #64]	; 0x40
 8005c18:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e6      	bne.n	8005bf8 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3308      	adds	r3, #8
 8005c30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	e853 3f00 	ldrex	r3, [r3]
 8005c38:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	f023 0301 	bic.w	r3, r3, #1
 8005c40:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3308      	adds	r3, #8
 8005c48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c52:	e841 2300 	strex	r3, r2, [r1]
 8005c56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1e5      	bne.n	8005c2a <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2220      	movs	r2, #32
 8005c62:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d12e      	bne.n	8005cd0 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	e853 3f00 	ldrex	r3, [r3]
 8005c84:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	f023 0310 	bic.w	r3, r3, #16
 8005c8c:	647b      	str	r3, [r7, #68]	; 0x44
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	461a      	mov	r2, r3
 8005c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c96:	61bb      	str	r3, [r7, #24]
 8005c98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9a:	6979      	ldr	r1, [r7, #20]
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	e841 2300 	strex	r3, r2, [r1]
 8005ca2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e6      	bne.n	8005c78 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	f003 0310 	and.w	r3, r3, #16
 8005cb4:	2b10      	cmp	r3, #16
 8005cb6:	d103      	bne.n	8005cc0 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2210      	movs	r2, #16
 8005cbe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7ff f84f 	bl	8004d6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cce:	e00b      	b.n	8005ce8 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7fb fa1f 	bl	8001114 <HAL_UART_RxCpltCallback>
}
 8005cd6:	e007      	b.n	8005ce8 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	699a      	ldr	r2, [r3, #24]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0208 	orr.w	r2, r2, #8
 8005ce6:	619a      	str	r2, [r3, #24]
}
 8005ce8:	bf00      	nop
 8005cea:	3758      	adds	r7, #88	; 0x58
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005cf0:	b480      	push	{r7}
 8005cf2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005cf4:	bf00      	nop
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
	...

08005d00 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d06:	f3ef 8305 	mrs	r3, IPSR
 8005d0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d0c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10f      	bne.n	8005d32 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d12:	f3ef 8310 	mrs	r3, PRIMASK
 8005d16:	607b      	str	r3, [r7, #4]
  return(result);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d105      	bne.n	8005d2a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d1e:	f3ef 8311 	mrs	r3, BASEPRI
 8005d22:	603b      	str	r3, [r7, #0]
  return(result);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d007      	beq.n	8005d3a <osKernelInitialize+0x3a>
 8005d2a:	4b0e      	ldr	r3, [pc, #56]	; (8005d64 <osKernelInitialize+0x64>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d103      	bne.n	8005d3a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005d32:	f06f 0305 	mvn.w	r3, #5
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	e00c      	b.n	8005d54 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005d3a:	4b0a      	ldr	r3, [pc, #40]	; (8005d64 <osKernelInitialize+0x64>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d105      	bne.n	8005d4e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005d42:	4b08      	ldr	r3, [pc, #32]	; (8005d64 <osKernelInitialize+0x64>)
 8005d44:	2201      	movs	r2, #1
 8005d46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	e002      	b.n	8005d54 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d52:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005d54:	68fb      	ldr	r3, [r7, #12]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	20000320 	.word	0x20000320

08005d68 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d6e:	f3ef 8305 	mrs	r3, IPSR
 8005d72:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d74:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10f      	bne.n	8005d9a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d7e:	607b      	str	r3, [r7, #4]
  return(result);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d105      	bne.n	8005d92 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d86:	f3ef 8311 	mrs	r3, BASEPRI
 8005d8a:	603b      	str	r3, [r7, #0]
  return(result);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d007      	beq.n	8005da2 <osKernelStart+0x3a>
 8005d92:	4b0f      	ldr	r3, [pc, #60]	; (8005dd0 <osKernelStart+0x68>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d103      	bne.n	8005da2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8005d9a:	f06f 0305 	mvn.w	r3, #5
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	e010      	b.n	8005dc4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005da2:	4b0b      	ldr	r3, [pc, #44]	; (8005dd0 <osKernelStart+0x68>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d109      	bne.n	8005dbe <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005daa:	f7ff ffa1 	bl	8005cf0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005dae:	4b08      	ldr	r3, [pc, #32]	; (8005dd0 <osKernelStart+0x68>)
 8005db0:	2202      	movs	r2, #2
 8005db2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005db4:	f001 fc3c 	bl	8007630 <vTaskStartScheduler>
      stat = osOK;
 8005db8:	2300      	movs	r3, #0
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	e002      	b.n	8005dc4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	20000320 	.word	0x20000320

08005dd4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b090      	sub	sp, #64	; 0x40
 8005dd8:	af04      	add	r7, sp, #16
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005de0:	2300      	movs	r3, #0
 8005de2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005de4:	f3ef 8305 	mrs	r3, IPSR
 8005de8:	61fb      	str	r3, [r7, #28]
  return(result);
 8005dea:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f040 808f 	bne.w	8005f10 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005df2:	f3ef 8310 	mrs	r3, PRIMASK
 8005df6:	61bb      	str	r3, [r7, #24]
  return(result);
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d105      	bne.n	8005e0a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005dfe:	f3ef 8311 	mrs	r3, BASEPRI
 8005e02:	617b      	str	r3, [r7, #20]
  return(result);
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <osThreadNew+0x3e>
 8005e0a:	4b44      	ldr	r3, [pc, #272]	; (8005f1c <osThreadNew+0x148>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d07e      	beq.n	8005f10 <osThreadNew+0x13c>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d07b      	beq.n	8005f10 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005e18:	2380      	movs	r3, #128	; 0x80
 8005e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005e1c:	2318      	movs	r3, #24
 8005e1e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005e20:	2300      	movs	r3, #0
 8005e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005e24:	f04f 33ff 	mov.w	r3, #4294967295
 8005e28:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d045      	beq.n	8005ebc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d002      	beq.n	8005e3e <osThreadNew+0x6a>
        name = attr->name;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d002      	beq.n	8005e4c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d008      	beq.n	8005e64 <osThreadNew+0x90>
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	2b38      	cmp	r3, #56	; 0x38
 8005e56:	d805      	bhi.n	8005e64 <osThreadNew+0x90>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <osThreadNew+0x94>
        return (NULL);
 8005e64:	2300      	movs	r3, #0
 8005e66:	e054      	b.n	8005f12 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d003      	beq.n	8005e78 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	089b      	lsrs	r3, r3, #2
 8005e76:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00e      	beq.n	8005e9e <osThreadNew+0xca>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	2bbb      	cmp	r3, #187	; 0xbb
 8005e86:	d90a      	bls.n	8005e9e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d006      	beq.n	8005e9e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d002      	beq.n	8005e9e <osThreadNew+0xca>
        mem = 1;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	623b      	str	r3, [r7, #32]
 8005e9c:	e010      	b.n	8005ec0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10c      	bne.n	8005ec0 <osThreadNew+0xec>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d108      	bne.n	8005ec0 <osThreadNew+0xec>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d104      	bne.n	8005ec0 <osThreadNew+0xec>
          mem = 0;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	623b      	str	r3, [r7, #32]
 8005eba:	e001      	b.n	8005ec0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d110      	bne.n	8005ee8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ece:	9202      	str	r2, [sp, #8]
 8005ed0:	9301      	str	r3, [sp, #4]
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f001 f9b1 	bl	8007244 <xTaskCreateStatic>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	613b      	str	r3, [r7, #16]
 8005ee6:	e013      	b.n	8005f10 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d110      	bne.n	8005f10 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	f107 0310 	add.w	r3, r7, #16
 8005ef6:	9301      	str	r3, [sp, #4]
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f001 fa02 	bl	800730a <xTaskCreate>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d001      	beq.n	8005f10 <osThreadNew+0x13c>
          hTask = NULL;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f10:	693b      	ldr	r3, [r7, #16]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3730      	adds	r7, #48	; 0x30
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20000320 	.word	0x20000320

08005f20 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f28:	f3ef 8305 	mrs	r3, IPSR
 8005f2c:	613b      	str	r3, [r7, #16]
  return(result);
 8005f2e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10f      	bne.n	8005f54 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f34:	f3ef 8310 	mrs	r3, PRIMASK
 8005f38:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d105      	bne.n	8005f4c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f40:	f3ef 8311 	mrs	r3, BASEPRI
 8005f44:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d007      	beq.n	8005f5c <osDelay+0x3c>
 8005f4c:	4b0a      	ldr	r3, [pc, #40]	; (8005f78 <osDelay+0x58>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d103      	bne.n	8005f5c <osDelay+0x3c>
    stat = osErrorISR;
 8005f54:	f06f 0305 	mvn.w	r3, #5
 8005f58:	617b      	str	r3, [r7, #20]
 8005f5a:	e007      	b.n	8005f6c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d002      	beq.n	8005f6c <osDelay+0x4c>
      vTaskDelay(ticks);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f001 fb2c 	bl	80075c4 <vTaskDelay>
    }
  }

  return (stat);
 8005f6c:	697b      	ldr	r3, [r7, #20]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3718      	adds	r7, #24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	20000320 	.word	0x20000320

08005f7c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b08c      	sub	sp, #48	; 0x30
 8005f80:	af02      	add	r7, sp, #8
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f8c:	f3ef 8305 	mrs	r3, IPSR
 8005f90:	61bb      	str	r3, [r7, #24]
  return(result);
 8005f92:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f040 8086 	bne.w	80060a6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f9e:	617b      	str	r3, [r7, #20]
  return(result);
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d105      	bne.n	8005fb2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005fa6:	f3ef 8311 	mrs	r3, BASEPRI
 8005faa:	613b      	str	r3, [r7, #16]
  return(result);
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <osSemaphoreNew+0x3e>
 8005fb2:	4b3f      	ldr	r3, [pc, #252]	; (80060b0 <osSemaphoreNew+0x134>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d075      	beq.n	80060a6 <osSemaphoreNew+0x12a>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d072      	beq.n	80060a6 <osSemaphoreNew+0x12a>
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d86e      	bhi.n	80060a6 <osSemaphoreNew+0x12a>
    mem = -1;
 8005fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fcc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d015      	beq.n	8006000 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d006      	beq.n	8005fea <osSemaphoreNew+0x6e>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	2b4f      	cmp	r3, #79	; 0x4f
 8005fe2:	d902      	bls.n	8005fea <osSemaphoreNew+0x6e>
        mem = 1;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	623b      	str	r3, [r7, #32]
 8005fe8:	e00c      	b.n	8006004 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d108      	bne.n	8006004 <osSemaphoreNew+0x88>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d104      	bne.n	8006004 <osSemaphoreNew+0x88>
          mem = 0;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	623b      	str	r3, [r7, #32]
 8005ffe:	e001      	b.n	8006004 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006000:	2300      	movs	r3, #0
 8006002:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600a:	d04c      	beq.n	80060a6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d128      	bne.n	8006064 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d10a      	bne.n	800602e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	2203      	movs	r2, #3
 800601e:	9200      	str	r2, [sp, #0]
 8006020:	2200      	movs	r2, #0
 8006022:	2100      	movs	r1, #0
 8006024:	2001      	movs	r0, #1
 8006026:	f000 fa1d 	bl	8006464 <xQueueGenericCreateStatic>
 800602a:	6278      	str	r0, [r7, #36]	; 0x24
 800602c:	e005      	b.n	800603a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800602e:	2203      	movs	r2, #3
 8006030:	2100      	movs	r1, #0
 8006032:	2001      	movs	r0, #1
 8006034:	f000 fa98 	bl	8006568 <xQueueGenericCreate>
 8006038:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	2b00      	cmp	r3, #0
 800603e:	d022      	beq.n	8006086 <osSemaphoreNew+0x10a>
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d01f      	beq.n	8006086 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006046:	2300      	movs	r3, #0
 8006048:	2200      	movs	r2, #0
 800604a:	2100      	movs	r1, #0
 800604c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800604e:	f000 fb63 	bl	8006718 <xQueueGenericSend>
 8006052:	4603      	mov	r3, r0
 8006054:	2b01      	cmp	r3, #1
 8006056:	d016      	beq.n	8006086 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8006058:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800605a:	f000 ff1d 	bl	8006e98 <vQueueDelete>
            hSemaphore = NULL;
 800605e:	2300      	movs	r3, #0
 8006060:	627b      	str	r3, [r7, #36]	; 0x24
 8006062:	e010      	b.n	8006086 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d108      	bne.n	800607c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	461a      	mov	r2, r3
 8006070:	68b9      	ldr	r1, [r7, #8]
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 fadd 	bl	8006632 <xQueueCreateCountingSemaphoreStatic>
 8006078:	6278      	str	r0, [r7, #36]	; 0x24
 800607a:	e004      	b.n	8006086 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800607c:	68b9      	ldr	r1, [r7, #8]
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f000 fb12 	bl	80066a8 <xQueueCreateCountingSemaphore>
 8006084:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00c      	beq.n	80060a6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <osSemaphoreNew+0x11e>
          name = attr->name;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	61fb      	str	r3, [r7, #28]
 8006098:	e001      	b.n	800609e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800609a:	2300      	movs	r3, #0
 800609c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800609e:	69f9      	ldr	r1, [r7, #28]
 80060a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060a2:	f001 f847 	bl	8007134 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3728      	adds	r7, #40	; 0x28
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	20000320 	.word	0x20000320

080060b4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b08c      	sub	sp, #48	; 0x30
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80060c0:	2300      	movs	r3, #0
 80060c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060c4:	f3ef 8305 	mrs	r3, IPSR
 80060c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80060ca:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d16f      	bne.n	80061b0 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060d0:	f3ef 8310 	mrs	r3, PRIMASK
 80060d4:	617b      	str	r3, [r7, #20]
  return(result);
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d105      	bne.n	80060e8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060dc:	f3ef 8311 	mrs	r3, BASEPRI
 80060e0:	613b      	str	r3, [r7, #16]
  return(result);
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d003      	beq.n	80060f0 <osMessageQueueNew+0x3c>
 80060e8:	4b34      	ldr	r3, [pc, #208]	; (80061bc <osMessageQueueNew+0x108>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d05f      	beq.n	80061b0 <osMessageQueueNew+0xfc>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d05c      	beq.n	80061b0 <osMessageQueueNew+0xfc>
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d059      	beq.n	80061b0 <osMessageQueueNew+0xfc>
    mem = -1;
 80060fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006100:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d029      	beq.n	800615c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d012      	beq.n	8006136 <osMessageQueueNew+0x82>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	2b4f      	cmp	r3, #79	; 0x4f
 8006116:	d90e      	bls.n	8006136 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00a      	beq.n	8006136 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	695a      	ldr	r2, [r3, #20]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	68b9      	ldr	r1, [r7, #8]
 8006128:	fb01 f303 	mul.w	r3, r1, r3
 800612c:	429a      	cmp	r2, r3
 800612e:	d302      	bcc.n	8006136 <osMessageQueueNew+0x82>
        mem = 1;
 8006130:	2301      	movs	r3, #1
 8006132:	623b      	str	r3, [r7, #32]
 8006134:	e014      	b.n	8006160 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d110      	bne.n	8006160 <osMessageQueueNew+0xac>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10c      	bne.n	8006160 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800614a:	2b00      	cmp	r3, #0
 800614c:	d108      	bne.n	8006160 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d104      	bne.n	8006160 <osMessageQueueNew+0xac>
          mem = 0;
 8006156:	2300      	movs	r3, #0
 8006158:	623b      	str	r3, [r7, #32]
 800615a:	e001      	b.n	8006160 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800615c:	2300      	movs	r3, #0
 800615e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006160:	6a3b      	ldr	r3, [r7, #32]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d10b      	bne.n	800617e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691a      	ldr	r2, [r3, #16]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	2100      	movs	r1, #0
 8006170:	9100      	str	r1, [sp, #0]
 8006172:	68b9      	ldr	r1, [r7, #8]
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f000 f975 	bl	8006464 <xQueueGenericCreateStatic>
 800617a:	6278      	str	r0, [r7, #36]	; 0x24
 800617c:	e008      	b.n	8006190 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800617e:	6a3b      	ldr	r3, [r7, #32]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d105      	bne.n	8006190 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006184:	2200      	movs	r2, #0
 8006186:	68b9      	ldr	r1, [r7, #8]
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f000 f9ed 	bl	8006568 <xQueueGenericCreate>
 800618e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00c      	beq.n	80061b0 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d003      	beq.n	80061a4 <osMessageQueueNew+0xf0>
        name = attr->name;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	61fb      	str	r3, [r7, #28]
 80061a2:	e001      	b.n	80061a8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80061a4:	2300      	movs	r3, #0
 80061a6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80061a8:	69f9      	ldr	r1, [r7, #28]
 80061aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061ac:	f000 ffc2 	bl	8007134 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3728      	adds	r7, #40	; 0x28
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	20000320 	.word	0x20000320

080061c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4a07      	ldr	r2, [pc, #28]	; (80061ec <vApplicationGetIdleTaskMemory+0x2c>)
 80061d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	4a06      	ldr	r2, [pc, #24]	; (80061f0 <vApplicationGetIdleTaskMemory+0x30>)
 80061d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2280      	movs	r2, #128	; 0x80
 80061dc:	601a      	str	r2, [r3, #0]
}
 80061de:	bf00      	nop
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	20000324 	.word	0x20000324
 80061f0:	200003e0 	.word	0x200003e0

080061f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4a07      	ldr	r2, [pc, #28]	; (8006220 <vApplicationGetTimerTaskMemory+0x2c>)
 8006204:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	4a06      	ldr	r2, [pc, #24]	; (8006224 <vApplicationGetTimerTaskMemory+0x30>)
 800620a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006212:	601a      	str	r2, [r3, #0]
}
 8006214:	bf00      	nop
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	200005e0 	.word	0x200005e0
 8006224:	2000069c 	.word	0x2000069c

08006228 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f103 0208 	add.w	r2, r3, #8
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f04f 32ff 	mov.w	r2, #4294967295
 8006240:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f103 0208 	add.w	r2, r3, #8
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f103 0208 	add.w	r2, r3, #8
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006282:	b480      	push	{r7}
 8006284:	b085      	sub	sp, #20
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	689a      	ldr	r2, [r3, #8]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	1c5a      	adds	r2, r3, #1
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	601a      	str	r2, [r3, #0]
}
 80062be:	bf00      	nop
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062ca:	b480      	push	{r7}
 80062cc:	b085      	sub	sp, #20
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e0:	d103      	bne.n	80062ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	e00c      	b.n	8006304 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3308      	adds	r3, #8
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	e002      	b.n	80062f8 <vListInsert+0x2e>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	60fb      	str	r3, [r7, #12]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	429a      	cmp	r2, r3
 8006302:	d2f6      	bcs.n	80062f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	601a      	str	r2, [r3, #0]
}
 8006330:	bf00      	nop
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6892      	ldr	r2, [r2, #8]
 8006352:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6852      	ldr	r2, [r2, #4]
 800635c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	429a      	cmp	r2, r3
 8006366:	d103      	bne.n	8006370 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	1e5a      	subs	r2, r3, #1
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10c      	bne.n	80063be <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a8:	b672      	cpsid	i
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	b662      	cpsie	i
 80063b8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80063ba:	bf00      	nop
 80063bc:	e7fe      	b.n	80063bc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80063be:	f002 fd75 	bl	8008eac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ca:	68f9      	ldr	r1, [r7, #12]
 80063cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063ce:	fb01 f303 	mul.w	r3, r1, r3
 80063d2:	441a      	add	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ee:	3b01      	subs	r3, #1
 80063f0:	68f9      	ldr	r1, [r7, #12]
 80063f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063f4:	fb01 f303 	mul.w	r3, r1, r3
 80063f8:	441a      	add	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	22ff      	movs	r2, #255	; 0xff
 8006402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	22ff      	movs	r2, #255	; 0xff
 800640a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d114      	bne.n	800643e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d01a      	beq.n	8006452 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	3310      	adds	r3, #16
 8006420:	4618      	mov	r0, r3
 8006422:	f001 fbbf 	bl	8007ba4 <xTaskRemoveFromEventList>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d012      	beq.n	8006452 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800642c:	4b0c      	ldr	r3, [pc, #48]	; (8006460 <xQueueGenericReset+0xd0>)
 800642e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	e009      	b.n	8006452 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	3310      	adds	r3, #16
 8006442:	4618      	mov	r0, r3
 8006444:	f7ff fef0 	bl	8006228 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	3324      	adds	r3, #36	; 0x24
 800644c:	4618      	mov	r0, r3
 800644e:	f7ff feeb 	bl	8006228 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006452:	f002 fd5f 	bl	8008f14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006456:	2301      	movs	r3, #1
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	e000ed04 	.word	0xe000ed04

08006464 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006464:	b580      	push	{r7, lr}
 8006466:	b08e      	sub	sp, #56	; 0x38
 8006468:	af02      	add	r7, sp, #8
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
 8006470:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10c      	bne.n	8006492 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647c:	b672      	cpsid	i
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	b662      	cpsie	i
 800648c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800648e:	bf00      	nop
 8006490:	e7fe      	b.n	8006490 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10c      	bne.n	80064b2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649c:	b672      	cpsid	i
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	b662      	cpsie	i
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064ae:	bf00      	nop
 80064b0:	e7fe      	b.n	80064b0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <xQueueGenericCreateStatic+0x5a>
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <xQueueGenericCreateStatic+0x5e>
 80064be:	2301      	movs	r3, #1
 80064c0:	e000      	b.n	80064c4 <xQueueGenericCreateStatic+0x60>
 80064c2:	2300      	movs	r3, #0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10c      	bne.n	80064e2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80064c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064cc:	b672      	cpsid	i
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	b662      	cpsie	i
 80064dc:	623b      	str	r3, [r7, #32]
}
 80064de:	bf00      	nop
 80064e0:	e7fe      	b.n	80064e0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d102      	bne.n	80064ee <xQueueGenericCreateStatic+0x8a>
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <xQueueGenericCreateStatic+0x8e>
 80064ee:	2301      	movs	r3, #1
 80064f0:	e000      	b.n	80064f4 <xQueueGenericCreateStatic+0x90>
 80064f2:	2300      	movs	r3, #0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10c      	bne.n	8006512 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80064f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fc:	b672      	cpsid	i
 80064fe:	f383 8811 	msr	BASEPRI, r3
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	f3bf 8f4f 	dsb	sy
 800650a:	b662      	cpsie	i
 800650c:	61fb      	str	r3, [r7, #28]
}
 800650e:	bf00      	nop
 8006510:	e7fe      	b.n	8006510 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006512:	2350      	movs	r3, #80	; 0x50
 8006514:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	2b50      	cmp	r3, #80	; 0x50
 800651a:	d00c      	beq.n	8006536 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006520:	b672      	cpsid	i
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	b662      	cpsie	i
 8006530:	61bb      	str	r3, [r7, #24]
}
 8006532:	bf00      	nop
 8006534:	e7fe      	b.n	8006534 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006536:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800653c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00d      	beq.n	800655e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006544:	2201      	movs	r2, #1
 8006546:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800654a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800654e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	4613      	mov	r3, r2
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	68b9      	ldr	r1, [r7, #8]
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f000 f847 	bl	80065ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800655e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006560:	4618      	mov	r0, r3
 8006562:	3730      	adds	r7, #48	; 0x30
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006568:	b580      	push	{r7, lr}
 800656a:	b08a      	sub	sp, #40	; 0x28
 800656c:	af02      	add	r7, sp, #8
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	4613      	mov	r3, r2
 8006574:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10c      	bne.n	8006596 <xQueueGenericCreate+0x2e>
	__asm volatile
 800657c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006580:	b672      	cpsid	i
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	b662      	cpsie	i
 8006590:	613b      	str	r3, [r7, #16]
}
 8006592:	bf00      	nop
 8006594:	e7fe      	b.n	8006594 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d102      	bne.n	80065a2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800659c:	2300      	movs	r3, #0
 800659e:	61fb      	str	r3, [r7, #28]
 80065a0:	e004      	b.n	80065ac <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	fb02 f303 	mul.w	r3, r2, r3
 80065aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	3350      	adds	r3, #80	; 0x50
 80065b0:	4618      	mov	r0, r3
 80065b2:	f002 fda7 	bl	8009104 <pvPortMalloc>
 80065b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d011      	beq.n	80065e2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	3350      	adds	r3, #80	; 0x50
 80065c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065d0:	79fa      	ldrb	r2, [r7, #7]
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	4613      	mov	r3, r2
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	68b9      	ldr	r1, [r7, #8]
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 f805 	bl	80065ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80065e2:	69bb      	ldr	r3, [r7, #24]
	}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3720      	adds	r7, #32
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
 80065f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d103      	bne.n	8006608 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	e002      	b.n	800660e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800661a:	2101      	movs	r1, #1
 800661c:	69b8      	ldr	r0, [r7, #24]
 800661e:	f7ff feb7 	bl	8006390 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	78fa      	ldrb	r2, [r7, #3]
 8006626:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800662a:	bf00      	nop
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006632:	b580      	push	{r7, lr}
 8006634:	b08a      	sub	sp, #40	; 0x28
 8006636:	af02      	add	r7, sp, #8
 8006638:	60f8      	str	r0, [r7, #12]
 800663a:	60b9      	str	r1, [r7, #8]
 800663c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10c      	bne.n	800665e <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	b672      	cpsid	i
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	b662      	cpsie	i
 8006658:	61bb      	str	r3, [r7, #24]
}
 800665a:	bf00      	nop
 800665c:	e7fe      	b.n	800665c <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	429a      	cmp	r2, r3
 8006664:	d90c      	bls.n	8006680 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8006666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666a:	b672      	cpsid	i
 800666c:	f383 8811 	msr	BASEPRI, r3
 8006670:	f3bf 8f6f 	isb	sy
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	b662      	cpsie	i
 800667a:	617b      	str	r3, [r7, #20]
}
 800667c:	bf00      	nop
 800667e:	e7fe      	b.n	800667e <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006680:	2302      	movs	r3, #2
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	2100      	movs	r1, #0
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f7ff feea 	bl	8006464 <xQueueGenericCreateStatic>
 8006690:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d002      	beq.n	800669e <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800669e:	69fb      	ldr	r3, [r7, #28]
	}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3720      	adds	r7, #32
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10c      	bne.n	80066d2 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 80066b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066bc:	b672      	cpsid	i
 80066be:	f383 8811 	msr	BASEPRI, r3
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	b662      	cpsie	i
 80066cc:	613b      	str	r3, [r7, #16]
}
 80066ce:	bf00      	nop
 80066d0:	e7fe      	b.n	80066d0 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d90c      	bls.n	80066f4 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 80066da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066de:	b672      	cpsid	i
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	b662      	cpsie	i
 80066ee:	60fb      	str	r3, [r7, #12]
}
 80066f0:	bf00      	nop
 80066f2:	e7fe      	b.n	80066f2 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80066f4:	2202      	movs	r2, #2
 80066f6:	2100      	movs	r1, #0
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f7ff ff35 	bl	8006568 <xQueueGenericCreate>
 80066fe:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d002      	beq.n	800670c <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800670c:	697b      	ldr	r3, [r7, #20]
	}
 800670e:	4618      	mov	r0, r3
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
	...

08006718 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b08e      	sub	sp, #56	; 0x38
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
 8006724:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006726:	2300      	movs	r3, #0
 8006728:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800672e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10c      	bne.n	800674e <xQueueGenericSend+0x36>
	__asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006738:	b672      	cpsid	i
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	b662      	cpsie	i
 8006748:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800674a:	bf00      	nop
 800674c:	e7fe      	b.n	800674c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d103      	bne.n	800675c <xQueueGenericSend+0x44>
 8006754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <xQueueGenericSend+0x48>
 800675c:	2301      	movs	r3, #1
 800675e:	e000      	b.n	8006762 <xQueueGenericSend+0x4a>
 8006760:	2300      	movs	r3, #0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10c      	bne.n	8006780 <xQueueGenericSend+0x68>
	__asm volatile
 8006766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676a:	b672      	cpsid	i
 800676c:	f383 8811 	msr	BASEPRI, r3
 8006770:	f3bf 8f6f 	isb	sy
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	b662      	cpsie	i
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800677c:	bf00      	nop
 800677e:	e7fe      	b.n	800677e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	2b02      	cmp	r3, #2
 8006784:	d103      	bne.n	800678e <xQueueGenericSend+0x76>
 8006786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678a:	2b01      	cmp	r3, #1
 800678c:	d101      	bne.n	8006792 <xQueueGenericSend+0x7a>
 800678e:	2301      	movs	r3, #1
 8006790:	e000      	b.n	8006794 <xQueueGenericSend+0x7c>
 8006792:	2300      	movs	r3, #0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10c      	bne.n	80067b2 <xQueueGenericSend+0x9a>
	__asm volatile
 8006798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679c:	b672      	cpsid	i
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	b662      	cpsie	i
 80067ac:	623b      	str	r3, [r7, #32]
}
 80067ae:	bf00      	nop
 80067b0:	e7fe      	b.n	80067b0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067b2:	f001 fbc1 	bl	8007f38 <xTaskGetSchedulerState>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d102      	bne.n	80067c2 <xQueueGenericSend+0xaa>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <xQueueGenericSend+0xae>
 80067c2:	2301      	movs	r3, #1
 80067c4:	e000      	b.n	80067c8 <xQueueGenericSend+0xb0>
 80067c6:	2300      	movs	r3, #0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10c      	bne.n	80067e6 <xQueueGenericSend+0xce>
	__asm volatile
 80067cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d0:	b672      	cpsid	i
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	b662      	cpsie	i
 80067e0:	61fb      	str	r3, [r7, #28]
}
 80067e2:	bf00      	nop
 80067e4:	e7fe      	b.n	80067e4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067e6:	f002 fb61 	bl	8008eac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d302      	bcc.n	80067fc <xQueueGenericSend+0xe4>
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d129      	bne.n	8006850 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	68b9      	ldr	r1, [r7, #8]
 8006800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006802:	f000 fb86 	bl	8006f12 <prvCopyDataToQueue>
 8006806:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680c:	2b00      	cmp	r3, #0
 800680e:	d010      	beq.n	8006832 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006812:	3324      	adds	r3, #36	; 0x24
 8006814:	4618      	mov	r0, r3
 8006816:	f001 f9c5 	bl	8007ba4 <xTaskRemoveFromEventList>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d013      	beq.n	8006848 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006820:	4b3f      	ldr	r3, [pc, #252]	; (8006920 <xQueueGenericSend+0x208>)
 8006822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	e00a      	b.n	8006848 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006834:	2b00      	cmp	r3, #0
 8006836:	d007      	beq.n	8006848 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006838:	4b39      	ldr	r3, [pc, #228]	; (8006920 <xQueueGenericSend+0x208>)
 800683a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800683e:	601a      	str	r2, [r3, #0]
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006848:	f002 fb64 	bl	8008f14 <vPortExitCritical>
				return pdPASS;
 800684c:	2301      	movs	r3, #1
 800684e:	e063      	b.n	8006918 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d103      	bne.n	800685e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006856:	f002 fb5d 	bl	8008f14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800685a:	2300      	movs	r3, #0
 800685c:	e05c      	b.n	8006918 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800685e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006860:	2b00      	cmp	r3, #0
 8006862:	d106      	bne.n	8006872 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006864:	f107 0314 	add.w	r3, r7, #20
 8006868:	4618      	mov	r0, r3
 800686a:	f001 fa01 	bl	8007c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800686e:	2301      	movs	r3, #1
 8006870:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006872:	f002 fb4f 	bl	8008f14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006876:	f000 ff4f 	bl	8007718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800687a:	f002 fb17 	bl	8008eac <vPortEnterCritical>
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006884:	b25b      	sxtb	r3, r3
 8006886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688a:	d103      	bne.n	8006894 <xQueueGenericSend+0x17c>
 800688c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006896:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800689a:	b25b      	sxtb	r3, r3
 800689c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a0:	d103      	bne.n	80068aa <xQueueGenericSend+0x192>
 80068a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068aa:	f002 fb33 	bl	8008f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068ae:	1d3a      	adds	r2, r7, #4
 80068b0:	f107 0314 	add.w	r3, r7, #20
 80068b4:	4611      	mov	r1, r2
 80068b6:	4618      	mov	r0, r3
 80068b8:	f001 f9f0 	bl	8007c9c <xTaskCheckForTimeOut>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d124      	bne.n	800690c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80068c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068c4:	f000 fc1d 	bl	8007102 <prvIsQueueFull>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d018      	beq.n	8006900 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80068ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d0:	3310      	adds	r3, #16
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	4611      	mov	r1, r2
 80068d6:	4618      	mov	r0, r3
 80068d8:	f001 f910 	bl	8007afc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80068dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068de:	f000 fba8 	bl	8007032 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80068e2:	f000 ff27 	bl	8007734 <xTaskResumeAll>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f47f af7c 	bne.w	80067e6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80068ee:	4b0c      	ldr	r3, [pc, #48]	; (8006920 <xQueueGenericSend+0x208>)
 80068f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068f4:	601a      	str	r2, [r3, #0]
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	e772      	b.n	80067e6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006900:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006902:	f000 fb96 	bl	8007032 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006906:	f000 ff15 	bl	8007734 <xTaskResumeAll>
 800690a:	e76c      	b.n	80067e6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800690c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800690e:	f000 fb90 	bl	8007032 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006912:	f000 ff0f 	bl	8007734 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006916:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006918:	4618      	mov	r0, r3
 800691a:	3738      	adds	r7, #56	; 0x38
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	e000ed04 	.word	0xe000ed04

08006924 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b08e      	sub	sp, #56	; 0x38
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10c      	bne.n	8006956 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006940:	b672      	cpsid	i
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	b662      	cpsie	i
 8006950:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006952:	bf00      	nop
 8006954:	e7fe      	b.n	8006954 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d103      	bne.n	8006964 <xQueueGenericSendFromISR+0x40>
 800695c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <xQueueGenericSendFromISR+0x44>
 8006964:	2301      	movs	r3, #1
 8006966:	e000      	b.n	800696a <xQueueGenericSendFromISR+0x46>
 8006968:	2300      	movs	r3, #0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10c      	bne.n	8006988 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006972:	b672      	cpsid	i
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	b662      	cpsie	i
 8006982:	623b      	str	r3, [r7, #32]
}
 8006984:	bf00      	nop
 8006986:	e7fe      	b.n	8006986 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	2b02      	cmp	r3, #2
 800698c:	d103      	bne.n	8006996 <xQueueGenericSendFromISR+0x72>
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006992:	2b01      	cmp	r3, #1
 8006994:	d101      	bne.n	800699a <xQueueGenericSendFromISR+0x76>
 8006996:	2301      	movs	r3, #1
 8006998:	e000      	b.n	800699c <xQueueGenericSendFromISR+0x78>
 800699a:	2300      	movs	r3, #0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10c      	bne.n	80069ba <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a4:	b672      	cpsid	i
 80069a6:	f383 8811 	msr	BASEPRI, r3
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	b662      	cpsie	i
 80069b4:	61fb      	str	r3, [r7, #28]
}
 80069b6:	bf00      	nop
 80069b8:	e7fe      	b.n	80069b8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069ba:	f002 fb5f 	bl	800907c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80069be:	f3ef 8211 	mrs	r2, BASEPRI
 80069c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c6:	b672      	cpsid	i
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	b662      	cpsie	i
 80069d6:	61ba      	str	r2, [r7, #24]
 80069d8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80069da:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d302      	bcc.n	80069f0 <xQueueGenericSendFromISR+0xcc>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d12c      	bne.n	8006a4a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80069f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	68b9      	ldr	r1, [r7, #8]
 80069fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a00:	f000 fa87 	bl	8006f12 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a04:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0c:	d112      	bne.n	8006a34 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d016      	beq.n	8006a44 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	3324      	adds	r3, #36	; 0x24
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f001 f8c2 	bl	8007ba4 <xTaskRemoveFromEventList>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00e      	beq.n	8006a44 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00b      	beq.n	8006a44 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	601a      	str	r2, [r3, #0]
 8006a32:	e007      	b.n	8006a44 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a38:	3301      	adds	r3, #1
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	b25a      	sxtb	r2, r3
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006a44:	2301      	movs	r3, #1
 8006a46:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006a48:	e001      	b.n	8006a4e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a50:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006a58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3738      	adds	r7, #56	; 0x38
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b08c      	sub	sp, #48	; 0x30
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006a70:	2300      	movs	r3, #0
 8006a72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10c      	bne.n	8006a98 <xQueueReceive+0x34>
	__asm volatile
 8006a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a82:	b672      	cpsid	i
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	b662      	cpsie	i
 8006a92:	623b      	str	r3, [r7, #32]
}
 8006a94:	bf00      	nop
 8006a96:	e7fe      	b.n	8006a96 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d103      	bne.n	8006aa6 <xQueueReceive+0x42>
 8006a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <xQueueReceive+0x46>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e000      	b.n	8006aac <xQueueReceive+0x48>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10c      	bne.n	8006aca <xQueueReceive+0x66>
	__asm volatile
 8006ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab4:	b672      	cpsid	i
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	b662      	cpsie	i
 8006ac4:	61fb      	str	r3, [r7, #28]
}
 8006ac6:	bf00      	nop
 8006ac8:	e7fe      	b.n	8006ac8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006aca:	f001 fa35 	bl	8007f38 <xTaskGetSchedulerState>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d102      	bne.n	8006ada <xQueueReceive+0x76>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <xQueueReceive+0x7a>
 8006ada:	2301      	movs	r3, #1
 8006adc:	e000      	b.n	8006ae0 <xQueueReceive+0x7c>
 8006ade:	2300      	movs	r3, #0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10c      	bne.n	8006afe <xQueueReceive+0x9a>
	__asm volatile
 8006ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae8:	b672      	cpsid	i
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	b662      	cpsie	i
 8006af8:	61bb      	str	r3, [r7, #24]
}
 8006afa:	bf00      	nop
 8006afc:	e7fe      	b.n	8006afc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006afe:	f002 f9d5 	bl	8008eac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b06:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d01f      	beq.n	8006b4e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b0e:	68b9      	ldr	r1, [r7, #8]
 8006b10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b12:	f000 fa68 	bl	8006fe6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b18:	1e5a      	subs	r2, r3, #1
 8006b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00f      	beq.n	8006b46 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b28:	3310      	adds	r3, #16
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f001 f83a 	bl	8007ba4 <xTaskRemoveFromEventList>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d007      	beq.n	8006b46 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b36:	4b3d      	ldr	r3, [pc, #244]	; (8006c2c <xQueueReceive+0x1c8>)
 8006b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b46:	f002 f9e5 	bl	8008f14 <vPortExitCritical>
				return pdPASS;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e069      	b.n	8006c22 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d103      	bne.n	8006b5c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b54:	f002 f9de 	bl	8008f14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	e062      	b.n	8006c22 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d106      	bne.n	8006b70 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b62:	f107 0310 	add.w	r3, r7, #16
 8006b66:	4618      	mov	r0, r3
 8006b68:	f001 f882 	bl	8007c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b70:	f002 f9d0 	bl	8008f14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b74:	f000 fdd0 	bl	8007718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b78:	f002 f998 	bl	8008eac <vPortEnterCritical>
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b82:	b25b      	sxtb	r3, r3
 8006b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b88:	d103      	bne.n	8006b92 <xQueueReceive+0x12e>
 8006b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b98:	b25b      	sxtb	r3, r3
 8006b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9e:	d103      	bne.n	8006ba8 <xQueueReceive+0x144>
 8006ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ba8:	f002 f9b4 	bl	8008f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bac:	1d3a      	adds	r2, r7, #4
 8006bae:	f107 0310 	add.w	r3, r7, #16
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f001 f871 	bl	8007c9c <xTaskCheckForTimeOut>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d123      	bne.n	8006c08 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bc2:	f000 fa88 	bl	80070d6 <prvIsQueueEmpty>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d017      	beq.n	8006bfc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bce:	3324      	adds	r3, #36	; 0x24
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 ff91 	bl	8007afc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006bda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bdc:	f000 fa29 	bl	8007032 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006be0:	f000 fda8 	bl	8007734 <xTaskResumeAll>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d189      	bne.n	8006afe <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8006bea:	4b10      	ldr	r3, [pc, #64]	; (8006c2c <xQueueReceive+0x1c8>)
 8006bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	f3bf 8f4f 	dsb	sy
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	e780      	b.n	8006afe <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bfe:	f000 fa18 	bl	8007032 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c02:	f000 fd97 	bl	8007734 <xTaskResumeAll>
 8006c06:	e77a      	b.n	8006afe <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c0a:	f000 fa12 	bl	8007032 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c0e:	f000 fd91 	bl	8007734 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c14:	f000 fa5f 	bl	80070d6 <prvIsQueueEmpty>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f43f af6f 	beq.w	8006afe <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3730      	adds	r7, #48	; 0x30
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	e000ed04 	.word	0xe000ed04

08006c30 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b08e      	sub	sp, #56	; 0x38
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006c42:	2300      	movs	r3, #0
 8006c44:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10c      	bne.n	8006c66 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8006c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c50:	b672      	cpsid	i
 8006c52:	f383 8811 	msr	BASEPRI, r3
 8006c56:	f3bf 8f6f 	isb	sy
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	b662      	cpsie	i
 8006c60:	623b      	str	r3, [r7, #32]
}
 8006c62:	bf00      	nop
 8006c64:	e7fe      	b.n	8006c64 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00c      	beq.n	8006c88 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8006c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c72:	b672      	cpsid	i
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	b662      	cpsie	i
 8006c82:	61fb      	str	r3, [r7, #28]
}
 8006c84:	bf00      	nop
 8006c86:	e7fe      	b.n	8006c86 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c88:	f001 f956 	bl	8007f38 <xTaskGetSchedulerState>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d102      	bne.n	8006c98 <xQueueSemaphoreTake+0x68>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <xQueueSemaphoreTake+0x6c>
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e000      	b.n	8006c9e <xQueueSemaphoreTake+0x6e>
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10c      	bne.n	8006cbc <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8006ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca6:	b672      	cpsid	i
 8006ca8:	f383 8811 	msr	BASEPRI, r3
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	b662      	cpsie	i
 8006cb6:	61bb      	str	r3, [r7, #24]
}
 8006cb8:	bf00      	nop
 8006cba:	e7fe      	b.n	8006cba <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cbc:	f002 f8f6 	bl	8008eac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d024      	beq.n	8006d16 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cce:	1e5a      	subs	r2, r3, #1
 8006cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d104      	bne.n	8006ce6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006cdc:	f001 faaa 	bl	8008234 <pvTaskIncrementMutexHeldCount>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00f      	beq.n	8006d0e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf0:	3310      	adds	r3, #16
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 ff56 	bl	8007ba4 <xTaskRemoveFromEventList>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d007      	beq.n	8006d0e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006cfe:	4b55      	ldr	r3, [pc, #340]	; (8006e54 <xQueueSemaphoreTake+0x224>)
 8006d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d0e:	f002 f901 	bl	8008f14 <vPortExitCritical>
				return pdPASS;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e099      	b.n	8006e4a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d113      	bne.n	8006d44 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00c      	beq.n	8006d3c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8006d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d26:	b672      	cpsid	i
 8006d28:	f383 8811 	msr	BASEPRI, r3
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	b662      	cpsie	i
 8006d36:	617b      	str	r3, [r7, #20]
}
 8006d38:	bf00      	nop
 8006d3a:	e7fe      	b.n	8006d3a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006d3c:	f002 f8ea 	bl	8008f14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d40:	2300      	movs	r3, #0
 8006d42:	e082      	b.n	8006e4a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d106      	bne.n	8006d58 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d4a:	f107 030c 	add.w	r3, r7, #12
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 ff8e 	bl	8007c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d54:	2301      	movs	r3, #1
 8006d56:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d58:	f002 f8dc 	bl	8008f14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d5c:	f000 fcdc 	bl	8007718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d60:	f002 f8a4 	bl	8008eac <vPortEnterCritical>
 8006d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d6a:	b25b      	sxtb	r3, r3
 8006d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d70:	d103      	bne.n	8006d7a <xQueueSemaphoreTake+0x14a>
 8006d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d80:	b25b      	sxtb	r3, r3
 8006d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d86:	d103      	bne.n	8006d90 <xQueueSemaphoreTake+0x160>
 8006d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d90:	f002 f8c0 	bl	8008f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d94:	463a      	mov	r2, r7
 8006d96:	f107 030c 	add.w	r3, r7, #12
 8006d9a:	4611      	mov	r1, r2
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 ff7d 	bl	8007c9c <xTaskCheckForTimeOut>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d132      	bne.n	8006e0e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006da8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006daa:	f000 f994 	bl	80070d6 <prvIsQueueEmpty>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d026      	beq.n	8006e02 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d109      	bne.n	8006dd0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8006dbc:	f002 f876 	bl	8008eac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f001 f8d5 	bl	8007f74 <xTaskPriorityInherit>
 8006dca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006dcc:	f002 f8a2 	bl	8008f14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd2:	3324      	adds	r3, #36	; 0x24
 8006dd4:	683a      	ldr	r2, [r7, #0]
 8006dd6:	4611      	mov	r1, r2
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 fe8f 	bl	8007afc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006dde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006de0:	f000 f927 	bl	8007032 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006de4:	f000 fca6 	bl	8007734 <xTaskResumeAll>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f47f af66 	bne.w	8006cbc <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8006df0:	4b18      	ldr	r3, [pc, #96]	; (8006e54 <xQueueSemaphoreTake+0x224>)
 8006df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006df6:	601a      	str	r2, [r3, #0]
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	e75c      	b.n	8006cbc <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006e02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e04:	f000 f915 	bl	8007032 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e08:	f000 fc94 	bl	8007734 <xTaskResumeAll>
 8006e0c:	e756      	b.n	8006cbc <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006e0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e10:	f000 f90f 	bl	8007032 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e14:	f000 fc8e 	bl	8007734 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e1a:	f000 f95c 	bl	80070d6 <prvIsQueueEmpty>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f43f af4b 	beq.w	8006cbc <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00d      	beq.n	8006e48 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8006e2c:	f002 f83e 	bl	8008eac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006e30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e32:	f000 f856 	bl	8006ee2 <prvGetDisinheritPriorityAfterTimeout>
 8006e36:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f001 f972 	bl	8008128 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006e44:	f002 f866 	bl	8008f14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3738      	adds	r7, #56	; 0x38
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	e000ed04 	.word	0xe000ed04

08006e58 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10c      	bne.n	8006e80 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6a:	b672      	cpsid	i
 8006e6c:	f383 8811 	msr	BASEPRI, r3
 8006e70:	f3bf 8f6f 	isb	sy
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	b662      	cpsie	i
 8006e7a:	60bb      	str	r3, [r7, #8]
}
 8006e7c:	bf00      	nop
 8006e7e:	e7fe      	b.n	8006e7e <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8006e80:	f002 f814 	bl	8008eac <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e88:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006e8a:	f002 f843 	bl	8008f14 <vPortExitCritical>

	return uxReturn;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10c      	bne.n	8006ec4 <vQueueDelete+0x2c>
	__asm volatile
 8006eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eae:	b672      	cpsid	i
 8006eb0:	f383 8811 	msr	BASEPRI, r3
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	b662      	cpsie	i
 8006ebe:	60bb      	str	r3, [r7, #8]
}
 8006ec0:	bf00      	nop
 8006ec2:	e7fe      	b.n	8006ec2 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 f95f 	bl	8007188 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d102      	bne.n	8006eda <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f002 f9df 	bl	8009298 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006eda:	bf00      	nop
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b085      	sub	sp, #20
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d006      	beq.n	8006f00 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006efc:	60fb      	str	r3, [r7, #12]
 8006efe:	e001      	b.n	8006f04 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006f00:	2300      	movs	r3, #0
 8006f02:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006f04:	68fb      	ldr	r3, [r7, #12]
	}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b086      	sub	sp, #24
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	60f8      	str	r0, [r7, #12]
 8006f1a:	60b9      	str	r1, [r7, #8]
 8006f1c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f26:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10d      	bne.n	8006f4c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d14d      	bne.n	8006fd4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f001 f881 	bl	8008044 <xTaskPriorityDisinherit>
 8006f42:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	609a      	str	r2, [r3, #8]
 8006f4a:	e043      	b.n	8006fd4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d119      	bne.n	8006f86 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6858      	ldr	r0, [r3, #4]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	68b9      	ldr	r1, [r7, #8]
 8006f5e:	f002 fbd8 	bl	8009712 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6a:	441a      	add	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d32b      	bcc.n	8006fd4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	605a      	str	r2, [r3, #4]
 8006f84:	e026      	b.n	8006fd4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	68d8      	ldr	r0, [r3, #12]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8e:	461a      	mov	r2, r3
 8006f90:	68b9      	ldr	r1, [r7, #8]
 8006f92:	f002 fbbe 	bl	8009712 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	68da      	ldr	r2, [r3, #12]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9e:	425b      	negs	r3, r3
 8006fa0:	441a      	add	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	68da      	ldr	r2, [r3, #12]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d207      	bcs.n	8006fc2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	689a      	ldr	r2, [r3, #8]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fba:	425b      	negs	r3, r3
 8006fbc:	441a      	add	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d105      	bne.n	8006fd4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d002      	beq.n	8006fd4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	1c5a      	adds	r2, r3, #1
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006fdc:	697b      	ldr	r3, [r7, #20]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3718      	adds	r7, #24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b082      	sub	sp, #8
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d018      	beq.n	800702a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68da      	ldr	r2, [r3, #12]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007000:	441a      	add	r2, r3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68da      	ldr	r2, [r3, #12]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	429a      	cmp	r2, r3
 8007010:	d303      	bcc.n	800701a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	68d9      	ldr	r1, [r3, #12]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007022:	461a      	mov	r2, r3
 8007024:	6838      	ldr	r0, [r7, #0]
 8007026:	f002 fb74 	bl	8009712 <memcpy>
	}
}
 800702a:	bf00      	nop
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b084      	sub	sp, #16
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800703a:	f001 ff37 	bl	8008eac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007044:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007046:	e011      	b.n	800706c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704c:	2b00      	cmp	r3, #0
 800704e:	d012      	beq.n	8007076 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	3324      	adds	r3, #36	; 0x24
 8007054:	4618      	mov	r0, r3
 8007056:	f000 fda5 	bl	8007ba4 <xTaskRemoveFromEventList>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d001      	beq.n	8007064 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007060:	f000 fe82 	bl	8007d68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007064:	7bfb      	ldrb	r3, [r7, #15]
 8007066:	3b01      	subs	r3, #1
 8007068:	b2db      	uxtb	r3, r3
 800706a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800706c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007070:	2b00      	cmp	r3, #0
 8007072:	dce9      	bgt.n	8007048 <prvUnlockQueue+0x16>
 8007074:	e000      	b.n	8007078 <prvUnlockQueue+0x46>
					break;
 8007076:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	22ff      	movs	r2, #255	; 0xff
 800707c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007080:	f001 ff48 	bl	8008f14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007084:	f001 ff12 	bl	8008eac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800708e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007090:	e011      	b.n	80070b6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d012      	beq.n	80070c0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	3310      	adds	r3, #16
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 fd80 	bl	8007ba4 <xTaskRemoveFromEventList>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80070aa:	f000 fe5d 	bl	8007d68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80070ae:	7bbb      	ldrb	r3, [r7, #14]
 80070b0:	3b01      	subs	r3, #1
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	dce9      	bgt.n	8007092 <prvUnlockQueue+0x60>
 80070be:	e000      	b.n	80070c2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80070c0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	22ff      	movs	r2, #255	; 0xff
 80070c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80070ca:	f001 ff23 	bl	8008f14 <vPortExitCritical>
}
 80070ce:	bf00      	nop
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070de:	f001 fee5 	bl	8008eac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d102      	bne.n	80070f0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80070ea:	2301      	movs	r3, #1
 80070ec:	60fb      	str	r3, [r7, #12]
 80070ee:	e001      	b.n	80070f4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80070f0:	2300      	movs	r3, #0
 80070f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070f4:	f001 ff0e 	bl	8008f14 <vPortExitCritical>

	return xReturn;
 80070f8:	68fb      	ldr	r3, [r7, #12]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b084      	sub	sp, #16
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800710a:	f001 fecf 	bl	8008eac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007116:	429a      	cmp	r2, r3
 8007118:	d102      	bne.n	8007120 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800711a:	2301      	movs	r3, #1
 800711c:	60fb      	str	r3, [r7, #12]
 800711e:	e001      	b.n	8007124 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007120:	2300      	movs	r3, #0
 8007122:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007124:	f001 fef6 	bl	8008f14 <vPortExitCritical>

	return xReturn;
 8007128:	68fb      	ldr	r3, [r7, #12]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
	...

08007134 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800713e:	2300      	movs	r3, #0
 8007140:	60fb      	str	r3, [r7, #12]
 8007142:	e014      	b.n	800716e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007144:	4a0f      	ldr	r2, [pc, #60]	; (8007184 <vQueueAddToRegistry+0x50>)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10b      	bne.n	8007168 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007150:	490c      	ldr	r1, [pc, #48]	; (8007184 <vQueueAddToRegistry+0x50>)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	683a      	ldr	r2, [r7, #0]
 8007156:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800715a:	4a0a      	ldr	r2, [pc, #40]	; (8007184 <vQueueAddToRegistry+0x50>)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	4413      	add	r3, r2
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007166:	e006      	b.n	8007176 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	3301      	adds	r3, #1
 800716c:	60fb      	str	r3, [r7, #12]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2b07      	cmp	r3, #7
 8007172:	d9e7      	bls.n	8007144 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007174:	bf00      	nop
 8007176:	bf00      	nop
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	20000a9c 	.word	0x20000a9c

08007188 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007190:	2300      	movs	r3, #0
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	e016      	b.n	80071c4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007196:	4a10      	ldr	r2, [pc, #64]	; (80071d8 <vQueueUnregisterQueue+0x50>)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	00db      	lsls	r3, r3, #3
 800719c:	4413      	add	r3, r2
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d10b      	bne.n	80071be <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80071a6:	4a0c      	ldr	r2, [pc, #48]	; (80071d8 <vQueueUnregisterQueue+0x50>)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2100      	movs	r1, #0
 80071ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80071b0:	4a09      	ldr	r2, [pc, #36]	; (80071d8 <vQueueUnregisterQueue+0x50>)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	00db      	lsls	r3, r3, #3
 80071b6:	4413      	add	r3, r2
 80071b8:	2200      	movs	r2, #0
 80071ba:	605a      	str	r2, [r3, #4]
				break;
 80071bc:	e006      	b.n	80071cc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	3301      	adds	r3, #1
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2b07      	cmp	r3, #7
 80071c8:	d9e5      	bls.n	8007196 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80071ca:	bf00      	nop
 80071cc:	bf00      	nop
 80071ce:	3714      	adds	r7, #20
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	20000a9c 	.word	0x20000a9c

080071dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80071ec:	f001 fe5e 	bl	8008eac <vPortEnterCritical>
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071f6:	b25b      	sxtb	r3, r3
 80071f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fc:	d103      	bne.n	8007206 <vQueueWaitForMessageRestricted+0x2a>
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800720c:	b25b      	sxtb	r3, r3
 800720e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007212:	d103      	bne.n	800721c <vQueueWaitForMessageRestricted+0x40>
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800721c:	f001 fe7a 	bl	8008f14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007224:	2b00      	cmp	r3, #0
 8007226:	d106      	bne.n	8007236 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	3324      	adds	r3, #36	; 0x24
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	68b9      	ldr	r1, [r7, #8]
 8007230:	4618      	mov	r0, r3
 8007232:	f000 fc89 	bl	8007b48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007236:	6978      	ldr	r0, [r7, #20]
 8007238:	f7ff fefb 	bl	8007032 <prvUnlockQueue>
	}
 800723c:	bf00      	nop
 800723e:	3718      	adds	r7, #24
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007244:	b580      	push	{r7, lr}
 8007246:	b08e      	sub	sp, #56	; 0x38
 8007248:	af04      	add	r7, sp, #16
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
 8007250:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10c      	bne.n	8007272 <xTaskCreateStatic+0x2e>
	__asm volatile
 8007258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725c:	b672      	cpsid	i
 800725e:	f383 8811 	msr	BASEPRI, r3
 8007262:	f3bf 8f6f 	isb	sy
 8007266:	f3bf 8f4f 	dsb	sy
 800726a:	b662      	cpsie	i
 800726c:	623b      	str	r3, [r7, #32]
}
 800726e:	bf00      	nop
 8007270:	e7fe      	b.n	8007270 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10c      	bne.n	8007292 <xTaskCreateStatic+0x4e>
	__asm volatile
 8007278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727c:	b672      	cpsid	i
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	b662      	cpsie	i
 800728c:	61fb      	str	r3, [r7, #28]
}
 800728e:	bf00      	nop
 8007290:	e7fe      	b.n	8007290 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007292:	23bc      	movs	r3, #188	; 0xbc
 8007294:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	2bbc      	cmp	r3, #188	; 0xbc
 800729a:	d00c      	beq.n	80072b6 <xTaskCreateStatic+0x72>
	__asm volatile
 800729c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a0:	b672      	cpsid	i
 80072a2:	f383 8811 	msr	BASEPRI, r3
 80072a6:	f3bf 8f6f 	isb	sy
 80072aa:	f3bf 8f4f 	dsb	sy
 80072ae:	b662      	cpsie	i
 80072b0:	61bb      	str	r3, [r7, #24]
}
 80072b2:	bf00      	nop
 80072b4:	e7fe      	b.n	80072b4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80072b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80072b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d01e      	beq.n	80072fc <xTaskCreateStatic+0xb8>
 80072be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d01b      	beq.n	80072fc <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80072c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80072ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d0:	2202      	movs	r2, #2
 80072d2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80072d6:	2300      	movs	r3, #0
 80072d8:	9303      	str	r3, [sp, #12]
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	9302      	str	r3, [sp, #8]
 80072de:	f107 0314 	add.w	r3, r7, #20
 80072e2:	9301      	str	r3, [sp, #4]
 80072e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	68b9      	ldr	r1, [r7, #8]
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f000 f850 	bl	8007394 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072f6:	f000 f8f5 	bl	80074e4 <prvAddNewTaskToReadyList>
 80072fa:	e001      	b.n	8007300 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80072fc:	2300      	movs	r3, #0
 80072fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007300:	697b      	ldr	r3, [r7, #20]
	}
 8007302:	4618      	mov	r0, r3
 8007304:	3728      	adds	r7, #40	; 0x28
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800730a:	b580      	push	{r7, lr}
 800730c:	b08c      	sub	sp, #48	; 0x30
 800730e:	af04      	add	r7, sp, #16
 8007310:	60f8      	str	r0, [r7, #12]
 8007312:	60b9      	str	r1, [r7, #8]
 8007314:	603b      	str	r3, [r7, #0]
 8007316:	4613      	mov	r3, r2
 8007318:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800731a:	88fb      	ldrh	r3, [r7, #6]
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4618      	mov	r0, r3
 8007320:	f001 fef0 	bl	8009104 <pvPortMalloc>
 8007324:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00e      	beq.n	800734a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800732c:	20bc      	movs	r0, #188	; 0xbc
 800732e:	f001 fee9 	bl	8009104 <pvPortMalloc>
 8007332:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d003      	beq.n	8007342 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	631a      	str	r2, [r3, #48]	; 0x30
 8007340:	e005      	b.n	800734e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007342:	6978      	ldr	r0, [r7, #20]
 8007344:	f001 ffa8 	bl	8009298 <vPortFree>
 8007348:	e001      	b.n	800734e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800734a:	2300      	movs	r3, #0
 800734c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d017      	beq.n	8007384 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800735c:	88fa      	ldrh	r2, [r7, #6]
 800735e:	2300      	movs	r3, #0
 8007360:	9303      	str	r3, [sp, #12]
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	9302      	str	r3, [sp, #8]
 8007366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007368:	9301      	str	r3, [sp, #4]
 800736a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	68b9      	ldr	r1, [r7, #8]
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f000 f80e 	bl	8007394 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007378:	69f8      	ldr	r0, [r7, #28]
 800737a:	f000 f8b3 	bl	80074e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800737e:	2301      	movs	r3, #1
 8007380:	61bb      	str	r3, [r7, #24]
 8007382:	e002      	b.n	800738a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007384:	f04f 33ff 	mov.w	r3, #4294967295
 8007388:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800738a:	69bb      	ldr	r3, [r7, #24]
	}
 800738c:	4618      	mov	r0, r3
 800738e:	3720      	adds	r7, #32
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b088      	sub	sp, #32
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
 80073a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80073a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	461a      	mov	r2, r3
 80073ac:	21a5      	movs	r1, #165	; 0xa5
 80073ae:	f002 f9be 	bl	800972e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80073b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80073bc:	440b      	add	r3, r1
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	f023 0307 	bic.w	r3, r3, #7
 80073ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	f003 0307 	and.w	r3, r3, #7
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00c      	beq.n	80073f0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80073d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073da:	b672      	cpsid	i
 80073dc:	f383 8811 	msr	BASEPRI, r3
 80073e0:	f3bf 8f6f 	isb	sy
 80073e4:	f3bf 8f4f 	dsb	sy
 80073e8:	b662      	cpsie	i
 80073ea:	617b      	str	r3, [r7, #20]
}
 80073ec:	bf00      	nop
 80073ee:	e7fe      	b.n	80073ee <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d01f      	beq.n	8007436 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073f6:	2300      	movs	r3, #0
 80073f8:	61fb      	str	r3, [r7, #28]
 80073fa:	e012      	b.n	8007422 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	4413      	add	r3, r2
 8007402:	7819      	ldrb	r1, [r3, #0]
 8007404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	4413      	add	r3, r2
 800740a:	3334      	adds	r3, #52	; 0x34
 800740c:	460a      	mov	r2, r1
 800740e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	4413      	add	r3, r2
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d006      	beq.n	800742a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	3301      	adds	r3, #1
 8007420:	61fb      	str	r3, [r7, #28]
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	2b0f      	cmp	r3, #15
 8007426:	d9e9      	bls.n	80073fc <prvInitialiseNewTask+0x68>
 8007428:	e000      	b.n	800742c <prvInitialiseNewTask+0x98>
			{
				break;
 800742a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800742c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742e:	2200      	movs	r2, #0
 8007430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007434:	e003      	b.n	800743e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007438:	2200      	movs	r2, #0
 800743a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800743e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007440:	2b37      	cmp	r3, #55	; 0x37
 8007442:	d901      	bls.n	8007448 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007444:	2337      	movs	r3, #55	; 0x37
 8007446:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800744c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800744e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007450:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007452:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007456:	2200      	movs	r2, #0
 8007458:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800745a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745c:	3304      	adds	r3, #4
 800745e:	4618      	mov	r0, r3
 8007460:	f7fe ff02 	bl	8006268 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007466:	3318      	adds	r3, #24
 8007468:	4618      	mov	r0, r3
 800746a:	f7fe fefd 	bl	8006268 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007472:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007476:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800747e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007482:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007486:	2200      	movs	r2, #0
 8007488:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800748c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748e:	2200      	movs	r2, #0
 8007490:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007496:	3354      	adds	r3, #84	; 0x54
 8007498:	2260      	movs	r2, #96	; 0x60
 800749a:	2100      	movs	r1, #0
 800749c:	4618      	mov	r0, r3
 800749e:	f002 f946 	bl	800972e <memset>
 80074a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a4:	4a0c      	ldr	r2, [pc, #48]	; (80074d8 <prvInitialiseNewTask+0x144>)
 80074a6:	659a      	str	r2, [r3, #88]	; 0x58
 80074a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074aa:	4a0c      	ldr	r2, [pc, #48]	; (80074dc <prvInitialiseNewTask+0x148>)
 80074ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80074ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b0:	4a0b      	ldr	r2, [pc, #44]	; (80074e0 <prvInitialiseNewTask+0x14c>)
 80074b2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80074b4:	683a      	ldr	r2, [r7, #0]
 80074b6:	68f9      	ldr	r1, [r7, #12]
 80074b8:	69b8      	ldr	r0, [r7, #24]
 80074ba:	f001 fbed 	bl	8008c98 <pxPortInitialiseStack>
 80074be:	4602      	mov	r2, r0
 80074c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80074c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d002      	beq.n	80074d0 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80074ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074d0:	bf00      	nop
 80074d2:	3720      	adds	r7, #32
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	0800a800 	.word	0x0800a800
 80074dc:	0800a820 	.word	0x0800a820
 80074e0:	0800a7e0 	.word	0x0800a7e0

080074e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80074ec:	f001 fcde 	bl	8008eac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80074f0:	4b2d      	ldr	r3, [pc, #180]	; (80075a8 <prvAddNewTaskToReadyList+0xc4>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	3301      	adds	r3, #1
 80074f6:	4a2c      	ldr	r2, [pc, #176]	; (80075a8 <prvAddNewTaskToReadyList+0xc4>)
 80074f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80074fa:	4b2c      	ldr	r3, [pc, #176]	; (80075ac <prvAddNewTaskToReadyList+0xc8>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d109      	bne.n	8007516 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007502:	4a2a      	ldr	r2, [pc, #168]	; (80075ac <prvAddNewTaskToReadyList+0xc8>)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007508:	4b27      	ldr	r3, [pc, #156]	; (80075a8 <prvAddNewTaskToReadyList+0xc4>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d110      	bne.n	8007532 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007510:	f000 fc4e 	bl	8007db0 <prvInitialiseTaskLists>
 8007514:	e00d      	b.n	8007532 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007516:	4b26      	ldr	r3, [pc, #152]	; (80075b0 <prvAddNewTaskToReadyList+0xcc>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d109      	bne.n	8007532 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800751e:	4b23      	ldr	r3, [pc, #140]	; (80075ac <prvAddNewTaskToReadyList+0xc8>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007528:	429a      	cmp	r2, r3
 800752a:	d802      	bhi.n	8007532 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800752c:	4a1f      	ldr	r2, [pc, #124]	; (80075ac <prvAddNewTaskToReadyList+0xc8>)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007532:	4b20      	ldr	r3, [pc, #128]	; (80075b4 <prvAddNewTaskToReadyList+0xd0>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	3301      	adds	r3, #1
 8007538:	4a1e      	ldr	r2, [pc, #120]	; (80075b4 <prvAddNewTaskToReadyList+0xd0>)
 800753a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800753c:	4b1d      	ldr	r3, [pc, #116]	; (80075b4 <prvAddNewTaskToReadyList+0xd0>)
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007548:	4b1b      	ldr	r3, [pc, #108]	; (80075b8 <prvAddNewTaskToReadyList+0xd4>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	429a      	cmp	r2, r3
 800754e:	d903      	bls.n	8007558 <prvAddNewTaskToReadyList+0x74>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007554:	4a18      	ldr	r2, [pc, #96]	; (80075b8 <prvAddNewTaskToReadyList+0xd4>)
 8007556:	6013      	str	r3, [r2, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800755c:	4613      	mov	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4a15      	ldr	r2, [pc, #84]	; (80075bc <prvAddNewTaskToReadyList+0xd8>)
 8007566:	441a      	add	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	3304      	adds	r3, #4
 800756c:	4619      	mov	r1, r3
 800756e:	4610      	mov	r0, r2
 8007570:	f7fe fe87 	bl	8006282 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007574:	f001 fcce 	bl	8008f14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007578:	4b0d      	ldr	r3, [pc, #52]	; (80075b0 <prvAddNewTaskToReadyList+0xcc>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00e      	beq.n	800759e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007580:	4b0a      	ldr	r3, [pc, #40]	; (80075ac <prvAddNewTaskToReadyList+0xc8>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758a:	429a      	cmp	r2, r3
 800758c:	d207      	bcs.n	800759e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800758e:	4b0c      	ldr	r3, [pc, #48]	; (80075c0 <prvAddNewTaskToReadyList+0xdc>)
 8007590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	f3bf 8f4f 	dsb	sy
 800759a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800759e:	bf00      	nop
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	20000fb0 	.word	0x20000fb0
 80075ac:	20000adc 	.word	0x20000adc
 80075b0:	20000fbc 	.word	0x20000fbc
 80075b4:	20000fcc 	.word	0x20000fcc
 80075b8:	20000fb8 	.word	0x20000fb8
 80075bc:	20000ae0 	.word	0x20000ae0
 80075c0:	e000ed04 	.word	0xe000ed04

080075c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80075cc:	2300      	movs	r3, #0
 80075ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d019      	beq.n	800760a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80075d6:	4b14      	ldr	r3, [pc, #80]	; (8007628 <vTaskDelay+0x64>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00c      	beq.n	80075f8 <vTaskDelay+0x34>
	__asm volatile
 80075de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e2:	b672      	cpsid	i
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	b662      	cpsie	i
 80075f2:	60bb      	str	r3, [r7, #8]
}
 80075f4:	bf00      	nop
 80075f6:	e7fe      	b.n	80075f6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80075f8:	f000 f88e 	bl	8007718 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80075fc:	2100      	movs	r1, #0
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 ff3c 	bl	800847c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007604:	f000 f896 	bl	8007734 <xTaskResumeAll>
 8007608:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d107      	bne.n	8007620 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007610:	4b06      	ldr	r3, [pc, #24]	; (800762c <vTaskDelay+0x68>)
 8007612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007620:	bf00      	nop
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	20000fd8 	.word	0x20000fd8
 800762c:	e000ed04 	.word	0xe000ed04

08007630 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b08a      	sub	sp, #40	; 0x28
 8007634:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007636:	2300      	movs	r3, #0
 8007638:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800763a:	2300      	movs	r3, #0
 800763c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800763e:	463a      	mov	r2, r7
 8007640:	1d39      	adds	r1, r7, #4
 8007642:	f107 0308 	add.w	r3, r7, #8
 8007646:	4618      	mov	r0, r3
 8007648:	f7fe fdba 	bl	80061c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	9202      	str	r2, [sp, #8]
 8007654:	9301      	str	r3, [sp, #4]
 8007656:	2300      	movs	r3, #0
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	2300      	movs	r3, #0
 800765c:	460a      	mov	r2, r1
 800765e:	4926      	ldr	r1, [pc, #152]	; (80076f8 <vTaskStartScheduler+0xc8>)
 8007660:	4826      	ldr	r0, [pc, #152]	; (80076fc <vTaskStartScheduler+0xcc>)
 8007662:	f7ff fdef 	bl	8007244 <xTaskCreateStatic>
 8007666:	4603      	mov	r3, r0
 8007668:	4a25      	ldr	r2, [pc, #148]	; (8007700 <vTaskStartScheduler+0xd0>)
 800766a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800766c:	4b24      	ldr	r3, [pc, #144]	; (8007700 <vTaskStartScheduler+0xd0>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007674:	2301      	movs	r3, #1
 8007676:	617b      	str	r3, [r7, #20]
 8007678:	e001      	b.n	800767e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800767a:	2300      	movs	r3, #0
 800767c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d102      	bne.n	800768a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007684:	f000 ff4e 	bl	8008524 <xTimerCreateTimerTask>
 8007688:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d11d      	bne.n	80076cc <vTaskStartScheduler+0x9c>
	__asm volatile
 8007690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007694:	b672      	cpsid	i
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	b662      	cpsie	i
 80076a4:	613b      	str	r3, [r7, #16]
}
 80076a6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80076a8:	4b16      	ldr	r3, [pc, #88]	; (8007704 <vTaskStartScheduler+0xd4>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	3354      	adds	r3, #84	; 0x54
 80076ae:	4a16      	ldr	r2, [pc, #88]	; (8007708 <vTaskStartScheduler+0xd8>)
 80076b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80076b2:	4b16      	ldr	r3, [pc, #88]	; (800770c <vTaskStartScheduler+0xdc>)
 80076b4:	f04f 32ff 	mov.w	r2, #4294967295
 80076b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80076ba:	4b15      	ldr	r3, [pc, #84]	; (8007710 <vTaskStartScheduler+0xe0>)
 80076bc:	2201      	movs	r2, #1
 80076be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80076c0:	4b14      	ldr	r3, [pc, #80]	; (8007714 <vTaskStartScheduler+0xe4>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80076c6:	f001 fb73 	bl	8008db0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80076ca:	e010      	b.n	80076ee <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d2:	d10c      	bne.n	80076ee <vTaskStartScheduler+0xbe>
	__asm volatile
 80076d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d8:	b672      	cpsid	i
 80076da:	f383 8811 	msr	BASEPRI, r3
 80076de:	f3bf 8f6f 	isb	sy
 80076e2:	f3bf 8f4f 	dsb	sy
 80076e6:	b662      	cpsie	i
 80076e8:	60fb      	str	r3, [r7, #12]
}
 80076ea:	bf00      	nop
 80076ec:	e7fe      	b.n	80076ec <vTaskStartScheduler+0xbc>
}
 80076ee:	bf00      	nop
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	0800a6fc 	.word	0x0800a6fc
 80076fc:	08007d81 	.word	0x08007d81
 8007700:	20000fd4 	.word	0x20000fd4
 8007704:	20000adc 	.word	0x20000adc
 8007708:	20000010 	.word	0x20000010
 800770c:	20000fd0 	.word	0x20000fd0
 8007710:	20000fbc 	.word	0x20000fbc
 8007714:	20000fb4 	.word	0x20000fb4

08007718 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007718:	b480      	push	{r7}
 800771a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800771c:	4b04      	ldr	r3, [pc, #16]	; (8007730 <vTaskSuspendAll+0x18>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3301      	adds	r3, #1
 8007722:	4a03      	ldr	r2, [pc, #12]	; (8007730 <vTaskSuspendAll+0x18>)
 8007724:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007726:	bf00      	nop
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	20000fd8 	.word	0x20000fd8

08007734 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800773a:	2300      	movs	r3, #0
 800773c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800773e:	2300      	movs	r3, #0
 8007740:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007742:	4b43      	ldr	r3, [pc, #268]	; (8007850 <xTaskResumeAll+0x11c>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10c      	bne.n	8007764 <xTaskResumeAll+0x30>
	__asm volatile
 800774a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774e:	b672      	cpsid	i
 8007750:	f383 8811 	msr	BASEPRI, r3
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	b662      	cpsie	i
 800775e:	603b      	str	r3, [r7, #0]
}
 8007760:	bf00      	nop
 8007762:	e7fe      	b.n	8007762 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007764:	f001 fba2 	bl	8008eac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007768:	4b39      	ldr	r3, [pc, #228]	; (8007850 <xTaskResumeAll+0x11c>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3b01      	subs	r3, #1
 800776e:	4a38      	ldr	r2, [pc, #224]	; (8007850 <xTaskResumeAll+0x11c>)
 8007770:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007772:	4b37      	ldr	r3, [pc, #220]	; (8007850 <xTaskResumeAll+0x11c>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d162      	bne.n	8007840 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800777a:	4b36      	ldr	r3, [pc, #216]	; (8007854 <xTaskResumeAll+0x120>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d05e      	beq.n	8007840 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007782:	e02f      	b.n	80077e4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007784:	4b34      	ldr	r3, [pc, #208]	; (8007858 <xTaskResumeAll+0x124>)
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	3318      	adds	r3, #24
 8007790:	4618      	mov	r0, r3
 8007792:	f7fe fdd3 	bl	800633c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	3304      	adds	r3, #4
 800779a:	4618      	mov	r0, r3
 800779c:	f7fe fdce 	bl	800633c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a4:	4b2d      	ldr	r3, [pc, #180]	; (800785c <xTaskResumeAll+0x128>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d903      	bls.n	80077b4 <xTaskResumeAll+0x80>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b0:	4a2a      	ldr	r2, [pc, #168]	; (800785c <xTaskResumeAll+0x128>)
 80077b2:	6013      	str	r3, [r2, #0]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b8:	4613      	mov	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4413      	add	r3, r2
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	4a27      	ldr	r2, [pc, #156]	; (8007860 <xTaskResumeAll+0x12c>)
 80077c2:	441a      	add	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	3304      	adds	r3, #4
 80077c8:	4619      	mov	r1, r3
 80077ca:	4610      	mov	r0, r2
 80077cc:	f7fe fd59 	bl	8006282 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d4:	4b23      	ldr	r3, [pc, #140]	; (8007864 <xTaskResumeAll+0x130>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077da:	429a      	cmp	r2, r3
 80077dc:	d302      	bcc.n	80077e4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80077de:	4b22      	ldr	r3, [pc, #136]	; (8007868 <xTaskResumeAll+0x134>)
 80077e0:	2201      	movs	r2, #1
 80077e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077e4:	4b1c      	ldr	r3, [pc, #112]	; (8007858 <xTaskResumeAll+0x124>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1cb      	bne.n	8007784 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80077f2:	f000 fb81 	bl	8007ef8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80077f6:	4b1d      	ldr	r3, [pc, #116]	; (800786c <xTaskResumeAll+0x138>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d010      	beq.n	8007824 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007802:	f000 f859 	bl	80078b8 <xTaskIncrementTick>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d002      	beq.n	8007812 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800780c:	4b16      	ldr	r3, [pc, #88]	; (8007868 <xTaskResumeAll+0x134>)
 800780e:	2201      	movs	r2, #1
 8007810:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	3b01      	subs	r3, #1
 8007816:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1f1      	bne.n	8007802 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800781e:	4b13      	ldr	r3, [pc, #76]	; (800786c <xTaskResumeAll+0x138>)
 8007820:	2200      	movs	r2, #0
 8007822:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007824:	4b10      	ldr	r3, [pc, #64]	; (8007868 <xTaskResumeAll+0x134>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d009      	beq.n	8007840 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800782c:	2301      	movs	r3, #1
 800782e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007830:	4b0f      	ldr	r3, [pc, #60]	; (8007870 <xTaskResumeAll+0x13c>)
 8007832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007836:	601a      	str	r2, [r3, #0]
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007840:	f001 fb68 	bl	8008f14 <vPortExitCritical>

	return xAlreadyYielded;
 8007844:	68bb      	ldr	r3, [r7, #8]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	20000fd8 	.word	0x20000fd8
 8007854:	20000fb0 	.word	0x20000fb0
 8007858:	20000f70 	.word	0x20000f70
 800785c:	20000fb8 	.word	0x20000fb8
 8007860:	20000ae0 	.word	0x20000ae0
 8007864:	20000adc 	.word	0x20000adc
 8007868:	20000fc4 	.word	0x20000fc4
 800786c:	20000fc0 	.word	0x20000fc0
 8007870:	e000ed04 	.word	0xe000ed04

08007874 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800787a:	4b05      	ldr	r3, [pc, #20]	; (8007890 <xTaskGetTickCount+0x1c>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007880:	687b      	ldr	r3, [r7, #4]
}
 8007882:	4618      	mov	r0, r3
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	20000fb4 	.word	0x20000fb4

08007894 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800789a:	f001 fbef 	bl	800907c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800789e:	2300      	movs	r3, #0
 80078a0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80078a2:	4b04      	ldr	r3, [pc, #16]	; (80078b4 <xTaskGetTickCountFromISR+0x20>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80078a8:	683b      	ldr	r3, [r7, #0]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3708      	adds	r7, #8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	20000fb4 	.word	0x20000fb4

080078b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b086      	sub	sp, #24
 80078bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078be:	2300      	movs	r3, #0
 80078c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078c2:	4b50      	ldr	r3, [pc, #320]	; (8007a04 <xTaskIncrementTick+0x14c>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f040 808b 	bne.w	80079e2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078cc:	4b4e      	ldr	r3, [pc, #312]	; (8007a08 <xTaskIncrementTick+0x150>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	3301      	adds	r3, #1
 80078d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078d4:	4a4c      	ldr	r2, [pc, #304]	; (8007a08 <xTaskIncrementTick+0x150>)
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d122      	bne.n	8007926 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80078e0:	4b4a      	ldr	r3, [pc, #296]	; (8007a0c <xTaskIncrementTick+0x154>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00c      	beq.n	8007904 <xTaskIncrementTick+0x4c>
	__asm volatile
 80078ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ee:	b672      	cpsid	i
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	b662      	cpsie	i
 80078fe:	603b      	str	r3, [r7, #0]
}
 8007900:	bf00      	nop
 8007902:	e7fe      	b.n	8007902 <xTaskIncrementTick+0x4a>
 8007904:	4b41      	ldr	r3, [pc, #260]	; (8007a0c <xTaskIncrementTick+0x154>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	60fb      	str	r3, [r7, #12]
 800790a:	4b41      	ldr	r3, [pc, #260]	; (8007a10 <xTaskIncrementTick+0x158>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a3f      	ldr	r2, [pc, #252]	; (8007a0c <xTaskIncrementTick+0x154>)
 8007910:	6013      	str	r3, [r2, #0]
 8007912:	4a3f      	ldr	r2, [pc, #252]	; (8007a10 <xTaskIncrementTick+0x158>)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6013      	str	r3, [r2, #0]
 8007918:	4b3e      	ldr	r3, [pc, #248]	; (8007a14 <xTaskIncrementTick+0x15c>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3301      	adds	r3, #1
 800791e:	4a3d      	ldr	r2, [pc, #244]	; (8007a14 <xTaskIncrementTick+0x15c>)
 8007920:	6013      	str	r3, [r2, #0]
 8007922:	f000 fae9 	bl	8007ef8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007926:	4b3c      	ldr	r3, [pc, #240]	; (8007a18 <xTaskIncrementTick+0x160>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	429a      	cmp	r2, r3
 800792e:	d349      	bcc.n	80079c4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007930:	4b36      	ldr	r3, [pc, #216]	; (8007a0c <xTaskIncrementTick+0x154>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d104      	bne.n	8007944 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800793a:	4b37      	ldr	r3, [pc, #220]	; (8007a18 <xTaskIncrementTick+0x160>)
 800793c:	f04f 32ff 	mov.w	r2, #4294967295
 8007940:	601a      	str	r2, [r3, #0]
					break;
 8007942:	e03f      	b.n	80079c4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007944:	4b31      	ldr	r3, [pc, #196]	; (8007a0c <xTaskIncrementTick+0x154>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007954:	693a      	ldr	r2, [r7, #16]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	429a      	cmp	r2, r3
 800795a:	d203      	bcs.n	8007964 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800795c:	4a2e      	ldr	r2, [pc, #184]	; (8007a18 <xTaskIncrementTick+0x160>)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007962:	e02f      	b.n	80079c4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	3304      	adds	r3, #4
 8007968:	4618      	mov	r0, r3
 800796a:	f7fe fce7 	bl	800633c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007972:	2b00      	cmp	r3, #0
 8007974:	d004      	beq.n	8007980 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	3318      	adds	r3, #24
 800797a:	4618      	mov	r0, r3
 800797c:	f7fe fcde 	bl	800633c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007984:	4b25      	ldr	r3, [pc, #148]	; (8007a1c <xTaskIncrementTick+0x164>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	429a      	cmp	r2, r3
 800798a:	d903      	bls.n	8007994 <xTaskIncrementTick+0xdc>
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007990:	4a22      	ldr	r2, [pc, #136]	; (8007a1c <xTaskIncrementTick+0x164>)
 8007992:	6013      	str	r3, [r2, #0]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007998:	4613      	mov	r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4413      	add	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4a1f      	ldr	r2, [pc, #124]	; (8007a20 <xTaskIncrementTick+0x168>)
 80079a2:	441a      	add	r2, r3
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	3304      	adds	r3, #4
 80079a8:	4619      	mov	r1, r3
 80079aa:	4610      	mov	r0, r2
 80079ac:	f7fe fc69 	bl	8006282 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b4:	4b1b      	ldr	r3, [pc, #108]	; (8007a24 <xTaskIncrementTick+0x16c>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d3b8      	bcc.n	8007930 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80079be:	2301      	movs	r3, #1
 80079c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079c2:	e7b5      	b.n	8007930 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079c4:	4b17      	ldr	r3, [pc, #92]	; (8007a24 <xTaskIncrementTick+0x16c>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ca:	4915      	ldr	r1, [pc, #84]	; (8007a20 <xTaskIncrementTick+0x168>)
 80079cc:	4613      	mov	r3, r2
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4413      	add	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	440b      	add	r3, r1
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d907      	bls.n	80079ec <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80079dc:	2301      	movs	r3, #1
 80079de:	617b      	str	r3, [r7, #20]
 80079e0:	e004      	b.n	80079ec <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80079e2:	4b11      	ldr	r3, [pc, #68]	; (8007a28 <xTaskIncrementTick+0x170>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3301      	adds	r3, #1
 80079e8:	4a0f      	ldr	r2, [pc, #60]	; (8007a28 <xTaskIncrementTick+0x170>)
 80079ea:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80079ec:	4b0f      	ldr	r3, [pc, #60]	; (8007a2c <xTaskIncrementTick+0x174>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80079f4:	2301      	movs	r3, #1
 80079f6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80079f8:	697b      	ldr	r3, [r7, #20]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3718      	adds	r7, #24
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	20000fd8 	.word	0x20000fd8
 8007a08:	20000fb4 	.word	0x20000fb4
 8007a0c:	20000f68 	.word	0x20000f68
 8007a10:	20000f6c 	.word	0x20000f6c
 8007a14:	20000fc8 	.word	0x20000fc8
 8007a18:	20000fd0 	.word	0x20000fd0
 8007a1c:	20000fb8 	.word	0x20000fb8
 8007a20:	20000ae0 	.word	0x20000ae0
 8007a24:	20000adc 	.word	0x20000adc
 8007a28:	20000fc0 	.word	0x20000fc0
 8007a2c:	20000fc4 	.word	0x20000fc4

08007a30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a36:	4b2b      	ldr	r3, [pc, #172]	; (8007ae4 <vTaskSwitchContext+0xb4>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d003      	beq.n	8007a46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a3e:	4b2a      	ldr	r3, [pc, #168]	; (8007ae8 <vTaskSwitchContext+0xb8>)
 8007a40:	2201      	movs	r2, #1
 8007a42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a44:	e048      	b.n	8007ad8 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8007a46:	4b28      	ldr	r3, [pc, #160]	; (8007ae8 <vTaskSwitchContext+0xb8>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a4c:	4b27      	ldr	r3, [pc, #156]	; (8007aec <vTaskSwitchContext+0xbc>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	60fb      	str	r3, [r7, #12]
 8007a52:	e012      	b.n	8007a7a <vTaskSwitchContext+0x4a>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10c      	bne.n	8007a74 <vTaskSwitchContext+0x44>
	__asm volatile
 8007a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5e:	b672      	cpsid	i
 8007a60:	f383 8811 	msr	BASEPRI, r3
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	b662      	cpsie	i
 8007a6e:	607b      	str	r3, [r7, #4]
}
 8007a70:	bf00      	nop
 8007a72:	e7fe      	b.n	8007a72 <vTaskSwitchContext+0x42>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	3b01      	subs	r3, #1
 8007a78:	60fb      	str	r3, [r7, #12]
 8007a7a:	491d      	ldr	r1, [pc, #116]	; (8007af0 <vTaskSwitchContext+0xc0>)
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	4613      	mov	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4413      	add	r3, r2
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	440b      	add	r3, r1
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d0e2      	beq.n	8007a54 <vTaskSwitchContext+0x24>
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	4613      	mov	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	4413      	add	r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4a15      	ldr	r2, [pc, #84]	; (8007af0 <vTaskSwitchContext+0xc0>)
 8007a9a:	4413      	add	r3, r2
 8007a9c:	60bb      	str	r3, [r7, #8]
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	685a      	ldr	r2, [r3, #4]
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	605a      	str	r2, [r3, #4]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	3308      	adds	r3, #8
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d104      	bne.n	8007abe <vTaskSwitchContext+0x8e>
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	685a      	ldr	r2, [r3, #4]
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	605a      	str	r2, [r3, #4]
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	4a0b      	ldr	r2, [pc, #44]	; (8007af4 <vTaskSwitchContext+0xc4>)
 8007ac6:	6013      	str	r3, [r2, #0]
 8007ac8:	4a08      	ldr	r2, [pc, #32]	; (8007aec <vTaskSwitchContext+0xbc>)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ace:	4b09      	ldr	r3, [pc, #36]	; (8007af4 <vTaskSwitchContext+0xc4>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	3354      	adds	r3, #84	; 0x54
 8007ad4:	4a08      	ldr	r2, [pc, #32]	; (8007af8 <vTaskSwitchContext+0xc8>)
 8007ad6:	6013      	str	r3, [r2, #0]
}
 8007ad8:	bf00      	nop
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr
 8007ae4:	20000fd8 	.word	0x20000fd8
 8007ae8:	20000fc4 	.word	0x20000fc4
 8007aec:	20000fb8 	.word	0x20000fb8
 8007af0:	20000ae0 	.word	0x20000ae0
 8007af4:	20000adc 	.word	0x20000adc
 8007af8:	20000010 	.word	0x20000010

08007afc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10c      	bne.n	8007b26 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b10:	b672      	cpsid	i
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	b662      	cpsie	i
 8007b20:	60fb      	str	r3, [r7, #12]
}
 8007b22:	bf00      	nop
 8007b24:	e7fe      	b.n	8007b24 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b26:	4b07      	ldr	r3, [pc, #28]	; (8007b44 <vTaskPlaceOnEventList+0x48>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3318      	adds	r3, #24
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f7fe fbcb 	bl	80062ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b34:	2101      	movs	r1, #1
 8007b36:	6838      	ldr	r0, [r7, #0]
 8007b38:	f000 fca0 	bl	800847c <prvAddCurrentTaskToDelayedList>
}
 8007b3c:	bf00      	nop
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	20000adc 	.word	0x20000adc

08007b48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10c      	bne.n	8007b74 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8007b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5e:	b672      	cpsid	i
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	b662      	cpsie	i
 8007b6e:	617b      	str	r3, [r7, #20]
}
 8007b70:	bf00      	nop
 8007b72:	e7fe      	b.n	8007b72 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b74:	4b0a      	ldr	r3, [pc, #40]	; (8007ba0 <vTaskPlaceOnEventListRestricted+0x58>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	3318      	adds	r3, #24
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f7fe fb80 	bl	8006282 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d002      	beq.n	8007b8e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8007b88:	f04f 33ff 	mov.w	r3, #4294967295
 8007b8c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b8e:	6879      	ldr	r1, [r7, #4]
 8007b90:	68b8      	ldr	r0, [r7, #8]
 8007b92:	f000 fc73 	bl	800847c <prvAddCurrentTaskToDelayedList>
	}
 8007b96:	bf00      	nop
 8007b98:	3718      	adds	r7, #24
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	20000adc 	.word	0x20000adc

08007ba4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b086      	sub	sp, #24
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10c      	bne.n	8007bd4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8007bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbe:	b672      	cpsid	i
 8007bc0:	f383 8811 	msr	BASEPRI, r3
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	b662      	cpsie	i
 8007bce:	60fb      	str	r3, [r7, #12]
}
 8007bd0:	bf00      	nop
 8007bd2:	e7fe      	b.n	8007bd2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	3318      	adds	r3, #24
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7fe fbaf 	bl	800633c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bde:	4b1e      	ldr	r3, [pc, #120]	; (8007c58 <xTaskRemoveFromEventList+0xb4>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d11d      	bne.n	8007c22 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	3304      	adds	r3, #4
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fe fba6 	bl	800633c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf4:	4b19      	ldr	r3, [pc, #100]	; (8007c5c <xTaskRemoveFromEventList+0xb8>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d903      	bls.n	8007c04 <xTaskRemoveFromEventList+0x60>
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c00:	4a16      	ldr	r2, [pc, #88]	; (8007c5c <xTaskRemoveFromEventList+0xb8>)
 8007c02:	6013      	str	r3, [r2, #0]
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c08:	4613      	mov	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4a13      	ldr	r2, [pc, #76]	; (8007c60 <xTaskRemoveFromEventList+0xbc>)
 8007c12:	441a      	add	r2, r3
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	3304      	adds	r3, #4
 8007c18:	4619      	mov	r1, r3
 8007c1a:	4610      	mov	r0, r2
 8007c1c:	f7fe fb31 	bl	8006282 <vListInsertEnd>
 8007c20:	e005      	b.n	8007c2e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	3318      	adds	r3, #24
 8007c26:	4619      	mov	r1, r3
 8007c28:	480e      	ldr	r0, [pc, #56]	; (8007c64 <xTaskRemoveFromEventList+0xc0>)
 8007c2a:	f7fe fb2a 	bl	8006282 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c32:	4b0d      	ldr	r3, [pc, #52]	; (8007c68 <xTaskRemoveFromEventList+0xc4>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d905      	bls.n	8007c48 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c40:	4b0a      	ldr	r3, [pc, #40]	; (8007c6c <xTaskRemoveFromEventList+0xc8>)
 8007c42:	2201      	movs	r2, #1
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	e001      	b.n	8007c4c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c4c:	697b      	ldr	r3, [r7, #20]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3718      	adds	r7, #24
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	20000fd8 	.word	0x20000fd8
 8007c5c:	20000fb8 	.word	0x20000fb8
 8007c60:	20000ae0 	.word	0x20000ae0
 8007c64:	20000f70 	.word	0x20000f70
 8007c68:	20000adc 	.word	0x20000adc
 8007c6c:	20000fc4 	.word	0x20000fc4

08007c70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c78:	4b06      	ldr	r3, [pc, #24]	; (8007c94 <vTaskInternalSetTimeOutState+0x24>)
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c80:	4b05      	ldr	r3, [pc, #20]	; (8007c98 <vTaskInternalSetTimeOutState+0x28>)
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	605a      	str	r2, [r3, #4]
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	20000fc8 	.word	0x20000fc8
 8007c98:	20000fb4 	.word	0x20000fb4

08007c9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b088      	sub	sp, #32
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10c      	bne.n	8007cc6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb0:	b672      	cpsid	i
 8007cb2:	f383 8811 	msr	BASEPRI, r3
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	b662      	cpsie	i
 8007cc0:	613b      	str	r3, [r7, #16]
}
 8007cc2:	bf00      	nop
 8007cc4:	e7fe      	b.n	8007cc4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10c      	bne.n	8007ce6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd0:	b672      	cpsid	i
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	b662      	cpsie	i
 8007ce0:	60fb      	str	r3, [r7, #12]
}
 8007ce2:	bf00      	nop
 8007ce4:	e7fe      	b.n	8007ce4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007ce6:	f001 f8e1 	bl	8008eac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007cea:	4b1d      	ldr	r3, [pc, #116]	; (8007d60 <xTaskCheckForTimeOut+0xc4>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	69ba      	ldr	r2, [r7, #24]
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d02:	d102      	bne.n	8007d0a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d04:	2300      	movs	r3, #0
 8007d06:	61fb      	str	r3, [r7, #28]
 8007d08:	e023      	b.n	8007d52 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	4b15      	ldr	r3, [pc, #84]	; (8007d64 <xTaskCheckForTimeOut+0xc8>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d007      	beq.n	8007d26 <xTaskCheckForTimeOut+0x8a>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	69ba      	ldr	r2, [r7, #24]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d302      	bcc.n	8007d26 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d20:	2301      	movs	r3, #1
 8007d22:	61fb      	str	r3, [r7, #28]
 8007d24:	e015      	b.n	8007d52 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	697a      	ldr	r2, [r7, #20]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d20b      	bcs.n	8007d48 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	1ad2      	subs	r2, r2, r3
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f7ff ff97 	bl	8007c70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d42:	2300      	movs	r3, #0
 8007d44:	61fb      	str	r3, [r7, #28]
 8007d46:	e004      	b.n	8007d52 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d52:	f001 f8df 	bl	8008f14 <vPortExitCritical>

	return xReturn;
 8007d56:	69fb      	ldr	r3, [r7, #28]
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3720      	adds	r7, #32
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	20000fb4 	.word	0x20000fb4
 8007d64:	20000fc8 	.word	0x20000fc8

08007d68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d68:	b480      	push	{r7}
 8007d6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d6c:	4b03      	ldr	r3, [pc, #12]	; (8007d7c <vTaskMissedYield+0x14>)
 8007d6e:	2201      	movs	r2, #1
 8007d70:	601a      	str	r2, [r3, #0]
}
 8007d72:	bf00      	nop
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	20000fc4 	.word	0x20000fc4

08007d80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d88:	f000 f852 	bl	8007e30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d8c:	4b06      	ldr	r3, [pc, #24]	; (8007da8 <prvIdleTask+0x28>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d9f9      	bls.n	8007d88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d94:	4b05      	ldr	r3, [pc, #20]	; (8007dac <prvIdleTask+0x2c>)
 8007d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d9a:	601a      	str	r2, [r3, #0]
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007da4:	e7f0      	b.n	8007d88 <prvIdleTask+0x8>
 8007da6:	bf00      	nop
 8007da8:	20000ae0 	.word	0x20000ae0
 8007dac:	e000ed04 	.word	0xe000ed04

08007db0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007db6:	2300      	movs	r3, #0
 8007db8:	607b      	str	r3, [r7, #4]
 8007dba:	e00c      	b.n	8007dd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	4413      	add	r3, r2
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4a12      	ldr	r2, [pc, #72]	; (8007e10 <prvInitialiseTaskLists+0x60>)
 8007dc8:	4413      	add	r3, r2
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fe fa2c 	bl	8006228 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	607b      	str	r3, [r7, #4]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2b37      	cmp	r3, #55	; 0x37
 8007dda:	d9ef      	bls.n	8007dbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ddc:	480d      	ldr	r0, [pc, #52]	; (8007e14 <prvInitialiseTaskLists+0x64>)
 8007dde:	f7fe fa23 	bl	8006228 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007de2:	480d      	ldr	r0, [pc, #52]	; (8007e18 <prvInitialiseTaskLists+0x68>)
 8007de4:	f7fe fa20 	bl	8006228 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007de8:	480c      	ldr	r0, [pc, #48]	; (8007e1c <prvInitialiseTaskLists+0x6c>)
 8007dea:	f7fe fa1d 	bl	8006228 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007dee:	480c      	ldr	r0, [pc, #48]	; (8007e20 <prvInitialiseTaskLists+0x70>)
 8007df0:	f7fe fa1a 	bl	8006228 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007df4:	480b      	ldr	r0, [pc, #44]	; (8007e24 <prvInitialiseTaskLists+0x74>)
 8007df6:	f7fe fa17 	bl	8006228 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007dfa:	4b0b      	ldr	r3, [pc, #44]	; (8007e28 <prvInitialiseTaskLists+0x78>)
 8007dfc:	4a05      	ldr	r2, [pc, #20]	; (8007e14 <prvInitialiseTaskLists+0x64>)
 8007dfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e00:	4b0a      	ldr	r3, [pc, #40]	; (8007e2c <prvInitialiseTaskLists+0x7c>)
 8007e02:	4a05      	ldr	r2, [pc, #20]	; (8007e18 <prvInitialiseTaskLists+0x68>)
 8007e04:	601a      	str	r2, [r3, #0]
}
 8007e06:	bf00      	nop
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	20000ae0 	.word	0x20000ae0
 8007e14:	20000f40 	.word	0x20000f40
 8007e18:	20000f54 	.word	0x20000f54
 8007e1c:	20000f70 	.word	0x20000f70
 8007e20:	20000f84 	.word	0x20000f84
 8007e24:	20000f9c 	.word	0x20000f9c
 8007e28:	20000f68 	.word	0x20000f68
 8007e2c:	20000f6c 	.word	0x20000f6c

08007e30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e36:	e019      	b.n	8007e6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e38:	f001 f838 	bl	8008eac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e3c:	4b10      	ldr	r3, [pc, #64]	; (8007e80 <prvCheckTasksWaitingTermination+0x50>)
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	3304      	adds	r3, #4
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fe fa77 	bl	800633c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e4e:	4b0d      	ldr	r3, [pc, #52]	; (8007e84 <prvCheckTasksWaitingTermination+0x54>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	3b01      	subs	r3, #1
 8007e54:	4a0b      	ldr	r2, [pc, #44]	; (8007e84 <prvCheckTasksWaitingTermination+0x54>)
 8007e56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e58:	4b0b      	ldr	r3, [pc, #44]	; (8007e88 <prvCheckTasksWaitingTermination+0x58>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	4a0a      	ldr	r2, [pc, #40]	; (8007e88 <prvCheckTasksWaitingTermination+0x58>)
 8007e60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e62:	f001 f857 	bl	8008f14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f810 	bl	8007e8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e6c:	4b06      	ldr	r3, [pc, #24]	; (8007e88 <prvCheckTasksWaitingTermination+0x58>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1e1      	bne.n	8007e38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e74:	bf00      	nop
 8007e76:	bf00      	nop
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	20000f84 	.word	0x20000f84
 8007e84:	20000fb0 	.word	0x20000fb0
 8007e88:	20000f98 	.word	0x20000f98

08007e8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	3354      	adds	r3, #84	; 0x54
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f001 fd81 	bl	80099a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d108      	bne.n	8007eba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eac:	4618      	mov	r0, r3
 8007eae:	f001 f9f3 	bl	8009298 <vPortFree>
				vPortFree( pxTCB );
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f001 f9f0 	bl	8009298 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007eb8:	e01a      	b.n	8007ef0 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d103      	bne.n	8007ecc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f001 f9e7 	bl	8009298 <vPortFree>
	}
 8007eca:	e011      	b.n	8007ef0 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d00c      	beq.n	8007ef0 <prvDeleteTCB+0x64>
	__asm volatile
 8007ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eda:	b672      	cpsid	i
 8007edc:	f383 8811 	msr	BASEPRI, r3
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	b662      	cpsie	i
 8007eea:	60fb      	str	r3, [r7, #12]
}
 8007eec:	bf00      	nop
 8007eee:	e7fe      	b.n	8007eee <prvDeleteTCB+0x62>
	}
 8007ef0:	bf00      	nop
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007efe:	4b0c      	ldr	r3, [pc, #48]	; (8007f30 <prvResetNextTaskUnblockTime+0x38>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d104      	bne.n	8007f12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f08:	4b0a      	ldr	r3, [pc, #40]	; (8007f34 <prvResetNextTaskUnblockTime+0x3c>)
 8007f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f10:	e008      	b.n	8007f24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f12:	4b07      	ldr	r3, [pc, #28]	; (8007f30 <prvResetNextTaskUnblockTime+0x38>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	4a04      	ldr	r2, [pc, #16]	; (8007f34 <prvResetNextTaskUnblockTime+0x3c>)
 8007f22:	6013      	str	r3, [r2, #0]
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr
 8007f30:	20000f68 	.word	0x20000f68
 8007f34:	20000fd0 	.word	0x20000fd0

08007f38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f3e:	4b0b      	ldr	r3, [pc, #44]	; (8007f6c <xTaskGetSchedulerState+0x34>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d102      	bne.n	8007f4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f46:	2301      	movs	r3, #1
 8007f48:	607b      	str	r3, [r7, #4]
 8007f4a:	e008      	b.n	8007f5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f4c:	4b08      	ldr	r3, [pc, #32]	; (8007f70 <xTaskGetSchedulerState+0x38>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d102      	bne.n	8007f5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f54:	2302      	movs	r3, #2
 8007f56:	607b      	str	r3, [r7, #4]
 8007f58:	e001      	b.n	8007f5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f5e:	687b      	ldr	r3, [r7, #4]
	}
 8007f60:	4618      	mov	r0, r3
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr
 8007f6c:	20000fbc 	.word	0x20000fbc
 8007f70:	20000fd8 	.word	0x20000fd8

08007f74 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007f80:	2300      	movs	r3, #0
 8007f82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d051      	beq.n	800802e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f8e:	4b2a      	ldr	r3, [pc, #168]	; (8008038 <xTaskPriorityInherit+0xc4>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d241      	bcs.n	800801c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	db06      	blt.n	8007fae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fa0:	4b25      	ldr	r3, [pc, #148]	; (8008038 <xTaskPriorityInherit+0xc4>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	6959      	ldr	r1, [r3, #20]
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4413      	add	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4a1f      	ldr	r2, [pc, #124]	; (800803c <xTaskPriorityInherit+0xc8>)
 8007fc0:	4413      	add	r3, r2
 8007fc2:	4299      	cmp	r1, r3
 8007fc4:	d122      	bne.n	800800c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	3304      	adds	r3, #4
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fe f9b6 	bl	800633c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007fd0:	4b19      	ldr	r3, [pc, #100]	; (8008038 <xTaskPriorityInherit+0xc4>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fde:	4b18      	ldr	r3, [pc, #96]	; (8008040 <xTaskPriorityInherit+0xcc>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d903      	bls.n	8007fee <xTaskPriorityInherit+0x7a>
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fea:	4a15      	ldr	r2, [pc, #84]	; (8008040 <xTaskPriorityInherit+0xcc>)
 8007fec:	6013      	str	r3, [r2, #0]
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	4413      	add	r3, r2
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	4a10      	ldr	r2, [pc, #64]	; (800803c <xTaskPriorityInherit+0xc8>)
 8007ffc:	441a      	add	r2, r3
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	3304      	adds	r3, #4
 8008002:	4619      	mov	r1, r3
 8008004:	4610      	mov	r0, r2
 8008006:	f7fe f93c 	bl	8006282 <vListInsertEnd>
 800800a:	e004      	b.n	8008016 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800800c:	4b0a      	ldr	r3, [pc, #40]	; (8008038 <xTaskPriorityInherit+0xc4>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008016:	2301      	movs	r3, #1
 8008018:	60fb      	str	r3, [r7, #12]
 800801a:	e008      	b.n	800802e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008020:	4b05      	ldr	r3, [pc, #20]	; (8008038 <xTaskPriorityInherit+0xc4>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008026:	429a      	cmp	r2, r3
 8008028:	d201      	bcs.n	800802e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800802a:	2301      	movs	r3, #1
 800802c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800802e:	68fb      	ldr	r3, [r7, #12]
	}
 8008030:	4618      	mov	r0, r3
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	20000adc 	.word	0x20000adc
 800803c:	20000ae0 	.word	0x20000ae0
 8008040:	20000fb8 	.word	0x20000fb8

08008044 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008044:	b580      	push	{r7, lr}
 8008046:	b086      	sub	sp, #24
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008050:	2300      	movs	r3, #0
 8008052:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d05a      	beq.n	8008110 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800805a:	4b30      	ldr	r3, [pc, #192]	; (800811c <xTaskPriorityDisinherit+0xd8>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	429a      	cmp	r2, r3
 8008062:	d00c      	beq.n	800807e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008068:	b672      	cpsid	i
 800806a:	f383 8811 	msr	BASEPRI, r3
 800806e:	f3bf 8f6f 	isb	sy
 8008072:	f3bf 8f4f 	dsb	sy
 8008076:	b662      	cpsie	i
 8008078:	60fb      	str	r3, [r7, #12]
}
 800807a:	bf00      	nop
 800807c:	e7fe      	b.n	800807c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10c      	bne.n	80080a0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808a:	b672      	cpsid	i
 800808c:	f383 8811 	msr	BASEPRI, r3
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	b662      	cpsie	i
 800809a:	60bb      	str	r3, [r7, #8]
}
 800809c:	bf00      	nop
 800809e:	e7fe      	b.n	800809e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080a4:	1e5a      	subs	r2, r3, #1
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d02c      	beq.n	8008110 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d128      	bne.n	8008110 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	3304      	adds	r3, #4
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fe f93a 	bl	800633c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e0:	4b0f      	ldr	r3, [pc, #60]	; (8008120 <xTaskPriorityDisinherit+0xdc>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d903      	bls.n	80080f0 <xTaskPriorityDisinherit+0xac>
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ec:	4a0c      	ldr	r2, [pc, #48]	; (8008120 <xTaskPriorityDisinherit+0xdc>)
 80080ee:	6013      	str	r3, [r2, #0]
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080f4:	4613      	mov	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	4a09      	ldr	r2, [pc, #36]	; (8008124 <xTaskPriorityDisinherit+0xe0>)
 80080fe:	441a      	add	r2, r3
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	3304      	adds	r3, #4
 8008104:	4619      	mov	r1, r3
 8008106:	4610      	mov	r0, r2
 8008108:	f7fe f8bb 	bl	8006282 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800810c:	2301      	movs	r3, #1
 800810e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008110:	697b      	ldr	r3, [r7, #20]
	}
 8008112:	4618      	mov	r0, r3
 8008114:	3718      	adds	r7, #24
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	20000adc 	.word	0x20000adc
 8008120:	20000fb8 	.word	0x20000fb8
 8008124:	20000ae0 	.word	0x20000ae0

08008128 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008128:	b580      	push	{r7, lr}
 800812a:	b088      	sub	sp, #32
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008136:	2301      	movs	r3, #1
 8008138:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d06e      	beq.n	800821e <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10c      	bne.n	8008162 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8008148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814c:	b672      	cpsid	i
 800814e:	f383 8811 	msr	BASEPRI, r3
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	b662      	cpsie	i
 800815c:	60fb      	str	r3, [r7, #12]
}
 800815e:	bf00      	nop
 8008160:	e7fe      	b.n	8008160 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008166:	683a      	ldr	r2, [r7, #0]
 8008168:	429a      	cmp	r2, r3
 800816a:	d902      	bls.n	8008172 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	61fb      	str	r3, [r7, #28]
 8008170:	e002      	b.n	8008178 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008176:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817c:	69fa      	ldr	r2, [r7, #28]
 800817e:	429a      	cmp	r2, r3
 8008180:	d04d      	beq.n	800821e <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008186:	697a      	ldr	r2, [r7, #20]
 8008188:	429a      	cmp	r2, r3
 800818a:	d148      	bne.n	800821e <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800818c:	4b26      	ldr	r3, [pc, #152]	; (8008228 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	69ba      	ldr	r2, [r7, #24]
 8008192:	429a      	cmp	r2, r3
 8008194:	d10c      	bne.n	80081b0 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8008196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819a:	b672      	cpsid	i
 800819c:	f383 8811 	msr	BASEPRI, r3
 80081a0:	f3bf 8f6f 	isb	sy
 80081a4:	f3bf 8f4f 	dsb	sy
 80081a8:	b662      	cpsie	i
 80081aa:	60bb      	str	r3, [r7, #8]
}
 80081ac:	bf00      	nop
 80081ae:	e7fe      	b.n	80081ae <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	69fa      	ldr	r2, [r7, #28]
 80081ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	db04      	blt.n	80081ce <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	6959      	ldr	r1, [r3, #20]
 80081d2:	693a      	ldr	r2, [r7, #16]
 80081d4:	4613      	mov	r3, r2
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	4413      	add	r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	4a13      	ldr	r2, [pc, #76]	; (800822c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80081de:	4413      	add	r3, r2
 80081e0:	4299      	cmp	r1, r3
 80081e2:	d11c      	bne.n	800821e <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	3304      	adds	r3, #4
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7fe f8a7 	bl	800633c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f2:	4b0f      	ldr	r3, [pc, #60]	; (8008230 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d903      	bls.n	8008202 <vTaskPriorityDisinheritAfterTimeout+0xda>
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fe:	4a0c      	ldr	r2, [pc, #48]	; (8008230 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008200:	6013      	str	r3, [r2, #0]
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008206:	4613      	mov	r3, r2
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	4a07      	ldr	r2, [pc, #28]	; (800822c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008210:	441a      	add	r2, r3
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	3304      	adds	r3, #4
 8008216:	4619      	mov	r1, r3
 8008218:	4610      	mov	r0, r2
 800821a:	f7fe f832 	bl	8006282 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800821e:	bf00      	nop
 8008220:	3720      	adds	r7, #32
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	20000adc 	.word	0x20000adc
 800822c:	20000ae0 	.word	0x20000ae0
 8008230:	20000fb8 	.word	0x20000fb8

08008234 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008234:	b480      	push	{r7}
 8008236:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008238:	4b07      	ldr	r3, [pc, #28]	; (8008258 <pvTaskIncrementMutexHeldCount+0x24>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d004      	beq.n	800824a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008240:	4b05      	ldr	r3, [pc, #20]	; (8008258 <pvTaskIncrementMutexHeldCount+0x24>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008246:	3201      	adds	r2, #1
 8008248:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800824a:	4b03      	ldr	r3, [pc, #12]	; (8008258 <pvTaskIncrementMutexHeldCount+0x24>)
 800824c:	681b      	ldr	r3, [r3, #0]
	}
 800824e:	4618      	mov	r0, r3
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	20000adc 	.word	0x20000adc

0800825c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8008266:	f000 fe21 	bl	8008eac <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800826a:	4b20      	ldr	r3, [pc, #128]	; (80082ec <ulTaskNotifyTake+0x90>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008272:	2b00      	cmp	r3, #0
 8008274:	d113      	bne.n	800829e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008276:	4b1d      	ldr	r3, [pc, #116]	; (80082ec <ulTaskNotifyTake+0x90>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00b      	beq.n	800829e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008286:	2101      	movs	r1, #1
 8008288:	6838      	ldr	r0, [r7, #0]
 800828a:	f000 f8f7 	bl	800847c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800828e:	4b18      	ldr	r3, [pc, #96]	; (80082f0 <ulTaskNotifyTake+0x94>)
 8008290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008294:	601a      	str	r2, [r3, #0]
 8008296:	f3bf 8f4f 	dsb	sy
 800829a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800829e:	f000 fe39 	bl	8008f14 <vPortExitCritical>

		taskENTER_CRITICAL();
 80082a2:	f000 fe03 	bl	8008eac <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80082a6:	4b11      	ldr	r3, [pc, #68]	; (80082ec <ulTaskNotifyTake+0x90>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80082ae:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00e      	beq.n	80082d4 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d005      	beq.n	80082c8 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80082bc:	4b0b      	ldr	r3, [pc, #44]	; (80082ec <ulTaskNotifyTake+0x90>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80082c6:	e005      	b.n	80082d4 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80082c8:	4b08      	ldr	r3, [pc, #32]	; (80082ec <ulTaskNotifyTake+0x90>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	3a01      	subs	r2, #1
 80082d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80082d4:	4b05      	ldr	r3, [pc, #20]	; (80082ec <ulTaskNotifyTake+0x90>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 80082de:	f000 fe19 	bl	8008f14 <vPortExitCritical>

		return ulReturn;
 80082e2:	68fb      	ldr	r3, [r7, #12]
	}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	20000adc 	.word	0x20000adc
 80082f0:	e000ed04 	.word	0xe000ed04

080082f4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b08a      	sub	sp, #40	; 0x28
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	603b      	str	r3, [r7, #0]
 8008300:	4613      	mov	r3, r2
 8008302:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008304:	2301      	movs	r3, #1
 8008306:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10c      	bne.n	8008328 <xTaskGenericNotify+0x34>
	__asm volatile
 800830e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008312:	b672      	cpsid	i
 8008314:	f383 8811 	msr	BASEPRI, r3
 8008318:	f3bf 8f6f 	isb	sy
 800831c:	f3bf 8f4f 	dsb	sy
 8008320:	b662      	cpsie	i
 8008322:	61bb      	str	r3, [r7, #24]
}
 8008324:	bf00      	nop
 8008326:	e7fe      	b.n	8008326 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800832c:	f000 fdbe 	bl	8008eac <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d004      	beq.n	8008340 <xTaskGenericNotify+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008336:	6a3b      	ldr	r3, [r7, #32]
 8008338:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008340:	6a3b      	ldr	r3, [r7, #32]
 8008342:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8008346:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008348:	6a3b      	ldr	r3, [r7, #32]
 800834a:	2202      	movs	r2, #2
 800834c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8008350:	79fb      	ldrb	r3, [r7, #7]
 8008352:	2b04      	cmp	r3, #4
 8008354:	d82d      	bhi.n	80083b2 <xTaskGenericNotify+0xbe>
 8008356:	a201      	add	r2, pc, #4	; (adr r2, 800835c <xTaskGenericNotify+0x68>)
 8008358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835c:	080083d9 	.word	0x080083d9
 8008360:	08008371 	.word	0x08008371
 8008364:	08008383 	.word	0x08008383
 8008368:	08008393 	.word	0x08008393
 800836c:	0800839d 	.word	0x0800839d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008370:	6a3b      	ldr	r3, [r7, #32]
 8008372:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	431a      	orrs	r2, r3
 800837a:	6a3b      	ldr	r3, [r7, #32]
 800837c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8008380:	e02d      	b.n	80083de <xTaskGenericNotify+0xea>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008382:	6a3b      	ldr	r3, [r7, #32]
 8008384:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008388:	1c5a      	adds	r2, r3, #1
 800838a:	6a3b      	ldr	r3, [r7, #32]
 800838c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8008390:	e025      	b.n	80083de <xTaskGenericNotify+0xea>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008392:	6a3b      	ldr	r3, [r7, #32]
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800839a:	e020      	b.n	80083de <xTaskGenericNotify+0xea>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800839c:	7ffb      	ldrb	r3, [r7, #31]
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d004      	beq.n	80083ac <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80083a2:	6a3b      	ldr	r3, [r7, #32]
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80083aa:	e018      	b.n	80083de <xTaskGenericNotify+0xea>
						xReturn = pdFAIL;
 80083ac:	2300      	movs	r3, #0
 80083ae:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80083b0:	e015      	b.n	80083de <xTaskGenericNotify+0xea>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80083b2:	6a3b      	ldr	r3, [r7, #32]
 80083b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80083b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083bc:	d00e      	beq.n	80083dc <xTaskGenericNotify+0xe8>
	__asm volatile
 80083be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c2:	b672      	cpsid	i
 80083c4:	f383 8811 	msr	BASEPRI, r3
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	b662      	cpsie	i
 80083d2:	617b      	str	r3, [r7, #20]
}
 80083d4:	bf00      	nop
 80083d6:	e7fe      	b.n	80083d6 <xTaskGenericNotify+0xe2>
					break;
 80083d8:	bf00      	nop
 80083da:	e000      	b.n	80083de <xTaskGenericNotify+0xea>

					break;
 80083dc:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80083de:	7ffb      	ldrb	r3, [r7, #31]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d13c      	bne.n	800845e <xTaskGenericNotify+0x16a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083e4:	6a3b      	ldr	r3, [r7, #32]
 80083e6:	3304      	adds	r3, #4
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fd ffa7 	bl	800633c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80083ee:	6a3b      	ldr	r3, [r7, #32]
 80083f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083f2:	4b1e      	ldr	r3, [pc, #120]	; (800846c <xTaskGenericNotify+0x178>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d903      	bls.n	8008402 <xTaskGenericNotify+0x10e>
 80083fa:	6a3b      	ldr	r3, [r7, #32]
 80083fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fe:	4a1b      	ldr	r2, [pc, #108]	; (800846c <xTaskGenericNotify+0x178>)
 8008400:	6013      	str	r3, [r2, #0]
 8008402:	6a3b      	ldr	r3, [r7, #32]
 8008404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008406:	4613      	mov	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4413      	add	r3, r2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4a18      	ldr	r2, [pc, #96]	; (8008470 <xTaskGenericNotify+0x17c>)
 8008410:	441a      	add	r2, r3
 8008412:	6a3b      	ldr	r3, [r7, #32]
 8008414:	3304      	adds	r3, #4
 8008416:	4619      	mov	r1, r3
 8008418:	4610      	mov	r0, r2
 800841a:	f7fd ff32 	bl	8006282 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800841e:	6a3b      	ldr	r3, [r7, #32]
 8008420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00c      	beq.n	8008440 <xTaskGenericNotify+0x14c>
	__asm volatile
 8008426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842a:	b672      	cpsid	i
 800842c:	f383 8811 	msr	BASEPRI, r3
 8008430:	f3bf 8f6f 	isb	sy
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	b662      	cpsie	i
 800843a:	613b      	str	r3, [r7, #16]
}
 800843c:	bf00      	nop
 800843e:	e7fe      	b.n	800843e <xTaskGenericNotify+0x14a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008440:	6a3b      	ldr	r3, [r7, #32]
 8008442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008444:	4b0b      	ldr	r3, [pc, #44]	; (8008474 <xTaskGenericNotify+0x180>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844a:	429a      	cmp	r2, r3
 800844c:	d907      	bls.n	800845e <xTaskGenericNotify+0x16a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800844e:	4b0a      	ldr	r3, [pc, #40]	; (8008478 <xTaskGenericNotify+0x184>)
 8008450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008454:	601a      	str	r2, [r3, #0]
 8008456:	f3bf 8f4f 	dsb	sy
 800845a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800845e:	f000 fd59 	bl	8008f14 <vPortExitCritical>

		return xReturn;
 8008462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008464:	4618      	mov	r0, r3
 8008466:	3728      	adds	r7, #40	; 0x28
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	20000fb8 	.word	0x20000fb8
 8008470:	20000ae0 	.word	0x20000ae0
 8008474:	20000adc 	.word	0x20000adc
 8008478:	e000ed04 	.word	0xe000ed04

0800847c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008486:	4b21      	ldr	r3, [pc, #132]	; (800850c <prvAddCurrentTaskToDelayedList+0x90>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800848c:	4b20      	ldr	r3, [pc, #128]	; (8008510 <prvAddCurrentTaskToDelayedList+0x94>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	3304      	adds	r3, #4
 8008492:	4618      	mov	r0, r3
 8008494:	f7fd ff52 	bl	800633c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800849e:	d10a      	bne.n	80084b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d007      	beq.n	80084b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084a6:	4b1a      	ldr	r3, [pc, #104]	; (8008510 <prvAddCurrentTaskToDelayedList+0x94>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	3304      	adds	r3, #4
 80084ac:	4619      	mov	r1, r3
 80084ae:	4819      	ldr	r0, [pc, #100]	; (8008514 <prvAddCurrentTaskToDelayedList+0x98>)
 80084b0:	f7fd fee7 	bl	8006282 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80084b4:	e026      	b.n	8008504 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4413      	add	r3, r2
 80084bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80084be:	4b14      	ldr	r3, [pc, #80]	; (8008510 <prvAddCurrentTaskToDelayedList+0x94>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80084c6:	68ba      	ldr	r2, [r7, #8]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d209      	bcs.n	80084e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084ce:	4b12      	ldr	r3, [pc, #72]	; (8008518 <prvAddCurrentTaskToDelayedList+0x9c>)
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	4b0f      	ldr	r3, [pc, #60]	; (8008510 <prvAddCurrentTaskToDelayedList+0x94>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	3304      	adds	r3, #4
 80084d8:	4619      	mov	r1, r3
 80084da:	4610      	mov	r0, r2
 80084dc:	f7fd fef5 	bl	80062ca <vListInsert>
}
 80084e0:	e010      	b.n	8008504 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084e2:	4b0e      	ldr	r3, [pc, #56]	; (800851c <prvAddCurrentTaskToDelayedList+0xa0>)
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	4b0a      	ldr	r3, [pc, #40]	; (8008510 <prvAddCurrentTaskToDelayedList+0x94>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	3304      	adds	r3, #4
 80084ec:	4619      	mov	r1, r3
 80084ee:	4610      	mov	r0, r2
 80084f0:	f7fd feeb 	bl	80062ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80084f4:	4b0a      	ldr	r3, [pc, #40]	; (8008520 <prvAddCurrentTaskToDelayedList+0xa4>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d202      	bcs.n	8008504 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80084fe:	4a08      	ldr	r2, [pc, #32]	; (8008520 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	6013      	str	r3, [r2, #0]
}
 8008504:	bf00      	nop
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	20000fb4 	.word	0x20000fb4
 8008510:	20000adc 	.word	0x20000adc
 8008514:	20000f9c 	.word	0x20000f9c
 8008518:	20000f6c 	.word	0x20000f6c
 800851c:	20000f68 	.word	0x20000f68
 8008520:	20000fd0 	.word	0x20000fd0

08008524 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b08a      	sub	sp, #40	; 0x28
 8008528:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800852a:	2300      	movs	r3, #0
 800852c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800852e:	f000 fb73 	bl	8008c18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008532:	4b1d      	ldr	r3, [pc, #116]	; (80085a8 <xTimerCreateTimerTask+0x84>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d021      	beq.n	800857e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800853a:	2300      	movs	r3, #0
 800853c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800853e:	2300      	movs	r3, #0
 8008540:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008542:	1d3a      	adds	r2, r7, #4
 8008544:	f107 0108 	add.w	r1, r7, #8
 8008548:	f107 030c 	add.w	r3, r7, #12
 800854c:	4618      	mov	r0, r3
 800854e:	f7fd fe51 	bl	80061f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008552:	6879      	ldr	r1, [r7, #4]
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	9202      	str	r2, [sp, #8]
 800855a:	9301      	str	r3, [sp, #4]
 800855c:	2302      	movs	r3, #2
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	2300      	movs	r3, #0
 8008562:	460a      	mov	r2, r1
 8008564:	4911      	ldr	r1, [pc, #68]	; (80085ac <xTimerCreateTimerTask+0x88>)
 8008566:	4812      	ldr	r0, [pc, #72]	; (80085b0 <xTimerCreateTimerTask+0x8c>)
 8008568:	f7fe fe6c 	bl	8007244 <xTaskCreateStatic>
 800856c:	4603      	mov	r3, r0
 800856e:	4a11      	ldr	r2, [pc, #68]	; (80085b4 <xTimerCreateTimerTask+0x90>)
 8008570:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008572:	4b10      	ldr	r3, [pc, #64]	; (80085b4 <xTimerCreateTimerTask+0x90>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d001      	beq.n	800857e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800857a:	2301      	movs	r3, #1
 800857c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d10c      	bne.n	800859e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8008584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008588:	b672      	cpsid	i
 800858a:	f383 8811 	msr	BASEPRI, r3
 800858e:	f3bf 8f6f 	isb	sy
 8008592:	f3bf 8f4f 	dsb	sy
 8008596:	b662      	cpsie	i
 8008598:	613b      	str	r3, [r7, #16]
}
 800859a:	bf00      	nop
 800859c:	e7fe      	b.n	800859c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800859e:	697b      	ldr	r3, [r7, #20]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3718      	adds	r7, #24
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	2000100c 	.word	0x2000100c
 80085ac:	0800a704 	.word	0x0800a704
 80085b0:	080087b1 	.word	0x080087b1
 80085b4:	20001010 	.word	0x20001010

080085b8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b088      	sub	sp, #32
 80085bc:	af02      	add	r7, sp, #8
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
 80085c4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80085c6:	202c      	movs	r0, #44	; 0x2c
 80085c8:	f000 fd9c 	bl	8009104 <pvPortMalloc>
 80085cc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00d      	beq.n	80085f0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	9301      	str	r3, [sp, #4]
 80085e0:	6a3b      	ldr	r3, [r7, #32]
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	68b9      	ldr	r1, [r7, #8]
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f000 f805 	bl	80085fa <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80085f0:	697b      	ldr	r3, [r7, #20]
	}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3718      	adds	r7, #24
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b086      	sub	sp, #24
 80085fe:	af00      	add	r7, sp, #0
 8008600:	60f8      	str	r0, [r7, #12]
 8008602:	60b9      	str	r1, [r7, #8]
 8008604:	607a      	str	r2, [r7, #4]
 8008606:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10c      	bne.n	8008628 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800860e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008612:	b672      	cpsid	i
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	b662      	cpsie	i
 8008622:	617b      	str	r3, [r7, #20]
}
 8008624:	bf00      	nop
 8008626:	e7fe      	b.n	8008626 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 8008628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862a:	2b00      	cmp	r3, #0
 800862c:	d01e      	beq.n	800866c <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800862e:	f000 faf3 	bl	8008c18 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863a:	68ba      	ldr	r2, [r7, #8]
 800863c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800863e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008640:	683a      	ldr	r2, [r7, #0]
 8008642:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008646:	6a3a      	ldr	r2, [r7, #32]
 8008648:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800864a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864c:	3304      	adds	r3, #4
 800864e:	4618      	mov	r0, r3
 8008650:	f7fd fe0a 	bl	8006268 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d008      	beq.n	800866c <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800865a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008660:	f043 0304 	orr.w	r3, r3, #4
 8008664:	b2da      	uxtb	r2, r3
 8008666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008668:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800866c:	bf00      	nop
 800866e:	3718      	adds	r7, #24
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b08a      	sub	sp, #40	; 0x28
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
 8008680:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008682:	2300      	movs	r3, #0
 8008684:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d10c      	bne.n	80086a6 <xTimerGenericCommand+0x32>
	__asm volatile
 800868c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008690:	b672      	cpsid	i
 8008692:	f383 8811 	msr	BASEPRI, r3
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	b662      	cpsie	i
 80086a0:	623b      	str	r3, [r7, #32]
}
 80086a2:	bf00      	nop
 80086a4:	e7fe      	b.n	80086a4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80086a6:	4b1a      	ldr	r3, [pc, #104]	; (8008710 <xTimerGenericCommand+0x9c>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d02a      	beq.n	8008704 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	2b05      	cmp	r3, #5
 80086be:	dc18      	bgt.n	80086f2 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80086c0:	f7ff fc3a 	bl	8007f38 <xTaskGetSchedulerState>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	d109      	bne.n	80086de <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80086ca:	4b11      	ldr	r3, [pc, #68]	; (8008710 <xTimerGenericCommand+0x9c>)
 80086cc:	6818      	ldr	r0, [r3, #0]
 80086ce:	f107 0110 	add.w	r1, r7, #16
 80086d2:	2300      	movs	r3, #0
 80086d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086d6:	f7fe f81f 	bl	8006718 <xQueueGenericSend>
 80086da:	6278      	str	r0, [r7, #36]	; 0x24
 80086dc:	e012      	b.n	8008704 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80086de:	4b0c      	ldr	r3, [pc, #48]	; (8008710 <xTimerGenericCommand+0x9c>)
 80086e0:	6818      	ldr	r0, [r3, #0]
 80086e2:	f107 0110 	add.w	r1, r7, #16
 80086e6:	2300      	movs	r3, #0
 80086e8:	2200      	movs	r2, #0
 80086ea:	f7fe f815 	bl	8006718 <xQueueGenericSend>
 80086ee:	6278      	str	r0, [r7, #36]	; 0x24
 80086f0:	e008      	b.n	8008704 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80086f2:	4b07      	ldr	r3, [pc, #28]	; (8008710 <xTimerGenericCommand+0x9c>)
 80086f4:	6818      	ldr	r0, [r3, #0]
 80086f6:	f107 0110 	add.w	r1, r7, #16
 80086fa:	2300      	movs	r3, #0
 80086fc:	683a      	ldr	r2, [r7, #0]
 80086fe:	f7fe f911 	bl	8006924 <xQueueGenericSendFromISR>
 8008702:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008706:	4618      	mov	r0, r3
 8008708:	3728      	adds	r7, #40	; 0x28
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	2000100c 	.word	0x2000100c

08008714 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b088      	sub	sp, #32
 8008718:	af02      	add	r7, sp, #8
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800871e:	4b23      	ldr	r3, [pc, #140]	; (80087ac <prvProcessExpiredTimer+0x98>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	3304      	adds	r3, #4
 800872c:	4618      	mov	r0, r3
 800872e:	f7fd fe05 	bl	800633c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008738:	f003 0304 	and.w	r3, r3, #4
 800873c:	2b00      	cmp	r3, #0
 800873e:	d024      	beq.n	800878a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	699a      	ldr	r2, [r3, #24]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	18d1      	adds	r1, r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	683a      	ldr	r2, [r7, #0]
 800874c:	6978      	ldr	r0, [r7, #20]
 800874e:	f000 f8d3 	bl	80088f8 <prvInsertTimerInActiveList>
 8008752:	4603      	mov	r3, r0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d021      	beq.n	800879c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008758:	2300      	movs	r3, #0
 800875a:	9300      	str	r3, [sp, #0]
 800875c:	2300      	movs	r3, #0
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	2100      	movs	r1, #0
 8008762:	6978      	ldr	r0, [r7, #20]
 8008764:	f7ff ff86 	bl	8008674 <xTimerGenericCommand>
 8008768:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d115      	bne.n	800879c <prvProcessExpiredTimer+0x88>
	__asm volatile
 8008770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008774:	b672      	cpsid	i
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	b662      	cpsie	i
 8008784:	60fb      	str	r3, [r7, #12]
}
 8008786:	bf00      	nop
 8008788:	e7fe      	b.n	8008788 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008790:	f023 0301 	bic.w	r3, r3, #1
 8008794:	b2da      	uxtb	r2, r3
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	6a1b      	ldr	r3, [r3, #32]
 80087a0:	6978      	ldr	r0, [r7, #20]
 80087a2:	4798      	blx	r3
}
 80087a4:	bf00      	nop
 80087a6:	3718      	adds	r7, #24
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	20001004 	.word	0x20001004

080087b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80087b8:	f107 0308 	add.w	r3, r7, #8
 80087bc:	4618      	mov	r0, r3
 80087be:	f000 f857 	bl	8008870 <prvGetNextExpireTime>
 80087c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	4619      	mov	r1, r3
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f000 f803 	bl	80087d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80087ce:	f000 f8d5 	bl	800897c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80087d2:	e7f1      	b.n	80087b8 <prvTimerTask+0x8>

080087d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80087de:	f7fe ff9b 	bl	8007718 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80087e2:	f107 0308 	add.w	r3, r7, #8
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 f866 	bl	80088b8 <prvSampleTimeNow>
 80087ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d130      	bne.n	8008856 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10a      	bne.n	8008810 <prvProcessTimerOrBlockTask+0x3c>
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d806      	bhi.n	8008810 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008802:	f7fe ff97 	bl	8007734 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008806:	68f9      	ldr	r1, [r7, #12]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f7ff ff83 	bl	8008714 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800880e:	e024      	b.n	800885a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d008      	beq.n	8008828 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008816:	4b13      	ldr	r3, [pc, #76]	; (8008864 <prvProcessTimerOrBlockTask+0x90>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d101      	bne.n	8008824 <prvProcessTimerOrBlockTask+0x50>
 8008820:	2301      	movs	r3, #1
 8008822:	e000      	b.n	8008826 <prvProcessTimerOrBlockTask+0x52>
 8008824:	2300      	movs	r3, #0
 8008826:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008828:	4b0f      	ldr	r3, [pc, #60]	; (8008868 <prvProcessTimerOrBlockTask+0x94>)
 800882a:	6818      	ldr	r0, [r3, #0]
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	4619      	mov	r1, r3
 8008836:	f7fe fcd1 	bl	80071dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800883a:	f7fe ff7b 	bl	8007734 <xTaskResumeAll>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10a      	bne.n	800885a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008844:	4b09      	ldr	r3, [pc, #36]	; (800886c <prvProcessTimerOrBlockTask+0x98>)
 8008846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800884a:	601a      	str	r2, [r3, #0]
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	f3bf 8f6f 	isb	sy
}
 8008854:	e001      	b.n	800885a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008856:	f7fe ff6d 	bl	8007734 <xTaskResumeAll>
}
 800885a:	bf00      	nop
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	20001008 	.word	0x20001008
 8008868:	2000100c 	.word	0x2000100c
 800886c:	e000ed04 	.word	0xe000ed04

08008870 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008878:	4b0e      	ldr	r3, [pc, #56]	; (80088b4 <prvGetNextExpireTime+0x44>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d101      	bne.n	8008886 <prvGetNextExpireTime+0x16>
 8008882:	2201      	movs	r2, #1
 8008884:	e000      	b.n	8008888 <prvGetNextExpireTime+0x18>
 8008886:	2200      	movs	r2, #0
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d105      	bne.n	80088a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008894:	4b07      	ldr	r3, [pc, #28]	; (80088b4 <prvGetNextExpireTime+0x44>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	60fb      	str	r3, [r7, #12]
 800889e:	e001      	b.n	80088a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80088a0:	2300      	movs	r3, #0
 80088a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80088a4:	68fb      	ldr	r3, [r7, #12]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	20001004 	.word	0x20001004

080088b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80088c0:	f7fe ffd8 	bl	8007874 <xTaskGetTickCount>
 80088c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80088c6:	4b0b      	ldr	r3, [pc, #44]	; (80088f4 <prvSampleTimeNow+0x3c>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d205      	bcs.n	80088dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80088d0:	f000 f93c 	bl	8008b4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	e002      	b.n	80088e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80088e2:	4a04      	ldr	r2, [pc, #16]	; (80088f4 <prvSampleTimeNow+0x3c>)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80088e8:	68fb      	ldr	r3, [r7, #12]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	20001014 	.word	0x20001014

080088f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b086      	sub	sp, #24
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
 8008904:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008906:	2300      	movs	r3, #0
 8008908:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008916:	68ba      	ldr	r2, [r7, #8]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	429a      	cmp	r2, r3
 800891c:	d812      	bhi.n	8008944 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	1ad2      	subs	r2, r2, r3
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	699b      	ldr	r3, [r3, #24]
 8008928:	429a      	cmp	r2, r3
 800892a:	d302      	bcc.n	8008932 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800892c:	2301      	movs	r3, #1
 800892e:	617b      	str	r3, [r7, #20]
 8008930:	e01b      	b.n	800896a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008932:	4b10      	ldr	r3, [pc, #64]	; (8008974 <prvInsertTimerInActiveList+0x7c>)
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	3304      	adds	r3, #4
 800893a:	4619      	mov	r1, r3
 800893c:	4610      	mov	r0, r2
 800893e:	f7fd fcc4 	bl	80062ca <vListInsert>
 8008942:	e012      	b.n	800896a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	429a      	cmp	r2, r3
 800894a:	d206      	bcs.n	800895a <prvInsertTimerInActiveList+0x62>
 800894c:	68ba      	ldr	r2, [r7, #8]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	429a      	cmp	r2, r3
 8008952:	d302      	bcc.n	800895a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008954:	2301      	movs	r3, #1
 8008956:	617b      	str	r3, [r7, #20]
 8008958:	e007      	b.n	800896a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800895a:	4b07      	ldr	r3, [pc, #28]	; (8008978 <prvInsertTimerInActiveList+0x80>)
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3304      	adds	r3, #4
 8008962:	4619      	mov	r1, r3
 8008964:	4610      	mov	r0, r2
 8008966:	f7fd fcb0 	bl	80062ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800896a:	697b      	ldr	r3, [r7, #20]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3718      	adds	r7, #24
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	20001008 	.word	0x20001008
 8008978:	20001004 	.word	0x20001004

0800897c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b08e      	sub	sp, #56	; 0x38
 8008980:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008982:	e0d0      	b.n	8008b26 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2b00      	cmp	r3, #0
 8008988:	da1a      	bge.n	80089c0 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800898a:	1d3b      	adds	r3, r7, #4
 800898c:	3304      	adds	r3, #4
 800898e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008992:	2b00      	cmp	r3, #0
 8008994:	d10c      	bne.n	80089b0 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8008996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899a:	b672      	cpsid	i
 800899c:	f383 8811 	msr	BASEPRI, r3
 80089a0:	f3bf 8f6f 	isb	sy
 80089a4:	f3bf 8f4f 	dsb	sy
 80089a8:	b662      	cpsie	i
 80089aa:	61fb      	str	r3, [r7, #28]
}
 80089ac:	bf00      	nop
 80089ae:	e7fe      	b.n	80089ae <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80089b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089b6:	6850      	ldr	r0, [r2, #4]
 80089b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089ba:	6892      	ldr	r2, [r2, #8]
 80089bc:	4611      	mov	r1, r2
 80089be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f2c0 80ae 	blt.w	8008b24 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80089cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ce:	695b      	ldr	r3, [r3, #20]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d004      	beq.n	80089de <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d6:	3304      	adds	r3, #4
 80089d8:	4618      	mov	r0, r3
 80089da:	f7fd fcaf 	bl	800633c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80089de:	463b      	mov	r3, r7
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7ff ff69 	bl	80088b8 <prvSampleTimeNow>
 80089e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2b09      	cmp	r3, #9
 80089ec:	f200 809b 	bhi.w	8008b26 <prvProcessReceivedCommands+0x1aa>
 80089f0:	a201      	add	r2, pc, #4	; (adr r2, 80089f8 <prvProcessReceivedCommands+0x7c>)
 80089f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f6:	bf00      	nop
 80089f8:	08008a21 	.word	0x08008a21
 80089fc:	08008a21 	.word	0x08008a21
 8008a00:	08008a21 	.word	0x08008a21
 8008a04:	08008a99 	.word	0x08008a99
 8008a08:	08008aad 	.word	0x08008aad
 8008a0c:	08008afb 	.word	0x08008afb
 8008a10:	08008a21 	.word	0x08008a21
 8008a14:	08008a21 	.word	0x08008a21
 8008a18:	08008a99 	.word	0x08008a99
 8008a1c:	08008aad 	.word	0x08008aad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a26:	f043 0301 	orr.w	r3, r3, #1
 8008a2a:	b2da      	uxtb	r2, r3
 8008a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008a32:	68ba      	ldr	r2, [r7, #8]
 8008a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a36:	699b      	ldr	r3, [r3, #24]
 8008a38:	18d1      	adds	r1, r2, r3
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a40:	f7ff ff5a 	bl	80088f8 <prvInsertTimerInActiveList>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d06d      	beq.n	8008b26 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4c:	6a1b      	ldr	r3, [r3, #32]
 8008a4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a58:	f003 0304 	and.w	r3, r3, #4
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d062      	beq.n	8008b26 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008a60:	68ba      	ldr	r2, [r7, #8]
 8008a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	441a      	add	r2, r3
 8008a68:	2300      	movs	r3, #0
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	2100      	movs	r1, #0
 8008a70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a72:	f7ff fdff 	bl	8008674 <xTimerGenericCommand>
 8008a76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008a78:	6a3b      	ldr	r3, [r7, #32]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d153      	bne.n	8008b26 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8008a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a82:	b672      	cpsid	i
 8008a84:	f383 8811 	msr	BASEPRI, r3
 8008a88:	f3bf 8f6f 	isb	sy
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	b662      	cpsie	i
 8008a92:	61bb      	str	r3, [r7, #24]
}
 8008a94:	bf00      	nop
 8008a96:	e7fe      	b.n	8008a96 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a9e:	f023 0301 	bic.w	r3, r3, #1
 8008aa2:	b2da      	uxtb	r2, r3
 8008aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008aaa:	e03c      	b.n	8008b26 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ab2:	f043 0301 	orr.w	r3, r3, #1
 8008ab6:	b2da      	uxtb	r2, r3
 8008ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008abe:	68ba      	ldr	r2, [r7, #8]
 8008ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac6:	699b      	ldr	r3, [r3, #24]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d10c      	bne.n	8008ae6 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8008acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad0:	b672      	cpsid	i
 8008ad2:	f383 8811 	msr	BASEPRI, r3
 8008ad6:	f3bf 8f6f 	isb	sy
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	b662      	cpsie	i
 8008ae0:	617b      	str	r3, [r7, #20]
}
 8008ae2:	bf00      	nop
 8008ae4:	e7fe      	b.n	8008ae4 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae8:	699a      	ldr	r2, [r3, #24]
 8008aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aec:	18d1      	adds	r1, r2, r3
 8008aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008af2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008af4:	f7ff ff00 	bl	80088f8 <prvInsertTimerInActiveList>
					break;
 8008af8:	e015      	b.n	8008b26 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b00:	f003 0302 	and.w	r3, r3, #2
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d103      	bne.n	8008b10 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8008b08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b0a:	f000 fbc5 	bl	8009298 <vPortFree>
 8008b0e:	e00a      	b.n	8008b26 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b16:	f023 0301 	bic.w	r3, r3, #1
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008b22:	e000      	b.n	8008b26 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008b24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b26:	4b08      	ldr	r3, [pc, #32]	; (8008b48 <prvProcessReceivedCommands+0x1cc>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	1d39      	adds	r1, r7, #4
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fd ff98 	bl	8006a64 <xQueueReceive>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f47f af24 	bne.w	8008984 <prvProcessReceivedCommands+0x8>
	}
}
 8008b3c:	bf00      	nop
 8008b3e:	bf00      	nop
 8008b40:	3730      	adds	r7, #48	; 0x30
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	2000100c 	.word	0x2000100c

08008b4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b088      	sub	sp, #32
 8008b50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b52:	e04a      	b.n	8008bea <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b54:	4b2e      	ldr	r3, [pc, #184]	; (8008c10 <prvSwitchTimerLists+0xc4>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b5e:	4b2c      	ldr	r3, [pc, #176]	; (8008c10 <prvSwitchTimerLists+0xc4>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fd fbe5 	bl	800633c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b80:	f003 0304 	and.w	r3, r3, #4
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d030      	beq.n	8008bea <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	699b      	ldr	r3, [r3, #24]
 8008b8c:	693a      	ldr	r2, [r7, #16]
 8008b8e:	4413      	add	r3, r2
 8008b90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008b92:	68ba      	ldr	r2, [r7, #8]
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d90e      	bls.n	8008bb8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	68ba      	ldr	r2, [r7, #8]
 8008b9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ba6:	4b1a      	ldr	r3, [pc, #104]	; (8008c10 <prvSwitchTimerLists+0xc4>)
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	3304      	adds	r3, #4
 8008bae:	4619      	mov	r1, r3
 8008bb0:	4610      	mov	r0, r2
 8008bb2:	f7fd fb8a 	bl	80062ca <vListInsert>
 8008bb6:	e018      	b.n	8008bea <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008bb8:	2300      	movs	r3, #0
 8008bba:	9300      	str	r3, [sp, #0]
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	693a      	ldr	r2, [r7, #16]
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	68f8      	ldr	r0, [r7, #12]
 8008bc4:	f7ff fd56 	bl	8008674 <xTimerGenericCommand>
 8008bc8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d10c      	bne.n	8008bea <prvSwitchTimerLists+0x9e>
	__asm volatile
 8008bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd4:	b672      	cpsid	i
 8008bd6:	f383 8811 	msr	BASEPRI, r3
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	b662      	cpsie	i
 8008be4:	603b      	str	r3, [r7, #0]
}
 8008be6:	bf00      	nop
 8008be8:	e7fe      	b.n	8008be8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008bea:	4b09      	ldr	r3, [pc, #36]	; (8008c10 <prvSwitchTimerLists+0xc4>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d1af      	bne.n	8008b54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008bf4:	4b06      	ldr	r3, [pc, #24]	; (8008c10 <prvSwitchTimerLists+0xc4>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008bfa:	4b06      	ldr	r3, [pc, #24]	; (8008c14 <prvSwitchTimerLists+0xc8>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a04      	ldr	r2, [pc, #16]	; (8008c10 <prvSwitchTimerLists+0xc4>)
 8008c00:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008c02:	4a04      	ldr	r2, [pc, #16]	; (8008c14 <prvSwitchTimerLists+0xc8>)
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	6013      	str	r3, [r2, #0]
}
 8008c08:	bf00      	nop
 8008c0a:	3718      	adds	r7, #24
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	20001004 	.word	0x20001004
 8008c14:	20001008 	.word	0x20001008

08008c18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008c1e:	f000 f945 	bl	8008eac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008c22:	4b15      	ldr	r3, [pc, #84]	; (8008c78 <prvCheckForValidListAndQueue+0x60>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d120      	bne.n	8008c6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008c2a:	4814      	ldr	r0, [pc, #80]	; (8008c7c <prvCheckForValidListAndQueue+0x64>)
 8008c2c:	f7fd fafc 	bl	8006228 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008c30:	4813      	ldr	r0, [pc, #76]	; (8008c80 <prvCheckForValidListAndQueue+0x68>)
 8008c32:	f7fd faf9 	bl	8006228 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008c36:	4b13      	ldr	r3, [pc, #76]	; (8008c84 <prvCheckForValidListAndQueue+0x6c>)
 8008c38:	4a10      	ldr	r2, [pc, #64]	; (8008c7c <prvCheckForValidListAndQueue+0x64>)
 8008c3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008c3c:	4b12      	ldr	r3, [pc, #72]	; (8008c88 <prvCheckForValidListAndQueue+0x70>)
 8008c3e:	4a10      	ldr	r2, [pc, #64]	; (8008c80 <prvCheckForValidListAndQueue+0x68>)
 8008c40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008c42:	2300      	movs	r3, #0
 8008c44:	9300      	str	r3, [sp, #0]
 8008c46:	4b11      	ldr	r3, [pc, #68]	; (8008c8c <prvCheckForValidListAndQueue+0x74>)
 8008c48:	4a11      	ldr	r2, [pc, #68]	; (8008c90 <prvCheckForValidListAndQueue+0x78>)
 8008c4a:	2110      	movs	r1, #16
 8008c4c:	200a      	movs	r0, #10
 8008c4e:	f7fd fc09 	bl	8006464 <xQueueGenericCreateStatic>
 8008c52:	4603      	mov	r3, r0
 8008c54:	4a08      	ldr	r2, [pc, #32]	; (8008c78 <prvCheckForValidListAndQueue+0x60>)
 8008c56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008c58:	4b07      	ldr	r3, [pc, #28]	; (8008c78 <prvCheckForValidListAndQueue+0x60>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d005      	beq.n	8008c6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008c60:	4b05      	ldr	r3, [pc, #20]	; (8008c78 <prvCheckForValidListAndQueue+0x60>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	490b      	ldr	r1, [pc, #44]	; (8008c94 <prvCheckForValidListAndQueue+0x7c>)
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7fe fa64 	bl	8007134 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c6c:	f000 f952 	bl	8008f14 <vPortExitCritical>
}
 8008c70:	bf00      	nop
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	2000100c 	.word	0x2000100c
 8008c7c:	20000fdc 	.word	0x20000fdc
 8008c80:	20000ff0 	.word	0x20000ff0
 8008c84:	20001004 	.word	0x20001004
 8008c88:	20001008 	.word	0x20001008
 8008c8c:	200010b8 	.word	0x200010b8
 8008c90:	20001018 	.word	0x20001018
 8008c94:	0800a70c 	.word	0x0800a70c

08008c98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	3b04      	subs	r3, #4
 8008ca8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008cb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	3b04      	subs	r3, #4
 8008cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	f023 0201 	bic.w	r2, r3, #1
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	3b04      	subs	r3, #4
 8008cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008cc8:	4a0c      	ldr	r2, [pc, #48]	; (8008cfc <pxPortInitialiseStack+0x64>)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	3b14      	subs	r3, #20
 8008cd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	3b04      	subs	r3, #4
 8008cde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f06f 0202 	mvn.w	r2, #2
 8008ce6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	3b20      	subs	r3, #32
 8008cec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008cee:	68fb      	ldr	r3, [r7, #12]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3714      	adds	r7, #20
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr
 8008cfc:	08008d01 	.word	0x08008d01

08008d00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d00:	b480      	push	{r7}
 8008d02:	b085      	sub	sp, #20
 8008d04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d06:	2300      	movs	r3, #0
 8008d08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d0a:	4b14      	ldr	r3, [pc, #80]	; (8008d5c <prvTaskExitError+0x5c>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d12:	d00c      	beq.n	8008d2e <prvTaskExitError+0x2e>
	__asm volatile
 8008d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d18:	b672      	cpsid	i
 8008d1a:	f383 8811 	msr	BASEPRI, r3
 8008d1e:	f3bf 8f6f 	isb	sy
 8008d22:	f3bf 8f4f 	dsb	sy
 8008d26:	b662      	cpsie	i
 8008d28:	60fb      	str	r3, [r7, #12]
}
 8008d2a:	bf00      	nop
 8008d2c:	e7fe      	b.n	8008d2c <prvTaskExitError+0x2c>
	__asm volatile
 8008d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d32:	b672      	cpsid	i
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	b662      	cpsie	i
 8008d42:	60bb      	str	r3, [r7, #8]
}
 8008d44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d46:	bf00      	nop
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d0fc      	beq.n	8008d48 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d4e:	bf00      	nop
 8008d50:	bf00      	nop
 8008d52:	3714      	adds	r7, #20
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr
 8008d5c:	2000000c 	.word	0x2000000c

08008d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d60:	4b07      	ldr	r3, [pc, #28]	; (8008d80 <pxCurrentTCBConst2>)
 8008d62:	6819      	ldr	r1, [r3, #0]
 8008d64:	6808      	ldr	r0, [r1, #0]
 8008d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6a:	f380 8809 	msr	PSP, r0
 8008d6e:	f3bf 8f6f 	isb	sy
 8008d72:	f04f 0000 	mov.w	r0, #0
 8008d76:	f380 8811 	msr	BASEPRI, r0
 8008d7a:	4770      	bx	lr
 8008d7c:	f3af 8000 	nop.w

08008d80 <pxCurrentTCBConst2>:
 8008d80:	20000adc 	.word	0x20000adc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008d84:	bf00      	nop
 8008d86:	bf00      	nop

08008d88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008d88:	4808      	ldr	r0, [pc, #32]	; (8008dac <prvPortStartFirstTask+0x24>)
 8008d8a:	6800      	ldr	r0, [r0, #0]
 8008d8c:	6800      	ldr	r0, [r0, #0]
 8008d8e:	f380 8808 	msr	MSP, r0
 8008d92:	f04f 0000 	mov.w	r0, #0
 8008d96:	f380 8814 	msr	CONTROL, r0
 8008d9a:	b662      	cpsie	i
 8008d9c:	b661      	cpsie	f
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	f3bf 8f6f 	isb	sy
 8008da6:	df00      	svc	0
 8008da8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008daa:	bf00      	nop
 8008dac:	e000ed08 	.word	0xe000ed08

08008db0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008db6:	4b37      	ldr	r3, [pc, #220]	; (8008e94 <xPortStartScheduler+0xe4>)
 8008db8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	22ff      	movs	r2, #255	; 0xff
 8008dc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008dd0:	78fb      	ldrb	r3, [r7, #3]
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008dd8:	b2da      	uxtb	r2, r3
 8008dda:	4b2f      	ldr	r3, [pc, #188]	; (8008e98 <xPortStartScheduler+0xe8>)
 8008ddc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008dde:	4b2f      	ldr	r3, [pc, #188]	; (8008e9c <xPortStartScheduler+0xec>)
 8008de0:	2207      	movs	r2, #7
 8008de2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008de4:	e009      	b.n	8008dfa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008de6:	4b2d      	ldr	r3, [pc, #180]	; (8008e9c <xPortStartScheduler+0xec>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	3b01      	subs	r3, #1
 8008dec:	4a2b      	ldr	r2, [pc, #172]	; (8008e9c <xPortStartScheduler+0xec>)
 8008dee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008df0:	78fb      	ldrb	r3, [r7, #3]
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	005b      	lsls	r3, r3, #1
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008dfa:	78fb      	ldrb	r3, [r7, #3]
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e02:	2b80      	cmp	r3, #128	; 0x80
 8008e04:	d0ef      	beq.n	8008de6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e06:	4b25      	ldr	r3, [pc, #148]	; (8008e9c <xPortStartScheduler+0xec>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f1c3 0307 	rsb	r3, r3, #7
 8008e0e:	2b04      	cmp	r3, #4
 8008e10:	d00c      	beq.n	8008e2c <xPortStartScheduler+0x7c>
	__asm volatile
 8008e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e16:	b672      	cpsid	i
 8008e18:	f383 8811 	msr	BASEPRI, r3
 8008e1c:	f3bf 8f6f 	isb	sy
 8008e20:	f3bf 8f4f 	dsb	sy
 8008e24:	b662      	cpsie	i
 8008e26:	60bb      	str	r3, [r7, #8]
}
 8008e28:	bf00      	nop
 8008e2a:	e7fe      	b.n	8008e2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e2c:	4b1b      	ldr	r3, [pc, #108]	; (8008e9c <xPortStartScheduler+0xec>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	021b      	lsls	r3, r3, #8
 8008e32:	4a1a      	ldr	r2, [pc, #104]	; (8008e9c <xPortStartScheduler+0xec>)
 8008e34:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e36:	4b19      	ldr	r3, [pc, #100]	; (8008e9c <xPortStartScheduler+0xec>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e3e:	4a17      	ldr	r2, [pc, #92]	; (8008e9c <xPortStartScheduler+0xec>)
 8008e40:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	b2da      	uxtb	r2, r3
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e4a:	4b15      	ldr	r3, [pc, #84]	; (8008ea0 <xPortStartScheduler+0xf0>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a14      	ldr	r2, [pc, #80]	; (8008ea0 <xPortStartScheduler+0xf0>)
 8008e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e54:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e56:	4b12      	ldr	r3, [pc, #72]	; (8008ea0 <xPortStartScheduler+0xf0>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a11      	ldr	r2, [pc, #68]	; (8008ea0 <xPortStartScheduler+0xf0>)
 8008e5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008e60:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008e62:	f000 f8dd 	bl	8009020 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008e66:	4b0f      	ldr	r3, [pc, #60]	; (8008ea4 <xPortStartScheduler+0xf4>)
 8008e68:	2200      	movs	r2, #0
 8008e6a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008e6c:	f000 f8fc 	bl	8009068 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008e70:	4b0d      	ldr	r3, [pc, #52]	; (8008ea8 <xPortStartScheduler+0xf8>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a0c      	ldr	r2, [pc, #48]	; (8008ea8 <xPortStartScheduler+0xf8>)
 8008e76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008e7a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008e7c:	f7ff ff84 	bl	8008d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008e80:	f7fe fdd6 	bl	8007a30 <vTaskSwitchContext>
	prvTaskExitError();
 8008e84:	f7ff ff3c 	bl	8008d00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	e000e400 	.word	0xe000e400
 8008e98:	20001108 	.word	0x20001108
 8008e9c:	2000110c 	.word	0x2000110c
 8008ea0:	e000ed20 	.word	0xe000ed20
 8008ea4:	2000000c 	.word	0x2000000c
 8008ea8:	e000ef34 	.word	0xe000ef34

08008eac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
	__asm volatile
 8008eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb6:	b672      	cpsid	i
 8008eb8:	f383 8811 	msr	BASEPRI, r3
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	b662      	cpsie	i
 8008ec6:	607b      	str	r3, [r7, #4]
}
 8008ec8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008eca:	4b10      	ldr	r3, [pc, #64]	; (8008f0c <vPortEnterCritical+0x60>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	4a0e      	ldr	r2, [pc, #56]	; (8008f0c <vPortEnterCritical+0x60>)
 8008ed2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008ed4:	4b0d      	ldr	r3, [pc, #52]	; (8008f0c <vPortEnterCritical+0x60>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d111      	bne.n	8008f00 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008edc:	4b0c      	ldr	r3, [pc, #48]	; (8008f10 <vPortEnterCritical+0x64>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00c      	beq.n	8008f00 <vPortEnterCritical+0x54>
	__asm volatile
 8008ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eea:	b672      	cpsid	i
 8008eec:	f383 8811 	msr	BASEPRI, r3
 8008ef0:	f3bf 8f6f 	isb	sy
 8008ef4:	f3bf 8f4f 	dsb	sy
 8008ef8:	b662      	cpsie	i
 8008efa:	603b      	str	r3, [r7, #0]
}
 8008efc:	bf00      	nop
 8008efe:	e7fe      	b.n	8008efe <vPortEnterCritical+0x52>
	}
}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	2000000c 	.word	0x2000000c
 8008f10:	e000ed04 	.word	0xe000ed04

08008f14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f1a:	4b13      	ldr	r3, [pc, #76]	; (8008f68 <vPortExitCritical+0x54>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10c      	bne.n	8008f3c <vPortExitCritical+0x28>
	__asm volatile
 8008f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f26:	b672      	cpsid	i
 8008f28:	f383 8811 	msr	BASEPRI, r3
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	b662      	cpsie	i
 8008f36:	607b      	str	r3, [r7, #4]
}
 8008f38:	bf00      	nop
 8008f3a:	e7fe      	b.n	8008f3a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008f3c:	4b0a      	ldr	r3, [pc, #40]	; (8008f68 <vPortExitCritical+0x54>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	3b01      	subs	r3, #1
 8008f42:	4a09      	ldr	r2, [pc, #36]	; (8008f68 <vPortExitCritical+0x54>)
 8008f44:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008f46:	4b08      	ldr	r3, [pc, #32]	; (8008f68 <vPortExitCritical+0x54>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d105      	bne.n	8008f5a <vPortExitCritical+0x46>
 8008f4e:	2300      	movs	r3, #0
 8008f50:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	f383 8811 	msr	BASEPRI, r3
}
 8008f58:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008f5a:	bf00      	nop
 8008f5c:	370c      	adds	r7, #12
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	2000000c 	.word	0x2000000c
 8008f6c:	00000000 	.word	0x00000000

08008f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008f70:	f3ef 8009 	mrs	r0, PSP
 8008f74:	f3bf 8f6f 	isb	sy
 8008f78:	4b15      	ldr	r3, [pc, #84]	; (8008fd0 <pxCurrentTCBConst>)
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	f01e 0f10 	tst.w	lr, #16
 8008f80:	bf08      	it	eq
 8008f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f8a:	6010      	str	r0, [r2, #0]
 8008f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008f90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008f94:	b672      	cpsid	i
 8008f96:	f380 8811 	msr	BASEPRI, r0
 8008f9a:	f3bf 8f4f 	dsb	sy
 8008f9e:	f3bf 8f6f 	isb	sy
 8008fa2:	b662      	cpsie	i
 8008fa4:	f7fe fd44 	bl	8007a30 <vTaskSwitchContext>
 8008fa8:	f04f 0000 	mov.w	r0, #0
 8008fac:	f380 8811 	msr	BASEPRI, r0
 8008fb0:	bc09      	pop	{r0, r3}
 8008fb2:	6819      	ldr	r1, [r3, #0]
 8008fb4:	6808      	ldr	r0, [r1, #0]
 8008fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fba:	f01e 0f10 	tst.w	lr, #16
 8008fbe:	bf08      	it	eq
 8008fc0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008fc4:	f380 8809 	msr	PSP, r0
 8008fc8:	f3bf 8f6f 	isb	sy
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop

08008fd0 <pxCurrentTCBConst>:
 8008fd0:	20000adc 	.word	0x20000adc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008fd4:	bf00      	nop
 8008fd6:	bf00      	nop

08008fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8008fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe2:	b672      	cpsid	i
 8008fe4:	f383 8811 	msr	BASEPRI, r3
 8008fe8:	f3bf 8f6f 	isb	sy
 8008fec:	f3bf 8f4f 	dsb	sy
 8008ff0:	b662      	cpsie	i
 8008ff2:	607b      	str	r3, [r7, #4]
}
 8008ff4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ff6:	f7fe fc5f 	bl	80078b8 <xTaskIncrementTick>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d003      	beq.n	8009008 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009000:	4b06      	ldr	r3, [pc, #24]	; (800901c <SysTick_Handler+0x44>)
 8009002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009006:	601a      	str	r2, [r3, #0]
 8009008:	2300      	movs	r3, #0
 800900a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	f383 8811 	msr	BASEPRI, r3
}
 8009012:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009014:	bf00      	nop
 8009016:	3708      	adds	r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	e000ed04 	.word	0xe000ed04

08009020 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009020:	b480      	push	{r7}
 8009022:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009024:	4b0b      	ldr	r3, [pc, #44]	; (8009054 <vPortSetupTimerInterrupt+0x34>)
 8009026:	2200      	movs	r2, #0
 8009028:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800902a:	4b0b      	ldr	r3, [pc, #44]	; (8009058 <vPortSetupTimerInterrupt+0x38>)
 800902c:	2200      	movs	r2, #0
 800902e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009030:	4b0a      	ldr	r3, [pc, #40]	; (800905c <vPortSetupTimerInterrupt+0x3c>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a0a      	ldr	r2, [pc, #40]	; (8009060 <vPortSetupTimerInterrupt+0x40>)
 8009036:	fba2 2303 	umull	r2, r3, r2, r3
 800903a:	099b      	lsrs	r3, r3, #6
 800903c:	4a09      	ldr	r2, [pc, #36]	; (8009064 <vPortSetupTimerInterrupt+0x44>)
 800903e:	3b01      	subs	r3, #1
 8009040:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009042:	4b04      	ldr	r3, [pc, #16]	; (8009054 <vPortSetupTimerInterrupt+0x34>)
 8009044:	2207      	movs	r2, #7
 8009046:	601a      	str	r2, [r3, #0]
}
 8009048:	bf00      	nop
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	e000e010 	.word	0xe000e010
 8009058:	e000e018 	.word	0xe000e018
 800905c:	20000000 	.word	0x20000000
 8009060:	10624dd3 	.word	0x10624dd3
 8009064:	e000e014 	.word	0xe000e014

08009068 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009068:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009078 <vPortEnableVFP+0x10>
 800906c:	6801      	ldr	r1, [r0, #0]
 800906e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009072:	6001      	str	r1, [r0, #0]
 8009074:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009076:	bf00      	nop
 8009078:	e000ed88 	.word	0xe000ed88

0800907c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009082:	f3ef 8305 	mrs	r3, IPSR
 8009086:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2b0f      	cmp	r3, #15
 800908c:	d916      	bls.n	80090bc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800908e:	4a19      	ldr	r2, [pc, #100]	; (80090f4 <vPortValidateInterruptPriority+0x78>)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	4413      	add	r3, r2
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009098:	4b17      	ldr	r3, [pc, #92]	; (80090f8 <vPortValidateInterruptPriority+0x7c>)
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	7afa      	ldrb	r2, [r7, #11]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d20c      	bcs.n	80090bc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80090a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a6:	b672      	cpsid	i
 80090a8:	f383 8811 	msr	BASEPRI, r3
 80090ac:	f3bf 8f6f 	isb	sy
 80090b0:	f3bf 8f4f 	dsb	sy
 80090b4:	b662      	cpsie	i
 80090b6:	607b      	str	r3, [r7, #4]
}
 80090b8:	bf00      	nop
 80090ba:	e7fe      	b.n	80090ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80090bc:	4b0f      	ldr	r3, [pc, #60]	; (80090fc <vPortValidateInterruptPriority+0x80>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80090c4:	4b0e      	ldr	r3, [pc, #56]	; (8009100 <vPortValidateInterruptPriority+0x84>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d90c      	bls.n	80090e6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80090cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d0:	b672      	cpsid	i
 80090d2:	f383 8811 	msr	BASEPRI, r3
 80090d6:	f3bf 8f6f 	isb	sy
 80090da:	f3bf 8f4f 	dsb	sy
 80090de:	b662      	cpsie	i
 80090e0:	603b      	str	r3, [r7, #0]
}
 80090e2:	bf00      	nop
 80090e4:	e7fe      	b.n	80090e4 <vPortValidateInterruptPriority+0x68>
	}
 80090e6:	bf00      	nop
 80090e8:	3714      	adds	r7, #20
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	e000e3f0 	.word	0xe000e3f0
 80090f8:	20001108 	.word	0x20001108
 80090fc:	e000ed0c 	.word	0xe000ed0c
 8009100:	2000110c 	.word	0x2000110c

08009104 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b08a      	sub	sp, #40	; 0x28
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800910c:	2300      	movs	r3, #0
 800910e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009110:	f7fe fb02 	bl	8007718 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009114:	4b5b      	ldr	r3, [pc, #364]	; (8009284 <pvPortMalloc+0x180>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d101      	bne.n	8009120 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800911c:	f000 f91a 	bl	8009354 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009120:	4b59      	ldr	r3, [pc, #356]	; (8009288 <pvPortMalloc+0x184>)
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4013      	ands	r3, r2
 8009128:	2b00      	cmp	r3, #0
 800912a:	f040 8092 	bne.w	8009252 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d01f      	beq.n	8009174 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009134:	2208      	movs	r2, #8
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4413      	add	r3, r2
 800913a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f003 0307 	and.w	r3, r3, #7
 8009142:	2b00      	cmp	r3, #0
 8009144:	d016      	beq.n	8009174 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f023 0307 	bic.w	r3, r3, #7
 800914c:	3308      	adds	r3, #8
 800914e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f003 0307 	and.w	r3, r3, #7
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00c      	beq.n	8009174 <pvPortMalloc+0x70>
	__asm volatile
 800915a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915e:	b672      	cpsid	i
 8009160:	f383 8811 	msr	BASEPRI, r3
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	f3bf 8f4f 	dsb	sy
 800916c:	b662      	cpsie	i
 800916e:	617b      	str	r3, [r7, #20]
}
 8009170:	bf00      	nop
 8009172:	e7fe      	b.n	8009172 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d06b      	beq.n	8009252 <pvPortMalloc+0x14e>
 800917a:	4b44      	ldr	r3, [pc, #272]	; (800928c <pvPortMalloc+0x188>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	429a      	cmp	r2, r3
 8009182:	d866      	bhi.n	8009252 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009184:	4b42      	ldr	r3, [pc, #264]	; (8009290 <pvPortMalloc+0x18c>)
 8009186:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009188:	4b41      	ldr	r3, [pc, #260]	; (8009290 <pvPortMalloc+0x18c>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800918e:	e004      	b.n	800919a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009192:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800919a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d903      	bls.n	80091ac <pvPortMalloc+0xa8>
 80091a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d1f1      	bne.n	8009190 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80091ac:	4b35      	ldr	r3, [pc, #212]	; (8009284 <pvPortMalloc+0x180>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d04d      	beq.n	8009252 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80091b6:	6a3b      	ldr	r3, [r7, #32]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2208      	movs	r2, #8
 80091bc:	4413      	add	r3, r2
 80091be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80091c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	6a3b      	ldr	r3, [r7, #32]
 80091c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80091c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ca:	685a      	ldr	r2, [r3, #4]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	1ad2      	subs	r2, r2, r3
 80091d0:	2308      	movs	r3, #8
 80091d2:	005b      	lsls	r3, r3, #1
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d921      	bls.n	800921c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80091d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4413      	add	r3, r2
 80091de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	f003 0307 	and.w	r3, r3, #7
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00c      	beq.n	8009204 <pvPortMalloc+0x100>
	__asm volatile
 80091ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ee:	b672      	cpsid	i
 80091f0:	f383 8811 	msr	BASEPRI, r3
 80091f4:	f3bf 8f6f 	isb	sy
 80091f8:	f3bf 8f4f 	dsb	sy
 80091fc:	b662      	cpsie	i
 80091fe:	613b      	str	r3, [r7, #16]
}
 8009200:	bf00      	nop
 8009202:	e7fe      	b.n	8009202 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009206:	685a      	ldr	r2, [r3, #4]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	1ad2      	subs	r2, r2, r3
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009216:	69b8      	ldr	r0, [r7, #24]
 8009218:	f000 f8fe 	bl	8009418 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800921c:	4b1b      	ldr	r3, [pc, #108]	; (800928c <pvPortMalloc+0x188>)
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	4a19      	ldr	r2, [pc, #100]	; (800928c <pvPortMalloc+0x188>)
 8009228:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800922a:	4b18      	ldr	r3, [pc, #96]	; (800928c <pvPortMalloc+0x188>)
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	4b19      	ldr	r3, [pc, #100]	; (8009294 <pvPortMalloc+0x190>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	429a      	cmp	r2, r3
 8009234:	d203      	bcs.n	800923e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009236:	4b15      	ldr	r3, [pc, #84]	; (800928c <pvPortMalloc+0x188>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a16      	ldr	r2, [pc, #88]	; (8009294 <pvPortMalloc+0x190>)
 800923c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800923e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009240:	685a      	ldr	r2, [r3, #4]
 8009242:	4b11      	ldr	r3, [pc, #68]	; (8009288 <pvPortMalloc+0x184>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	431a      	orrs	r2, r3
 8009248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800924c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924e:	2200      	movs	r2, #0
 8009250:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009252:	f7fe fa6f 	bl	8007734 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	f003 0307 	and.w	r3, r3, #7
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00c      	beq.n	800927a <pvPortMalloc+0x176>
	__asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009264:	b672      	cpsid	i
 8009266:	f383 8811 	msr	BASEPRI, r3
 800926a:	f3bf 8f6f 	isb	sy
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	b662      	cpsie	i
 8009274:	60fb      	str	r3, [r7, #12]
}
 8009276:	bf00      	nop
 8009278:	e7fe      	b.n	8009278 <pvPortMalloc+0x174>
	return pvReturn;
 800927a:	69fb      	ldr	r3, [r7, #28]
}
 800927c:	4618      	mov	r0, r3
 800927e:	3728      	adds	r7, #40	; 0x28
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	20004d18 	.word	0x20004d18
 8009288:	20004d24 	.word	0x20004d24
 800928c:	20004d1c 	.word	0x20004d1c
 8009290:	20004d10 	.word	0x20004d10
 8009294:	20004d20 	.word	0x20004d20

08009298 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b086      	sub	sp, #24
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d04c      	beq.n	8009344 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80092aa:	2308      	movs	r3, #8
 80092ac:	425b      	negs	r3, r3
 80092ae:	697a      	ldr	r2, [r7, #20]
 80092b0:	4413      	add	r3, r2
 80092b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	685a      	ldr	r2, [r3, #4]
 80092bc:	4b23      	ldr	r3, [pc, #140]	; (800934c <vPortFree+0xb4>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4013      	ands	r3, r2
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10c      	bne.n	80092e0 <vPortFree+0x48>
	__asm volatile
 80092c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ca:	b672      	cpsid	i
 80092cc:	f383 8811 	msr	BASEPRI, r3
 80092d0:	f3bf 8f6f 	isb	sy
 80092d4:	f3bf 8f4f 	dsb	sy
 80092d8:	b662      	cpsie	i
 80092da:	60fb      	str	r3, [r7, #12]
}
 80092dc:	bf00      	nop
 80092de:	e7fe      	b.n	80092de <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00c      	beq.n	8009302 <vPortFree+0x6a>
	__asm volatile
 80092e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ec:	b672      	cpsid	i
 80092ee:	f383 8811 	msr	BASEPRI, r3
 80092f2:	f3bf 8f6f 	isb	sy
 80092f6:	f3bf 8f4f 	dsb	sy
 80092fa:	b662      	cpsie	i
 80092fc:	60bb      	str	r3, [r7, #8]
}
 80092fe:	bf00      	nop
 8009300:	e7fe      	b.n	8009300 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	685a      	ldr	r2, [r3, #4]
 8009306:	4b11      	ldr	r3, [pc, #68]	; (800934c <vPortFree+0xb4>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4013      	ands	r3, r2
 800930c:	2b00      	cmp	r3, #0
 800930e:	d019      	beq.n	8009344 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d115      	bne.n	8009344 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	685a      	ldr	r2, [r3, #4]
 800931c:	4b0b      	ldr	r3, [pc, #44]	; (800934c <vPortFree+0xb4>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	43db      	mvns	r3, r3
 8009322:	401a      	ands	r2, r3
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009328:	f7fe f9f6 	bl	8007718 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	685a      	ldr	r2, [r3, #4]
 8009330:	4b07      	ldr	r3, [pc, #28]	; (8009350 <vPortFree+0xb8>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4413      	add	r3, r2
 8009336:	4a06      	ldr	r2, [pc, #24]	; (8009350 <vPortFree+0xb8>)
 8009338:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800933a:	6938      	ldr	r0, [r7, #16]
 800933c:	f000 f86c 	bl	8009418 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009340:	f7fe f9f8 	bl	8007734 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009344:	bf00      	nop
 8009346:	3718      	adds	r7, #24
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}
 800934c:	20004d24 	.word	0x20004d24
 8009350:	20004d1c 	.word	0x20004d1c

08009354 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009354:	b480      	push	{r7}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800935a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800935e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009360:	4b27      	ldr	r3, [pc, #156]	; (8009400 <prvHeapInit+0xac>)
 8009362:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f003 0307 	and.w	r3, r3, #7
 800936a:	2b00      	cmp	r3, #0
 800936c:	d00c      	beq.n	8009388 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	3307      	adds	r3, #7
 8009372:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f023 0307 	bic.w	r3, r3, #7
 800937a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800937c:	68ba      	ldr	r2, [r7, #8]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	4a1f      	ldr	r2, [pc, #124]	; (8009400 <prvHeapInit+0xac>)
 8009384:	4413      	add	r3, r2
 8009386:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800938c:	4a1d      	ldr	r2, [pc, #116]	; (8009404 <prvHeapInit+0xb0>)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009392:	4b1c      	ldr	r3, [pc, #112]	; (8009404 <prvHeapInit+0xb0>)
 8009394:	2200      	movs	r2, #0
 8009396:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	68ba      	ldr	r2, [r7, #8]
 800939c:	4413      	add	r3, r2
 800939e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80093a0:	2208      	movs	r2, #8
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	1a9b      	subs	r3, r3, r2
 80093a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f023 0307 	bic.w	r3, r3, #7
 80093ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	4a15      	ldr	r2, [pc, #84]	; (8009408 <prvHeapInit+0xb4>)
 80093b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80093b6:	4b14      	ldr	r3, [pc, #80]	; (8009408 <prvHeapInit+0xb4>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2200      	movs	r2, #0
 80093bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80093be:	4b12      	ldr	r3, [pc, #72]	; (8009408 <prvHeapInit+0xb4>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2200      	movs	r2, #0
 80093c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	1ad2      	subs	r2, r2, r3
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80093d4:	4b0c      	ldr	r3, [pc, #48]	; (8009408 <prvHeapInit+0xb4>)
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	4a0a      	ldr	r2, [pc, #40]	; (800940c <prvHeapInit+0xb8>)
 80093e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	4a09      	ldr	r2, [pc, #36]	; (8009410 <prvHeapInit+0xbc>)
 80093ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80093ec:	4b09      	ldr	r3, [pc, #36]	; (8009414 <prvHeapInit+0xc0>)
 80093ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80093f2:	601a      	str	r2, [r3, #0]
}
 80093f4:	bf00      	nop
 80093f6:	3714      	adds	r7, #20
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr
 8009400:	20001110 	.word	0x20001110
 8009404:	20004d10 	.word	0x20004d10
 8009408:	20004d18 	.word	0x20004d18
 800940c:	20004d20 	.word	0x20004d20
 8009410:	20004d1c 	.word	0x20004d1c
 8009414:	20004d24 	.word	0x20004d24

08009418 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009418:	b480      	push	{r7}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009420:	4b28      	ldr	r3, [pc, #160]	; (80094c4 <prvInsertBlockIntoFreeList+0xac>)
 8009422:	60fb      	str	r3, [r7, #12]
 8009424:	e002      	b.n	800942c <prvInsertBlockIntoFreeList+0x14>
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	60fb      	str	r3, [r7, #12]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	429a      	cmp	r2, r3
 8009434:	d8f7      	bhi.n	8009426 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	4413      	add	r3, r2
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	429a      	cmp	r2, r3
 8009446:	d108      	bne.n	800945a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	685a      	ldr	r2, [r3, #4]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	441a      	add	r2, r3
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	68ba      	ldr	r2, [r7, #8]
 8009464:	441a      	add	r2, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	429a      	cmp	r2, r3
 800946c:	d118      	bne.n	80094a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	4b15      	ldr	r3, [pc, #84]	; (80094c8 <prvInsertBlockIntoFreeList+0xb0>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	429a      	cmp	r2, r3
 8009478:	d00d      	beq.n	8009496 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	685a      	ldr	r2, [r3, #4]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	441a      	add	r2, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	601a      	str	r2, [r3, #0]
 8009494:	e008      	b.n	80094a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009496:	4b0c      	ldr	r3, [pc, #48]	; (80094c8 <prvInsertBlockIntoFreeList+0xb0>)
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	601a      	str	r2, [r3, #0]
 800949e:	e003      	b.n	80094a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d002      	beq.n	80094b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094b6:	bf00      	nop
 80094b8:	3714      	adds	r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	20004d10 	.word	0x20004d10
 80094c8:	20004d18 	.word	0x20004d18

080094cc <__errno>:
 80094cc:	4b01      	ldr	r3, [pc, #4]	; (80094d4 <__errno+0x8>)
 80094ce:	6818      	ldr	r0, [r3, #0]
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	20000010 	.word	0x20000010

080094d8 <std>:
 80094d8:	2300      	movs	r3, #0
 80094da:	b510      	push	{r4, lr}
 80094dc:	4604      	mov	r4, r0
 80094de:	e9c0 3300 	strd	r3, r3, [r0]
 80094e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094e6:	6083      	str	r3, [r0, #8]
 80094e8:	8181      	strh	r1, [r0, #12]
 80094ea:	6643      	str	r3, [r0, #100]	; 0x64
 80094ec:	81c2      	strh	r2, [r0, #14]
 80094ee:	6183      	str	r3, [r0, #24]
 80094f0:	4619      	mov	r1, r3
 80094f2:	2208      	movs	r2, #8
 80094f4:	305c      	adds	r0, #92	; 0x5c
 80094f6:	f000 f91a 	bl	800972e <memset>
 80094fa:	4b05      	ldr	r3, [pc, #20]	; (8009510 <std+0x38>)
 80094fc:	6263      	str	r3, [r4, #36]	; 0x24
 80094fe:	4b05      	ldr	r3, [pc, #20]	; (8009514 <std+0x3c>)
 8009500:	62a3      	str	r3, [r4, #40]	; 0x28
 8009502:	4b05      	ldr	r3, [pc, #20]	; (8009518 <std+0x40>)
 8009504:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009506:	4b05      	ldr	r3, [pc, #20]	; (800951c <std+0x44>)
 8009508:	6224      	str	r4, [r4, #32]
 800950a:	6323      	str	r3, [r4, #48]	; 0x30
 800950c:	bd10      	pop	{r4, pc}
 800950e:	bf00      	nop
 8009510:	08009a79 	.word	0x08009a79
 8009514:	08009a9b 	.word	0x08009a9b
 8009518:	08009ad3 	.word	0x08009ad3
 800951c:	08009af7 	.word	0x08009af7

08009520 <_cleanup_r>:
 8009520:	4901      	ldr	r1, [pc, #4]	; (8009528 <_cleanup_r+0x8>)
 8009522:	f000 b8af 	b.w	8009684 <_fwalk_reent>
 8009526:	bf00      	nop
 8009528:	08009dd1 	.word	0x08009dd1

0800952c <__sfmoreglue>:
 800952c:	b570      	push	{r4, r5, r6, lr}
 800952e:	2268      	movs	r2, #104	; 0x68
 8009530:	1e4d      	subs	r5, r1, #1
 8009532:	4355      	muls	r5, r2
 8009534:	460e      	mov	r6, r1
 8009536:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800953a:	f000 f921 	bl	8009780 <_malloc_r>
 800953e:	4604      	mov	r4, r0
 8009540:	b140      	cbz	r0, 8009554 <__sfmoreglue+0x28>
 8009542:	2100      	movs	r1, #0
 8009544:	e9c0 1600 	strd	r1, r6, [r0]
 8009548:	300c      	adds	r0, #12
 800954a:	60a0      	str	r0, [r4, #8]
 800954c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009550:	f000 f8ed 	bl	800972e <memset>
 8009554:	4620      	mov	r0, r4
 8009556:	bd70      	pop	{r4, r5, r6, pc}

08009558 <__sfp_lock_acquire>:
 8009558:	4801      	ldr	r0, [pc, #4]	; (8009560 <__sfp_lock_acquire+0x8>)
 800955a:	f000 b8d8 	b.w	800970e <__retarget_lock_acquire_recursive>
 800955e:	bf00      	nop
 8009560:	20004d29 	.word	0x20004d29

08009564 <__sfp_lock_release>:
 8009564:	4801      	ldr	r0, [pc, #4]	; (800956c <__sfp_lock_release+0x8>)
 8009566:	f000 b8d3 	b.w	8009710 <__retarget_lock_release_recursive>
 800956a:	bf00      	nop
 800956c:	20004d29 	.word	0x20004d29

08009570 <__sinit_lock_acquire>:
 8009570:	4801      	ldr	r0, [pc, #4]	; (8009578 <__sinit_lock_acquire+0x8>)
 8009572:	f000 b8cc 	b.w	800970e <__retarget_lock_acquire_recursive>
 8009576:	bf00      	nop
 8009578:	20004d2a 	.word	0x20004d2a

0800957c <__sinit_lock_release>:
 800957c:	4801      	ldr	r0, [pc, #4]	; (8009584 <__sinit_lock_release+0x8>)
 800957e:	f000 b8c7 	b.w	8009710 <__retarget_lock_release_recursive>
 8009582:	bf00      	nop
 8009584:	20004d2a 	.word	0x20004d2a

08009588 <__sinit>:
 8009588:	b510      	push	{r4, lr}
 800958a:	4604      	mov	r4, r0
 800958c:	f7ff fff0 	bl	8009570 <__sinit_lock_acquire>
 8009590:	69a3      	ldr	r3, [r4, #24]
 8009592:	b11b      	cbz	r3, 800959c <__sinit+0x14>
 8009594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009598:	f7ff bff0 	b.w	800957c <__sinit_lock_release>
 800959c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80095a0:	6523      	str	r3, [r4, #80]	; 0x50
 80095a2:	4b13      	ldr	r3, [pc, #76]	; (80095f0 <__sinit+0x68>)
 80095a4:	4a13      	ldr	r2, [pc, #76]	; (80095f4 <__sinit+0x6c>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80095aa:	42a3      	cmp	r3, r4
 80095ac:	bf04      	itt	eq
 80095ae:	2301      	moveq	r3, #1
 80095b0:	61a3      	streq	r3, [r4, #24]
 80095b2:	4620      	mov	r0, r4
 80095b4:	f000 f820 	bl	80095f8 <__sfp>
 80095b8:	6060      	str	r0, [r4, #4]
 80095ba:	4620      	mov	r0, r4
 80095bc:	f000 f81c 	bl	80095f8 <__sfp>
 80095c0:	60a0      	str	r0, [r4, #8]
 80095c2:	4620      	mov	r0, r4
 80095c4:	f000 f818 	bl	80095f8 <__sfp>
 80095c8:	2200      	movs	r2, #0
 80095ca:	60e0      	str	r0, [r4, #12]
 80095cc:	2104      	movs	r1, #4
 80095ce:	6860      	ldr	r0, [r4, #4]
 80095d0:	f7ff ff82 	bl	80094d8 <std>
 80095d4:	68a0      	ldr	r0, [r4, #8]
 80095d6:	2201      	movs	r2, #1
 80095d8:	2109      	movs	r1, #9
 80095da:	f7ff ff7d 	bl	80094d8 <std>
 80095de:	68e0      	ldr	r0, [r4, #12]
 80095e0:	2202      	movs	r2, #2
 80095e2:	2112      	movs	r1, #18
 80095e4:	f7ff ff78 	bl	80094d8 <std>
 80095e8:	2301      	movs	r3, #1
 80095ea:	61a3      	str	r3, [r4, #24]
 80095ec:	e7d2      	b.n	8009594 <__sinit+0xc>
 80095ee:	bf00      	nop
 80095f0:	0800a840 	.word	0x0800a840
 80095f4:	08009521 	.word	0x08009521

080095f8 <__sfp>:
 80095f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fa:	4607      	mov	r7, r0
 80095fc:	f7ff ffac 	bl	8009558 <__sfp_lock_acquire>
 8009600:	4b1e      	ldr	r3, [pc, #120]	; (800967c <__sfp+0x84>)
 8009602:	681e      	ldr	r6, [r3, #0]
 8009604:	69b3      	ldr	r3, [r6, #24]
 8009606:	b913      	cbnz	r3, 800960e <__sfp+0x16>
 8009608:	4630      	mov	r0, r6
 800960a:	f7ff ffbd 	bl	8009588 <__sinit>
 800960e:	3648      	adds	r6, #72	; 0x48
 8009610:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009614:	3b01      	subs	r3, #1
 8009616:	d503      	bpl.n	8009620 <__sfp+0x28>
 8009618:	6833      	ldr	r3, [r6, #0]
 800961a:	b30b      	cbz	r3, 8009660 <__sfp+0x68>
 800961c:	6836      	ldr	r6, [r6, #0]
 800961e:	e7f7      	b.n	8009610 <__sfp+0x18>
 8009620:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009624:	b9d5      	cbnz	r5, 800965c <__sfp+0x64>
 8009626:	4b16      	ldr	r3, [pc, #88]	; (8009680 <__sfp+0x88>)
 8009628:	60e3      	str	r3, [r4, #12]
 800962a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800962e:	6665      	str	r5, [r4, #100]	; 0x64
 8009630:	f000 f86c 	bl	800970c <__retarget_lock_init_recursive>
 8009634:	f7ff ff96 	bl	8009564 <__sfp_lock_release>
 8009638:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800963c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009640:	6025      	str	r5, [r4, #0]
 8009642:	61a5      	str	r5, [r4, #24]
 8009644:	2208      	movs	r2, #8
 8009646:	4629      	mov	r1, r5
 8009648:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800964c:	f000 f86f 	bl	800972e <memset>
 8009650:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009654:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009658:	4620      	mov	r0, r4
 800965a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800965c:	3468      	adds	r4, #104	; 0x68
 800965e:	e7d9      	b.n	8009614 <__sfp+0x1c>
 8009660:	2104      	movs	r1, #4
 8009662:	4638      	mov	r0, r7
 8009664:	f7ff ff62 	bl	800952c <__sfmoreglue>
 8009668:	4604      	mov	r4, r0
 800966a:	6030      	str	r0, [r6, #0]
 800966c:	2800      	cmp	r0, #0
 800966e:	d1d5      	bne.n	800961c <__sfp+0x24>
 8009670:	f7ff ff78 	bl	8009564 <__sfp_lock_release>
 8009674:	230c      	movs	r3, #12
 8009676:	603b      	str	r3, [r7, #0]
 8009678:	e7ee      	b.n	8009658 <__sfp+0x60>
 800967a:	bf00      	nop
 800967c:	0800a840 	.word	0x0800a840
 8009680:	ffff0001 	.word	0xffff0001

08009684 <_fwalk_reent>:
 8009684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009688:	4606      	mov	r6, r0
 800968a:	4688      	mov	r8, r1
 800968c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009690:	2700      	movs	r7, #0
 8009692:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009696:	f1b9 0901 	subs.w	r9, r9, #1
 800969a:	d505      	bpl.n	80096a8 <_fwalk_reent+0x24>
 800969c:	6824      	ldr	r4, [r4, #0]
 800969e:	2c00      	cmp	r4, #0
 80096a0:	d1f7      	bne.n	8009692 <_fwalk_reent+0xe>
 80096a2:	4638      	mov	r0, r7
 80096a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096a8:	89ab      	ldrh	r3, [r5, #12]
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d907      	bls.n	80096be <_fwalk_reent+0x3a>
 80096ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096b2:	3301      	adds	r3, #1
 80096b4:	d003      	beq.n	80096be <_fwalk_reent+0x3a>
 80096b6:	4629      	mov	r1, r5
 80096b8:	4630      	mov	r0, r6
 80096ba:	47c0      	blx	r8
 80096bc:	4307      	orrs	r7, r0
 80096be:	3568      	adds	r5, #104	; 0x68
 80096c0:	e7e9      	b.n	8009696 <_fwalk_reent+0x12>
	...

080096c4 <__libc_init_array>:
 80096c4:	b570      	push	{r4, r5, r6, lr}
 80096c6:	4d0d      	ldr	r5, [pc, #52]	; (80096fc <__libc_init_array+0x38>)
 80096c8:	4c0d      	ldr	r4, [pc, #52]	; (8009700 <__libc_init_array+0x3c>)
 80096ca:	1b64      	subs	r4, r4, r5
 80096cc:	10a4      	asrs	r4, r4, #2
 80096ce:	2600      	movs	r6, #0
 80096d0:	42a6      	cmp	r6, r4
 80096d2:	d109      	bne.n	80096e8 <__libc_init_array+0x24>
 80096d4:	4d0b      	ldr	r5, [pc, #44]	; (8009704 <__libc_init_array+0x40>)
 80096d6:	4c0c      	ldr	r4, [pc, #48]	; (8009708 <__libc_init_array+0x44>)
 80096d8:	f000 ffa8 	bl	800a62c <_init>
 80096dc:	1b64      	subs	r4, r4, r5
 80096de:	10a4      	asrs	r4, r4, #2
 80096e0:	2600      	movs	r6, #0
 80096e2:	42a6      	cmp	r6, r4
 80096e4:	d105      	bne.n	80096f2 <__libc_init_array+0x2e>
 80096e6:	bd70      	pop	{r4, r5, r6, pc}
 80096e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80096ec:	4798      	blx	r3
 80096ee:	3601      	adds	r6, #1
 80096f0:	e7ee      	b.n	80096d0 <__libc_init_array+0xc>
 80096f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80096f6:	4798      	blx	r3
 80096f8:	3601      	adds	r6, #1
 80096fa:	e7f2      	b.n	80096e2 <__libc_init_array+0x1e>
 80096fc:	0800a880 	.word	0x0800a880
 8009700:	0800a880 	.word	0x0800a880
 8009704:	0800a880 	.word	0x0800a880
 8009708:	0800a884 	.word	0x0800a884

0800970c <__retarget_lock_init_recursive>:
 800970c:	4770      	bx	lr

0800970e <__retarget_lock_acquire_recursive>:
 800970e:	4770      	bx	lr

08009710 <__retarget_lock_release_recursive>:
 8009710:	4770      	bx	lr

08009712 <memcpy>:
 8009712:	440a      	add	r2, r1
 8009714:	4291      	cmp	r1, r2
 8009716:	f100 33ff 	add.w	r3, r0, #4294967295
 800971a:	d100      	bne.n	800971e <memcpy+0xc>
 800971c:	4770      	bx	lr
 800971e:	b510      	push	{r4, lr}
 8009720:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009724:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009728:	4291      	cmp	r1, r2
 800972a:	d1f9      	bne.n	8009720 <memcpy+0xe>
 800972c:	bd10      	pop	{r4, pc}

0800972e <memset>:
 800972e:	4402      	add	r2, r0
 8009730:	4603      	mov	r3, r0
 8009732:	4293      	cmp	r3, r2
 8009734:	d100      	bne.n	8009738 <memset+0xa>
 8009736:	4770      	bx	lr
 8009738:	f803 1b01 	strb.w	r1, [r3], #1
 800973c:	e7f9      	b.n	8009732 <memset+0x4>
	...

08009740 <sbrk_aligned>:
 8009740:	b570      	push	{r4, r5, r6, lr}
 8009742:	4e0e      	ldr	r6, [pc, #56]	; (800977c <sbrk_aligned+0x3c>)
 8009744:	460c      	mov	r4, r1
 8009746:	6831      	ldr	r1, [r6, #0]
 8009748:	4605      	mov	r5, r0
 800974a:	b911      	cbnz	r1, 8009752 <sbrk_aligned+0x12>
 800974c:	f000 f984 	bl	8009a58 <_sbrk_r>
 8009750:	6030      	str	r0, [r6, #0]
 8009752:	4621      	mov	r1, r4
 8009754:	4628      	mov	r0, r5
 8009756:	f000 f97f 	bl	8009a58 <_sbrk_r>
 800975a:	1c43      	adds	r3, r0, #1
 800975c:	d00a      	beq.n	8009774 <sbrk_aligned+0x34>
 800975e:	1cc4      	adds	r4, r0, #3
 8009760:	f024 0403 	bic.w	r4, r4, #3
 8009764:	42a0      	cmp	r0, r4
 8009766:	d007      	beq.n	8009778 <sbrk_aligned+0x38>
 8009768:	1a21      	subs	r1, r4, r0
 800976a:	4628      	mov	r0, r5
 800976c:	f000 f974 	bl	8009a58 <_sbrk_r>
 8009770:	3001      	adds	r0, #1
 8009772:	d101      	bne.n	8009778 <sbrk_aligned+0x38>
 8009774:	f04f 34ff 	mov.w	r4, #4294967295
 8009778:	4620      	mov	r0, r4
 800977a:	bd70      	pop	{r4, r5, r6, pc}
 800977c:	20004d30 	.word	0x20004d30

08009780 <_malloc_r>:
 8009780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009784:	1ccd      	adds	r5, r1, #3
 8009786:	f025 0503 	bic.w	r5, r5, #3
 800978a:	3508      	adds	r5, #8
 800978c:	2d0c      	cmp	r5, #12
 800978e:	bf38      	it	cc
 8009790:	250c      	movcc	r5, #12
 8009792:	2d00      	cmp	r5, #0
 8009794:	4607      	mov	r7, r0
 8009796:	db01      	blt.n	800979c <_malloc_r+0x1c>
 8009798:	42a9      	cmp	r1, r5
 800979a:	d905      	bls.n	80097a8 <_malloc_r+0x28>
 800979c:	230c      	movs	r3, #12
 800979e:	603b      	str	r3, [r7, #0]
 80097a0:	2600      	movs	r6, #0
 80097a2:	4630      	mov	r0, r6
 80097a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097a8:	4e2e      	ldr	r6, [pc, #184]	; (8009864 <_malloc_r+0xe4>)
 80097aa:	f000 fbc5 	bl	8009f38 <__malloc_lock>
 80097ae:	6833      	ldr	r3, [r6, #0]
 80097b0:	461c      	mov	r4, r3
 80097b2:	bb34      	cbnz	r4, 8009802 <_malloc_r+0x82>
 80097b4:	4629      	mov	r1, r5
 80097b6:	4638      	mov	r0, r7
 80097b8:	f7ff ffc2 	bl	8009740 <sbrk_aligned>
 80097bc:	1c43      	adds	r3, r0, #1
 80097be:	4604      	mov	r4, r0
 80097c0:	d14d      	bne.n	800985e <_malloc_r+0xde>
 80097c2:	6834      	ldr	r4, [r6, #0]
 80097c4:	4626      	mov	r6, r4
 80097c6:	2e00      	cmp	r6, #0
 80097c8:	d140      	bne.n	800984c <_malloc_r+0xcc>
 80097ca:	6823      	ldr	r3, [r4, #0]
 80097cc:	4631      	mov	r1, r6
 80097ce:	4638      	mov	r0, r7
 80097d0:	eb04 0803 	add.w	r8, r4, r3
 80097d4:	f000 f940 	bl	8009a58 <_sbrk_r>
 80097d8:	4580      	cmp	r8, r0
 80097da:	d13a      	bne.n	8009852 <_malloc_r+0xd2>
 80097dc:	6821      	ldr	r1, [r4, #0]
 80097de:	3503      	adds	r5, #3
 80097e0:	1a6d      	subs	r5, r5, r1
 80097e2:	f025 0503 	bic.w	r5, r5, #3
 80097e6:	3508      	adds	r5, #8
 80097e8:	2d0c      	cmp	r5, #12
 80097ea:	bf38      	it	cc
 80097ec:	250c      	movcc	r5, #12
 80097ee:	4629      	mov	r1, r5
 80097f0:	4638      	mov	r0, r7
 80097f2:	f7ff ffa5 	bl	8009740 <sbrk_aligned>
 80097f6:	3001      	adds	r0, #1
 80097f8:	d02b      	beq.n	8009852 <_malloc_r+0xd2>
 80097fa:	6823      	ldr	r3, [r4, #0]
 80097fc:	442b      	add	r3, r5
 80097fe:	6023      	str	r3, [r4, #0]
 8009800:	e00e      	b.n	8009820 <_malloc_r+0xa0>
 8009802:	6822      	ldr	r2, [r4, #0]
 8009804:	1b52      	subs	r2, r2, r5
 8009806:	d41e      	bmi.n	8009846 <_malloc_r+0xc6>
 8009808:	2a0b      	cmp	r2, #11
 800980a:	d916      	bls.n	800983a <_malloc_r+0xba>
 800980c:	1961      	adds	r1, r4, r5
 800980e:	42a3      	cmp	r3, r4
 8009810:	6025      	str	r5, [r4, #0]
 8009812:	bf18      	it	ne
 8009814:	6059      	strne	r1, [r3, #4]
 8009816:	6863      	ldr	r3, [r4, #4]
 8009818:	bf08      	it	eq
 800981a:	6031      	streq	r1, [r6, #0]
 800981c:	5162      	str	r2, [r4, r5]
 800981e:	604b      	str	r3, [r1, #4]
 8009820:	4638      	mov	r0, r7
 8009822:	f104 060b 	add.w	r6, r4, #11
 8009826:	f000 fb8d 	bl	8009f44 <__malloc_unlock>
 800982a:	f026 0607 	bic.w	r6, r6, #7
 800982e:	1d23      	adds	r3, r4, #4
 8009830:	1af2      	subs	r2, r6, r3
 8009832:	d0b6      	beq.n	80097a2 <_malloc_r+0x22>
 8009834:	1b9b      	subs	r3, r3, r6
 8009836:	50a3      	str	r3, [r4, r2]
 8009838:	e7b3      	b.n	80097a2 <_malloc_r+0x22>
 800983a:	6862      	ldr	r2, [r4, #4]
 800983c:	42a3      	cmp	r3, r4
 800983e:	bf0c      	ite	eq
 8009840:	6032      	streq	r2, [r6, #0]
 8009842:	605a      	strne	r2, [r3, #4]
 8009844:	e7ec      	b.n	8009820 <_malloc_r+0xa0>
 8009846:	4623      	mov	r3, r4
 8009848:	6864      	ldr	r4, [r4, #4]
 800984a:	e7b2      	b.n	80097b2 <_malloc_r+0x32>
 800984c:	4634      	mov	r4, r6
 800984e:	6876      	ldr	r6, [r6, #4]
 8009850:	e7b9      	b.n	80097c6 <_malloc_r+0x46>
 8009852:	230c      	movs	r3, #12
 8009854:	603b      	str	r3, [r7, #0]
 8009856:	4638      	mov	r0, r7
 8009858:	f000 fb74 	bl	8009f44 <__malloc_unlock>
 800985c:	e7a1      	b.n	80097a2 <_malloc_r+0x22>
 800985e:	6025      	str	r5, [r4, #0]
 8009860:	e7de      	b.n	8009820 <_malloc_r+0xa0>
 8009862:	bf00      	nop
 8009864:	20004d2c 	.word	0x20004d2c

08009868 <iprintf>:
 8009868:	b40f      	push	{r0, r1, r2, r3}
 800986a:	4b0a      	ldr	r3, [pc, #40]	; (8009894 <iprintf+0x2c>)
 800986c:	b513      	push	{r0, r1, r4, lr}
 800986e:	681c      	ldr	r4, [r3, #0]
 8009870:	b124      	cbz	r4, 800987c <iprintf+0x14>
 8009872:	69a3      	ldr	r3, [r4, #24]
 8009874:	b913      	cbnz	r3, 800987c <iprintf+0x14>
 8009876:	4620      	mov	r0, r4
 8009878:	f7ff fe86 	bl	8009588 <__sinit>
 800987c:	ab05      	add	r3, sp, #20
 800987e:	9a04      	ldr	r2, [sp, #16]
 8009880:	68a1      	ldr	r1, [r4, #8]
 8009882:	9301      	str	r3, [sp, #4]
 8009884:	4620      	mov	r0, r4
 8009886:	f000 fbd9 	bl	800a03c <_vfiprintf_r>
 800988a:	b002      	add	sp, #8
 800988c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009890:	b004      	add	sp, #16
 8009892:	4770      	bx	lr
 8009894:	20000010 	.word	0x20000010

08009898 <_puts_r>:
 8009898:	b570      	push	{r4, r5, r6, lr}
 800989a:	460e      	mov	r6, r1
 800989c:	4605      	mov	r5, r0
 800989e:	b118      	cbz	r0, 80098a8 <_puts_r+0x10>
 80098a0:	6983      	ldr	r3, [r0, #24]
 80098a2:	b90b      	cbnz	r3, 80098a8 <_puts_r+0x10>
 80098a4:	f7ff fe70 	bl	8009588 <__sinit>
 80098a8:	69ab      	ldr	r3, [r5, #24]
 80098aa:	68ac      	ldr	r4, [r5, #8]
 80098ac:	b913      	cbnz	r3, 80098b4 <_puts_r+0x1c>
 80098ae:	4628      	mov	r0, r5
 80098b0:	f7ff fe6a 	bl	8009588 <__sinit>
 80098b4:	4b2c      	ldr	r3, [pc, #176]	; (8009968 <_puts_r+0xd0>)
 80098b6:	429c      	cmp	r4, r3
 80098b8:	d120      	bne.n	80098fc <_puts_r+0x64>
 80098ba:	686c      	ldr	r4, [r5, #4]
 80098bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098be:	07db      	lsls	r3, r3, #31
 80098c0:	d405      	bmi.n	80098ce <_puts_r+0x36>
 80098c2:	89a3      	ldrh	r3, [r4, #12]
 80098c4:	0598      	lsls	r0, r3, #22
 80098c6:	d402      	bmi.n	80098ce <_puts_r+0x36>
 80098c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098ca:	f7ff ff20 	bl	800970e <__retarget_lock_acquire_recursive>
 80098ce:	89a3      	ldrh	r3, [r4, #12]
 80098d0:	0719      	lsls	r1, r3, #28
 80098d2:	d51d      	bpl.n	8009910 <_puts_r+0x78>
 80098d4:	6923      	ldr	r3, [r4, #16]
 80098d6:	b1db      	cbz	r3, 8009910 <_puts_r+0x78>
 80098d8:	3e01      	subs	r6, #1
 80098da:	68a3      	ldr	r3, [r4, #8]
 80098dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80098e0:	3b01      	subs	r3, #1
 80098e2:	60a3      	str	r3, [r4, #8]
 80098e4:	bb39      	cbnz	r1, 8009936 <_puts_r+0x9e>
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	da38      	bge.n	800995c <_puts_r+0xc4>
 80098ea:	4622      	mov	r2, r4
 80098ec:	210a      	movs	r1, #10
 80098ee:	4628      	mov	r0, r5
 80098f0:	f000 f906 	bl	8009b00 <__swbuf_r>
 80098f4:	3001      	adds	r0, #1
 80098f6:	d011      	beq.n	800991c <_puts_r+0x84>
 80098f8:	250a      	movs	r5, #10
 80098fa:	e011      	b.n	8009920 <_puts_r+0x88>
 80098fc:	4b1b      	ldr	r3, [pc, #108]	; (800996c <_puts_r+0xd4>)
 80098fe:	429c      	cmp	r4, r3
 8009900:	d101      	bne.n	8009906 <_puts_r+0x6e>
 8009902:	68ac      	ldr	r4, [r5, #8]
 8009904:	e7da      	b.n	80098bc <_puts_r+0x24>
 8009906:	4b1a      	ldr	r3, [pc, #104]	; (8009970 <_puts_r+0xd8>)
 8009908:	429c      	cmp	r4, r3
 800990a:	bf08      	it	eq
 800990c:	68ec      	ldreq	r4, [r5, #12]
 800990e:	e7d5      	b.n	80098bc <_puts_r+0x24>
 8009910:	4621      	mov	r1, r4
 8009912:	4628      	mov	r0, r5
 8009914:	f000 f958 	bl	8009bc8 <__swsetup_r>
 8009918:	2800      	cmp	r0, #0
 800991a:	d0dd      	beq.n	80098d8 <_puts_r+0x40>
 800991c:	f04f 35ff 	mov.w	r5, #4294967295
 8009920:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009922:	07da      	lsls	r2, r3, #31
 8009924:	d405      	bmi.n	8009932 <_puts_r+0x9a>
 8009926:	89a3      	ldrh	r3, [r4, #12]
 8009928:	059b      	lsls	r3, r3, #22
 800992a:	d402      	bmi.n	8009932 <_puts_r+0x9a>
 800992c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800992e:	f7ff feef 	bl	8009710 <__retarget_lock_release_recursive>
 8009932:	4628      	mov	r0, r5
 8009934:	bd70      	pop	{r4, r5, r6, pc}
 8009936:	2b00      	cmp	r3, #0
 8009938:	da04      	bge.n	8009944 <_puts_r+0xac>
 800993a:	69a2      	ldr	r2, [r4, #24]
 800993c:	429a      	cmp	r2, r3
 800993e:	dc06      	bgt.n	800994e <_puts_r+0xb6>
 8009940:	290a      	cmp	r1, #10
 8009942:	d004      	beq.n	800994e <_puts_r+0xb6>
 8009944:	6823      	ldr	r3, [r4, #0]
 8009946:	1c5a      	adds	r2, r3, #1
 8009948:	6022      	str	r2, [r4, #0]
 800994a:	7019      	strb	r1, [r3, #0]
 800994c:	e7c5      	b.n	80098da <_puts_r+0x42>
 800994e:	4622      	mov	r2, r4
 8009950:	4628      	mov	r0, r5
 8009952:	f000 f8d5 	bl	8009b00 <__swbuf_r>
 8009956:	3001      	adds	r0, #1
 8009958:	d1bf      	bne.n	80098da <_puts_r+0x42>
 800995a:	e7df      	b.n	800991c <_puts_r+0x84>
 800995c:	6823      	ldr	r3, [r4, #0]
 800995e:	250a      	movs	r5, #10
 8009960:	1c5a      	adds	r2, r3, #1
 8009962:	6022      	str	r2, [r4, #0]
 8009964:	701d      	strb	r5, [r3, #0]
 8009966:	e7db      	b.n	8009920 <_puts_r+0x88>
 8009968:	0800a800 	.word	0x0800a800
 800996c:	0800a820 	.word	0x0800a820
 8009970:	0800a7e0 	.word	0x0800a7e0

08009974 <puts>:
 8009974:	4b02      	ldr	r3, [pc, #8]	; (8009980 <puts+0xc>)
 8009976:	4601      	mov	r1, r0
 8009978:	6818      	ldr	r0, [r3, #0]
 800997a:	f7ff bf8d 	b.w	8009898 <_puts_r>
 800997e:	bf00      	nop
 8009980:	20000010 	.word	0x20000010

08009984 <cleanup_glue>:
 8009984:	b538      	push	{r3, r4, r5, lr}
 8009986:	460c      	mov	r4, r1
 8009988:	6809      	ldr	r1, [r1, #0]
 800998a:	4605      	mov	r5, r0
 800998c:	b109      	cbz	r1, 8009992 <cleanup_glue+0xe>
 800998e:	f7ff fff9 	bl	8009984 <cleanup_glue>
 8009992:	4621      	mov	r1, r4
 8009994:	4628      	mov	r0, r5
 8009996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800999a:	f000 bad9 	b.w	8009f50 <_free_r>
	...

080099a0 <_reclaim_reent>:
 80099a0:	4b2c      	ldr	r3, [pc, #176]	; (8009a54 <_reclaim_reent+0xb4>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4283      	cmp	r3, r0
 80099a6:	b570      	push	{r4, r5, r6, lr}
 80099a8:	4604      	mov	r4, r0
 80099aa:	d051      	beq.n	8009a50 <_reclaim_reent+0xb0>
 80099ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80099ae:	b143      	cbz	r3, 80099c2 <_reclaim_reent+0x22>
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d14a      	bne.n	8009a4c <_reclaim_reent+0xac>
 80099b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099b8:	6819      	ldr	r1, [r3, #0]
 80099ba:	b111      	cbz	r1, 80099c2 <_reclaim_reent+0x22>
 80099bc:	4620      	mov	r0, r4
 80099be:	f000 fac7 	bl	8009f50 <_free_r>
 80099c2:	6961      	ldr	r1, [r4, #20]
 80099c4:	b111      	cbz	r1, 80099cc <_reclaim_reent+0x2c>
 80099c6:	4620      	mov	r0, r4
 80099c8:	f000 fac2 	bl	8009f50 <_free_r>
 80099cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80099ce:	b111      	cbz	r1, 80099d6 <_reclaim_reent+0x36>
 80099d0:	4620      	mov	r0, r4
 80099d2:	f000 fabd 	bl	8009f50 <_free_r>
 80099d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80099d8:	b111      	cbz	r1, 80099e0 <_reclaim_reent+0x40>
 80099da:	4620      	mov	r0, r4
 80099dc:	f000 fab8 	bl	8009f50 <_free_r>
 80099e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80099e2:	b111      	cbz	r1, 80099ea <_reclaim_reent+0x4a>
 80099e4:	4620      	mov	r0, r4
 80099e6:	f000 fab3 	bl	8009f50 <_free_r>
 80099ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80099ec:	b111      	cbz	r1, 80099f4 <_reclaim_reent+0x54>
 80099ee:	4620      	mov	r0, r4
 80099f0:	f000 faae 	bl	8009f50 <_free_r>
 80099f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80099f6:	b111      	cbz	r1, 80099fe <_reclaim_reent+0x5e>
 80099f8:	4620      	mov	r0, r4
 80099fa:	f000 faa9 	bl	8009f50 <_free_r>
 80099fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009a00:	b111      	cbz	r1, 8009a08 <_reclaim_reent+0x68>
 8009a02:	4620      	mov	r0, r4
 8009a04:	f000 faa4 	bl	8009f50 <_free_r>
 8009a08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a0a:	b111      	cbz	r1, 8009a12 <_reclaim_reent+0x72>
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	f000 fa9f 	bl	8009f50 <_free_r>
 8009a12:	69a3      	ldr	r3, [r4, #24]
 8009a14:	b1e3      	cbz	r3, 8009a50 <_reclaim_reent+0xb0>
 8009a16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009a18:	4620      	mov	r0, r4
 8009a1a:	4798      	blx	r3
 8009a1c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009a1e:	b1b9      	cbz	r1, 8009a50 <_reclaim_reent+0xb0>
 8009a20:	4620      	mov	r0, r4
 8009a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a26:	f7ff bfad 	b.w	8009984 <cleanup_glue>
 8009a2a:	5949      	ldr	r1, [r1, r5]
 8009a2c:	b941      	cbnz	r1, 8009a40 <_reclaim_reent+0xa0>
 8009a2e:	3504      	adds	r5, #4
 8009a30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a32:	2d80      	cmp	r5, #128	; 0x80
 8009a34:	68d9      	ldr	r1, [r3, #12]
 8009a36:	d1f8      	bne.n	8009a2a <_reclaim_reent+0x8a>
 8009a38:	4620      	mov	r0, r4
 8009a3a:	f000 fa89 	bl	8009f50 <_free_r>
 8009a3e:	e7ba      	b.n	80099b6 <_reclaim_reent+0x16>
 8009a40:	680e      	ldr	r6, [r1, #0]
 8009a42:	4620      	mov	r0, r4
 8009a44:	f000 fa84 	bl	8009f50 <_free_r>
 8009a48:	4631      	mov	r1, r6
 8009a4a:	e7ef      	b.n	8009a2c <_reclaim_reent+0x8c>
 8009a4c:	2500      	movs	r5, #0
 8009a4e:	e7ef      	b.n	8009a30 <_reclaim_reent+0x90>
 8009a50:	bd70      	pop	{r4, r5, r6, pc}
 8009a52:	bf00      	nop
 8009a54:	20000010 	.word	0x20000010

08009a58 <_sbrk_r>:
 8009a58:	b538      	push	{r3, r4, r5, lr}
 8009a5a:	4d06      	ldr	r5, [pc, #24]	; (8009a74 <_sbrk_r+0x1c>)
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	4604      	mov	r4, r0
 8009a60:	4608      	mov	r0, r1
 8009a62:	602b      	str	r3, [r5, #0]
 8009a64:	f7f8 fcaa 	bl	80023bc <_sbrk>
 8009a68:	1c43      	adds	r3, r0, #1
 8009a6a:	d102      	bne.n	8009a72 <_sbrk_r+0x1a>
 8009a6c:	682b      	ldr	r3, [r5, #0]
 8009a6e:	b103      	cbz	r3, 8009a72 <_sbrk_r+0x1a>
 8009a70:	6023      	str	r3, [r4, #0]
 8009a72:	bd38      	pop	{r3, r4, r5, pc}
 8009a74:	20004d34 	.word	0x20004d34

08009a78 <__sread>:
 8009a78:	b510      	push	{r4, lr}
 8009a7a:	460c      	mov	r4, r1
 8009a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a80:	f000 fda0 	bl	800a5c4 <_read_r>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	bfab      	itete	ge
 8009a88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a8a:	89a3      	ldrhlt	r3, [r4, #12]
 8009a8c:	181b      	addge	r3, r3, r0
 8009a8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a92:	bfac      	ite	ge
 8009a94:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a96:	81a3      	strhlt	r3, [r4, #12]
 8009a98:	bd10      	pop	{r4, pc}

08009a9a <__swrite>:
 8009a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a9e:	461f      	mov	r7, r3
 8009aa0:	898b      	ldrh	r3, [r1, #12]
 8009aa2:	05db      	lsls	r3, r3, #23
 8009aa4:	4605      	mov	r5, r0
 8009aa6:	460c      	mov	r4, r1
 8009aa8:	4616      	mov	r6, r2
 8009aaa:	d505      	bpl.n	8009ab8 <__swrite+0x1e>
 8009aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ab0:	2302      	movs	r3, #2
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f000 f9c8 	bl	8009e48 <_lseek_r>
 8009ab8:	89a3      	ldrh	r3, [r4, #12]
 8009aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009abe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ac2:	81a3      	strh	r3, [r4, #12]
 8009ac4:	4632      	mov	r2, r6
 8009ac6:	463b      	mov	r3, r7
 8009ac8:	4628      	mov	r0, r5
 8009aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ace:	f000 b869 	b.w	8009ba4 <_write_r>

08009ad2 <__sseek>:
 8009ad2:	b510      	push	{r4, lr}
 8009ad4:	460c      	mov	r4, r1
 8009ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ada:	f000 f9b5 	bl	8009e48 <_lseek_r>
 8009ade:	1c43      	adds	r3, r0, #1
 8009ae0:	89a3      	ldrh	r3, [r4, #12]
 8009ae2:	bf15      	itete	ne
 8009ae4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ae6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009aea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009aee:	81a3      	strheq	r3, [r4, #12]
 8009af0:	bf18      	it	ne
 8009af2:	81a3      	strhne	r3, [r4, #12]
 8009af4:	bd10      	pop	{r4, pc}

08009af6 <__sclose>:
 8009af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009afa:	f000 b8d3 	b.w	8009ca4 <_close_r>
	...

08009b00 <__swbuf_r>:
 8009b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b02:	460e      	mov	r6, r1
 8009b04:	4614      	mov	r4, r2
 8009b06:	4605      	mov	r5, r0
 8009b08:	b118      	cbz	r0, 8009b12 <__swbuf_r+0x12>
 8009b0a:	6983      	ldr	r3, [r0, #24]
 8009b0c:	b90b      	cbnz	r3, 8009b12 <__swbuf_r+0x12>
 8009b0e:	f7ff fd3b 	bl	8009588 <__sinit>
 8009b12:	4b21      	ldr	r3, [pc, #132]	; (8009b98 <__swbuf_r+0x98>)
 8009b14:	429c      	cmp	r4, r3
 8009b16:	d12b      	bne.n	8009b70 <__swbuf_r+0x70>
 8009b18:	686c      	ldr	r4, [r5, #4]
 8009b1a:	69a3      	ldr	r3, [r4, #24]
 8009b1c:	60a3      	str	r3, [r4, #8]
 8009b1e:	89a3      	ldrh	r3, [r4, #12]
 8009b20:	071a      	lsls	r2, r3, #28
 8009b22:	d52f      	bpl.n	8009b84 <__swbuf_r+0x84>
 8009b24:	6923      	ldr	r3, [r4, #16]
 8009b26:	b36b      	cbz	r3, 8009b84 <__swbuf_r+0x84>
 8009b28:	6923      	ldr	r3, [r4, #16]
 8009b2a:	6820      	ldr	r0, [r4, #0]
 8009b2c:	1ac0      	subs	r0, r0, r3
 8009b2e:	6963      	ldr	r3, [r4, #20]
 8009b30:	b2f6      	uxtb	r6, r6
 8009b32:	4283      	cmp	r3, r0
 8009b34:	4637      	mov	r7, r6
 8009b36:	dc04      	bgt.n	8009b42 <__swbuf_r+0x42>
 8009b38:	4621      	mov	r1, r4
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	f000 f948 	bl	8009dd0 <_fflush_r>
 8009b40:	bb30      	cbnz	r0, 8009b90 <__swbuf_r+0x90>
 8009b42:	68a3      	ldr	r3, [r4, #8]
 8009b44:	3b01      	subs	r3, #1
 8009b46:	60a3      	str	r3, [r4, #8]
 8009b48:	6823      	ldr	r3, [r4, #0]
 8009b4a:	1c5a      	adds	r2, r3, #1
 8009b4c:	6022      	str	r2, [r4, #0]
 8009b4e:	701e      	strb	r6, [r3, #0]
 8009b50:	6963      	ldr	r3, [r4, #20]
 8009b52:	3001      	adds	r0, #1
 8009b54:	4283      	cmp	r3, r0
 8009b56:	d004      	beq.n	8009b62 <__swbuf_r+0x62>
 8009b58:	89a3      	ldrh	r3, [r4, #12]
 8009b5a:	07db      	lsls	r3, r3, #31
 8009b5c:	d506      	bpl.n	8009b6c <__swbuf_r+0x6c>
 8009b5e:	2e0a      	cmp	r6, #10
 8009b60:	d104      	bne.n	8009b6c <__swbuf_r+0x6c>
 8009b62:	4621      	mov	r1, r4
 8009b64:	4628      	mov	r0, r5
 8009b66:	f000 f933 	bl	8009dd0 <_fflush_r>
 8009b6a:	b988      	cbnz	r0, 8009b90 <__swbuf_r+0x90>
 8009b6c:	4638      	mov	r0, r7
 8009b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b70:	4b0a      	ldr	r3, [pc, #40]	; (8009b9c <__swbuf_r+0x9c>)
 8009b72:	429c      	cmp	r4, r3
 8009b74:	d101      	bne.n	8009b7a <__swbuf_r+0x7a>
 8009b76:	68ac      	ldr	r4, [r5, #8]
 8009b78:	e7cf      	b.n	8009b1a <__swbuf_r+0x1a>
 8009b7a:	4b09      	ldr	r3, [pc, #36]	; (8009ba0 <__swbuf_r+0xa0>)
 8009b7c:	429c      	cmp	r4, r3
 8009b7e:	bf08      	it	eq
 8009b80:	68ec      	ldreq	r4, [r5, #12]
 8009b82:	e7ca      	b.n	8009b1a <__swbuf_r+0x1a>
 8009b84:	4621      	mov	r1, r4
 8009b86:	4628      	mov	r0, r5
 8009b88:	f000 f81e 	bl	8009bc8 <__swsetup_r>
 8009b8c:	2800      	cmp	r0, #0
 8009b8e:	d0cb      	beq.n	8009b28 <__swbuf_r+0x28>
 8009b90:	f04f 37ff 	mov.w	r7, #4294967295
 8009b94:	e7ea      	b.n	8009b6c <__swbuf_r+0x6c>
 8009b96:	bf00      	nop
 8009b98:	0800a800 	.word	0x0800a800
 8009b9c:	0800a820 	.word	0x0800a820
 8009ba0:	0800a7e0 	.word	0x0800a7e0

08009ba4 <_write_r>:
 8009ba4:	b538      	push	{r3, r4, r5, lr}
 8009ba6:	4d07      	ldr	r5, [pc, #28]	; (8009bc4 <_write_r+0x20>)
 8009ba8:	4604      	mov	r4, r0
 8009baa:	4608      	mov	r0, r1
 8009bac:	4611      	mov	r1, r2
 8009bae:	2200      	movs	r2, #0
 8009bb0:	602a      	str	r2, [r5, #0]
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	f7f7 ffbe 	bl	8001b34 <_write>
 8009bb8:	1c43      	adds	r3, r0, #1
 8009bba:	d102      	bne.n	8009bc2 <_write_r+0x1e>
 8009bbc:	682b      	ldr	r3, [r5, #0]
 8009bbe:	b103      	cbz	r3, 8009bc2 <_write_r+0x1e>
 8009bc0:	6023      	str	r3, [r4, #0]
 8009bc2:	bd38      	pop	{r3, r4, r5, pc}
 8009bc4:	20004d34 	.word	0x20004d34

08009bc8 <__swsetup_r>:
 8009bc8:	4b32      	ldr	r3, [pc, #200]	; (8009c94 <__swsetup_r+0xcc>)
 8009bca:	b570      	push	{r4, r5, r6, lr}
 8009bcc:	681d      	ldr	r5, [r3, #0]
 8009bce:	4606      	mov	r6, r0
 8009bd0:	460c      	mov	r4, r1
 8009bd2:	b125      	cbz	r5, 8009bde <__swsetup_r+0x16>
 8009bd4:	69ab      	ldr	r3, [r5, #24]
 8009bd6:	b913      	cbnz	r3, 8009bde <__swsetup_r+0x16>
 8009bd8:	4628      	mov	r0, r5
 8009bda:	f7ff fcd5 	bl	8009588 <__sinit>
 8009bde:	4b2e      	ldr	r3, [pc, #184]	; (8009c98 <__swsetup_r+0xd0>)
 8009be0:	429c      	cmp	r4, r3
 8009be2:	d10f      	bne.n	8009c04 <__swsetup_r+0x3c>
 8009be4:	686c      	ldr	r4, [r5, #4]
 8009be6:	89a3      	ldrh	r3, [r4, #12]
 8009be8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bec:	0719      	lsls	r1, r3, #28
 8009bee:	d42c      	bmi.n	8009c4a <__swsetup_r+0x82>
 8009bf0:	06dd      	lsls	r5, r3, #27
 8009bf2:	d411      	bmi.n	8009c18 <__swsetup_r+0x50>
 8009bf4:	2309      	movs	r3, #9
 8009bf6:	6033      	str	r3, [r6, #0]
 8009bf8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009bfc:	81a3      	strh	r3, [r4, #12]
 8009bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8009c02:	e03e      	b.n	8009c82 <__swsetup_r+0xba>
 8009c04:	4b25      	ldr	r3, [pc, #148]	; (8009c9c <__swsetup_r+0xd4>)
 8009c06:	429c      	cmp	r4, r3
 8009c08:	d101      	bne.n	8009c0e <__swsetup_r+0x46>
 8009c0a:	68ac      	ldr	r4, [r5, #8]
 8009c0c:	e7eb      	b.n	8009be6 <__swsetup_r+0x1e>
 8009c0e:	4b24      	ldr	r3, [pc, #144]	; (8009ca0 <__swsetup_r+0xd8>)
 8009c10:	429c      	cmp	r4, r3
 8009c12:	bf08      	it	eq
 8009c14:	68ec      	ldreq	r4, [r5, #12]
 8009c16:	e7e6      	b.n	8009be6 <__swsetup_r+0x1e>
 8009c18:	0758      	lsls	r0, r3, #29
 8009c1a:	d512      	bpl.n	8009c42 <__swsetup_r+0x7a>
 8009c1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c1e:	b141      	cbz	r1, 8009c32 <__swsetup_r+0x6a>
 8009c20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c24:	4299      	cmp	r1, r3
 8009c26:	d002      	beq.n	8009c2e <__swsetup_r+0x66>
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f000 f991 	bl	8009f50 <_free_r>
 8009c2e:	2300      	movs	r3, #0
 8009c30:	6363      	str	r3, [r4, #52]	; 0x34
 8009c32:	89a3      	ldrh	r3, [r4, #12]
 8009c34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c38:	81a3      	strh	r3, [r4, #12]
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	6063      	str	r3, [r4, #4]
 8009c3e:	6923      	ldr	r3, [r4, #16]
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	89a3      	ldrh	r3, [r4, #12]
 8009c44:	f043 0308 	orr.w	r3, r3, #8
 8009c48:	81a3      	strh	r3, [r4, #12]
 8009c4a:	6923      	ldr	r3, [r4, #16]
 8009c4c:	b94b      	cbnz	r3, 8009c62 <__swsetup_r+0x9a>
 8009c4e:	89a3      	ldrh	r3, [r4, #12]
 8009c50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c58:	d003      	beq.n	8009c62 <__swsetup_r+0x9a>
 8009c5a:	4621      	mov	r1, r4
 8009c5c:	4630      	mov	r0, r6
 8009c5e:	f000 f92b 	bl	8009eb8 <__smakebuf_r>
 8009c62:	89a0      	ldrh	r0, [r4, #12]
 8009c64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c68:	f010 0301 	ands.w	r3, r0, #1
 8009c6c:	d00a      	beq.n	8009c84 <__swsetup_r+0xbc>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	60a3      	str	r3, [r4, #8]
 8009c72:	6963      	ldr	r3, [r4, #20]
 8009c74:	425b      	negs	r3, r3
 8009c76:	61a3      	str	r3, [r4, #24]
 8009c78:	6923      	ldr	r3, [r4, #16]
 8009c7a:	b943      	cbnz	r3, 8009c8e <__swsetup_r+0xc6>
 8009c7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c80:	d1ba      	bne.n	8009bf8 <__swsetup_r+0x30>
 8009c82:	bd70      	pop	{r4, r5, r6, pc}
 8009c84:	0781      	lsls	r1, r0, #30
 8009c86:	bf58      	it	pl
 8009c88:	6963      	ldrpl	r3, [r4, #20]
 8009c8a:	60a3      	str	r3, [r4, #8]
 8009c8c:	e7f4      	b.n	8009c78 <__swsetup_r+0xb0>
 8009c8e:	2000      	movs	r0, #0
 8009c90:	e7f7      	b.n	8009c82 <__swsetup_r+0xba>
 8009c92:	bf00      	nop
 8009c94:	20000010 	.word	0x20000010
 8009c98:	0800a800 	.word	0x0800a800
 8009c9c:	0800a820 	.word	0x0800a820
 8009ca0:	0800a7e0 	.word	0x0800a7e0

08009ca4 <_close_r>:
 8009ca4:	b538      	push	{r3, r4, r5, lr}
 8009ca6:	4d06      	ldr	r5, [pc, #24]	; (8009cc0 <_close_r+0x1c>)
 8009ca8:	2300      	movs	r3, #0
 8009caa:	4604      	mov	r4, r0
 8009cac:	4608      	mov	r0, r1
 8009cae:	602b      	str	r3, [r5, #0]
 8009cb0:	f7f8 fb4f 	bl	8002352 <_close>
 8009cb4:	1c43      	adds	r3, r0, #1
 8009cb6:	d102      	bne.n	8009cbe <_close_r+0x1a>
 8009cb8:	682b      	ldr	r3, [r5, #0]
 8009cba:	b103      	cbz	r3, 8009cbe <_close_r+0x1a>
 8009cbc:	6023      	str	r3, [r4, #0]
 8009cbe:	bd38      	pop	{r3, r4, r5, pc}
 8009cc0:	20004d34 	.word	0x20004d34

08009cc4 <__sflush_r>:
 8009cc4:	898a      	ldrh	r2, [r1, #12]
 8009cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cca:	4605      	mov	r5, r0
 8009ccc:	0710      	lsls	r0, r2, #28
 8009cce:	460c      	mov	r4, r1
 8009cd0:	d458      	bmi.n	8009d84 <__sflush_r+0xc0>
 8009cd2:	684b      	ldr	r3, [r1, #4]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	dc05      	bgt.n	8009ce4 <__sflush_r+0x20>
 8009cd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	dc02      	bgt.n	8009ce4 <__sflush_r+0x20>
 8009cde:	2000      	movs	r0, #0
 8009ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ce4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ce6:	2e00      	cmp	r6, #0
 8009ce8:	d0f9      	beq.n	8009cde <__sflush_r+0x1a>
 8009cea:	2300      	movs	r3, #0
 8009cec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009cf0:	682f      	ldr	r7, [r5, #0]
 8009cf2:	602b      	str	r3, [r5, #0]
 8009cf4:	d032      	beq.n	8009d5c <__sflush_r+0x98>
 8009cf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009cf8:	89a3      	ldrh	r3, [r4, #12]
 8009cfa:	075a      	lsls	r2, r3, #29
 8009cfc:	d505      	bpl.n	8009d0a <__sflush_r+0x46>
 8009cfe:	6863      	ldr	r3, [r4, #4]
 8009d00:	1ac0      	subs	r0, r0, r3
 8009d02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d04:	b10b      	cbz	r3, 8009d0a <__sflush_r+0x46>
 8009d06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d08:	1ac0      	subs	r0, r0, r3
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d10:	6a21      	ldr	r1, [r4, #32]
 8009d12:	4628      	mov	r0, r5
 8009d14:	47b0      	blx	r6
 8009d16:	1c43      	adds	r3, r0, #1
 8009d18:	89a3      	ldrh	r3, [r4, #12]
 8009d1a:	d106      	bne.n	8009d2a <__sflush_r+0x66>
 8009d1c:	6829      	ldr	r1, [r5, #0]
 8009d1e:	291d      	cmp	r1, #29
 8009d20:	d82c      	bhi.n	8009d7c <__sflush_r+0xb8>
 8009d22:	4a2a      	ldr	r2, [pc, #168]	; (8009dcc <__sflush_r+0x108>)
 8009d24:	40ca      	lsrs	r2, r1
 8009d26:	07d6      	lsls	r6, r2, #31
 8009d28:	d528      	bpl.n	8009d7c <__sflush_r+0xb8>
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	6062      	str	r2, [r4, #4]
 8009d2e:	04d9      	lsls	r1, r3, #19
 8009d30:	6922      	ldr	r2, [r4, #16]
 8009d32:	6022      	str	r2, [r4, #0]
 8009d34:	d504      	bpl.n	8009d40 <__sflush_r+0x7c>
 8009d36:	1c42      	adds	r2, r0, #1
 8009d38:	d101      	bne.n	8009d3e <__sflush_r+0x7a>
 8009d3a:	682b      	ldr	r3, [r5, #0]
 8009d3c:	b903      	cbnz	r3, 8009d40 <__sflush_r+0x7c>
 8009d3e:	6560      	str	r0, [r4, #84]	; 0x54
 8009d40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d42:	602f      	str	r7, [r5, #0]
 8009d44:	2900      	cmp	r1, #0
 8009d46:	d0ca      	beq.n	8009cde <__sflush_r+0x1a>
 8009d48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d4c:	4299      	cmp	r1, r3
 8009d4e:	d002      	beq.n	8009d56 <__sflush_r+0x92>
 8009d50:	4628      	mov	r0, r5
 8009d52:	f000 f8fd 	bl	8009f50 <_free_r>
 8009d56:	2000      	movs	r0, #0
 8009d58:	6360      	str	r0, [r4, #52]	; 0x34
 8009d5a:	e7c1      	b.n	8009ce0 <__sflush_r+0x1c>
 8009d5c:	6a21      	ldr	r1, [r4, #32]
 8009d5e:	2301      	movs	r3, #1
 8009d60:	4628      	mov	r0, r5
 8009d62:	47b0      	blx	r6
 8009d64:	1c41      	adds	r1, r0, #1
 8009d66:	d1c7      	bne.n	8009cf8 <__sflush_r+0x34>
 8009d68:	682b      	ldr	r3, [r5, #0]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d0c4      	beq.n	8009cf8 <__sflush_r+0x34>
 8009d6e:	2b1d      	cmp	r3, #29
 8009d70:	d001      	beq.n	8009d76 <__sflush_r+0xb2>
 8009d72:	2b16      	cmp	r3, #22
 8009d74:	d101      	bne.n	8009d7a <__sflush_r+0xb6>
 8009d76:	602f      	str	r7, [r5, #0]
 8009d78:	e7b1      	b.n	8009cde <__sflush_r+0x1a>
 8009d7a:	89a3      	ldrh	r3, [r4, #12]
 8009d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d80:	81a3      	strh	r3, [r4, #12]
 8009d82:	e7ad      	b.n	8009ce0 <__sflush_r+0x1c>
 8009d84:	690f      	ldr	r7, [r1, #16]
 8009d86:	2f00      	cmp	r7, #0
 8009d88:	d0a9      	beq.n	8009cde <__sflush_r+0x1a>
 8009d8a:	0793      	lsls	r3, r2, #30
 8009d8c:	680e      	ldr	r6, [r1, #0]
 8009d8e:	bf08      	it	eq
 8009d90:	694b      	ldreq	r3, [r1, #20]
 8009d92:	600f      	str	r7, [r1, #0]
 8009d94:	bf18      	it	ne
 8009d96:	2300      	movne	r3, #0
 8009d98:	eba6 0807 	sub.w	r8, r6, r7
 8009d9c:	608b      	str	r3, [r1, #8]
 8009d9e:	f1b8 0f00 	cmp.w	r8, #0
 8009da2:	dd9c      	ble.n	8009cde <__sflush_r+0x1a>
 8009da4:	6a21      	ldr	r1, [r4, #32]
 8009da6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009da8:	4643      	mov	r3, r8
 8009daa:	463a      	mov	r2, r7
 8009dac:	4628      	mov	r0, r5
 8009dae:	47b0      	blx	r6
 8009db0:	2800      	cmp	r0, #0
 8009db2:	dc06      	bgt.n	8009dc2 <__sflush_r+0xfe>
 8009db4:	89a3      	ldrh	r3, [r4, #12]
 8009db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dba:	81a3      	strh	r3, [r4, #12]
 8009dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc0:	e78e      	b.n	8009ce0 <__sflush_r+0x1c>
 8009dc2:	4407      	add	r7, r0
 8009dc4:	eba8 0800 	sub.w	r8, r8, r0
 8009dc8:	e7e9      	b.n	8009d9e <__sflush_r+0xda>
 8009dca:	bf00      	nop
 8009dcc:	20400001 	.word	0x20400001

08009dd0 <_fflush_r>:
 8009dd0:	b538      	push	{r3, r4, r5, lr}
 8009dd2:	690b      	ldr	r3, [r1, #16]
 8009dd4:	4605      	mov	r5, r0
 8009dd6:	460c      	mov	r4, r1
 8009dd8:	b913      	cbnz	r3, 8009de0 <_fflush_r+0x10>
 8009dda:	2500      	movs	r5, #0
 8009ddc:	4628      	mov	r0, r5
 8009dde:	bd38      	pop	{r3, r4, r5, pc}
 8009de0:	b118      	cbz	r0, 8009dea <_fflush_r+0x1a>
 8009de2:	6983      	ldr	r3, [r0, #24]
 8009de4:	b90b      	cbnz	r3, 8009dea <_fflush_r+0x1a>
 8009de6:	f7ff fbcf 	bl	8009588 <__sinit>
 8009dea:	4b14      	ldr	r3, [pc, #80]	; (8009e3c <_fflush_r+0x6c>)
 8009dec:	429c      	cmp	r4, r3
 8009dee:	d11b      	bne.n	8009e28 <_fflush_r+0x58>
 8009df0:	686c      	ldr	r4, [r5, #4]
 8009df2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d0ef      	beq.n	8009dda <_fflush_r+0xa>
 8009dfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009dfc:	07d0      	lsls	r0, r2, #31
 8009dfe:	d404      	bmi.n	8009e0a <_fflush_r+0x3a>
 8009e00:	0599      	lsls	r1, r3, #22
 8009e02:	d402      	bmi.n	8009e0a <_fflush_r+0x3a>
 8009e04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e06:	f7ff fc82 	bl	800970e <__retarget_lock_acquire_recursive>
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	4621      	mov	r1, r4
 8009e0e:	f7ff ff59 	bl	8009cc4 <__sflush_r>
 8009e12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e14:	07da      	lsls	r2, r3, #31
 8009e16:	4605      	mov	r5, r0
 8009e18:	d4e0      	bmi.n	8009ddc <_fflush_r+0xc>
 8009e1a:	89a3      	ldrh	r3, [r4, #12]
 8009e1c:	059b      	lsls	r3, r3, #22
 8009e1e:	d4dd      	bmi.n	8009ddc <_fflush_r+0xc>
 8009e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e22:	f7ff fc75 	bl	8009710 <__retarget_lock_release_recursive>
 8009e26:	e7d9      	b.n	8009ddc <_fflush_r+0xc>
 8009e28:	4b05      	ldr	r3, [pc, #20]	; (8009e40 <_fflush_r+0x70>)
 8009e2a:	429c      	cmp	r4, r3
 8009e2c:	d101      	bne.n	8009e32 <_fflush_r+0x62>
 8009e2e:	68ac      	ldr	r4, [r5, #8]
 8009e30:	e7df      	b.n	8009df2 <_fflush_r+0x22>
 8009e32:	4b04      	ldr	r3, [pc, #16]	; (8009e44 <_fflush_r+0x74>)
 8009e34:	429c      	cmp	r4, r3
 8009e36:	bf08      	it	eq
 8009e38:	68ec      	ldreq	r4, [r5, #12]
 8009e3a:	e7da      	b.n	8009df2 <_fflush_r+0x22>
 8009e3c:	0800a800 	.word	0x0800a800
 8009e40:	0800a820 	.word	0x0800a820
 8009e44:	0800a7e0 	.word	0x0800a7e0

08009e48 <_lseek_r>:
 8009e48:	b538      	push	{r3, r4, r5, lr}
 8009e4a:	4d07      	ldr	r5, [pc, #28]	; (8009e68 <_lseek_r+0x20>)
 8009e4c:	4604      	mov	r4, r0
 8009e4e:	4608      	mov	r0, r1
 8009e50:	4611      	mov	r1, r2
 8009e52:	2200      	movs	r2, #0
 8009e54:	602a      	str	r2, [r5, #0]
 8009e56:	461a      	mov	r2, r3
 8009e58:	f7f8 faa2 	bl	80023a0 <_lseek>
 8009e5c:	1c43      	adds	r3, r0, #1
 8009e5e:	d102      	bne.n	8009e66 <_lseek_r+0x1e>
 8009e60:	682b      	ldr	r3, [r5, #0]
 8009e62:	b103      	cbz	r3, 8009e66 <_lseek_r+0x1e>
 8009e64:	6023      	str	r3, [r4, #0]
 8009e66:	bd38      	pop	{r3, r4, r5, pc}
 8009e68:	20004d34 	.word	0x20004d34

08009e6c <__swhatbuf_r>:
 8009e6c:	b570      	push	{r4, r5, r6, lr}
 8009e6e:	460e      	mov	r6, r1
 8009e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e74:	2900      	cmp	r1, #0
 8009e76:	b096      	sub	sp, #88	; 0x58
 8009e78:	4614      	mov	r4, r2
 8009e7a:	461d      	mov	r5, r3
 8009e7c:	da08      	bge.n	8009e90 <__swhatbuf_r+0x24>
 8009e7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009e82:	2200      	movs	r2, #0
 8009e84:	602a      	str	r2, [r5, #0]
 8009e86:	061a      	lsls	r2, r3, #24
 8009e88:	d410      	bmi.n	8009eac <__swhatbuf_r+0x40>
 8009e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e8e:	e00e      	b.n	8009eae <__swhatbuf_r+0x42>
 8009e90:	466a      	mov	r2, sp
 8009e92:	f000 fba9 	bl	800a5e8 <_fstat_r>
 8009e96:	2800      	cmp	r0, #0
 8009e98:	dbf1      	blt.n	8009e7e <__swhatbuf_r+0x12>
 8009e9a:	9a01      	ldr	r2, [sp, #4]
 8009e9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009ea0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ea4:	425a      	negs	r2, r3
 8009ea6:	415a      	adcs	r2, r3
 8009ea8:	602a      	str	r2, [r5, #0]
 8009eaa:	e7ee      	b.n	8009e8a <__swhatbuf_r+0x1e>
 8009eac:	2340      	movs	r3, #64	; 0x40
 8009eae:	2000      	movs	r0, #0
 8009eb0:	6023      	str	r3, [r4, #0]
 8009eb2:	b016      	add	sp, #88	; 0x58
 8009eb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08009eb8 <__smakebuf_r>:
 8009eb8:	898b      	ldrh	r3, [r1, #12]
 8009eba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ebc:	079d      	lsls	r5, r3, #30
 8009ebe:	4606      	mov	r6, r0
 8009ec0:	460c      	mov	r4, r1
 8009ec2:	d507      	bpl.n	8009ed4 <__smakebuf_r+0x1c>
 8009ec4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ec8:	6023      	str	r3, [r4, #0]
 8009eca:	6123      	str	r3, [r4, #16]
 8009ecc:	2301      	movs	r3, #1
 8009ece:	6163      	str	r3, [r4, #20]
 8009ed0:	b002      	add	sp, #8
 8009ed2:	bd70      	pop	{r4, r5, r6, pc}
 8009ed4:	ab01      	add	r3, sp, #4
 8009ed6:	466a      	mov	r2, sp
 8009ed8:	f7ff ffc8 	bl	8009e6c <__swhatbuf_r>
 8009edc:	9900      	ldr	r1, [sp, #0]
 8009ede:	4605      	mov	r5, r0
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	f7ff fc4d 	bl	8009780 <_malloc_r>
 8009ee6:	b948      	cbnz	r0, 8009efc <__smakebuf_r+0x44>
 8009ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eec:	059a      	lsls	r2, r3, #22
 8009eee:	d4ef      	bmi.n	8009ed0 <__smakebuf_r+0x18>
 8009ef0:	f023 0303 	bic.w	r3, r3, #3
 8009ef4:	f043 0302 	orr.w	r3, r3, #2
 8009ef8:	81a3      	strh	r3, [r4, #12]
 8009efa:	e7e3      	b.n	8009ec4 <__smakebuf_r+0xc>
 8009efc:	4b0d      	ldr	r3, [pc, #52]	; (8009f34 <__smakebuf_r+0x7c>)
 8009efe:	62b3      	str	r3, [r6, #40]	; 0x28
 8009f00:	89a3      	ldrh	r3, [r4, #12]
 8009f02:	6020      	str	r0, [r4, #0]
 8009f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f08:	81a3      	strh	r3, [r4, #12]
 8009f0a:	9b00      	ldr	r3, [sp, #0]
 8009f0c:	6163      	str	r3, [r4, #20]
 8009f0e:	9b01      	ldr	r3, [sp, #4]
 8009f10:	6120      	str	r0, [r4, #16]
 8009f12:	b15b      	cbz	r3, 8009f2c <__smakebuf_r+0x74>
 8009f14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f18:	4630      	mov	r0, r6
 8009f1a:	f000 fb77 	bl	800a60c <_isatty_r>
 8009f1e:	b128      	cbz	r0, 8009f2c <__smakebuf_r+0x74>
 8009f20:	89a3      	ldrh	r3, [r4, #12]
 8009f22:	f023 0303 	bic.w	r3, r3, #3
 8009f26:	f043 0301 	orr.w	r3, r3, #1
 8009f2a:	81a3      	strh	r3, [r4, #12]
 8009f2c:	89a0      	ldrh	r0, [r4, #12]
 8009f2e:	4305      	orrs	r5, r0
 8009f30:	81a5      	strh	r5, [r4, #12]
 8009f32:	e7cd      	b.n	8009ed0 <__smakebuf_r+0x18>
 8009f34:	08009521 	.word	0x08009521

08009f38 <__malloc_lock>:
 8009f38:	4801      	ldr	r0, [pc, #4]	; (8009f40 <__malloc_lock+0x8>)
 8009f3a:	f7ff bbe8 	b.w	800970e <__retarget_lock_acquire_recursive>
 8009f3e:	bf00      	nop
 8009f40:	20004d28 	.word	0x20004d28

08009f44 <__malloc_unlock>:
 8009f44:	4801      	ldr	r0, [pc, #4]	; (8009f4c <__malloc_unlock+0x8>)
 8009f46:	f7ff bbe3 	b.w	8009710 <__retarget_lock_release_recursive>
 8009f4a:	bf00      	nop
 8009f4c:	20004d28 	.word	0x20004d28

08009f50 <_free_r>:
 8009f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f52:	2900      	cmp	r1, #0
 8009f54:	d044      	beq.n	8009fe0 <_free_r+0x90>
 8009f56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f5a:	9001      	str	r0, [sp, #4]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f1a1 0404 	sub.w	r4, r1, #4
 8009f62:	bfb8      	it	lt
 8009f64:	18e4      	addlt	r4, r4, r3
 8009f66:	f7ff ffe7 	bl	8009f38 <__malloc_lock>
 8009f6a:	4a1e      	ldr	r2, [pc, #120]	; (8009fe4 <_free_r+0x94>)
 8009f6c:	9801      	ldr	r0, [sp, #4]
 8009f6e:	6813      	ldr	r3, [r2, #0]
 8009f70:	b933      	cbnz	r3, 8009f80 <_free_r+0x30>
 8009f72:	6063      	str	r3, [r4, #4]
 8009f74:	6014      	str	r4, [r2, #0]
 8009f76:	b003      	add	sp, #12
 8009f78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f7c:	f7ff bfe2 	b.w	8009f44 <__malloc_unlock>
 8009f80:	42a3      	cmp	r3, r4
 8009f82:	d908      	bls.n	8009f96 <_free_r+0x46>
 8009f84:	6825      	ldr	r5, [r4, #0]
 8009f86:	1961      	adds	r1, r4, r5
 8009f88:	428b      	cmp	r3, r1
 8009f8a:	bf01      	itttt	eq
 8009f8c:	6819      	ldreq	r1, [r3, #0]
 8009f8e:	685b      	ldreq	r3, [r3, #4]
 8009f90:	1949      	addeq	r1, r1, r5
 8009f92:	6021      	streq	r1, [r4, #0]
 8009f94:	e7ed      	b.n	8009f72 <_free_r+0x22>
 8009f96:	461a      	mov	r2, r3
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	b10b      	cbz	r3, 8009fa0 <_free_r+0x50>
 8009f9c:	42a3      	cmp	r3, r4
 8009f9e:	d9fa      	bls.n	8009f96 <_free_r+0x46>
 8009fa0:	6811      	ldr	r1, [r2, #0]
 8009fa2:	1855      	adds	r5, r2, r1
 8009fa4:	42a5      	cmp	r5, r4
 8009fa6:	d10b      	bne.n	8009fc0 <_free_r+0x70>
 8009fa8:	6824      	ldr	r4, [r4, #0]
 8009faa:	4421      	add	r1, r4
 8009fac:	1854      	adds	r4, r2, r1
 8009fae:	42a3      	cmp	r3, r4
 8009fb0:	6011      	str	r1, [r2, #0]
 8009fb2:	d1e0      	bne.n	8009f76 <_free_r+0x26>
 8009fb4:	681c      	ldr	r4, [r3, #0]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	6053      	str	r3, [r2, #4]
 8009fba:	4421      	add	r1, r4
 8009fbc:	6011      	str	r1, [r2, #0]
 8009fbe:	e7da      	b.n	8009f76 <_free_r+0x26>
 8009fc0:	d902      	bls.n	8009fc8 <_free_r+0x78>
 8009fc2:	230c      	movs	r3, #12
 8009fc4:	6003      	str	r3, [r0, #0]
 8009fc6:	e7d6      	b.n	8009f76 <_free_r+0x26>
 8009fc8:	6825      	ldr	r5, [r4, #0]
 8009fca:	1961      	adds	r1, r4, r5
 8009fcc:	428b      	cmp	r3, r1
 8009fce:	bf04      	itt	eq
 8009fd0:	6819      	ldreq	r1, [r3, #0]
 8009fd2:	685b      	ldreq	r3, [r3, #4]
 8009fd4:	6063      	str	r3, [r4, #4]
 8009fd6:	bf04      	itt	eq
 8009fd8:	1949      	addeq	r1, r1, r5
 8009fda:	6021      	streq	r1, [r4, #0]
 8009fdc:	6054      	str	r4, [r2, #4]
 8009fde:	e7ca      	b.n	8009f76 <_free_r+0x26>
 8009fe0:	b003      	add	sp, #12
 8009fe2:	bd30      	pop	{r4, r5, pc}
 8009fe4:	20004d2c 	.word	0x20004d2c

08009fe8 <__sfputc_r>:
 8009fe8:	6893      	ldr	r3, [r2, #8]
 8009fea:	3b01      	subs	r3, #1
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	b410      	push	{r4}
 8009ff0:	6093      	str	r3, [r2, #8]
 8009ff2:	da08      	bge.n	800a006 <__sfputc_r+0x1e>
 8009ff4:	6994      	ldr	r4, [r2, #24]
 8009ff6:	42a3      	cmp	r3, r4
 8009ff8:	db01      	blt.n	8009ffe <__sfputc_r+0x16>
 8009ffa:	290a      	cmp	r1, #10
 8009ffc:	d103      	bne.n	800a006 <__sfputc_r+0x1e>
 8009ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a002:	f7ff bd7d 	b.w	8009b00 <__swbuf_r>
 800a006:	6813      	ldr	r3, [r2, #0]
 800a008:	1c58      	adds	r0, r3, #1
 800a00a:	6010      	str	r0, [r2, #0]
 800a00c:	7019      	strb	r1, [r3, #0]
 800a00e:	4608      	mov	r0, r1
 800a010:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a014:	4770      	bx	lr

0800a016 <__sfputs_r>:
 800a016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a018:	4606      	mov	r6, r0
 800a01a:	460f      	mov	r7, r1
 800a01c:	4614      	mov	r4, r2
 800a01e:	18d5      	adds	r5, r2, r3
 800a020:	42ac      	cmp	r4, r5
 800a022:	d101      	bne.n	800a028 <__sfputs_r+0x12>
 800a024:	2000      	movs	r0, #0
 800a026:	e007      	b.n	800a038 <__sfputs_r+0x22>
 800a028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a02c:	463a      	mov	r2, r7
 800a02e:	4630      	mov	r0, r6
 800a030:	f7ff ffda 	bl	8009fe8 <__sfputc_r>
 800a034:	1c43      	adds	r3, r0, #1
 800a036:	d1f3      	bne.n	800a020 <__sfputs_r+0xa>
 800a038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a03c <_vfiprintf_r>:
 800a03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a040:	460d      	mov	r5, r1
 800a042:	b09d      	sub	sp, #116	; 0x74
 800a044:	4614      	mov	r4, r2
 800a046:	4698      	mov	r8, r3
 800a048:	4606      	mov	r6, r0
 800a04a:	b118      	cbz	r0, 800a054 <_vfiprintf_r+0x18>
 800a04c:	6983      	ldr	r3, [r0, #24]
 800a04e:	b90b      	cbnz	r3, 800a054 <_vfiprintf_r+0x18>
 800a050:	f7ff fa9a 	bl	8009588 <__sinit>
 800a054:	4b89      	ldr	r3, [pc, #548]	; (800a27c <_vfiprintf_r+0x240>)
 800a056:	429d      	cmp	r5, r3
 800a058:	d11b      	bne.n	800a092 <_vfiprintf_r+0x56>
 800a05a:	6875      	ldr	r5, [r6, #4]
 800a05c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a05e:	07d9      	lsls	r1, r3, #31
 800a060:	d405      	bmi.n	800a06e <_vfiprintf_r+0x32>
 800a062:	89ab      	ldrh	r3, [r5, #12]
 800a064:	059a      	lsls	r2, r3, #22
 800a066:	d402      	bmi.n	800a06e <_vfiprintf_r+0x32>
 800a068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a06a:	f7ff fb50 	bl	800970e <__retarget_lock_acquire_recursive>
 800a06e:	89ab      	ldrh	r3, [r5, #12]
 800a070:	071b      	lsls	r3, r3, #28
 800a072:	d501      	bpl.n	800a078 <_vfiprintf_r+0x3c>
 800a074:	692b      	ldr	r3, [r5, #16]
 800a076:	b9eb      	cbnz	r3, 800a0b4 <_vfiprintf_r+0x78>
 800a078:	4629      	mov	r1, r5
 800a07a:	4630      	mov	r0, r6
 800a07c:	f7ff fda4 	bl	8009bc8 <__swsetup_r>
 800a080:	b1c0      	cbz	r0, 800a0b4 <_vfiprintf_r+0x78>
 800a082:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a084:	07dc      	lsls	r4, r3, #31
 800a086:	d50e      	bpl.n	800a0a6 <_vfiprintf_r+0x6a>
 800a088:	f04f 30ff 	mov.w	r0, #4294967295
 800a08c:	b01d      	add	sp, #116	; 0x74
 800a08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a092:	4b7b      	ldr	r3, [pc, #492]	; (800a280 <_vfiprintf_r+0x244>)
 800a094:	429d      	cmp	r5, r3
 800a096:	d101      	bne.n	800a09c <_vfiprintf_r+0x60>
 800a098:	68b5      	ldr	r5, [r6, #8]
 800a09a:	e7df      	b.n	800a05c <_vfiprintf_r+0x20>
 800a09c:	4b79      	ldr	r3, [pc, #484]	; (800a284 <_vfiprintf_r+0x248>)
 800a09e:	429d      	cmp	r5, r3
 800a0a0:	bf08      	it	eq
 800a0a2:	68f5      	ldreq	r5, [r6, #12]
 800a0a4:	e7da      	b.n	800a05c <_vfiprintf_r+0x20>
 800a0a6:	89ab      	ldrh	r3, [r5, #12]
 800a0a8:	0598      	lsls	r0, r3, #22
 800a0aa:	d4ed      	bmi.n	800a088 <_vfiprintf_r+0x4c>
 800a0ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0ae:	f7ff fb2f 	bl	8009710 <__retarget_lock_release_recursive>
 800a0b2:	e7e9      	b.n	800a088 <_vfiprintf_r+0x4c>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	9309      	str	r3, [sp, #36]	; 0x24
 800a0b8:	2320      	movs	r3, #32
 800a0ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0be:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0c2:	2330      	movs	r3, #48	; 0x30
 800a0c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a288 <_vfiprintf_r+0x24c>
 800a0c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0cc:	f04f 0901 	mov.w	r9, #1
 800a0d0:	4623      	mov	r3, r4
 800a0d2:	469a      	mov	sl, r3
 800a0d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0d8:	b10a      	cbz	r2, 800a0de <_vfiprintf_r+0xa2>
 800a0da:	2a25      	cmp	r2, #37	; 0x25
 800a0dc:	d1f9      	bne.n	800a0d2 <_vfiprintf_r+0x96>
 800a0de:	ebba 0b04 	subs.w	fp, sl, r4
 800a0e2:	d00b      	beq.n	800a0fc <_vfiprintf_r+0xc0>
 800a0e4:	465b      	mov	r3, fp
 800a0e6:	4622      	mov	r2, r4
 800a0e8:	4629      	mov	r1, r5
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	f7ff ff93 	bl	800a016 <__sfputs_r>
 800a0f0:	3001      	adds	r0, #1
 800a0f2:	f000 80aa 	beq.w	800a24a <_vfiprintf_r+0x20e>
 800a0f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0f8:	445a      	add	r2, fp
 800a0fa:	9209      	str	r2, [sp, #36]	; 0x24
 800a0fc:	f89a 3000 	ldrb.w	r3, [sl]
 800a100:	2b00      	cmp	r3, #0
 800a102:	f000 80a2 	beq.w	800a24a <_vfiprintf_r+0x20e>
 800a106:	2300      	movs	r3, #0
 800a108:	f04f 32ff 	mov.w	r2, #4294967295
 800a10c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a110:	f10a 0a01 	add.w	sl, sl, #1
 800a114:	9304      	str	r3, [sp, #16]
 800a116:	9307      	str	r3, [sp, #28]
 800a118:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a11c:	931a      	str	r3, [sp, #104]	; 0x68
 800a11e:	4654      	mov	r4, sl
 800a120:	2205      	movs	r2, #5
 800a122:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a126:	4858      	ldr	r0, [pc, #352]	; (800a288 <_vfiprintf_r+0x24c>)
 800a128:	f7f6 f88a 	bl	8000240 <memchr>
 800a12c:	9a04      	ldr	r2, [sp, #16]
 800a12e:	b9d8      	cbnz	r0, 800a168 <_vfiprintf_r+0x12c>
 800a130:	06d1      	lsls	r1, r2, #27
 800a132:	bf44      	itt	mi
 800a134:	2320      	movmi	r3, #32
 800a136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a13a:	0713      	lsls	r3, r2, #28
 800a13c:	bf44      	itt	mi
 800a13e:	232b      	movmi	r3, #43	; 0x2b
 800a140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a144:	f89a 3000 	ldrb.w	r3, [sl]
 800a148:	2b2a      	cmp	r3, #42	; 0x2a
 800a14a:	d015      	beq.n	800a178 <_vfiprintf_r+0x13c>
 800a14c:	9a07      	ldr	r2, [sp, #28]
 800a14e:	4654      	mov	r4, sl
 800a150:	2000      	movs	r0, #0
 800a152:	f04f 0c0a 	mov.w	ip, #10
 800a156:	4621      	mov	r1, r4
 800a158:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a15c:	3b30      	subs	r3, #48	; 0x30
 800a15e:	2b09      	cmp	r3, #9
 800a160:	d94e      	bls.n	800a200 <_vfiprintf_r+0x1c4>
 800a162:	b1b0      	cbz	r0, 800a192 <_vfiprintf_r+0x156>
 800a164:	9207      	str	r2, [sp, #28]
 800a166:	e014      	b.n	800a192 <_vfiprintf_r+0x156>
 800a168:	eba0 0308 	sub.w	r3, r0, r8
 800a16c:	fa09 f303 	lsl.w	r3, r9, r3
 800a170:	4313      	orrs	r3, r2
 800a172:	9304      	str	r3, [sp, #16]
 800a174:	46a2      	mov	sl, r4
 800a176:	e7d2      	b.n	800a11e <_vfiprintf_r+0xe2>
 800a178:	9b03      	ldr	r3, [sp, #12]
 800a17a:	1d19      	adds	r1, r3, #4
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	9103      	str	r1, [sp, #12]
 800a180:	2b00      	cmp	r3, #0
 800a182:	bfbb      	ittet	lt
 800a184:	425b      	neglt	r3, r3
 800a186:	f042 0202 	orrlt.w	r2, r2, #2
 800a18a:	9307      	strge	r3, [sp, #28]
 800a18c:	9307      	strlt	r3, [sp, #28]
 800a18e:	bfb8      	it	lt
 800a190:	9204      	strlt	r2, [sp, #16]
 800a192:	7823      	ldrb	r3, [r4, #0]
 800a194:	2b2e      	cmp	r3, #46	; 0x2e
 800a196:	d10c      	bne.n	800a1b2 <_vfiprintf_r+0x176>
 800a198:	7863      	ldrb	r3, [r4, #1]
 800a19a:	2b2a      	cmp	r3, #42	; 0x2a
 800a19c:	d135      	bne.n	800a20a <_vfiprintf_r+0x1ce>
 800a19e:	9b03      	ldr	r3, [sp, #12]
 800a1a0:	1d1a      	adds	r2, r3, #4
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	9203      	str	r2, [sp, #12]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	bfb8      	it	lt
 800a1aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1ae:	3402      	adds	r4, #2
 800a1b0:	9305      	str	r3, [sp, #20]
 800a1b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a298 <_vfiprintf_r+0x25c>
 800a1b6:	7821      	ldrb	r1, [r4, #0]
 800a1b8:	2203      	movs	r2, #3
 800a1ba:	4650      	mov	r0, sl
 800a1bc:	f7f6 f840 	bl	8000240 <memchr>
 800a1c0:	b140      	cbz	r0, 800a1d4 <_vfiprintf_r+0x198>
 800a1c2:	2340      	movs	r3, #64	; 0x40
 800a1c4:	eba0 000a 	sub.w	r0, r0, sl
 800a1c8:	fa03 f000 	lsl.w	r0, r3, r0
 800a1cc:	9b04      	ldr	r3, [sp, #16]
 800a1ce:	4303      	orrs	r3, r0
 800a1d0:	3401      	adds	r4, #1
 800a1d2:	9304      	str	r3, [sp, #16]
 800a1d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1d8:	482c      	ldr	r0, [pc, #176]	; (800a28c <_vfiprintf_r+0x250>)
 800a1da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1de:	2206      	movs	r2, #6
 800a1e0:	f7f6 f82e 	bl	8000240 <memchr>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	d03f      	beq.n	800a268 <_vfiprintf_r+0x22c>
 800a1e8:	4b29      	ldr	r3, [pc, #164]	; (800a290 <_vfiprintf_r+0x254>)
 800a1ea:	bb1b      	cbnz	r3, 800a234 <_vfiprintf_r+0x1f8>
 800a1ec:	9b03      	ldr	r3, [sp, #12]
 800a1ee:	3307      	adds	r3, #7
 800a1f0:	f023 0307 	bic.w	r3, r3, #7
 800a1f4:	3308      	adds	r3, #8
 800a1f6:	9303      	str	r3, [sp, #12]
 800a1f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1fa:	443b      	add	r3, r7
 800a1fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a1fe:	e767      	b.n	800a0d0 <_vfiprintf_r+0x94>
 800a200:	fb0c 3202 	mla	r2, ip, r2, r3
 800a204:	460c      	mov	r4, r1
 800a206:	2001      	movs	r0, #1
 800a208:	e7a5      	b.n	800a156 <_vfiprintf_r+0x11a>
 800a20a:	2300      	movs	r3, #0
 800a20c:	3401      	adds	r4, #1
 800a20e:	9305      	str	r3, [sp, #20]
 800a210:	4619      	mov	r1, r3
 800a212:	f04f 0c0a 	mov.w	ip, #10
 800a216:	4620      	mov	r0, r4
 800a218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a21c:	3a30      	subs	r2, #48	; 0x30
 800a21e:	2a09      	cmp	r2, #9
 800a220:	d903      	bls.n	800a22a <_vfiprintf_r+0x1ee>
 800a222:	2b00      	cmp	r3, #0
 800a224:	d0c5      	beq.n	800a1b2 <_vfiprintf_r+0x176>
 800a226:	9105      	str	r1, [sp, #20]
 800a228:	e7c3      	b.n	800a1b2 <_vfiprintf_r+0x176>
 800a22a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a22e:	4604      	mov	r4, r0
 800a230:	2301      	movs	r3, #1
 800a232:	e7f0      	b.n	800a216 <_vfiprintf_r+0x1da>
 800a234:	ab03      	add	r3, sp, #12
 800a236:	9300      	str	r3, [sp, #0]
 800a238:	462a      	mov	r2, r5
 800a23a:	4b16      	ldr	r3, [pc, #88]	; (800a294 <_vfiprintf_r+0x258>)
 800a23c:	a904      	add	r1, sp, #16
 800a23e:	4630      	mov	r0, r6
 800a240:	f3af 8000 	nop.w
 800a244:	4607      	mov	r7, r0
 800a246:	1c78      	adds	r0, r7, #1
 800a248:	d1d6      	bne.n	800a1f8 <_vfiprintf_r+0x1bc>
 800a24a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a24c:	07d9      	lsls	r1, r3, #31
 800a24e:	d405      	bmi.n	800a25c <_vfiprintf_r+0x220>
 800a250:	89ab      	ldrh	r3, [r5, #12]
 800a252:	059a      	lsls	r2, r3, #22
 800a254:	d402      	bmi.n	800a25c <_vfiprintf_r+0x220>
 800a256:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a258:	f7ff fa5a 	bl	8009710 <__retarget_lock_release_recursive>
 800a25c:	89ab      	ldrh	r3, [r5, #12]
 800a25e:	065b      	lsls	r3, r3, #25
 800a260:	f53f af12 	bmi.w	800a088 <_vfiprintf_r+0x4c>
 800a264:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a266:	e711      	b.n	800a08c <_vfiprintf_r+0x50>
 800a268:	ab03      	add	r3, sp, #12
 800a26a:	9300      	str	r3, [sp, #0]
 800a26c:	462a      	mov	r2, r5
 800a26e:	4b09      	ldr	r3, [pc, #36]	; (800a294 <_vfiprintf_r+0x258>)
 800a270:	a904      	add	r1, sp, #16
 800a272:	4630      	mov	r0, r6
 800a274:	f000 f880 	bl	800a378 <_printf_i>
 800a278:	e7e4      	b.n	800a244 <_vfiprintf_r+0x208>
 800a27a:	bf00      	nop
 800a27c:	0800a800 	.word	0x0800a800
 800a280:	0800a820 	.word	0x0800a820
 800a284:	0800a7e0 	.word	0x0800a7e0
 800a288:	0800a844 	.word	0x0800a844
 800a28c:	0800a84e 	.word	0x0800a84e
 800a290:	00000000 	.word	0x00000000
 800a294:	0800a017 	.word	0x0800a017
 800a298:	0800a84a 	.word	0x0800a84a

0800a29c <_printf_common>:
 800a29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2a0:	4616      	mov	r6, r2
 800a2a2:	4699      	mov	r9, r3
 800a2a4:	688a      	ldr	r2, [r1, #8]
 800a2a6:	690b      	ldr	r3, [r1, #16]
 800a2a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	bfb8      	it	lt
 800a2b0:	4613      	movlt	r3, r2
 800a2b2:	6033      	str	r3, [r6, #0]
 800a2b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a2b8:	4607      	mov	r7, r0
 800a2ba:	460c      	mov	r4, r1
 800a2bc:	b10a      	cbz	r2, 800a2c2 <_printf_common+0x26>
 800a2be:	3301      	adds	r3, #1
 800a2c0:	6033      	str	r3, [r6, #0]
 800a2c2:	6823      	ldr	r3, [r4, #0]
 800a2c4:	0699      	lsls	r1, r3, #26
 800a2c6:	bf42      	ittt	mi
 800a2c8:	6833      	ldrmi	r3, [r6, #0]
 800a2ca:	3302      	addmi	r3, #2
 800a2cc:	6033      	strmi	r3, [r6, #0]
 800a2ce:	6825      	ldr	r5, [r4, #0]
 800a2d0:	f015 0506 	ands.w	r5, r5, #6
 800a2d4:	d106      	bne.n	800a2e4 <_printf_common+0x48>
 800a2d6:	f104 0a19 	add.w	sl, r4, #25
 800a2da:	68e3      	ldr	r3, [r4, #12]
 800a2dc:	6832      	ldr	r2, [r6, #0]
 800a2de:	1a9b      	subs	r3, r3, r2
 800a2e0:	42ab      	cmp	r3, r5
 800a2e2:	dc26      	bgt.n	800a332 <_printf_common+0x96>
 800a2e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a2e8:	1e13      	subs	r3, r2, #0
 800a2ea:	6822      	ldr	r2, [r4, #0]
 800a2ec:	bf18      	it	ne
 800a2ee:	2301      	movne	r3, #1
 800a2f0:	0692      	lsls	r2, r2, #26
 800a2f2:	d42b      	bmi.n	800a34c <_printf_common+0xb0>
 800a2f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2f8:	4649      	mov	r1, r9
 800a2fa:	4638      	mov	r0, r7
 800a2fc:	47c0      	blx	r8
 800a2fe:	3001      	adds	r0, #1
 800a300:	d01e      	beq.n	800a340 <_printf_common+0xa4>
 800a302:	6823      	ldr	r3, [r4, #0]
 800a304:	68e5      	ldr	r5, [r4, #12]
 800a306:	6832      	ldr	r2, [r6, #0]
 800a308:	f003 0306 	and.w	r3, r3, #6
 800a30c:	2b04      	cmp	r3, #4
 800a30e:	bf08      	it	eq
 800a310:	1aad      	subeq	r5, r5, r2
 800a312:	68a3      	ldr	r3, [r4, #8]
 800a314:	6922      	ldr	r2, [r4, #16]
 800a316:	bf0c      	ite	eq
 800a318:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a31c:	2500      	movne	r5, #0
 800a31e:	4293      	cmp	r3, r2
 800a320:	bfc4      	itt	gt
 800a322:	1a9b      	subgt	r3, r3, r2
 800a324:	18ed      	addgt	r5, r5, r3
 800a326:	2600      	movs	r6, #0
 800a328:	341a      	adds	r4, #26
 800a32a:	42b5      	cmp	r5, r6
 800a32c:	d11a      	bne.n	800a364 <_printf_common+0xc8>
 800a32e:	2000      	movs	r0, #0
 800a330:	e008      	b.n	800a344 <_printf_common+0xa8>
 800a332:	2301      	movs	r3, #1
 800a334:	4652      	mov	r2, sl
 800a336:	4649      	mov	r1, r9
 800a338:	4638      	mov	r0, r7
 800a33a:	47c0      	blx	r8
 800a33c:	3001      	adds	r0, #1
 800a33e:	d103      	bne.n	800a348 <_printf_common+0xac>
 800a340:	f04f 30ff 	mov.w	r0, #4294967295
 800a344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a348:	3501      	adds	r5, #1
 800a34a:	e7c6      	b.n	800a2da <_printf_common+0x3e>
 800a34c:	18e1      	adds	r1, r4, r3
 800a34e:	1c5a      	adds	r2, r3, #1
 800a350:	2030      	movs	r0, #48	; 0x30
 800a352:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a356:	4422      	add	r2, r4
 800a358:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a35c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a360:	3302      	adds	r3, #2
 800a362:	e7c7      	b.n	800a2f4 <_printf_common+0x58>
 800a364:	2301      	movs	r3, #1
 800a366:	4622      	mov	r2, r4
 800a368:	4649      	mov	r1, r9
 800a36a:	4638      	mov	r0, r7
 800a36c:	47c0      	blx	r8
 800a36e:	3001      	adds	r0, #1
 800a370:	d0e6      	beq.n	800a340 <_printf_common+0xa4>
 800a372:	3601      	adds	r6, #1
 800a374:	e7d9      	b.n	800a32a <_printf_common+0x8e>
	...

0800a378 <_printf_i>:
 800a378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a37c:	7e0f      	ldrb	r7, [r1, #24]
 800a37e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a380:	2f78      	cmp	r7, #120	; 0x78
 800a382:	4691      	mov	r9, r2
 800a384:	4680      	mov	r8, r0
 800a386:	460c      	mov	r4, r1
 800a388:	469a      	mov	sl, r3
 800a38a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a38e:	d807      	bhi.n	800a3a0 <_printf_i+0x28>
 800a390:	2f62      	cmp	r7, #98	; 0x62
 800a392:	d80a      	bhi.n	800a3aa <_printf_i+0x32>
 800a394:	2f00      	cmp	r7, #0
 800a396:	f000 80d8 	beq.w	800a54a <_printf_i+0x1d2>
 800a39a:	2f58      	cmp	r7, #88	; 0x58
 800a39c:	f000 80a3 	beq.w	800a4e6 <_printf_i+0x16e>
 800a3a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a3a8:	e03a      	b.n	800a420 <_printf_i+0xa8>
 800a3aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a3ae:	2b15      	cmp	r3, #21
 800a3b0:	d8f6      	bhi.n	800a3a0 <_printf_i+0x28>
 800a3b2:	a101      	add	r1, pc, #4	; (adr r1, 800a3b8 <_printf_i+0x40>)
 800a3b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a3b8:	0800a411 	.word	0x0800a411
 800a3bc:	0800a425 	.word	0x0800a425
 800a3c0:	0800a3a1 	.word	0x0800a3a1
 800a3c4:	0800a3a1 	.word	0x0800a3a1
 800a3c8:	0800a3a1 	.word	0x0800a3a1
 800a3cc:	0800a3a1 	.word	0x0800a3a1
 800a3d0:	0800a425 	.word	0x0800a425
 800a3d4:	0800a3a1 	.word	0x0800a3a1
 800a3d8:	0800a3a1 	.word	0x0800a3a1
 800a3dc:	0800a3a1 	.word	0x0800a3a1
 800a3e0:	0800a3a1 	.word	0x0800a3a1
 800a3e4:	0800a531 	.word	0x0800a531
 800a3e8:	0800a455 	.word	0x0800a455
 800a3ec:	0800a513 	.word	0x0800a513
 800a3f0:	0800a3a1 	.word	0x0800a3a1
 800a3f4:	0800a3a1 	.word	0x0800a3a1
 800a3f8:	0800a553 	.word	0x0800a553
 800a3fc:	0800a3a1 	.word	0x0800a3a1
 800a400:	0800a455 	.word	0x0800a455
 800a404:	0800a3a1 	.word	0x0800a3a1
 800a408:	0800a3a1 	.word	0x0800a3a1
 800a40c:	0800a51b 	.word	0x0800a51b
 800a410:	682b      	ldr	r3, [r5, #0]
 800a412:	1d1a      	adds	r2, r3, #4
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	602a      	str	r2, [r5, #0]
 800a418:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a41c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a420:	2301      	movs	r3, #1
 800a422:	e0a3      	b.n	800a56c <_printf_i+0x1f4>
 800a424:	6820      	ldr	r0, [r4, #0]
 800a426:	6829      	ldr	r1, [r5, #0]
 800a428:	0606      	lsls	r6, r0, #24
 800a42a:	f101 0304 	add.w	r3, r1, #4
 800a42e:	d50a      	bpl.n	800a446 <_printf_i+0xce>
 800a430:	680e      	ldr	r6, [r1, #0]
 800a432:	602b      	str	r3, [r5, #0]
 800a434:	2e00      	cmp	r6, #0
 800a436:	da03      	bge.n	800a440 <_printf_i+0xc8>
 800a438:	232d      	movs	r3, #45	; 0x2d
 800a43a:	4276      	negs	r6, r6
 800a43c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a440:	485e      	ldr	r0, [pc, #376]	; (800a5bc <_printf_i+0x244>)
 800a442:	230a      	movs	r3, #10
 800a444:	e019      	b.n	800a47a <_printf_i+0x102>
 800a446:	680e      	ldr	r6, [r1, #0]
 800a448:	602b      	str	r3, [r5, #0]
 800a44a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a44e:	bf18      	it	ne
 800a450:	b236      	sxthne	r6, r6
 800a452:	e7ef      	b.n	800a434 <_printf_i+0xbc>
 800a454:	682b      	ldr	r3, [r5, #0]
 800a456:	6820      	ldr	r0, [r4, #0]
 800a458:	1d19      	adds	r1, r3, #4
 800a45a:	6029      	str	r1, [r5, #0]
 800a45c:	0601      	lsls	r1, r0, #24
 800a45e:	d501      	bpl.n	800a464 <_printf_i+0xec>
 800a460:	681e      	ldr	r6, [r3, #0]
 800a462:	e002      	b.n	800a46a <_printf_i+0xf2>
 800a464:	0646      	lsls	r6, r0, #25
 800a466:	d5fb      	bpl.n	800a460 <_printf_i+0xe8>
 800a468:	881e      	ldrh	r6, [r3, #0]
 800a46a:	4854      	ldr	r0, [pc, #336]	; (800a5bc <_printf_i+0x244>)
 800a46c:	2f6f      	cmp	r7, #111	; 0x6f
 800a46e:	bf0c      	ite	eq
 800a470:	2308      	moveq	r3, #8
 800a472:	230a      	movne	r3, #10
 800a474:	2100      	movs	r1, #0
 800a476:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a47a:	6865      	ldr	r5, [r4, #4]
 800a47c:	60a5      	str	r5, [r4, #8]
 800a47e:	2d00      	cmp	r5, #0
 800a480:	bfa2      	ittt	ge
 800a482:	6821      	ldrge	r1, [r4, #0]
 800a484:	f021 0104 	bicge.w	r1, r1, #4
 800a488:	6021      	strge	r1, [r4, #0]
 800a48a:	b90e      	cbnz	r6, 800a490 <_printf_i+0x118>
 800a48c:	2d00      	cmp	r5, #0
 800a48e:	d04d      	beq.n	800a52c <_printf_i+0x1b4>
 800a490:	4615      	mov	r5, r2
 800a492:	fbb6 f1f3 	udiv	r1, r6, r3
 800a496:	fb03 6711 	mls	r7, r3, r1, r6
 800a49a:	5dc7      	ldrb	r7, [r0, r7]
 800a49c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a4a0:	4637      	mov	r7, r6
 800a4a2:	42bb      	cmp	r3, r7
 800a4a4:	460e      	mov	r6, r1
 800a4a6:	d9f4      	bls.n	800a492 <_printf_i+0x11a>
 800a4a8:	2b08      	cmp	r3, #8
 800a4aa:	d10b      	bne.n	800a4c4 <_printf_i+0x14c>
 800a4ac:	6823      	ldr	r3, [r4, #0]
 800a4ae:	07de      	lsls	r6, r3, #31
 800a4b0:	d508      	bpl.n	800a4c4 <_printf_i+0x14c>
 800a4b2:	6923      	ldr	r3, [r4, #16]
 800a4b4:	6861      	ldr	r1, [r4, #4]
 800a4b6:	4299      	cmp	r1, r3
 800a4b8:	bfde      	ittt	le
 800a4ba:	2330      	movle	r3, #48	; 0x30
 800a4bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a4c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a4c4:	1b52      	subs	r2, r2, r5
 800a4c6:	6122      	str	r2, [r4, #16]
 800a4c8:	f8cd a000 	str.w	sl, [sp]
 800a4cc:	464b      	mov	r3, r9
 800a4ce:	aa03      	add	r2, sp, #12
 800a4d0:	4621      	mov	r1, r4
 800a4d2:	4640      	mov	r0, r8
 800a4d4:	f7ff fee2 	bl	800a29c <_printf_common>
 800a4d8:	3001      	adds	r0, #1
 800a4da:	d14c      	bne.n	800a576 <_printf_i+0x1fe>
 800a4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e0:	b004      	add	sp, #16
 800a4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4e6:	4835      	ldr	r0, [pc, #212]	; (800a5bc <_printf_i+0x244>)
 800a4e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a4ec:	6829      	ldr	r1, [r5, #0]
 800a4ee:	6823      	ldr	r3, [r4, #0]
 800a4f0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a4f4:	6029      	str	r1, [r5, #0]
 800a4f6:	061d      	lsls	r5, r3, #24
 800a4f8:	d514      	bpl.n	800a524 <_printf_i+0x1ac>
 800a4fa:	07df      	lsls	r7, r3, #31
 800a4fc:	bf44      	itt	mi
 800a4fe:	f043 0320 	orrmi.w	r3, r3, #32
 800a502:	6023      	strmi	r3, [r4, #0]
 800a504:	b91e      	cbnz	r6, 800a50e <_printf_i+0x196>
 800a506:	6823      	ldr	r3, [r4, #0]
 800a508:	f023 0320 	bic.w	r3, r3, #32
 800a50c:	6023      	str	r3, [r4, #0]
 800a50e:	2310      	movs	r3, #16
 800a510:	e7b0      	b.n	800a474 <_printf_i+0xfc>
 800a512:	6823      	ldr	r3, [r4, #0]
 800a514:	f043 0320 	orr.w	r3, r3, #32
 800a518:	6023      	str	r3, [r4, #0]
 800a51a:	2378      	movs	r3, #120	; 0x78
 800a51c:	4828      	ldr	r0, [pc, #160]	; (800a5c0 <_printf_i+0x248>)
 800a51e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a522:	e7e3      	b.n	800a4ec <_printf_i+0x174>
 800a524:	0659      	lsls	r1, r3, #25
 800a526:	bf48      	it	mi
 800a528:	b2b6      	uxthmi	r6, r6
 800a52a:	e7e6      	b.n	800a4fa <_printf_i+0x182>
 800a52c:	4615      	mov	r5, r2
 800a52e:	e7bb      	b.n	800a4a8 <_printf_i+0x130>
 800a530:	682b      	ldr	r3, [r5, #0]
 800a532:	6826      	ldr	r6, [r4, #0]
 800a534:	6961      	ldr	r1, [r4, #20]
 800a536:	1d18      	adds	r0, r3, #4
 800a538:	6028      	str	r0, [r5, #0]
 800a53a:	0635      	lsls	r5, r6, #24
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	d501      	bpl.n	800a544 <_printf_i+0x1cc>
 800a540:	6019      	str	r1, [r3, #0]
 800a542:	e002      	b.n	800a54a <_printf_i+0x1d2>
 800a544:	0670      	lsls	r0, r6, #25
 800a546:	d5fb      	bpl.n	800a540 <_printf_i+0x1c8>
 800a548:	8019      	strh	r1, [r3, #0]
 800a54a:	2300      	movs	r3, #0
 800a54c:	6123      	str	r3, [r4, #16]
 800a54e:	4615      	mov	r5, r2
 800a550:	e7ba      	b.n	800a4c8 <_printf_i+0x150>
 800a552:	682b      	ldr	r3, [r5, #0]
 800a554:	1d1a      	adds	r2, r3, #4
 800a556:	602a      	str	r2, [r5, #0]
 800a558:	681d      	ldr	r5, [r3, #0]
 800a55a:	6862      	ldr	r2, [r4, #4]
 800a55c:	2100      	movs	r1, #0
 800a55e:	4628      	mov	r0, r5
 800a560:	f7f5 fe6e 	bl	8000240 <memchr>
 800a564:	b108      	cbz	r0, 800a56a <_printf_i+0x1f2>
 800a566:	1b40      	subs	r0, r0, r5
 800a568:	6060      	str	r0, [r4, #4]
 800a56a:	6863      	ldr	r3, [r4, #4]
 800a56c:	6123      	str	r3, [r4, #16]
 800a56e:	2300      	movs	r3, #0
 800a570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a574:	e7a8      	b.n	800a4c8 <_printf_i+0x150>
 800a576:	6923      	ldr	r3, [r4, #16]
 800a578:	462a      	mov	r2, r5
 800a57a:	4649      	mov	r1, r9
 800a57c:	4640      	mov	r0, r8
 800a57e:	47d0      	blx	sl
 800a580:	3001      	adds	r0, #1
 800a582:	d0ab      	beq.n	800a4dc <_printf_i+0x164>
 800a584:	6823      	ldr	r3, [r4, #0]
 800a586:	079b      	lsls	r3, r3, #30
 800a588:	d413      	bmi.n	800a5b2 <_printf_i+0x23a>
 800a58a:	68e0      	ldr	r0, [r4, #12]
 800a58c:	9b03      	ldr	r3, [sp, #12]
 800a58e:	4298      	cmp	r0, r3
 800a590:	bfb8      	it	lt
 800a592:	4618      	movlt	r0, r3
 800a594:	e7a4      	b.n	800a4e0 <_printf_i+0x168>
 800a596:	2301      	movs	r3, #1
 800a598:	4632      	mov	r2, r6
 800a59a:	4649      	mov	r1, r9
 800a59c:	4640      	mov	r0, r8
 800a59e:	47d0      	blx	sl
 800a5a0:	3001      	adds	r0, #1
 800a5a2:	d09b      	beq.n	800a4dc <_printf_i+0x164>
 800a5a4:	3501      	adds	r5, #1
 800a5a6:	68e3      	ldr	r3, [r4, #12]
 800a5a8:	9903      	ldr	r1, [sp, #12]
 800a5aa:	1a5b      	subs	r3, r3, r1
 800a5ac:	42ab      	cmp	r3, r5
 800a5ae:	dcf2      	bgt.n	800a596 <_printf_i+0x21e>
 800a5b0:	e7eb      	b.n	800a58a <_printf_i+0x212>
 800a5b2:	2500      	movs	r5, #0
 800a5b4:	f104 0619 	add.w	r6, r4, #25
 800a5b8:	e7f5      	b.n	800a5a6 <_printf_i+0x22e>
 800a5ba:	bf00      	nop
 800a5bc:	0800a855 	.word	0x0800a855
 800a5c0:	0800a866 	.word	0x0800a866

0800a5c4 <_read_r>:
 800a5c4:	b538      	push	{r3, r4, r5, lr}
 800a5c6:	4d07      	ldr	r5, [pc, #28]	; (800a5e4 <_read_r+0x20>)
 800a5c8:	4604      	mov	r4, r0
 800a5ca:	4608      	mov	r0, r1
 800a5cc:	4611      	mov	r1, r2
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	602a      	str	r2, [r5, #0]
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	f7f7 fea0 	bl	8002318 <_read>
 800a5d8:	1c43      	adds	r3, r0, #1
 800a5da:	d102      	bne.n	800a5e2 <_read_r+0x1e>
 800a5dc:	682b      	ldr	r3, [r5, #0]
 800a5de:	b103      	cbz	r3, 800a5e2 <_read_r+0x1e>
 800a5e0:	6023      	str	r3, [r4, #0]
 800a5e2:	bd38      	pop	{r3, r4, r5, pc}
 800a5e4:	20004d34 	.word	0x20004d34

0800a5e8 <_fstat_r>:
 800a5e8:	b538      	push	{r3, r4, r5, lr}
 800a5ea:	4d07      	ldr	r5, [pc, #28]	; (800a608 <_fstat_r+0x20>)
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	4604      	mov	r4, r0
 800a5f0:	4608      	mov	r0, r1
 800a5f2:	4611      	mov	r1, r2
 800a5f4:	602b      	str	r3, [r5, #0]
 800a5f6:	f7f7 feb8 	bl	800236a <_fstat>
 800a5fa:	1c43      	adds	r3, r0, #1
 800a5fc:	d102      	bne.n	800a604 <_fstat_r+0x1c>
 800a5fe:	682b      	ldr	r3, [r5, #0]
 800a600:	b103      	cbz	r3, 800a604 <_fstat_r+0x1c>
 800a602:	6023      	str	r3, [r4, #0]
 800a604:	bd38      	pop	{r3, r4, r5, pc}
 800a606:	bf00      	nop
 800a608:	20004d34 	.word	0x20004d34

0800a60c <_isatty_r>:
 800a60c:	b538      	push	{r3, r4, r5, lr}
 800a60e:	4d06      	ldr	r5, [pc, #24]	; (800a628 <_isatty_r+0x1c>)
 800a610:	2300      	movs	r3, #0
 800a612:	4604      	mov	r4, r0
 800a614:	4608      	mov	r0, r1
 800a616:	602b      	str	r3, [r5, #0]
 800a618:	f7f7 feb7 	bl	800238a <_isatty>
 800a61c:	1c43      	adds	r3, r0, #1
 800a61e:	d102      	bne.n	800a626 <_isatty_r+0x1a>
 800a620:	682b      	ldr	r3, [r5, #0]
 800a622:	b103      	cbz	r3, 800a626 <_isatty_r+0x1a>
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	bd38      	pop	{r3, r4, r5, pc}
 800a628:	20004d34 	.word	0x20004d34

0800a62c <_init>:
 800a62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a62e:	bf00      	nop
 800a630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a632:	bc08      	pop	{r3}
 800a634:	469e      	mov	lr, r3
 800a636:	4770      	bx	lr

0800a638 <_fini>:
 800a638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a63a:	bf00      	nop
 800a63c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a63e:	bc08      	pop	{r3}
 800a640:	469e      	mov	lr, r3
 800a642:	4770      	bx	lr
