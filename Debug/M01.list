
M01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093e0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  080095e0  080095e0  000195e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009794  08009794  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009794  08009794  00019794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800979c  0800979c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800979c  0800979c  0001979c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097a0  080097a0  000197a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080097a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c30  20000074  08009818  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ca4  08009818  00024ca4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e81e  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aa2  00000000  00000000  0003e8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  00042368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f8  00000000  00000000  000439b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029f14  00000000  00000000  00044eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a8d0  00000000  00000000  0006edc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010690d  00000000  00000000  00089694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018ffa1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006088  00000000  00000000  0018fff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	080095c8 	.word	0x080095c8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	080095c8 	.word	0x080095c8

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <ModbusInit>:
 * @param EN_Port_v port for txen RS-485
 * @param EN_Pin_v pin for txen RS-485 (NULL means RS232C mode)
 * @ingroup setup
 */
void ModbusInit(modbusHandler_t * modH)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af02      	add	r7, sp, #8
 800054a:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 800054c:	4b34      	ldr	r3, [pc, #208]	; (8000620 <ModbusInit+0xdc>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d860      	bhi.n	8000616 <ModbusInit+0xd2>
  {
	  //Create QueueModbus
	  modH->QueueModbusHandle = osMessageQueueNew (MAX_BUFFER, sizeof(uint8_t), &QueueModbus_attributes);
 8000554:	4a33      	ldr	r2, [pc, #204]	; (8000624 <ModbusInit+0xe0>)
 8000556:	2101      	movs	r1, #1
 8000558:	2040      	movs	r0, #64	; 0x40
 800055a:	f005 fc3d 	bl	8005dd8 <osMessageQueueNew>
 800055e:	4602      	mov	r2, r0
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	675a      	str	r2, [r3, #116]	; 0x74

	  if(modH->uiModbusType == SLAVE_RTU)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b03      	cmp	r3, #3
 800056a:	d108      	bne.n	800057e <ModbusInit+0x3a>
	  {
		  //Create Modbus task slave
	  	  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 800056c:	4a2e      	ldr	r2, [pc, #184]	; (8000628 <ModbusInit+0xe4>)
 800056e:	6879      	ldr	r1, [r7, #4]
 8000570:	482e      	ldr	r0, [pc, #184]	; (800062c <ModbusInit+0xe8>)
 8000572:	f005 fac1 	bl	8005af8 <osThreadNew>
 8000576:	4602      	mov	r2, r0
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	67da      	str	r2, [r3, #124]	; 0x7c
 800057c:	e026      	b.n	80005cc <ModbusInit+0x88>
	  }
	  else if (modH->uiModbusType == MASTER_RTU)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b04      	cmp	r3, #4
 8000584:	d121      	bne.n	80005ca <ModbusInit+0x86>
	  {
		  //Create Modbus task Master  and Queue for telegrams
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8000586:	4a2a      	ldr	r2, [pc, #168]	; (8000630 <ModbusInit+0xec>)
 8000588:	6879      	ldr	r1, [r7, #4]
 800058a:	482a      	ldr	r0, [pc, #168]	; (8000634 <ModbusInit+0xf0>)
 800058c:	f005 fab4 	bl	8005af8 <osThreadNew>
 8000590:	4602      	mov	r2, r0
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	67da      	str	r2, [r3, #124]	; 0x7c
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800059c:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 80005a4:	4a24      	ldr	r2, [pc, #144]	; (8000638 <ModbusInit+0xf4>)
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	2200      	movs	r2, #0
 80005aa:	4824      	ldr	r0, [pc, #144]	; (800063c <ModbusInit+0xf8>)
 80005ac:	f007 ff82 	bl	80084b4 <xTimerCreate>
 80005b0:	4602      	mov	r2, r0
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);
		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 80005b8:	4a21      	ldr	r2, [pc, #132]	; (8000640 <ModbusInit+0xfc>)
 80005ba:	210c      	movs	r1, #12
 80005bc:	2002      	movs	r0, #2
 80005be:	f005 fc0b 	bl	8005dd8 <osMessageQueueNew>
 80005c2:	4602      	mov	r2, r0
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	679a      	str	r2, [r3, #120]	; 0x78
 80005c8:	e000      	b.n	80005cc <ModbusInit+0x88>
	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 80005ca:	e7fe      	b.n	80005ca <ModbusInit+0x86>
	  //Create timer T35

	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	5 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 80005d2:	4a1c      	ldr	r2, [pc, #112]	; (8000644 <ModbusInit+0x100>)
 80005d4:	9200      	str	r2, [sp, #0]
 80005d6:	2200      	movs	r2, #0
 80005d8:	2105      	movs	r1, #5
 80005da:	481b      	ldr	r0, [pc, #108]	; (8000648 <ModbusInit+0x104>)
 80005dc:	f007 ff6a 	bl	80084b4 <xTimerCreate>
 80005e0:	4602      	mov	r2, r0
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );

	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 80005e8:	4a18      	ldr	r2, [pc, #96]	; (800064c <ModbusInit+0x108>)
 80005ea:	2101      	movs	r1, #1
 80005ec:	2001      	movs	r0, #1
 80005ee:	f005 fb57 	bl	8005ca0 <osSemaphoreNew>
 80005f2:	4602      	mov	r2, r0
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	  mHandlers[numberHandlers] = modH;
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <ModbusInit+0xdc>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	4619      	mov	r1, r3
 8000600:	4a13      	ldr	r2, [pc, #76]	; (8000650 <ModbusInit+0x10c>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <ModbusInit+0xdc>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	3301      	adds	r3, #1
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b03      	ldr	r3, [pc, #12]	; (8000620 <ModbusInit+0xdc>)
 8000612:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 8000614:	e000      	b.n	8000618 <ModbusInit+0xd4>
	  while(1); //error no more Modbus handlers supported
 8000616:	e7fe      	b.n	8000616 <ModbusInit+0xd2>
}
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000098 	.word	0x20000098
 8000624:	08009668 	.word	0x08009668
 8000628:	08009698 	.word	0x08009698
 800062c:	080007c5 	.word	0x080007c5
 8000630:	080096bc 	.word	0x080096bc
 8000634:	08000c5d 	.word	0x08000c5d
 8000638:	0800076d 	.word	0x0800076d
 800063c:	08009628 	.word	0x08009628
 8000640:	08009680 	.word	0x08009680
 8000644:	080006ed 	.word	0x080006ed
 8000648:	08009638 	.word	0x08009638
 800064c:	080096e0 	.word	0x080096e0
 8000650:	20000090 	.word	0x20000090

08000654 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
    if (modH->EN_Port != NULL )
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d007      	beq.n	8000674 <ModbusStart+0x20>
    {
        // return RS485 transceiver to transmit mode
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	68d8      	ldr	r0, [r3, #12]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	8a1b      	ldrh	r3, [r3, #16]
 800066c:	2200      	movs	r2, #0
 800066e:	4619      	mov	r1, r3
 8000670:	f002 f992 	bl	8002998 <HAL_GPIO_WritePin>
    }

    if (modH->uiModbusType == SLAVE_RTU &&  modH->au16regs == NULL )
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b03      	cmp	r3, #3
 800067a:	d104      	bne.n	8000686 <ModbusStart+0x32>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000680:	2b00      	cmp	r3, #0
 8000682:	d100      	bne.n	8000686 <ModbusStart+0x32>
    {
    	while(1); //ERROR define the DATA pointer shared through Modbus
 8000684:	e7fe      	b.n	8000684 <ModbusStart+0x30>
    }

    //check that port is initialized
    while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8000686:	bf00      	nop
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	4618      	mov	r0, r3
 800068e:	f004 fa15 	bl	8004abc <HAL_UART_GetState>
 8000692:	4603      	mov	r3, r0
 8000694:	2b20      	cmp	r3, #32
 8000696:	d1f7      	bne.n	8000688 <ModbusStart+0x34>
    {
    }

    // Receive data from serial port for Modbus using interrupt
    if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6858      	ldr	r0, [r3, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3371      	adds	r3, #113	; 0x71
 80006a0:	2201      	movs	r2, #1
 80006a2:	4619      	mov	r1, r3
 80006a4:	f003 febc 	bl	8004420 <HAL_UART_Receive_IT>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d000      	beq.n	80006b0 <ModbusStart+0x5c>
    {
        while(1)
 80006ae:	e7fe      	b.n	80006ae <ModbusStart+0x5a>
        {
        }
    }

    modH->u8lastRec = modH->u8BufferSize = 0;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2200      	movs	r2, #0
 80006b4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2200      	movs	r2, #0
 80006c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <vTimerCallbackT35>:


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af02      	add	r7, sp, #8
 80006f2:	6078      	str	r0, [r7, #4]
	//Notify that a steam has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	e029      	b.n	800074e <vTimerCallbackT35+0x62>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 80006fa:	4a1a      	ldr	r2, [pc, #104]	; (8000764 <vTimerCallbackT35+0x78>)
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	429a      	cmp	r2, r3
 800070a:	d11d      	bne.n	8000748 <vTimerCallbackT35+0x5c>
			if(mHandlers[i]->uiModbusType == MASTER_RTU)
 800070c:	4a15      	ldr	r2, [pc, #84]	; (8000764 <vTimerCallbackT35+0x78>)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b04      	cmp	r3, #4
 8000718:	d10c      	bne.n	8000734 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <vTimerCallbackT35+0x78>)
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000722:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8000726:	2300      	movs	r3, #0
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	2300      	movs	r3, #0
 800072c:	2200      	movs	r2, #0
 800072e:	2103      	movs	r1, #3
 8000730:	f007 ff1e 	bl	8008570 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8000734:	4a0b      	ldr	r2, [pc, #44]	; (8000764 <vTimerCallbackT35+0x78>)
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800073c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800073e:	2300      	movs	r3, #0
 8000740:	2203      	movs	r2, #3
 8000742:	2100      	movs	r1, #0
 8000744:	f007 fc68 	bl	8008018 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	3301      	adds	r3, #1
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <vTimerCallbackT35+0x7c>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	461a      	mov	r2, r3
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	4293      	cmp	r3, r2
 8000758:	dbcf      	blt.n	80006fa <vTimerCallbackT35+0xe>
		}

	}
}
 800075a:	bf00      	nop
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000090 	.word	0x20000090
 8000768:	20000098 	.word	0x20000098

0800076c <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	//Notify that a steam has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	e015      	b.n	80007a6 <vTimerCallbackTimeout+0x3a>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 800077a:	4a10      	ldr	r2, [pc, #64]	; (80007bc <vTimerCallbackTimeout+0x50>)
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	429a      	cmp	r2, r3
 800078a:	d109      	bne.n	80007a0 <vTimerCallbackTimeout+0x34>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, NO_REPLY, eSetValueWithOverwrite);
 800078c:	4a0b      	ldr	r2, [pc, #44]	; (80007bc <vTimerCallbackTimeout+0x50>)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000794:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8000796:	2300      	movs	r3, #0
 8000798:	2203      	movs	r2, #3
 800079a:	21ff      	movs	r1, #255	; 0xff
 800079c:	f007 fc3c 	bl	8008018 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	3301      	adds	r3, #1
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <vTimerCallbackTimeout+0x54>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	461a      	mov	r2, r3
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	4293      	cmp	r3, r2
 80007b0:	dbe3      	blt.n	800077a <vTimerCallbackTimeout+0xe>
		}

	}

}
 80007b2:	bf00      	nop
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000090 	.word	0x20000090
 80007c0:	20000098 	.word	0x20000098

080007c4 <StartTaskModbusSlave>:


void StartTaskModbusSlave(void *argument)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block indefinitely until a Modbus Frame arrives */
 80007d0:	f04f 31ff 	mov.w	r1, #4294967295
 80007d4:	2001      	movs	r0, #1
 80007d6:	f007 fbd3 	bl	8007f80 <ulTaskNotifyTake>

	  modH->i8lastError = 0;
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	2200      	movs	r2, #0
 80007de:	749a      	strb	r2, [r3, #18]
	  modH->u8BufferSize = uxQueueMessagesWaiting(modH->QueueModbusHandle);
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80007e4:	4618      	mov	r0, r3
 80007e6:	f006 f9c9 	bl	8006b7c <uxQueueMessagesWaiting>
 80007ea:	4603      	mov	r3, r0
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	  if (modH->EN_Port != NULL )
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d007      	beq.n	800080c <StartTaskModbusSlave+0x48>
	  {
	     	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET); // is this required?
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	68d8      	ldr	r0, [r3, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	8a1b      	ldrh	r3, [r3, #16]
 8000804:	2200      	movs	r2, #0
 8000806:	4619      	mov	r1, r3
 8000808:	f002 f8c6 	bl	8002998 <HAL_GPIO_WritePin>
	  }

	  int8_t i8state = getRxBuffer(modH);
 800080c:	68f8      	ldr	r0, [r7, #12]
 800080e:	f000 fbe1 	bl	8000fd4 <getRxBuffer>
 8000812:	4603      	mov	r3, r0
 8000814:	72fb      	strb	r3, [r7, #11]

	  if (i8state < 7){
 8000816:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800081a:	2b06      	cmp	r3, #6
 800081c:	dc09      	bgt.n	8000832 <StartTaskModbusSlave+0x6e>
		  //The size of the frame is invalid
		  modH->i8lastError = ERR_BAD_SIZE;;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	22fa      	movs	r2, #250	; 0xfa
 8000822:	749a      	strb	r2, [r3, #18]
		  xQueueGenericReset(modH->QueueModbusHandle, pdFALSE);
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f005 fc42 	bl	80060b4 <xQueueGenericReset>
		  continue;
 8000830:	e093      	b.n	800095a <StartTaskModbusSlave+0x196>
	  }


		// check slave id
	  if ( modH->au8Buffer[ID] !=  modH->u8id) continue;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	7cda      	ldrb	r2, [r3, #19]
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	7a1b      	ldrb	r3, [r3, #8]
 800083a:	429a      	cmp	r2, r3
 800083c:	f040 808c 	bne.w	8000958 <StartTaskModbusSlave+0x194>

	  // validate message: CRC, FCT, address and size
	  uint8_t u8exception = validateRequest(modH);
 8000840:	68f8      	ldr	r0, [r7, #12]
 8000842:	f000 fc6b 	bl	800111c <validateRequest>
 8000846:	4603      	mov	r3, r0
 8000848:	72bb      	strb	r3, [r7, #10]
	  if (u8exception > 0)
 800084a:	7abb      	ldrb	r3, [r7, #10]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d00f      	beq.n	8000870 <StartTaskModbusSlave+0xac>
	  {
		  if (u8exception != NO_REPLY)
 8000850:	7abb      	ldrb	r3, [r7, #10]
 8000852:	2bff      	cmp	r3, #255	; 0xff
 8000854:	d007      	beq.n	8000866 <StartTaskModbusSlave+0xa2>
		  {
			  buildException( u8exception, modH);
 8000856:	7abb      	ldrb	r3, [r7, #10]
 8000858:	68f9      	ldr	r1, [r7, #12]
 800085a:	4618      	mov	r0, r3
 800085c:	f000 fdb7 	bl	80013ce <buildException>
			  sendTxBuffer(modH);
 8000860:	68f8      	ldr	r0, [r7, #12]
 8000862:	f000 fdd3 	bl	800140c <sendTxBuffer>
		  }
		  modH->i8lastError = u8exception;
 8000866:	f997 200a 	ldrsb.w	r2, [r7, #10]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	749a      	strb	r2, [r3, #18]
		  //return u8exception
		  continue;
 800086e:	e074      	b.n	800095a <StartTaskModbusSlave+0x196>
	  }

	  //u32timeOut = millis(); TODO is this really need?
	  modH->i8lastError = 0;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	2200      	movs	r2, #0
 8000874:	749a      	strb	r2, [r3, #18]


	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800087c:	f04f 31ff 	mov.w	r1, #4294967295
 8000880:	4618      	mov	r0, r3
 8000882:	f006 f867 	bl	8006954 <xQueueSemaphoreTake>

	  // process message
	    switch(modH->au8Buffer[ FUNC ] )
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	7d1b      	ldrb	r3, [r3, #20]
 800088a:	3b01      	subs	r3, #1
 800088c:	2b0f      	cmp	r3, #15
 800088e:	d859      	bhi.n	8000944 <StartTaskModbusSlave+0x180>
 8000890:	a201      	add	r2, pc, #4	; (adr r2, 8000898 <StartTaskModbusSlave+0xd4>)
 8000892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000896:	bf00      	nop
 8000898:	080008d9 	.word	0x080008d9
 800089c:	080008d9 	.word	0x080008d9
 80008a0:	080008eb 	.word	0x080008eb
 80008a4:	080008eb 	.word	0x080008eb
 80008a8:	080008fd 	.word	0x080008fd
 80008ac:	0800090f 	.word	0x0800090f
 80008b0:	08000945 	.word	0x08000945
 80008b4:	08000945 	.word	0x08000945
 80008b8:	08000945 	.word	0x08000945
 80008bc:	08000945 	.word	0x08000945
 80008c0:	08000945 	.word	0x08000945
 80008c4:	08000945 	.word	0x08000945
 80008c8:	08000945 	.word	0x08000945
 80008cc:	08000945 	.word	0x08000945
 80008d0:	08000921 	.word	0x08000921
 80008d4:	08000933 	.word	0x08000933
	    {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH);
 80008d8:	68f8      	ldr	r0, [r7, #12]
 80008da:	f000 fe2f 	bl	800153c <process_FC1>
 80008de:	4603      	mov	r3, r0
 80008e0:	461a      	mov	r2, r3
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 80008e8:	e02d      	b.n	8000946 <StartTaskModbusSlave+0x182>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 80008ea:	68f8      	ldr	r0, [r7, #12]
 80008ec:	f000 fedb 	bl	80016a6 <process_FC3>
 80008f0:	4603      	mov	r3, r0
 80008f2:	461a      	mov	r2, r3
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 80008fa:	e024      	b.n	8000946 <StartTaskModbusSlave+0x182>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 80008fc:	68f8      	ldr	r0, [r7, #12]
 80008fe:	f000 ff3b 	bl	8001778 <process_FC5>
 8000902:	4603      	mov	r3, r0
 8000904:	461a      	mov	r2, r3
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 800090c:	e01b      	b.n	8000946 <StartTaskModbusSlave+0x182>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 800090e:	68f8      	ldr	r0, [r7, #12]
 8000910:	f000 ff88 	bl	8001824 <process_FC6>
 8000914:	4603      	mov	r3, r0
 8000916:	461a      	mov	r2, r3
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 800091e:	e012      	b.n	8000946 <StartTaskModbusSlave+0x182>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 8000920:	68f8      	ldr	r0, [r7, #12]
 8000922:	f000 ffb0 	bl	8001886 <process_FC15>
 8000926:	4603      	mov	r3, r0
 8000928:	461a      	mov	r2, r3
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 8000930:	e009      	b.n	8000946 <StartTaskModbusSlave+0x182>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 8000932:	68f8      	ldr	r0, [r7, #12]
 8000934:	f001 f832 	bl	800199c <process_FC16>
 8000938:	4603      	mov	r3, r0
 800093a:	461a      	mov	r2, r3
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 8000942:	e000      	b.n	8000946 <StartTaskModbusSlave+0x182>
			default:
				break;
 8000944:	bf00      	nop
	    }

	    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 800094c:	2300      	movs	r3, #0
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	f005 fd73 	bl	800643c <xQueueGenericSend>
	    //return i8state;
	    continue;
 8000956:	e000      	b.n	800095a <StartTaskModbusSlave+0x196>
	  if ( modH->au8Buffer[ID] !=  modH->u8id) continue;
 8000958:	bf00      	nop
  {
 800095a:	e739      	b.n	80007d0 <StartTaskModbusSlave+0xc>

0800095c <ModbusQuery>:
}



void ModbusQuery(modbusHandler_t * modH, modbus_t telegram )
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	4638      	mov	r0, r7
 8000966:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Add the telegram to the TX Queue of Modbus
	xQueueSendToBack(modH->QueueTelegramHandle, &telegram, 0);
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800096e:	4639      	mov	r1, r7
 8000970:	2300      	movs	r3, #0
 8000972:	2200      	movs	r2, #0
 8000974:	f005 fd62 	bl	800643c <xQueueGenericSend>
}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	4638      	mov	r0, r7
 800098a:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	75bb      	strb	r3, [r7, #22]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000998:	f04f 31ff 	mov.w	r1, #4294967295
 800099c:	4618      	mov	r0, r3
 800099e:	f005 ffd9 	bl	8006954 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	7a1b      	ldrb	r3, [r3, #8]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SendQuery+0x2e>
 80009aa:	23ff      	movs	r3, #255	; 0xff
 80009ac:	75bb      	strb	r3, [r7, #22]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SendQuery+0x3c>
 80009b8:	23fe      	movs	r3, #254	; 0xfe
 80009ba:	75bb      	strb	r3, [r7, #22]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 80009bc:	783b      	ldrb	r3, [r7, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d002      	beq.n	80009c8 <SendQuery+0x48>
 80009c2:	783b      	ldrb	r3, [r7, #0]
 80009c4:	2bf7      	cmp	r3, #247	; 0xf7
 80009c6:	d901      	bls.n	80009cc <SendQuery+0x4c>
 80009c8:	23f7      	movs	r3, #247	; 0xf7
 80009ca:	75bb      	strb	r3, [r7, #22]

	if(error)
 80009cc:	7dbb      	ldrb	r3, [r7, #22]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d00e      	beq.n	80009f0 <SendQuery+0x70>
	{
		 modH->i8lastError = error;
 80009d2:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80009e0:	2300      	movs	r3, #0
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	f005 fd29 	bl	800643c <xQueueGenericSend>
		 return error;
 80009ea:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80009ee:	e130      	b.n	8000c52 <SendQuery+0x2d2>
	}


	modH->au16regs = telegram.au16reg;
 80009f0:	68ba      	ldr	r2, [r7, #8]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	659a      	str	r2, [r3, #88]	; 0x58

	// telegram header
	modH->au8Buffer[ ID ]         = telegram.u8id;
 80009f6:	783a      	ldrb	r2, [r7, #0]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	74da      	strb	r2, [r3, #19]
	modH->au8Buffer[ FUNC ]       = telegram.u8fct;
 80009fc:	787a      	ldrb	r2, [r7, #1]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	751a      	strb	r2, [r3, #20]
	modH->au8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 8000a02:	887b      	ldrh	r3, [r7, #2]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	755a      	strb	r2, [r3, #21]
	modH->au8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 8000a0e:	887b      	ldrh	r3, [r7, #2]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 8000a16:	787b      	ldrb	r3, [r7, #1]
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	2b0f      	cmp	r3, #15
 8000a1c:	f200 8106 	bhi.w	8000c2c <SendQuery+0x2ac>
 8000a20:	a201      	add	r2, pc, #4	; (adr r2, 8000a28 <SendQuery+0xa8>)
 8000a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a26:	bf00      	nop
 8000a28:	08000a69 	.word	0x08000a69
 8000a2c:	08000a69 	.word	0x08000a69
 8000a30:	08000a69 	.word	0x08000a69
 8000a34:	08000a69 	.word	0x08000a69
 8000a38:	08000a87 	.word	0x08000a87
 8000a3c:	08000aab 	.word	0x08000aab
 8000a40:	08000c2d 	.word	0x08000c2d
 8000a44:	08000c2d 	.word	0x08000c2d
 8000a48:	08000c2d 	.word	0x08000c2d
 8000a4c:	08000c2d 	.word	0x08000c2d
 8000a50:	08000c2d 	.word	0x08000c2d
 8000a54:	08000c2d 	.word	0x08000c2d
 8000a58:	08000c2d 	.word	0x08000c2d
 8000a5c:	08000c2d 	.word	0x08000c2d
 8000a60:	08000ad1 	.word	0x08000ad1
 8000a64:	08000b93 	.word	0x08000b93
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8000a68:	88bb      	ldrh	r3, [r7, #4]
 8000a6a:	0a1b      	lsrs	r3, r3, #8
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8000a74:	88bb      	ldrh	r3, [r7, #4]
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2206      	movs	r2, #6
 8000a80:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    break;
 8000a84:	e0d2      	b.n	8000c2c <SendQuery+0x2ac>
	case MB_FC_WRITE_COIL:
	    modH->au8Buffer[ NB_HI ]      = ((modH->au16regs[0] > 0) ? 0xff : 0);
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SendQuery+0x114>
 8000a90:	22ff      	movs	r2, #255	; 0xff
 8000a92:	e000      	b.n	8000a96 <SendQuery+0x116>
 8000a94:	2200      	movs	r2, #0
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = 0;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	2206      	movs	r2, #6
 8000aa4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    break;
 8000aa8:	e0c0      	b.n	8000c2c <SendQuery+0x2ac>
	case MB_FC_WRITE_REGISTER:
	    modH->au8Buffer[ NB_HI ]      = highByte(modH->au16regs[0]);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	0a1b      	lsrs	r3, r3, #8
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte(modH->au16regs[0]);
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	2206      	movs	r2, #6
 8000aca:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    break;
 8000ace:	e0ad      	b.n	8000c2c <SendQuery+0x2ac>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 8000ad0:	88bb      	ldrh	r3, [r7, #4]
 8000ad2:	091b      	lsrs	r3, r3, #4
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	747b      	strb	r3, [r7, #17]
	    u8bytesno = u8regsno * 2;
 8000ad8:	7c7b      	ldrb	r3, [r7, #17]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	75fb      	strb	r3, [r7, #23]
	    if ((telegram.u16CoilsNo % 16) != 0)
 8000ade:	88bb      	ldrh	r3, [r7, #4]
 8000ae0:	f003 030f 	and.w	r3, r3, #15
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d005      	beq.n	8000af6 <SendQuery+0x176>
	    {
	        u8bytesno++;
 8000aea:	7dfb      	ldrb	r3, [r7, #23]
 8000aec:	3301      	adds	r3, #1
 8000aee:	75fb      	strb	r3, [r7, #23]
	        u8regsno++;
 8000af0:	7c7b      	ldrb	r3, [r7, #17]
 8000af2:	3301      	adds	r3, #1
 8000af4:	747b      	strb	r3, [r7, #17]
	    }

	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8000af6:	88bb      	ldrh	r3, [r7, #4]
 8000af8:	0a1b      	lsrs	r3, r3, #8
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8000b02:	88bb      	ldrh	r3, [r7, #4]
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	761a      	strb	r2, [r3, #24]
	    modH->au8Buffer[ BYTE_CNT ]    = u8bytesno;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	7dfa      	ldrb	r2, [r7, #23]
 8000b0e:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	2207      	movs	r2, #7
 8000b14:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	    for (uint16_t i = 0; i < u8bytesno; i++)
 8000b18:	2300      	movs	r3, #0
 8000b1a:	82bb      	strh	r3, [r7, #20]
 8000b1c:	e033      	b.n	8000b86 <SendQuery+0x206>
	    {
	        if(i%2)
 8000b1e:	8abb      	ldrh	r3, [r7, #20]
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d010      	beq.n	8000b4c <SendQuery+0x1cc>
	        {
	            modH->au8Buffer[ modH->u8BufferSize ] = lowByte( modH->au16regs[ i/2 ] );
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b2e:	8abb      	ldrh	r3, [r7, #20]
 8000b30:	085b      	lsrs	r3, r3, #1
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	4413      	add	r3, r2
 8000b38:	881a      	ldrh	r2, [r3, #0]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000b40:	4619      	mov	r1, r3
 8000b42:	b2d2      	uxtb	r2, r2
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	440b      	add	r3, r1
 8000b48:	74da      	strb	r2, [r3, #19]
 8000b4a:	e011      	b.n	8000b70 <SendQuery+0x1f0>
	        }
	        else
	        {
	        	 modH->au8Buffer[  modH->u8BufferSize ] = highByte(  modH->au16regs[ i/2] );
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b50:	8abb      	ldrh	r3, [r7, #20]
 8000b52:	085b      	lsrs	r3, r3, #1
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	4413      	add	r3, r2
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	0a1b      	lsrs	r3, r3, #8
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000b66:	4619      	mov	r1, r3
 8000b68:	b2d2      	uxtb	r2, r2
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	440b      	add	r3, r1
 8000b6e:	74da      	strb	r2, [r3, #19]
	        }
	        modH->u8BufferSize++;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000b76:	3301      	adds	r3, #1
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8000b80:	8abb      	ldrh	r3, [r7, #20]
 8000b82:	3301      	adds	r3, #1
 8000b84:	82bb      	strh	r3, [r7, #20]
 8000b86:	7dfb      	ldrb	r3, [r7, #23]
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	8aba      	ldrh	r2, [r7, #20]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d3c6      	bcc.n	8000b1e <SendQuery+0x19e>
	    }
	    break;
 8000b90:	e04c      	b.n	8000c2c <SendQuery+0x2ac>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8000b92:	88bb      	ldrh	r3, [r7, #4]
 8000b94:	0a1b      	lsrs	r3, r3, #8
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8000b9e:	88bb      	ldrh	r3, [r7, #4]
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	761a      	strb	r2, [r3, #24]
	    modH->au8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 8000ba6:	88bb      	ldrh	r3, [r7, #4]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	2207      	movs	r2, #7
 8000bb6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8000bba:	2300      	movs	r3, #0
 8000bbc:	827b      	strh	r3, [r7, #18]
 8000bbe:	e030      	b.n	8000c22 <SendQuery+0x2a2>
	    {
	        modH->au8Buffer[  modH->u8BufferSize ] = highByte(  modH->au16regs[ i ] );
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bc4:	8a7b      	ldrh	r3, [r7, #18]
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	4413      	add	r3, r2
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	0a1b      	lsrs	r3, r3, #8
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	b2d2      	uxtb	r2, r2
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	440b      	add	r3, r1
 8000bde:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000be6:	3301      	adds	r3, #1
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	        modH->au8Buffer[  modH->u8BufferSize ] = lowByte(  modH->au16regs[ i ] );
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bf4:	8a7b      	ldrh	r3, [r7, #18]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	4413      	add	r3, r2
 8000bfa:	881a      	ldrh	r2, [r3, #0]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000c02:	4619      	mov	r1, r3
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	440b      	add	r3, r1
 8000c0a:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000c12:	3301      	adds	r3, #1
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8000c1c:	8a7b      	ldrh	r3, [r7, #18]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	827b      	strh	r3, [r7, #18]
 8000c22:	88bb      	ldrh	r3, [r7, #4]
 8000c24:	8a7a      	ldrh	r2, [r7, #18]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d3ca      	bcc.n	8000bc0 <SendQuery+0x240>
	    }
	    break;
 8000c2a:	bf00      	nop
	}

	xSemaphoreGive(modH->ModBusSphrHandle);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8000c32:	2300      	movs	r3, #0
 8000c34:	2200      	movs	r2, #0
 8000c36:	2100      	movs	r1, #0
 8000c38:	f005 fc00 	bl	800643c <xQueueGenericSend>

	sendTxBuffer(modH);
 8000c3c:	68f8      	ldr	r0, [r7, #12]
 8000c3e:	f000 fbe5 	bl	800140c <sendTxBuffer>
	modH->i8state = COM_WAITING;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2201      	movs	r2, #1
 8000c46:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	modH->i8lastError = 0;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	749a      	strb	r2, [r3, #18]
	return 0;
 8000c50:	2300      	movs	r3, #0


}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop

08000c5c <StartTaskModbusMaster>:




void StartTaskModbusMaster(void *argument)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af02      	add	r7, sp, #8
 8000c62:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	61fb      	str	r3, [r7, #28]
  modbus_t telegram;

  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000c6c:	f107 0108 	add.w	r1, r7, #8
 8000c70:	f04f 32ff 	mov.w	r2, #4294967295
 8000c74:	4618      	mov	r0, r3
 8000c76:	f005 fd87 	bl	8006788 <xQueueReceive>

	  /*Format and Send query */
	  SendQuery(modH, telegram);
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c80:	69f8      	ldr	r0, [r7, #28]
 8000c82:	f7ff fe7d 	bl	8000980 <SendQuery>

	  /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
	  ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000c86:	f04f 31ff 	mov.w	r1, #4294967295
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f007 f978 	bl	8007f80 <ulTaskNotifyTake>
 8000c90:	61b8      	str	r0, [r7, #24]
	  modH->i8lastError = 0;
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	2200      	movs	r2, #0
 8000c96:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue == NO_REPLY)
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	2bff      	cmp	r3, #255	; 0xff
 8000c9c:	d10f      	bne.n	8000cbe <StartTaskModbusMaster+0x62>
      {
    	  modH->i8state = COM_IDLE;
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
    	  modH->i8lastError = NO_REPLY;
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	22ff      	movs	r2, #255	; 0xff
 8000caa:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    	  continue;
 8000cbc:	e09a      	b.n	8000df4 <StartTaskModbusMaster+0x198>
      }

	  modH->u8BufferSize = uxQueueMessagesWaiting(modH->QueueModbusHandle);
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f005 ff5a 	bl	8006b7c <uxQueueMessagesWaiting>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	  int8_t i8state = getRxBuffer(modH);
 8000cd2:	69f8      	ldr	r0, [r7, #28]
 8000cd4:	f000 f97e 	bl	8000fd4 <getRxBuffer>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	75fb      	strb	r3, [r7, #23]
	  //modH->u8lastError = i8state;

	  if (i8state < 6){
 8000cdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ce0:	2b05      	cmp	r3, #5
 8000ce2:	dc1d      	bgt.n	8000d20 <StartTaskModbusMaster+0xc4>
		  //The size of the frame is invalid
		  xQueueGenericReset(modH->QueueModbusHandle, pdFALSE);
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f005 f9e2 	bl	80060b4 <xQueueGenericReset>
		  modH->i8state = COM_IDLE;
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		  modH->i8lastError = ERR_BAD_SIZE;
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	22fa      	movs	r2, #250	; 0xfa
 8000cfc:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8000d04:	3301      	adds	r3, #1
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		  xSemaphoreGive(modH->ModBusSphrHandle);
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8000d14:	2300      	movs	r3, #0
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	f005 fb8f 	bl	800643c <xQueueGenericSend>
		  continue;
 8000d1e:	e069      	b.n	8000df4 <StartTaskModbusMaster+0x198>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8000d26:	2300      	movs	r3, #0
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2103      	movs	r1, #3
 8000d30:	f007 fc1e 	bl	8008570 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  uint8_t u8exception = validateAnswer(modH);
 8000d34:	69f8      	ldr	r0, [r7, #28]
 8000d36:	f000 f8df 	bl	8000ef8 <validateAnswer>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	75bb      	strb	r3, [r7, #22]
	  if (u8exception != 0)
 8000d3e:	7dbb      	ldrb	r3, [r7, #22]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d00c      	beq.n	8000d5e <StartTaskModbusMaster+0x102>
	  {
		 modH->i8state = COM_IDLE;
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8000d52:	2300      	movs	r3, #0
 8000d54:	2200      	movs	r2, #0
 8000d56:	2100      	movs	r1, #0
 8000d58:	f005 fb70 	bl	800643c <xQueueGenericSend>
	     continue;
 8000d5c:	e04a      	b.n	8000df4 <StartTaskModbusMaster+0x198>
	  }



	  modH->i8lastError = u8exception;
 8000d5e:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d70:	4618      	mov	r0, r3
 8000d72:	f005 fdef 	bl	8006954 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->au8Buffer[ FUNC ] )
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	7d1b      	ldrb	r3, [r3, #20]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	2b0f      	cmp	r3, #15
 8000d7e:	d82b      	bhi.n	8000dd8 <StartTaskModbusMaster+0x17c>
 8000d80:	a201      	add	r2, pc, #4	; (adr r2, 8000d88 <StartTaskModbusMaster+0x12c>)
 8000d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d86:	bf00      	nop
 8000d88:	08000dc9 	.word	0x08000dc9
 8000d8c:	08000dc9 	.word	0x08000dc9
 8000d90:	08000dd1 	.word	0x08000dd1
 8000d94:	08000dd1 	.word	0x08000dd1
 8000d98:	08000dd9 	.word	0x08000dd9
 8000d9c:	08000dd9 	.word	0x08000dd9
 8000da0:	08000dd9 	.word	0x08000dd9
 8000da4:	08000dd9 	.word	0x08000dd9
 8000da8:	08000dd9 	.word	0x08000dd9
 8000dac:	08000dd9 	.word	0x08000dd9
 8000db0:	08000dd9 	.word	0x08000dd9
 8000db4:	08000dd9 	.word	0x08000dd9
 8000db8:	08000dd9 	.word	0x08000dd9
 8000dbc:	08000dd9 	.word	0x08000dd9
 8000dc0:	08000dd9 	.word	0x08000dd9
 8000dc4:	08000dd9 	.word	0x08000dd9
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to au16regs buffer
	      get_FC1(modH);
 8000dc8:	69f8      	ldr	r0, [r7, #28]
 8000dca:	f000 f815 	bl	8000df8 <get_FC1>
	      break;
 8000dce:	e004      	b.n	8000dda <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to au16regs buffer
	      get_FC3(modH);
 8000dd0:	69f8      	ldr	r0, [r7, #28]
 8000dd2:	f000 f864 	bl	8000e9e <get_FC3>
	      break;
 8000dd6:	e000      	b.n	8000dda <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 8000dd8:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

	  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8000de8:	2300      	movs	r3, #0
 8000dea:	2200      	movs	r2, #0
 8000dec:	2100      	movs	r1, #0
 8000dee:	f005 fb25 	bl	800643c <xQueueGenericSend>
	  //return i8state;
	  continue;
 8000df2:	bf00      	nop
  {
 8000df4:	e738      	b.n	8000c68 <StartTaskModbusMaster+0xc>
 8000df6:	bf00      	nop

08000df8 <get_FC1>:
 *
 * @ingroup register
 * TODO: finish its implementation
 */
void get_FC1(modbusHandler_t *modH)
{
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8000e00:	2303      	movs	r3, #3
 8000e02:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->au8Buffer[2]; i++) {
 8000e04:	2300      	movs	r3, #0
 8000e06:	73fb      	strb	r3, [r7, #15]
 8000e08:	e03f      	b.n	8000e8a <get_FC1+0x92>

        if(i%2)
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d01a      	beq.n	8000e4c <get_FC1+0x54>
        {
        	modH->au16regs[i/2]= word(modH->au8Buffer[i+u8byte], lowByte(modH->au16regs[i/2]));
 8000e16:	7bfa      	ldrb	r2, [r7, #15]
 8000e18:	7bbb      	ldrb	r3, [r7, #14]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	4413      	add	r3, r2
 8000e20:	7cd8      	ldrb	r0, [r3, #19]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	085b      	lsrs	r3, r3, #1
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	4413      	add	r3, r2
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	b2d9      	uxtb	r1, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	085b      	lsrs	r3, r3, #1
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	18d4      	adds	r4, r2, r3
 8000e42:	f000 fa6b 	bl	800131c <word>
 8000e46:	4603      	mov	r3, r0
 8000e48:	8023      	strh	r3, [r4, #0]
 8000e4a:	e01b      	b.n	8000e84 <get_FC1+0x8c>
        }
        else
        {

        	modH->au16regs[i/2]= word(highByte(modH->au16regs[i/2]), modH->au8Buffer[i+u8byte]);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	085b      	lsrs	r3, r3, #1
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	4413      	add	r3, r2
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	0a1b      	lsrs	r3, r3, #8
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	b2d8      	uxtb	r0, r3
 8000e62:	7bfa      	ldrb	r2, [r7, #15]
 8000e64:	7bbb      	ldrb	r3, [r7, #14]
 8000e66:	4413      	add	r3, r2
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	7cd9      	ldrb	r1, [r3, #19]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	085b      	lsrs	r3, r3, #1
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	18d4      	adds	r4, r2, r3
 8000e7c:	f000 fa4e 	bl	800131c <word>
 8000e80:	4603      	mov	r3, r0
 8000e82:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->au8Buffer[2]; i++) {
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	3301      	adds	r3, #1
 8000e88:	73fb      	strb	r3, [r7, #15]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	7d5b      	ldrb	r3, [r3, #21]
 8000e8e:	7bfa      	ldrb	r2, [r7, #15]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d3ba      	bcc.n	8000e0a <get_FC1+0x12>
        }

     }
}
 8000e94:	bf00      	nop
 8000e96:	bf00      	nop
 8000e98:	3714      	adds	r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd90      	pop	{r4, r7, pc}

08000e9e <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 8000e9e:	b590      	push	{r4, r7, lr}
 8000ea0:	b085      	sub	sp, #20
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->au8Buffer[ 2 ] /2; i++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	73bb      	strb	r3, [r7, #14]
 8000eae:	e017      	b.n	8000ee0 <get_FC3+0x42>
    {
    	modH->au16regs[ i ] = word(modH->au8Buffer[ u8byte ], modH->au8Buffer[ u8byte +1 ]);
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	7cd8      	ldrb	r0, [r3, #19]
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	7cd9      	ldrb	r1, [r3, #19]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ec6:	7bbb      	ldrb	r3, [r7, #14]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	18d4      	adds	r4, r2, r3
 8000ecc:	f000 fa26 	bl	800131c <word>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->au8Buffer[ 2 ] /2; i++)
 8000eda:	7bbb      	ldrb	r3, [r7, #14]
 8000edc:	3301      	adds	r3, #1
 8000ede:	73bb      	strb	r3, [r7, #14]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	7d5b      	ldrb	r3, [r3, #21]
 8000ee4:	085b      	lsrs	r3, r3, #1
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	7bba      	ldrb	r2, [r7, #14]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d3e0      	bcc.n	8000eb0 <get_FC3+0x12>
    }
}
 8000eee:	bf00      	nop
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd90      	pop	{r4, r7, pc}

08000ef8 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
    // check message crc vs calculated crc
    uint16_t u16MsgCRC =
        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000f06:	3b02      	subs	r3, #2
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	7cdb      	ldrb	r3, [r3, #19]
 8000f0e:	021b      	lsls	r3, r3, #8
         | modH->au8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8000f10:	b21a      	sxth	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	440b      	add	r3, r1
 8000f1e:	7cdb      	ldrb	r3, [r3, #19]
 8000f20:	b21b      	sxth	r3, r3
 8000f22:	4313      	orrs	r3, r2
 8000f24:	b21b      	sxth	r3, r3
    uint16_t u16MsgCRC =
 8000f26:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->au8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f103 0213 	add.w	r2, r3, #19
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000f34:	3b02      	subs	r3, #2
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4610      	mov	r0, r2
 8000f3c:	f000 fa01 	bl	8001342 <calcCRC>
 8000f40:	4603      	mov	r3, r0
 8000f42:	461a      	mov	r2, r3
 8000f44:	89bb      	ldrh	r3, [r7, #12]
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d009      	beq.n	8000f5e <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8000f50:	3301      	adds	r3, #1
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        return NO_REPLY;
 8000f5a:	23ff      	movs	r3, #255	; 0xff
 8000f5c:	e034      	b.n	8000fc8 <validateAnswer+0xd0>
    }

    // check exception
    if ((modH->au8Buffer[ FUNC ] & 0x80) != 0)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	7d1b      	ldrb	r3, [r3, #20]
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	da09      	bge.n	8000f7c <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8000f6e:	3301      	adds	r3, #1
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        return ERR_EXCEPTION;
 8000f78:	23fb      	movs	r3, #251	; 0xfb
 8000f7a:	e025      	b.n	8000fc8 <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	73bb      	strb	r3, [r7, #14]
 8000f84:	e00c      	b.n	8000fa0 <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->au8Buffer[FUNC])
 8000f86:	7bbb      	ldrb	r3, [r7, #14]
 8000f88:	4a11      	ldr	r2, [pc, #68]	; (8000fd0 <validateAnswer+0xd8>)
 8000f8a:	5cd2      	ldrb	r2, [r2, r3]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7d1b      	ldrb	r3, [r3, #20]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d102      	bne.n	8000f9a <validateAnswer+0xa2>
        {
            isSupported = 1;
 8000f94:	2301      	movs	r3, #1
 8000f96:	73fb      	strb	r3, [r7, #15]
            break;
 8000f98:	e005      	b.n	8000fa6 <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	73bb      	strb	r3, [r7, #14]
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	2b07      	cmp	r3, #7
 8000fa4:	d9ef      	bls.n	8000f86 <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	f083 0301 	eor.w	r3, r3, #1
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d009      	beq.n	8000fc6 <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8000fb8:	3301      	adds	r3, #1
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        return EXC_FUNC_CODE;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	080096f0 	.word	0x080096f0

08000fd4 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int8_t getRxBuffer(modbusHandler_t *modH)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
    bool bBuffOverflow = false;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	72fb      	strb	r3, [r7, #11]
    int i;
    if (modH->EN_Port)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d007      	beq.n	8000ff8 <getRxBuffer+0x24>
    {
    	//digitalWrite( u8txenpin, LOW );
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68d8      	ldr	r0, [r3, #12]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	8a1b      	ldrh	r3, [r3, #16]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f001 fcd0 	bl	8002998 <HAL_GPIO_WritePin>
    }


    modH->u8BufferSize = uxQueueMessagesWaiting(modH->QueueModbusHandle);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f005 fdbd 	bl	8006b7c <uxQueueMessagesWaiting>
 8001002:	4603      	mov	r3, r0
 8001004:	b2da      	uxtb	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    for(i = 0; i<  modH->u8BufferSize; i++ )
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	e00d      	b.n	800102e <getRxBuffer+0x5a>
   	{
   		  xQueueReceive(modH->QueueModbusHandle, &modH->au8Buffer[i], 0);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	3310      	adds	r3, #16
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	3303      	adds	r3, #3
 8001020:	2200      	movs	r2, #0
 8001022:	4619      	mov	r1, r3
 8001024:	f005 fbb0 	bl	8006788 <xQueueReceive>
    for(i = 0; i<  modH->u8BufferSize; i++ )
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	3301      	adds	r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001034:	461a      	mov	r2, r3
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4293      	cmp	r3, r2
 800103a:	dbea      	blt.n	8001012 <getRxBuffer+0x3e>
   	}

    modH->u16InCnt++;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001042:	3301      	adds	r3, #1
 8001044:	b29a      	uxth	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c


    if (bBuffOverflow)
 800104c:	7afb      	ldrb	r3, [r7, #11]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d00a      	beq.n	8001068 <getRxBuffer+0x94>
    {
    	modH->u16errCnt++;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001058:	3301      	adds	r3, #1
 800105a:	b29a      	uxth	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        return ERR_BUFF_OVERFLOW;  //using queues this will not happen
 8001062:	f06f 0302 	mvn.w	r3, #2
 8001066:	e003      	b.n	8001070 <getRxBuffer+0x9c>
    }
    return modH->u8BufferSize;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800106e:	b25b      	sxtb	r3, r3
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <HAL_UART_RxCpltCallback>:
 * This is the callback for HAL interrupt of UART RX
 *
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b087      	sub	sp, #28
 800107c:	af02      	add	r7, sp, #8
 800107e:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]

    int i;
    for (i = 0; i < numberHandlers; i++ )
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	e039      	b.n	80010fe <HAL_UART_RxCpltCallback+0x86>
    {
    	if (mHandlers[i]->port == UartHandle  )
 800108a:	4a22      	ldr	r2, [pc, #136]	; (8001114 <HAL_UART_RxCpltCallback+0x9c>)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	429a      	cmp	r2, r3
 8001098:	d12e      	bne.n	80010f8 <HAL_UART_RxCpltCallback+0x80>
    	{
    		xQueueSendToBackFromISR( mHandlers[i]->QueueModbusHandle, &mHandlers[i]->dataRX, pdFALSE);
 800109a:	4a1e      	ldr	r2, [pc, #120]	; (8001114 <HAL_UART_RxCpltCallback+0x9c>)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80010a4:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <HAL_UART_RxCpltCallback+0x9c>)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ac:	f103 0171 	add.w	r1, r3, #113	; 0x71
 80010b0:	2300      	movs	r3, #0
 80010b2:	2200      	movs	r2, #0
 80010b4:	f005 fac8 	bl	8006648 <xQueueGenericSendFromISR>
    		HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 80010b8:	4a16      	ldr	r2, [pc, #88]	; (8001114 <HAL_UART_RxCpltCallback+0x9c>)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c0:	6858      	ldr	r0, [r3, #4]
 80010c2:	4a14      	ldr	r2, [pc, #80]	; (8001114 <HAL_UART_RxCpltCallback+0x9c>)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ca:	3371      	adds	r3, #113	; 0x71
 80010cc:	2201      	movs	r2, #1
 80010ce:	4619      	mov	r1, r3
 80010d0:	f003 f9a6 	bl	8004420 <HAL_UART_Receive_IT>
    		xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 80010d4:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <HAL_UART_RxCpltCallback+0x9c>)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010dc:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80010e0:	f006 fa6a 	bl	80075b8 <xTaskGetTickCountFromISR>
 80010e4:	4602      	mov	r2, r0
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	2100      	movs	r1, #0
 80010ec:	9100      	str	r1, [sp, #0]
 80010ee:	2107      	movs	r1, #7
 80010f0:	4620      	mov	r0, r4
 80010f2:	f007 fa3d 	bl	8008570 <xTimerGenericCommand>
    		break;
 80010f6:	e009      	b.n	800110c <HAL_UART_RxCpltCallback+0x94>
    for (i = 0; i < numberHandlers; i++ )
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	3301      	adds	r3, #1
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_UART_RxCpltCallback+0xa0>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	461a      	mov	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4293      	cmp	r3, r2
 8001108:	dbbf      	blt.n	800108a <HAL_UART_RxCpltCallback+0x12>
    	}
    }


}
 800110a:	bf00      	nop
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	bd90      	pop	{r4, r7, pc}
 8001114:	20000090 	.word	0x20000090
 8001118:	20000098 	.word	0x20000098

0800111c <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	// check message crc vs calculated crc
	    uint16_t u16MsgCRC =
	        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800112a:	3b02      	subs	r3, #2
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	4413      	add	r3, r2
 8001130:	7cdb      	ldrb	r3, [r3, #19]
 8001132:	021b      	lsls	r3, r3, #8
	         | modH->au8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8001134:	b21a      	sxth	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800113c:	3b01      	subs	r3, #1
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	440b      	add	r3, r1
 8001142:	7cdb      	ldrb	r3, [r3, #19]
 8001144:	b21b      	sxth	r3, r3
 8001146:	4313      	orrs	r3, r2
 8001148:	b21b      	sxth	r3, r3
	    uint16_t u16MsgCRC =
 800114a:	81bb      	strh	r3, [r7, #12]
	    if ( calcCRC( modH->au8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f103 0213 	add.w	r2, r3, #19
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001158:	3b02      	subs	r3, #2
 800115a:	b2db      	uxtb	r3, r3
 800115c:	4619      	mov	r1, r3
 800115e:	4610      	mov	r0, r2
 8001160:	f000 f8ef 	bl	8001342 <calcCRC>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	89bb      	ldrh	r3, [r7, #12]
 800116a:	4293      	cmp	r3, r2
 800116c:	d009      	beq.n	8001182 <validateRequest+0x66>
	    {
	    	modH->u16errCnt ++;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001174:	3301      	adds	r3, #1
 8001176:	b29a      	uxth	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	        return NO_REPLY;
 800117e:	23ff      	movs	r3, #255	; 0xff
 8001180:	e0c6      	b.n	8001310 <validateRequest+0x1f4>
	    }

	    // check fct code
	    bool isSupported = false;
 8001182:	2300      	movs	r3, #0
 8001184:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8001186:	2300      	movs	r3, #0
 8001188:	73bb      	strb	r3, [r7, #14]
 800118a:	e00c      	b.n	80011a6 <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->au8Buffer[FUNC])
 800118c:	7bbb      	ldrb	r3, [r7, #14]
 800118e:	4a62      	ldr	r2, [pc, #392]	; (8001318 <validateRequest+0x1fc>)
 8001190:	5cd2      	ldrb	r2, [r2, r3]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	7d1b      	ldrb	r3, [r3, #20]
 8001196:	429a      	cmp	r2, r3
 8001198:	d102      	bne.n	80011a0 <validateRequest+0x84>
	        {
	            isSupported = 1;
 800119a:	2301      	movs	r3, #1
 800119c:	73fb      	strb	r3, [r7, #15]
	            break;
 800119e:	e005      	b.n	80011ac <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80011a0:	7bbb      	ldrb	r3, [r7, #14]
 80011a2:	3301      	adds	r3, #1
 80011a4:	73bb      	strb	r3, [r7, #14]
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	2b07      	cmp	r3, #7
 80011aa:	d9ef      	bls.n	800118c <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	f083 0301 	eor.w	r3, r3, #1
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d009      	beq.n	80011cc <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80011be:	3301      	adds	r3, #1
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	        return EXC_FUNC_CODE;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e0a1      	b.n	8001310 <validateRequest+0x1f4>
	    }

	    // check start address & nb range
	    uint16_t u16regs = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	817b      	strh	r3, [r7, #10]
	    uint8_t u8regs;
	    switch ( modH->au8Buffer[ FUNC ] )
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7d1b      	ldrb	r3, [r3, #20]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	2b0f      	cmp	r3, #15
 80011d8:	f200 8099 	bhi.w	800130e <validateRequest+0x1f2>
 80011dc:	a201      	add	r2, pc, #4	; (adr r2, 80011e4 <validateRequest+0xc8>)
 80011de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e2:	bf00      	nop
 80011e4:	08001225 	.word	0x08001225
 80011e8:	08001225 	.word	0x08001225
 80011ec:	080012bf 	.word	0x080012bf
 80011f0:	080012bf 	.word	0x080012bf
 80011f4:	0800126d 	.word	0x0800126d
 80011f8:	08001297 	.word	0x08001297
 80011fc:	0800130f 	.word	0x0800130f
 8001200:	0800130f 	.word	0x0800130f
 8001204:	0800130f 	.word	0x0800130f
 8001208:	0800130f 	.word	0x0800130f
 800120c:	0800130f 	.word	0x0800130f
 8001210:	0800130f 	.word	0x0800130f
 8001214:	0800130f 	.word	0x0800130f
 8001218:	0800130f 	.word	0x0800130f
 800121c:	08001225 	.word	0x08001225
 8001220:	080012bf 	.word	0x080012bf
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]) / 16;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	7d5a      	ldrb	r2, [r3, #21]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	7d9b      	ldrb	r3, [r3, #22]
 800122c:	4619      	mov	r1, r3
 800122e:	4610      	mov	r0, r2
 8001230:	f000 f874 	bl	800131c <word>
 8001234:	4603      	mov	r3, r0
 8001236:	091b      	lsrs	r3, r3, #4
 8001238:	817b      	strh	r3, [r7, #10]
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]) /16;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	7dda      	ldrb	r2, [r3, #23]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	7e1b      	ldrb	r3, [r3, #24]
 8001242:	4619      	mov	r1, r3
 8001244:	4610      	mov	r0, r2
 8001246:	f000 f869 	bl	800131c <word>
 800124a:	4603      	mov	r3, r0
 800124c:	091b      	lsrs	r3, r3, #4
 800124e:	b29b      	uxth	r3, r3
 8001250:	b29a      	uxth	r2, r3
 8001252:	897b      	ldrh	r3, [r7, #10]
 8001254:	4413      	add	r3, r2
 8001256:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 8001258:	897b      	ldrh	r3, [r7, #10]
 800125a:	727b      	strb	r3, [r7, #9]
	        if (u8regs > modH->u8regsize) return EXC_ADDR_RANGE;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001262:	7a7a      	ldrb	r2, [r7, #9]
 8001264:	429a      	cmp	r2, r3
 8001266:	d94b      	bls.n	8001300 <validateRequest+0x1e4>
 8001268:	2302      	movs	r3, #2
 800126a:	e051      	b.n	8001310 <validateRequest+0x1f4>
	        break;
	    case MB_FC_WRITE_COIL:
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]) / 16;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	7d5a      	ldrb	r2, [r3, #21]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	7d9b      	ldrb	r3, [r3, #22]
 8001274:	4619      	mov	r1, r3
 8001276:	4610      	mov	r0, r2
 8001278:	f000 f850 	bl	800131c <word>
 800127c:	4603      	mov	r3, r0
 800127e:	091b      	lsrs	r3, r3, #4
 8001280:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 8001282:	897b      	ldrh	r3, [r7, #10]
 8001284:	727b      	strb	r3, [r7, #9]
	        if (u8regs > modH->u8regsize) return EXC_ADDR_RANGE;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800128c:	7a7a      	ldrb	r2, [r7, #9]
 800128e:	429a      	cmp	r2, r3
 8001290:	d938      	bls.n	8001304 <validateRequest+0x1e8>
 8001292:	2302      	movs	r3, #2
 8001294:	e03c      	b.n	8001310 <validateRequest+0x1f4>
	        break;
	    case MB_FC_WRITE_REGISTER :
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	7d5a      	ldrb	r2, [r3, #21]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	7d9b      	ldrb	r3, [r3, #22]
 800129e:	4619      	mov	r1, r3
 80012a0:	4610      	mov	r0, r2
 80012a2:	f000 f83b 	bl	800131c <word>
 80012a6:	4603      	mov	r3, r0
 80012a8:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 80012aa:	897b      	ldrh	r3, [r7, #10]
 80012ac:	727b      	strb	r3, [r7, #9]
	        if (u8regs >modH-> u8regsize) return EXC_ADDR_RANGE;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80012b4:	7a7a      	ldrb	r2, [r7, #9]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d926      	bls.n	8001308 <validateRequest+0x1ec>
 80012ba:	2302      	movs	r3, #2
 80012bc:	e028      	b.n	8001310 <validateRequest+0x1f4>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7d5a      	ldrb	r2, [r3, #21]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7d9b      	ldrb	r3, [r3, #22]
 80012c6:	4619      	mov	r1, r3
 80012c8:	4610      	mov	r0, r2
 80012ca:	f000 f827 	bl	800131c <word>
 80012ce:	4603      	mov	r3, r0
 80012d0:	817b      	strh	r3, [r7, #10]
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7dda      	ldrb	r2, [r3, #23]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	7e1b      	ldrb	r3, [r3, #24]
 80012da:	4619      	mov	r1, r3
 80012dc:	4610      	mov	r0, r2
 80012de:	f000 f81d 	bl	800131c <word>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	897b      	ldrh	r3, [r7, #10]
 80012e8:	4413      	add	r3, r2
 80012ea:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 80012ec:	897b      	ldrh	r3, [r7, #10]
 80012ee:	727b      	strb	r3, [r7, #9]
	        if (u8regs > modH->u8regsize) return EXC_ADDR_RANGE;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80012f6:	7a7a      	ldrb	r2, [r7, #9]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d907      	bls.n	800130c <validateRequest+0x1f0>
 80012fc:	2302      	movs	r3, #2
 80012fe:	e007      	b.n	8001310 <validateRequest+0x1f4>
	        break;
 8001300:	bf00      	nop
 8001302:	e004      	b.n	800130e <validateRequest+0x1f2>
	        break;
 8001304:	bf00      	nop
 8001306:	e002      	b.n	800130e <validateRequest+0x1f2>
	        break;
 8001308:	bf00      	nop
 800130a:	e000      	b.n	800130e <validateRequest+0x1f2>
	        break;
 800130c:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 800130e:	2300      	movs	r3, #0

}
 8001310:	4618      	mov	r0, r3
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	080096f0 	.word	0x080096f0

0800131c <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	460a      	mov	r2, r1
 8001326:	71fb      	strb	r3, [r7, #7]
 8001328:	4613      	mov	r3, r2
 800132a:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 800132c:	79bb      	ldrb	r3, [r7, #6]
 800132e:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8001334:	89bb      	ldrh	r3, [r7, #12]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8001342:	b480      	push	{r7}
 8001344:	b087      	sub	sp, #28
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	460b      	mov	r3, r1
 800134c:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 800134e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001352:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 8001354:	2300      	movs	r3, #0
 8001356:	74fb      	strb	r3, [r7, #19]
 8001358:	e022      	b.n	80013a0 <calcCRC+0x5e>
    {
        temp = temp ^ Buffer[i];
 800135a:	7cfb      	ldrb	r3, [r7, #19]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	4413      	add	r3, r2
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	4053      	eors	r3, r2
 8001368:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800136a:	2301      	movs	r3, #1
 800136c:	74bb      	strb	r3, [r7, #18]
 800136e:	e011      	b.n	8001394 <calcCRC+0x52>
        {
            flag = temp & 0x0001;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	085b      	lsrs	r3, r3, #1
 800137c:	617b      	str	r3, [r7, #20]
            if (flag)
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d004      	beq.n	800138e <calcCRC+0x4c>
                temp ^= 0xA001;
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	f24a 0301 	movw	r3, #40961	; 0xa001
 800138a:	4053      	eors	r3, r2
 800138c:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800138e:	7cbb      	ldrb	r3, [r7, #18]
 8001390:	3301      	adds	r3, #1
 8001392:	74bb      	strb	r3, [r7, #18]
 8001394:	7cbb      	ldrb	r3, [r7, #18]
 8001396:	2b08      	cmp	r3, #8
 8001398:	d9ea      	bls.n	8001370 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 800139a:	7cfb      	ldrb	r3, [r7, #19]
 800139c:	3301      	adds	r3, #1
 800139e:	74fb      	strb	r3, [r7, #19]
 80013a0:	7cfa      	ldrb	r2, [r7, #19]
 80013a2:	78fb      	ldrb	r3, [r7, #3]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d3d8      	bcc.n	800135a <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	0a1b      	lsrs	r3, r3, #8
 80013ac:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	b29b      	uxth	r3, r3

}
 80013c2:	4618      	mov	r0, r3
 80013c4:	371c      	adds	r7, #28
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 80013ce:	b480      	push	{r7}
 80013d0:	b085      	sub	sp, #20
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	6039      	str	r1, [r7, #0]
 80013d8:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->au8Buffer[ FUNC ];  // get the original FUNC code
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	7d1b      	ldrb	r3, [r3, #20]
 80013de:	73fb      	strb	r3, [r7, #15]

    modH->au8Buffer[ ID ]      = modH->u8id;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	7a1a      	ldrb	r2, [r3, #8]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	74da      	strb	r2, [r3, #19]
    modH->au8Buffer[ FUNC ]    = u8func + 0x80;
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	3b80      	subs	r3, #128	; 0x80
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	751a      	strb	r2, [r3, #20]
    modH->au8Buffer[ 2 ]       = u8exception;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	79fa      	ldrb	r2, [r7, #7]
 80013f6:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	2203      	movs	r2, #3
 80013fc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
void sendTxBuffer(modbusHandler_t *modH)
{
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b087      	sub	sp, #28
 8001410:	af02      	add	r7, sp, #8
 8001412:	6078      	str	r0, [r7, #4]
    // append CRC to message
    uint16_t u16crc = calcCRC(modH->au8Buffer, modH->u8BufferSize);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f103 0213 	add.w	r2, r3, #19
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001420:	4619      	mov	r1, r3
 8001422:	4610      	mov	r0, r2
 8001424:	f7ff ff8d 	bl	8001342 <calcCRC>
 8001428:	4603      	mov	r3, r0
 800142a:	81fb      	strh	r3, [r7, #14]
    modH->au8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 800142c:	89fb      	ldrh	r3, [r7, #14]
 800142e:	0a1b      	lsrs	r3, r3, #8
 8001430:	b29a      	uxth	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001438:	4619      	mov	r1, r3
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	440b      	add	r3, r1
 8001440:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001448:	3301      	adds	r3, #1
 800144a:	b2da      	uxtb	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    modH->au8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001458:	4619      	mov	r1, r3
 800145a:	89fb      	ldrh	r3, [r7, #14]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	440b      	add	r3, r1
 8001462:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800146a:	3301      	adds	r3, #1
 800146c:	b2da      	uxtb	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    if (modH->EN_Port != NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d007      	beq.n	800148c <sendTxBuffer+0x80>
    {
        // set RS485 transceiver to transmit mode
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68d8      	ldr	r0, [r3, #12]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	8a1b      	ldrh	r3, [r3, #16]
 8001484:	2201      	movs	r2, #1
 8001486:	4619      	mov	r1, r3
 8001488:	f001 fa86 	bl	8002998 <HAL_GPIO_WritePin>
    }

    // transfer buffer to serial line
    //port->write( au8Buffer, u8BufferSize );
    //HAL_UART_Transmit(modH->port, modH->au8Buffer , modH->u8BufferSize, 100);
    HAL_UART_Transmit_IT(modH->port, modH->au8Buffer,  modH->u8BufferSize);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6858      	ldr	r0, [r3, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f103 0113 	add.w	r1, r3, #19
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800149c:	b29b      	uxth	r3, r3
 800149e:	461a      	mov	r2, r3
 80014a0:	f002 ff50 	bl	8004344 <HAL_UART_Transmit_IT>

    ulTaskNotifyTake(pdTRUE, portMAX_DELAY); //wait notification from TXE interrupt
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295
 80014a8:	2001      	movs	r0, #1
 80014aa:	f006 fd69 	bl	8007f80 <ulTaskNotifyTake>


     if (modH->EN_Port != NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d018      	beq.n	80014e8 <sendTxBuffer+0xdc>
     {
         // must wait transmission end before changing pin state
         //return RS485 transceiver to receive mode


    	 while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )  //USART_SR_TC
 80014b6:	e007      	b.n	80014c8 <sendTxBuffer+0xbc>
	   	 {
    		taskYIELD();
 80014b8:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <sendTxBuffer+0x12c>)
 80014ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	f3bf 8f4f 	dsb	sy
 80014c4:	f3bf 8f6f 	isb	sy
    	 while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )  //USART_SR_TC
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0ef      	beq.n	80014b8 <sendTxBuffer+0xac>
    	 }
    	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68d8      	ldr	r0, [r3, #12]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	8a1b      	ldrh	r3, [r3, #16]
 80014e0:	2200      	movs	r2, #0
 80014e2:	4619      	mov	r1, r3
 80014e4:	f001 fa58 	bl	8002998 <HAL_GPIO_WritePin>
     }

     xQueueGenericReset(modH->QueueModbusHandle, pdFALSE);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f004 fde0 	bl	80060b4 <xQueueGenericReset>

     modH->u8BufferSize = 0;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

     // set timeout for master query
     if(modH->uiModbusType == MASTER_RTU )
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b04      	cmp	r3, #4
 8001502:	d10c      	bne.n	800151e <sendTxBuffer+0x112>
     {
 		xTimerReset(modH->xTimerTimeout,0);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800150a:	f006 f845 	bl	8007598 <xTaskGetTickCount>
 800150e:	4602      	mov	r2, r0
 8001510:	2300      	movs	r3, #0
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2300      	movs	r3, #0
 8001516:	2102      	movs	r1, #2
 8001518:	4620      	mov	r0, r4
 800151a:	f007 f829 	bl	8008570 <xTimerGenericCommand>
     }

     // increase message counter
     modH->u16OutCnt++;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8001524:	3301      	adds	r3, #1
 8001526:	b29a      	uxth	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

}
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	bd90      	pop	{r4, r7, pc}
 8001536:	bf00      	nop
 8001538:	e000ed04 	.word	0xe000ed04

0800153c <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
    uint8_t u8currentRegister, u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7d5a      	ldrb	r2, [r3, #21]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	7d9b      	ldrb	r3, [r3, #22]
 800154c:	4619      	mov	r1, r3
 800154e:	4610      	mov	r0, r2
 8001550:	f7ff fee4 	bl	800131c <word>
 8001554:	4603      	mov	r3, r0
 8001556:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	7dda      	ldrb	r2, [r3, #23]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7e1b      	ldrb	r3, [r3, #24]
 8001560:	4619      	mov	r1, r3
 8001562:	4610      	mov	r0, r2
 8001564:	f7ff feda 	bl	800131c <word>
 8001568:	4603      	mov	r3, r0
 800156a:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 800156c:	8a3b      	ldrh	r3, [r7, #16]
 800156e:	08db      	lsrs	r3, r3, #3
 8001570:	b29b      	uxth	r3, r3
 8001572:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8001574:	8a3b      	ldrh	r3, [r7, #16]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	b29b      	uxth	r3, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <process_FC1+0x4a>
 8001580:	7dfb      	ldrb	r3, [r7, #23]
 8001582:	3301      	adds	r3, #1
 8001584:	75fb      	strb	r3, [r7, #23]
    modH->au8Buffer[ ADD_HI ]  = u8bytesno;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	7dfa      	ldrb	r2, [r7, #23]
 800158a:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2203      	movs	r2, #3
 8001590:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    modH->au8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800159a:	461a      	mov	r2, r3
 800159c:	7dfb      	ldrb	r3, [r7, #23]
 800159e:	4413      	add	r3, r2
 80015a0:	3b01      	subs	r3, #1
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	2200      	movs	r2, #0
 80015a8:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	82bb      	strh	r3, [r7, #20]
 80015b2:	e058      	b.n	8001666 <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 80015b4:	8a7a      	ldrh	r2, [r7, #18]
 80015b6:	8abb      	ldrh	r3, [r7, #20]
 80015b8:	4413      	add	r3, r2
 80015ba:	81bb      	strh	r3, [r7, #12]
        u8currentRegister = (uint8_t) (u16coil / 16);
 80015bc:	89bb      	ldrh	r3, [r7, #12]
 80015be:	091b      	lsrs	r3, r3, #4
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	72fb      	strb	r3, [r7, #11]
        u8currentBit = (uint8_t) (u16coil % 16);
 80015c4:	89bb      	ldrh	r3, [r7, #12]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	f003 030f 	and.w	r3, r3, #15
 80015cc:	72bb      	strb	r3, [r7, #10]

        bitWrite(
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015d2:	7afb      	ldrb	r3, [r7, #11]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	7abb      	ldrb	r3, [r7, #10]
 80015de:	fa42 f303 	asr.w	r3, r2, r3
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d014      	beq.n	8001614 <process_FC1+0xd8>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80015f0:	461a      	mov	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	7cda      	ldrb	r2, [r3, #19]
 80015f8:	7dbb      	ldrb	r3, [r7, #22]
 80015fa:	2101      	movs	r1, #1
 80015fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001600:	b2db      	uxtb	r3, r3
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	f891 1053 	ldrb.w	r1, [r1, #83]	; 0x53
 8001608:	4313      	orrs	r3, r2
 800160a:	b2da      	uxtb	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	440b      	add	r3, r1
 8001610:	74da      	strb	r2, [r3, #19]
 8001612:	e015      	b.n	8001640 <process_FC1+0x104>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800161a:	461a      	mov	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4413      	add	r3, r2
 8001620:	7cda      	ldrb	r2, [r3, #19]
 8001622:	7dbb      	ldrb	r3, [r7, #22]
 8001624:	2101      	movs	r1, #1
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	b2db      	uxtb	r3, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	f891 1053 	ldrb.w	r1, [r1, #83]	; 0x53
 8001636:	4013      	ands	r3, r2
 8001638:	b2da      	uxtb	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	440b      	add	r3, r1
 800163e:	74da      	strb	r2, [r3, #19]
        	modH->au8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->au16regs[ u8currentRegister ], u8currentBit ) );
        u8bitsno ++;
 8001640:	7dbb      	ldrb	r3, [r7, #22]
 8001642:	3301      	adds	r3, #1
 8001644:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8001646:	7dbb      	ldrb	r3, [r7, #22]
 8001648:	2b07      	cmp	r3, #7
 800164a:	d909      	bls.n	8001660 <process_FC1+0x124>
        {
            u8bitsno = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001656:	3301      	adds	r3, #1
 8001658:	b2da      	uxtb	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8001660:	8abb      	ldrh	r3, [r7, #20]
 8001662:	3301      	adds	r3, #1
 8001664:	82bb      	strh	r3, [r7, #20]
 8001666:	8aba      	ldrh	r2, [r7, #20]
 8001668:	8a3b      	ldrh	r3, [r7, #16]
 800166a:	429a      	cmp	r2, r3
 800166c:	d3a2      	bcc.n	80015b4 <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 800166e:	8a3b      	ldrh	r3, [r7, #16]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	b29b      	uxth	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d007      	beq.n	800168a <process_FC1+0x14e>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001680:	3301      	adds	r3, #1
 8001682:	b2da      	uxtb	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    u8CopyBufferSize = modH->u8BufferSize +2;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001690:	3302      	adds	r3, #2
 8001692:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff feb9 	bl	800140c <sendTxBuffer>
    return u8CopyBufferSize;
 800169a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b084      	sub	sp, #16
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]

    uint8_t u8StartAdd = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	7d5a      	ldrb	r2, [r3, #21]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	7d9b      	ldrb	r3, [r3, #22]
 80016b6:	4619      	mov	r1, r3
 80016b8:	4610      	mov	r0, r2
 80016ba:	f7ff fe2f 	bl	800131c <word>
 80016be:	4603      	mov	r3, r0
 80016c0:	73bb      	strb	r3, [r7, #14]
    uint8_t u8regsno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	7dda      	ldrb	r2, [r3, #23]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	7e1b      	ldrb	r3, [r3, #24]
 80016ca:	4619      	mov	r1, r3
 80016cc:	4610      	mov	r0, r2
 80016ce:	f7ff fe25 	bl	800131c <word>
 80016d2:	4603      	mov	r3, r0
 80016d4:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint8_t i;

    modH->au8Buffer[ 2 ]       = u8regsno * 2;
 80016d6:	7b7b      	ldrb	r3, [r7, #13]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2203      	movs	r2, #3
 80016e4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 80016e8:	7bbb      	ldrb	r3, [r7, #14]
 80016ea:	73fb      	strb	r3, [r7, #15]
 80016ec:	e030      	b.n	8001750 <process_FC3+0xaa>
    {
    	modH->au8Buffer[ modH->u8BufferSize ] = highByte(modH->au16regs[i]);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4413      	add	r3, r2
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	0a1b      	lsrs	r3, r3, #8
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001704:	4619      	mov	r1, r3
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	440b      	add	r3, r1
 800170c:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001714:	3301      	adds	r3, #1
 8001716:	b2da      	uxtb	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    	modH->au8Buffer[ modH->u8BufferSize ] = lowByte(modH->au16regs[i]);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	4413      	add	r3, r2
 8001728:	881a      	ldrh	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001730:	4619      	mov	r1, r3
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	440b      	add	r3, r1
 8001738:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001740:	3301      	adds	r3, #1
 8001742:	b2da      	uxtb	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	3301      	adds	r3, #1
 800174e:	73fb      	strb	r3, [r7, #15]
 8001750:	7bfa      	ldrb	r2, [r7, #15]
 8001752:	7bb9      	ldrb	r1, [r7, #14]
 8001754:	7b7b      	ldrb	r3, [r7, #13]
 8001756:	440b      	add	r3, r1
 8001758:	429a      	cmp	r2, r3
 800175a:	dbc8      	blt.n	80016ee <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001762:	3302      	adds	r3, #2
 8001764:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff fe50 	bl	800140c <sendTxBuffer>

    return u8CopyBufferSize;
 800176c:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
    uint8_t u8currentRegister, u8currentBit;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7d5a      	ldrb	r2, [r3, #21]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	7d9b      	ldrb	r3, [r3, #22]
 8001788:	4619      	mov	r1, r3
 800178a:	4610      	mov	r0, r2
 800178c:	f7ff fdc6 	bl	800131c <word>
 8001790:	4603      	mov	r3, r0
 8001792:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u8currentRegister = (uint8_t) (u16coil / 16);
 8001794:	89fb      	ldrh	r3, [r7, #14]
 8001796:	091b      	lsrs	r3, r3, #4
 8001798:	b29b      	uxth	r3, r3
 800179a:	737b      	strb	r3, [r7, #13]
    u8currentBit = (uint8_t) (u16coil % 16);
 800179c:	89fb      	ldrh	r3, [r7, #14]
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f003 030f 	and.w	r3, r3, #15
 80017a4:	733b      	strb	r3, [r7, #12]

    // write to coil
    bitWrite(
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	7ddb      	ldrb	r3, [r3, #23]
 80017aa:	2bff      	cmp	r3, #255	; 0xff
 80017ac:	d113      	bne.n	80017d6 <process_FC5+0x5e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017b2:	7b7b      	ldrb	r3, [r7, #13]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	4413      	add	r3, r2
 80017b8:	8819      	ldrh	r1, [r3, #0]
 80017ba:	7b3b      	ldrb	r3, [r7, #12]
 80017bc:	2201      	movs	r2, #1
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80017c8:	7b7b      	ldrb	r3, [r7, #13]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	4403      	add	r3, r0
 80017ce:	430a      	orrs	r2, r1
 80017d0:	b292      	uxth	r2, r2
 80017d2:	801a      	strh	r2, [r3, #0]
 80017d4:	e014      	b.n	8001800 <process_FC5+0x88>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017da:	7b7b      	ldrb	r3, [r7, #13]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4413      	add	r3, r2
 80017e0:	8819      	ldrh	r1, [r3, #0]
 80017e2:	7b3b      	ldrb	r3, [r7, #12]
 80017e4:	2201      	movs	r2, #1
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80017f4:	7b7b      	ldrb	r3, [r7, #13]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	4403      	add	r3, r0
 80017fa:	400a      	ands	r2, r1
 80017fc:	b292      	uxth	r2, r2
 80017fe:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->au8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2206      	movs	r2, #6
 8001804:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    u8CopyBufferSize =  modH->u8BufferSize +2;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800180e:	3302      	adds	r3, #2
 8001810:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff fdfa 	bl	800140c <sendTxBuffer>

    return u8CopyBufferSize;
 8001818:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]

    uint8_t u8add = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	7d5a      	ldrb	r2, [r3, #21]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	7d9b      	ldrb	r3, [r3, #22]
 8001834:	4619      	mov	r1, r3
 8001836:	4610      	mov	r0, r2
 8001838:	f7ff fd70 	bl	800131c <word>
 800183c:	4603      	mov	r3, r0
 800183e:	73fb      	strb	r3, [r7, #15]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	7dda      	ldrb	r2, [r3, #23]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	7e1b      	ldrb	r3, [r3, #24]
 8001848:	4619      	mov	r1, r3
 800184a:	4610      	mov	r0, r2
 800184c:	f7ff fd66 	bl	800131c <word>
 8001850:	4603      	mov	r3, r0
 8001852:	81bb      	strh	r3, [r7, #12]

    modH->au16regs[ u8add ] = u16val;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	89ba      	ldrh	r2, [r7, #12]
 8001860:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2206      	movs	r2, #6
 8001866:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    u8CopyBufferSize = modH->u8BufferSize +2;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001870:	3302      	adds	r3, #2
 8001872:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff fdc9 	bl	800140c <sendTxBuffer>

    return u8CopyBufferSize;
 800187a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b086      	sub	sp, #24
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	7d5a      	ldrb	r2, [r3, #21]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	7d9b      	ldrb	r3, [r3, #22]
 8001896:	4619      	mov	r1, r3
 8001898:	4610      	mov	r0, r2
 800189a:	f7ff fd3f 	bl	800131c <word>
 800189e:	4603      	mov	r3, r0
 80018a0:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	7dda      	ldrb	r2, [r3, #23]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	7e1b      	ldrb	r3, [r3, #24]
 80018aa:	4619      	mov	r1, r3
 80018ac:	4610      	mov	r0, r2
 80018ae:	f7ff fd35 	bl	800131c <word>
 80018b2:	4603      	mov	r3, r0
 80018b4:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 80018ba:	2307      	movs	r3, #7
 80018bc:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80018be:	2300      	movs	r3, #0
 80018c0:	82bb      	strh	r3, [r7, #20]
 80018c2:	e055      	b.n	8001970 <process_FC15+0xea>
    {

        u16coil = u16StartCoil + u16currentCoil;
 80018c4:	8a7a      	ldrh	r2, [r7, #18]
 80018c6:	8abb      	ldrh	r3, [r7, #20]
 80018c8:	4413      	add	r3, r2
 80018ca:	81bb      	strh	r3, [r7, #12]
        u8currentRegister = (uint8_t) (u16coil / 16);
 80018cc:	89bb      	ldrh	r3, [r7, #12]
 80018ce:	091b      	lsrs	r3, r3, #4
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	72fb      	strb	r3, [r7, #11]
        u8currentBit = (uint8_t) (u16coil % 16);
 80018d4:	89bb      	ldrh	r3, [r7, #12]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	f003 030f 	and.w	r3, r3, #15
 80018dc:	72bb      	strb	r3, [r7, #10]

        bTemp = bitRead(
 80018de:	7dfb      	ldrb	r3, [r7, #23]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	4413      	add	r3, r2
 80018e4:	7cdb      	ldrb	r3, [r3, #19]
 80018e6:	461a      	mov	r2, r3
 80018e8:	7dbb      	ldrb	r3, [r7, #22]
 80018ea:	fa42 f303 	asr.w	r3, r2, r3
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	bf14      	ite	ne
 80018f6:	2301      	movne	r3, #1
 80018f8:	2300      	moveq	r3, #0
 80018fa:	727b      	strb	r3, [r7, #9]
        			modH->au8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 80018fc:	7a7b      	ldrb	r3, [r7, #9]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d013      	beq.n	800192a <process_FC15+0xa4>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001906:	7afb      	ldrb	r3, [r7, #11]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	8819      	ldrh	r1, [r3, #0]
 800190e:	7abb      	ldrb	r3, [r7, #10]
 8001910:	2201      	movs	r2, #1
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	b29a      	uxth	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800191c:	7afb      	ldrb	r3, [r7, #11]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4403      	add	r3, r0
 8001922:	430a      	orrs	r2, r1
 8001924:	b292      	uxth	r2, r2
 8001926:	801a      	strh	r2, [r3, #0]
 8001928:	e014      	b.n	8001954 <process_FC15+0xce>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800192e:	7afb      	ldrb	r3, [r7, #11]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4413      	add	r3, r2
 8001934:	8819      	ldrh	r1, [r3, #0]
 8001936:	7abb      	ldrb	r3, [r7, #10]
 8001938:	2201      	movs	r2, #1
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	b29b      	uxth	r3, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	b29a      	uxth	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8001948:	7afb      	ldrb	r3, [r7, #11]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4403      	add	r3, r0
 800194e:	400a      	ands	r2, r1
 8001950:	b292      	uxth	r2, r2
 8001952:	801a      	strh	r2, [r3, #0]
            modH->au16regs[ u8currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 8001954:	7dbb      	ldrb	r3, [r7, #22]
 8001956:	3301      	adds	r3, #1
 8001958:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 800195a:	7dbb      	ldrb	r3, [r7, #22]
 800195c:	2b07      	cmp	r3, #7
 800195e:	d904      	bls.n	800196a <process_FC15+0xe4>
        {
            u8bitsno = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 8001964:	7dfb      	ldrb	r3, [r7, #23]
 8001966:	3301      	adds	r3, #1
 8001968:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800196a:	8abb      	ldrh	r3, [r7, #20]
 800196c:	3301      	adds	r3, #1
 800196e:	82bb      	strh	r3, [r7, #20]
 8001970:	8aba      	ldrh	r2, [r7, #20]
 8001972:	8a3b      	ldrh	r3, [r7, #16]
 8001974:	429a      	cmp	r2, r3
 8001976:	d3a5      	bcc.n	80018c4 <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2206      	movs	r2, #6
 800197c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    u8CopyBufferSize = modH->u8BufferSize +2;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001986:	3302      	adds	r3, #2
 8001988:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff fd3e 	bl	800140c <sendTxBuffer>
    return u8CopyBufferSize;
 8001990:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
    uint8_t u8StartAdd = modH->au8Buffer[ ADD_HI ] << 8 | modH->au8Buffer[ ADD_LO ];
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	7d5b      	ldrb	r3, [r3, #21]
 80019a8:	021b      	lsls	r3, r3, #8
 80019aa:	b25a      	sxtb	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	7d9b      	ldrb	r3, [r3, #22]
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	4313      	orrs	r3, r2
 80019b4:	b25b      	sxtb	r3, r3
 80019b6:	73bb      	strb	r3, [r7, #14]
    uint8_t u8regsno = modH->au8Buffer[ NB_HI ] << 8 | modH->au8Buffer[ NB_LO ];
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	7ddb      	ldrb	r3, [r3, #23]
 80019bc:	021b      	lsls	r3, r3, #8
 80019be:	b25a      	sxtb	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	7e1b      	ldrb	r3, [r3, #24]
 80019c4:	b25b      	sxtb	r3, r3
 80019c6:	4313      	orrs	r3, r2
 80019c8:	b25b      	sxtb	r3, r3
 80019ca:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint8_t i;
    uint16_t temp;

    // build header
    modH->au8Buffer[ NB_HI ]   = 0;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	75da      	strb	r2, [r3, #23]
    modH->au8Buffer[ NB_LO ]   = u8regsno;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	7b7a      	ldrb	r2, [r7, #13]
 80019d6:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2206      	movs	r2, #6
 80019dc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    // write registers
    for (i = 0; i < u8regsno; i++)
 80019e0:	2300      	movs	r3, #0
 80019e2:	73fb      	strb	r3, [r7, #15]
 80019e4:	e01c      	b.n	8001a20 <process_FC16+0x84>
    {
        temp = word(
        		modH->au8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	3307      	adds	r3, #7
        temp = word(
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	4413      	add	r3, r2
 80019f0:	7cd8      	ldrb	r0, [r3, #19]
				modH->au8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
 80019f4:	3304      	adds	r3, #4
 80019f6:	005b      	lsls	r3, r3, #1
        temp = word(
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	4413      	add	r3, r2
 80019fc:	7cdb      	ldrb	r3, [r3, #19]
 80019fe:	4619      	mov	r1, r3
 8001a00:	f7ff fc8c 	bl	800131c <word>
 8001a04:	4603      	mov	r3, r0
 8001a06:	817b      	strh	r3, [r7, #10]

        modH->au16regs[ u8StartAdd + i ] = temp;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a0c:	7bb9      	ldrb	r1, [r7, #14]
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	440b      	add	r3, r1
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4413      	add	r3, r2
 8001a16:	897a      	ldrh	r2, [r7, #10]
 8001a18:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u8regsno; i++)
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
 8001a20:	7bfa      	ldrb	r2, [r7, #15]
 8001a22:	7b7b      	ldrb	r3, [r7, #13]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d3de      	bcc.n	80019e6 <process_FC16+0x4a>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001a2e:	3302      	adds	r3, #2
 8001a30:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff fcea 	bl	800140c <sendTxBuffer>

    return u8CopyBufferSize;
 8001a38:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_UART_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af02      	add	r7, sp, #8
 8001a4a:	6078      	str	r0, [r7, #4]
	/* Modbus RTU callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	e018      	b.n	8001a88 <HAL_UART_TxCpltCallback+0x44>
	{
		if (mHandlers[i]->port == huart )
 8001a56:	4a12      	ldr	r2, [pc, #72]	; (8001aa0 <HAL_UART_TxCpltCallback+0x5c>)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d10d      	bne.n	8001a82 <HAL_UART_TxCpltCallback+0x3e>
		{
			xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8001a66:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <HAL_UART_TxCpltCallback+0x5c>)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8001a70:	f107 0308 	add.w	r3, r7, #8
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	2300      	movs	r3, #0
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	f006 fb90 	bl	80081a0 <xTaskGenericNotifyFromISR>
			break;
 8001a80:	e009      	b.n	8001a96 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	3301      	adds	r3, #1
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <HAL_UART_TxCpltCallback+0x60>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	4293      	cmp	r3, r2
 8001a92:	dbe0      	blt.n	8001a56 <HAL_UART_TxCpltCallback+0x12>
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8001a94:	bf00      	nop
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000090 	.word	0x20000090
 8001aa4:	20000098 	.word	0x20000098

08001aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aae:	f000 fc26 	bl	80022fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ab2:	f000 f857 	bl	8001b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ab6:	f000 f927 	bl	8001d08 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001aba:	f000 f8f5 	bl	8001ca8 <MX_USART3_UART_Init>
  MX_UART4_Init();
 8001abe:	f000 f8c3 	bl	8001c48 <MX_UART4_Init>


//  char *data = "MODBUS COMMUNICATION\n";

  modbus_t data_query;
  data_query.u8id = 10;
 8001ac2:	230a      	movs	r3, #10
 8001ac4:	713b      	strb	r3, [r7, #4]
  data_query.u8fct = 3;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	717b      	strb	r3, [r7, #5]
  data_query.u16RegAdd = 0x10;
 8001aca:	2310      	movs	r3, #16
 8001acc:	80fb      	strh	r3, [r7, #6]
  data_query.u16CoilsNo = 4;
 8001ace:	2304      	movs	r3, #4
 8001ad0:	813b      	strh	r3, [r7, #8]
  data_query.au16reg = &ModbusDATA;
 8001ad2:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <main+0xa0>)
 8001ad4:	60fb      	str	r3, [r7, #12]




  /* Master initialization */
   ModbusH.uiModbusType = MASTER_RTU;
 8001ad6:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <main+0xa4>)
 8001ad8:	2204      	movs	r2, #4
 8001ada:	701a      	strb	r2, [r3, #0]
   ModbusH.port =  &huart4;
 8001adc:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <main+0xa4>)
 8001ade:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <main+0xa8>)
 8001ae0:	605a      	str	r2, [r3, #4]
   ModbusH.u8id = 0; // Form master it must be 0
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <main+0xa4>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	721a      	strb	r2, [r3, #8]
   ModbusH.u16timeOut = 1000;
 8001ae8:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <main+0xa4>)
 8001aea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001aee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
   ModbusH.EN_Port = NULL;
 8001af2:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <main+0xa4>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	60da      	str	r2, [r3, #12]
   ModbusH.EN_Port = EN_485_GPIO_Port;
 8001af8:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <main+0xa4>)
 8001afa:	4a16      	ldr	r2, [pc, #88]	; (8001b54 <main+0xac>)
 8001afc:	60da      	str	r2, [r3, #12]
   ModbusH.EN_Pin = EN_485_Pin;
 8001afe:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <main+0xa4>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	821a      	strh	r2, [r3, #16]
   ModbusH.u32overTime = 0;
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <main+0xa4>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	66da      	str	r2, [r3, #108]	; 0x6c
   ModbusH.au16regs = ModbusDATA;
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <main+0xa4>)
 8001b0c:	4a0e      	ldr	r2, [pc, #56]	; (8001b48 <main+0xa0>)
 8001b0e:	659a      	str	r2, [r3, #88]	; 0x58
   ModbusH.u8regsize= sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 8001b10:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <main+0xa4>)
 8001b12:	2208      	movs	r2, #8
 8001b14:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
   //Initialize Modbus library
   ModbusInit(&ModbusH);
 8001b18:	480c      	ldr	r0, [pc, #48]	; (8001b4c <main+0xa4>)
 8001b1a:	f7fe fd13 	bl	8000544 <ModbusInit>
   //Start capturing traffic on serial Port
   ModbusStart(&ModbusH);
 8001b1e:	480b      	ldr	r0, [pc, #44]	; (8001b4c <main+0xa4>)
 8001b20:	f7fe fd98 	bl	8000654 <ModbusStart>


//   SendQuery(&ModbusH,data_query);
   ModbusQuery(&ModbusH,data_query);
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b28:	4808      	ldr	r0, [pc, #32]	; (8001b4c <main+0xa4>)
 8001b2a:	f7fe ff17 	bl	800095c <ModbusQuery>
//   ModbusStart(&ModbusH2);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b2e:	f003 ff79 	bl	8005a24 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001b32:	4a09      	ldr	r2, [pc, #36]	; (8001b58 <main+0xb0>)
 8001b34:	2100      	movs	r1, #0
 8001b36:	4809      	ldr	r0, [pc, #36]	; (8001b5c <main+0xb4>)
 8001b38:	f003 ffde 	bl	8005af8 <osThreadNew>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	4a08      	ldr	r2, [pc, #32]	; (8001b60 <main+0xb8>)
 8001b40:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001b42:	f003 ffa3 	bl	8005a8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b46:	e7fe      	b.n	8001b46 <main+0x9e>
 8001b48:	20000234 	.word	0x20000234
 8001b4c:	200001a8 	.word	0x200001a8
 8001b50:	2000009c 	.word	0x2000009c
 8001b54:	40020800 	.word	0x40020800
 8001b58:	080096f8 	.word	0x080096f8
 8001b5c:	08001f35 	.word	0x08001f35
 8001b60:	200001a4 	.word	0x200001a4

08001b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b094      	sub	sp, #80	; 0x50
 8001b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b6a:	f107 031c 	add.w	r3, r7, #28
 8001b6e:	2234      	movs	r2, #52	; 0x34
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f007 fc5e 	bl	8009434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b78:	f107 0308 	add.w	r3, r7, #8
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b88:	f000 ff20 	bl	80029cc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8c:	4b2c      	ldr	r3, [pc, #176]	; (8001c40 <SystemClock_Config+0xdc>)
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	4a2b      	ldr	r2, [pc, #172]	; (8001c40 <SystemClock_Config+0xdc>)
 8001b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b96:	6413      	str	r3, [r2, #64]	; 0x40
 8001b98:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <SystemClock_Config+0xdc>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ba4:	4b27      	ldr	r3, [pc, #156]	; (8001c44 <SystemClock_Config+0xe0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bac:	4a25      	ldr	r2, [pc, #148]	; (8001c44 <SystemClock_Config+0xe0>)
 8001bae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <SystemClock_Config+0xe0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bbc:	603b      	str	r3, [r7, #0]
 8001bbe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001bc4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001bc8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bd2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001bd4:	2304      	movs	r3, #4
 8001bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001bd8:	2360      	movs	r3, #96	; 0x60
 8001bda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001be0:	2304      	movs	r3, #4
 8001be2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001be4:	2302      	movs	r3, #2
 8001be6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be8:	f107 031c 	add.w	r3, r7, #28
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 ff4d 	bl	8002a8c <HAL_RCC_OscConfig>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001bf8:	f000 f9b3 	bl	8001f62 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001bfc:	f000 fef6 	bl	80029ec <HAL_PWREx_EnableOverDrive>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c06:	f000 f9ac 	bl	8001f62 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c0a:	230f      	movs	r3, #15
 8001c0c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c20:	f107 0308 	add.w	r3, r7, #8
 8001c24:	2103      	movs	r1, #3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f001 f9de 	bl	8002fe8 <HAL_RCC_ClockConfig>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001c32:	f000 f996 	bl	8001f62 <Error_Handler>
  }
}
 8001c36:	bf00      	nop
 8001c38:	3750      	adds	r7, #80	; 0x50
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40007000 	.word	0x40007000

08001c48 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001c4c:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <MX_UART4_Init+0x58>)
 8001c4e:	4a15      	ldr	r2, [pc, #84]	; (8001ca4 <MX_UART4_Init+0x5c>)
 8001c50:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001c52:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <MX_UART4_Init+0x58>)
 8001c54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c58:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <MX_UART4_Init+0x58>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <MX_UART4_Init+0x58>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <MX_UART4_Init+0x58>)
 8001c68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c6c:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <MX_UART4_Init+0x58>)
 8001c70:	220c      	movs	r2, #12
 8001c72:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c74:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <MX_UART4_Init+0x58>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <MX_UART4_Init+0x58>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c80:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <MX_UART4_Init+0x58>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <MX_UART4_Init+0x58>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c8c:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <MX_UART4_Init+0x58>)
 8001c8e:	f002 fb0b 	bl	80042a8 <HAL_UART_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_UART4_Init+0x54>
  {
    Error_Handler();
 8001c98:	f000 f963 	bl	8001f62 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	2000009c 	.word	0x2000009c
 8001ca4:	40004c00 	.word	0x40004c00

08001ca8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cac:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <MX_USART3_UART_Init+0x58>)
 8001cae:	4a15      	ldr	r2, [pc, #84]	; (8001d04 <MX_USART3_UART_Init+0x5c>)
 8001cb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <MX_USART3_UART_Init+0x58>)
 8001cb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cba:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <MX_USART3_UART_Init+0x58>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cc0:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <MX_USART3_UART_Init+0x58>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <MX_USART3_UART_Init+0x58>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <MX_USART3_UART_Init+0x58>)
 8001cce:	220c      	movs	r2, #12
 8001cd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <MX_USART3_UART_Init+0x58>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <MX_USART3_UART_Init+0x58>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <MX_USART3_UART_Init+0x58>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <MX_USART3_UART_Init+0x58>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cea:	4805      	ldr	r0, [pc, #20]	; (8001d00 <MX_USART3_UART_Init+0x58>)
 8001cec:	f002 fadc 	bl	80042a8 <HAL_UART_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001cf6:	f000 f934 	bl	8001f62 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000120 	.word	0x20000120
 8001d04:	40004800 	.word	0x40004800

08001d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08c      	sub	sp, #48	; 0x30
 8001d0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0e:	f107 031c 	add.w	r3, r7, #28
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
 8001d1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d1e:	4b80      	ldr	r3, [pc, #512]	; (8001f20 <MX_GPIO_Init+0x218>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a7f      	ldr	r2, [pc, #508]	; (8001f20 <MX_GPIO_Init+0x218>)
 8001d24:	f043 0304 	orr.w	r3, r3, #4
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b7d      	ldr	r3, [pc, #500]	; (8001f20 <MX_GPIO_Init+0x218>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	61bb      	str	r3, [r7, #24]
 8001d34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d36:	4b7a      	ldr	r3, [pc, #488]	; (8001f20 <MX_GPIO_Init+0x218>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	4a79      	ldr	r2, [pc, #484]	; (8001f20 <MX_GPIO_Init+0x218>)
 8001d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
 8001d42:	4b77      	ldr	r3, [pc, #476]	; (8001f20 <MX_GPIO_Init+0x218>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4e:	4b74      	ldr	r3, [pc, #464]	; (8001f20 <MX_GPIO_Init+0x218>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a73      	ldr	r2, [pc, #460]	; (8001f20 <MX_GPIO_Init+0x218>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b71      	ldr	r3, [pc, #452]	; (8001f20 <MX_GPIO_Init+0x218>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d66:	4b6e      	ldr	r3, [pc, #440]	; (8001f20 <MX_GPIO_Init+0x218>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	4a6d      	ldr	r2, [pc, #436]	; (8001f20 <MX_GPIO_Init+0x218>)
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	6313      	str	r3, [r2, #48]	; 0x30
 8001d72:	4b6b      	ldr	r3, [pc, #428]	; (8001f20 <MX_GPIO_Init+0x218>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d7e:	4b68      	ldr	r3, [pc, #416]	; (8001f20 <MX_GPIO_Init+0x218>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a67      	ldr	r2, [pc, #412]	; (8001f20 <MX_GPIO_Init+0x218>)
 8001d84:	f043 0308 	orr.w	r3, r3, #8
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b65      	ldr	r3, [pc, #404]	; (8001f20 <MX_GPIO_Init+0x218>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d96:	4b62      	ldr	r3, [pc, #392]	; (8001f20 <MX_GPIO_Init+0x218>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4a61      	ldr	r2, [pc, #388]	; (8001f20 <MX_GPIO_Init+0x218>)
 8001d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
 8001da2:	4b5f      	ldr	r3, [pc, #380]	; (8001f20 <MX_GPIO_Init+0x218>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_485_GPIO_Port, EN_485_Pin, GPIO_PIN_RESET);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2101      	movs	r1, #1
 8001db2:	485c      	ldr	r0, [pc, #368]	; (8001f24 <MX_GPIO_Init+0x21c>)
 8001db4:	f000 fdf0 	bl	8002998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001db8:	2200      	movs	r2, #0
 8001dba:	f244 0181 	movw	r1, #16513	; 0x4081
 8001dbe:	485a      	ldr	r0, [pc, #360]	; (8001f28 <MX_GPIO_Init+0x220>)
 8001dc0:	f000 fdea 	bl	8002998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2140      	movs	r1, #64	; 0x40
 8001dc8:	4858      	ldr	r0, [pc, #352]	; (8001f2c <MX_GPIO_Init+0x224>)
 8001dca:	f000 fde5 	bl	8002998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001dce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dd4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001dd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001dde:	f107 031c 	add.w	r3, r7, #28
 8001de2:	4619      	mov	r1, r3
 8001de4:	484f      	ldr	r0, [pc, #316]	; (8001f24 <MX_GPIO_Init+0x21c>)
 8001de6:	f000 fc2b 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_485_Pin */
  GPIO_InitStruct.Pin = EN_485_Pin;
 8001dea:	2301      	movs	r3, #1
 8001dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dee:	2301      	movs	r3, #1
 8001df0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df6:	2300      	movs	r3, #0
 8001df8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(EN_485_GPIO_Port, &GPIO_InitStruct);
 8001dfa:	f107 031c 	add.w	r3, r7, #28
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4848      	ldr	r0, [pc, #288]	; (8001f24 <MX_GPIO_Init+0x21c>)
 8001e02:	f000 fc1d 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001e06:	2332      	movs	r3, #50	; 0x32
 8001e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e12:	2303      	movs	r3, #3
 8001e14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e16:	230b      	movs	r3, #11
 8001e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e1a:	f107 031c 	add.w	r3, r7, #28
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4840      	ldr	r0, [pc, #256]	; (8001f24 <MX_GPIO_Init+0x21c>)
 8001e22:	f000 fc0d 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001e26:	2386      	movs	r3, #134	; 0x86
 8001e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e32:	2303      	movs	r3, #3
 8001e34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e36:	230b      	movs	r3, #11
 8001e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3a:	f107 031c 	add.w	r3, r7, #28
 8001e3e:	4619      	mov	r1, r3
 8001e40:	483b      	ldr	r0, [pc, #236]	; (8001f30 <MX_GPIO_Init+0x228>)
 8001e42:	f000 fbfd 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001e46:	f244 0381 	movw	r3, #16513	; 0x4081
 8001e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e58:	f107 031c 	add.w	r3, r7, #28
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4832      	ldr	r0, [pc, #200]	; (8001f28 <MX_GPIO_Init+0x220>)
 8001e60:	f000 fbee 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001e64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e76:	230b      	movs	r3, #11
 8001e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001e7a:	f107 031c 	add.w	r3, r7, #28
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4829      	ldr	r0, [pc, #164]	; (8001f28 <MX_GPIO_Init+0x220>)
 8001e82:	f000 fbdd 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001e86:	2340      	movs	r3, #64	; 0x40
 8001e88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001e96:	f107 031c 	add.w	r3, r7, #28
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4823      	ldr	r0, [pc, #140]	; (8001f2c <MX_GPIO_Init+0x224>)
 8001e9e:	f000 fbcf 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	481d      	ldr	r0, [pc, #116]	; (8001f2c <MX_GPIO_Init+0x224>)
 8001eb6:	f000 fbc3 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001eba:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ecc:	230a      	movs	r3, #10
 8001ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed0:	f107 031c 	add.w	r3, r7, #28
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4816      	ldr	r0, [pc, #88]	; (8001f30 <MX_GPIO_Init+0x228>)
 8001ed8:	f000 fbb2 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001edc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001eea:	f107 031c 	add.w	r3, r7, #28
 8001eee:	4619      	mov	r1, r3
 8001ef0:	480f      	ldr	r0, [pc, #60]	; (8001f30 <MX_GPIO_Init+0x228>)
 8001ef2:	f000 fba5 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001ef6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f04:	2303      	movs	r3, #3
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f08:	230b      	movs	r3, #11
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f0c:	f107 031c 	add.w	r3, r7, #28
 8001f10:	4619      	mov	r1, r3
 8001f12:	4806      	ldr	r0, [pc, #24]	; (8001f2c <MX_GPIO_Init+0x224>)
 8001f14:	f000 fb94 	bl	8002640 <HAL_GPIO_Init>

}
 8001f18:	bf00      	nop
 8001f1a:	3730      	adds	r7, #48	; 0x30
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40020800 	.word	0x40020800
 8001f28:	40020400 	.word	0x40020400
 8001f2c:	40021800 	.word	0x40021800
 8001f30:	40020000 	.word	0x40020000

08001f34 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	f003 fe81 	bl	8005c44 <osDelay>
 8001f42:	e7fb      	b.n	8001f3c <StartDefaultTask+0x8>

08001f44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f54:	d101      	bne.n	8001f5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f56:	f000 f9df 	bl	8002318 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f66:	b672      	cpsid	i
}
 8001f68:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f6a:	e7fe      	b.n	8001f6a <Error_Handler+0x8>

08001f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <HAL_MspInit+0x4c>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	4a10      	ldr	r2, [pc, #64]	; (8001fb8 <HAL_MspInit+0x4c>)
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <HAL_MspInit+0x4c>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HAL_MspInit+0x4c>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <HAL_MspInit+0x4c>)
 8001f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f94:	6453      	str	r3, [r2, #68]	; 0x44
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <HAL_MspInit+0x4c>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	210f      	movs	r1, #15
 8001fa6:	f06f 0001 	mvn.w	r0, #1
 8001faa:	f000 fa8d 	bl	80024c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40023800 	.word	0x40023800

08001fbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b0b0      	sub	sp, #192	; 0xc0
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fd4:	f107 031c 	add.w	r3, r7, #28
 8001fd8:	2290      	movs	r2, #144	; 0x90
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f007 fa29 	bl	8009434 <memset>
  if(huart->Instance==UART4)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a5c      	ldr	r2, [pc, #368]	; (8002158 <HAL_UART_MspInit+0x19c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d166      	bne.n	80020ba <HAL_UART_MspInit+0xfe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001fec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ff0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ff6:	f107 031c 	add.w	r3, r7, #28
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f001 fa4c 	bl	8003498 <HAL_RCCEx_PeriphCLKConfig>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002006:	f7ff ffac 	bl	8001f62 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800200a:	4b54      	ldr	r3, [pc, #336]	; (800215c <HAL_UART_MspInit+0x1a0>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	4a53      	ldr	r2, [pc, #332]	; (800215c <HAL_UART_MspInit+0x1a0>)
 8002010:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002014:	6413      	str	r3, [r2, #64]	; 0x40
 8002016:	4b51      	ldr	r3, [pc, #324]	; (800215c <HAL_UART_MspInit+0x1a0>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800201e:	61bb      	str	r3, [r7, #24]
 8002020:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002022:	4b4e      	ldr	r3, [pc, #312]	; (800215c <HAL_UART_MspInit+0x1a0>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4a4d      	ldr	r2, [pc, #308]	; (800215c <HAL_UART_MspInit+0x1a0>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6313      	str	r3, [r2, #48]	; 0x30
 800202e:	4b4b      	ldr	r3, [pc, #300]	; (800215c <HAL_UART_MspInit+0x1a0>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800203a:	4b48      	ldr	r3, [pc, #288]	; (800215c <HAL_UART_MspInit+0x1a0>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	4a47      	ldr	r2, [pc, #284]	; (800215c <HAL_UART_MspInit+0x1a0>)
 8002040:	f043 0304 	orr.w	r3, r3, #4
 8002044:	6313      	str	r3, [r2, #48]	; 0x30
 8002046:	4b45      	ldr	r3, [pc, #276]	; (800215c <HAL_UART_MspInit+0x1a0>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002052:	2301      	movs	r3, #1
 8002054:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002064:	2303      	movs	r3, #3
 8002066:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800206a:	2308      	movs	r3, #8
 800206c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002070:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002074:	4619      	mov	r1, r3
 8002076:	483a      	ldr	r0, [pc, #232]	; (8002160 <HAL_UART_MspInit+0x1a4>)
 8002078:	f000 fae2 	bl	8002640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800207c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002080:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002084:	2302      	movs	r3, #2
 8002086:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002090:	2303      	movs	r3, #3
 8002092:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002096:	2308      	movs	r3, #8
 8002098:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80020a0:	4619      	mov	r1, r3
 80020a2:	4830      	ldr	r0, [pc, #192]	; (8002164 <HAL_UART_MspInit+0x1a8>)
 80020a4:	f000 facc 	bl	8002640 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80020a8:	2200      	movs	r2, #0
 80020aa:	2105      	movs	r1, #5
 80020ac:	2034      	movs	r0, #52	; 0x34
 80020ae:	f000 fa0b 	bl	80024c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80020b2:	2034      	movs	r0, #52	; 0x34
 80020b4:	f000 fa24 	bl	8002500 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020b8:	e049      	b.n	800214e <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART3)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a2a      	ldr	r2, [pc, #168]	; (8002168 <HAL_UART_MspInit+0x1ac>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d144      	bne.n	800214e <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020c8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80020ca:	2300      	movs	r3, #0
 80020cc:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ce:	f107 031c 	add.w	r3, r7, #28
 80020d2:	4618      	mov	r0, r3
 80020d4:	f001 f9e0 	bl	8003498 <HAL_RCCEx_PeriphCLKConfig>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_UART_MspInit+0x126>
      Error_Handler();
 80020de:	f7ff ff40 	bl	8001f62 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020e2:	4b1e      	ldr	r3, [pc, #120]	; (800215c <HAL_UART_MspInit+0x1a0>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	4a1d      	ldr	r2, [pc, #116]	; (800215c <HAL_UART_MspInit+0x1a0>)
 80020e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
 80020ee:	4b1b      	ldr	r3, [pc, #108]	; (800215c <HAL_UART_MspInit+0x1a0>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020fa:	4b18      	ldr	r3, [pc, #96]	; (800215c <HAL_UART_MspInit+0x1a0>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	4a17      	ldr	r2, [pc, #92]	; (800215c <HAL_UART_MspInit+0x1a0>)
 8002100:	f043 0308 	orr.w	r3, r3, #8
 8002104:	6313      	str	r3, [r2, #48]	; 0x30
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <HAL_UART_MspInit+0x1a0>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002112:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002116:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211a:	2302      	movs	r3, #2
 800211c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002126:	2303      	movs	r3, #3
 8002128:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800212c:	2307      	movs	r3, #7
 800212e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002132:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002136:	4619      	mov	r1, r3
 8002138:	480c      	ldr	r0, [pc, #48]	; (800216c <HAL_UART_MspInit+0x1b0>)
 800213a:	f000 fa81 	bl	8002640 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	2105      	movs	r1, #5
 8002142:	2027      	movs	r0, #39	; 0x27
 8002144:	f000 f9c0 	bl	80024c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002148:	2027      	movs	r0, #39	; 0x27
 800214a:	f000 f9d9 	bl	8002500 <HAL_NVIC_EnableIRQ>
}
 800214e:	bf00      	nop
 8002150:	37c0      	adds	r7, #192	; 0xc0
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40004c00 	.word	0x40004c00
 800215c:	40023800 	.word	0x40023800
 8002160:	40020000 	.word	0x40020000
 8002164:	40020800 	.word	0x40020800
 8002168:	40004800 	.word	0x40004800
 800216c:	40020c00 	.word	0x40020c00

08002170 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08c      	sub	sp, #48	; 0x30
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8002180:	2200      	movs	r2, #0
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	201c      	movs	r0, #28
 8002186:	f000 f99f 	bl	80024c8 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800218a:	201c      	movs	r0, #28
 800218c:	f000 f9b8 	bl	8002500 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002190:	4b20      	ldr	r3, [pc, #128]	; (8002214 <HAL_InitTick+0xa4>)
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	4a1f      	ldr	r2, [pc, #124]	; (8002214 <HAL_InitTick+0xa4>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	6413      	str	r3, [r2, #64]	; 0x40
 800219c:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <HAL_InitTick+0xa4>)
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021a8:	f107 0210 	add.w	r2, r7, #16
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	4611      	mov	r1, r2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f001 f93e 	bl	8003434 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80021b8:	f001 f914 	bl	80033e4 <HAL_RCC_GetPCLK1Freq>
 80021bc:	4603      	mov	r3, r0
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c4:	4a14      	ldr	r2, [pc, #80]	; (8002218 <HAL_InitTick+0xa8>)
 80021c6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ca:	0c9b      	lsrs	r3, r3, #18
 80021cc:	3b01      	subs	r3, #1
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80021d0:	4b12      	ldr	r3, [pc, #72]	; (800221c <HAL_InitTick+0xac>)
 80021d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021d6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80021d8:	4b10      	ldr	r3, [pc, #64]	; (800221c <HAL_InitTick+0xac>)
 80021da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021de:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80021e0:	4a0e      	ldr	r2, [pc, #56]	; (800221c <HAL_InitTick+0xac>)
 80021e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e4:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80021e6:	4b0d      	ldr	r3, [pc, #52]	; (800221c <HAL_InitTick+0xac>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_InitTick+0xac>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80021f2:	480a      	ldr	r0, [pc, #40]	; (800221c <HAL_InitTick+0xac>)
 80021f4:	f001 fd78 	bl	8003ce8 <HAL_TIM_Base_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d104      	bne.n	8002208 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80021fe:	4807      	ldr	r0, [pc, #28]	; (800221c <HAL_InitTick+0xac>)
 8002200:	f001 fdd4 	bl	8003dac <HAL_TIM_Base_Start_IT>
 8002204:	4603      	mov	r3, r0
 8002206:	e000      	b.n	800220a <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
}
 800220a:	4618      	mov	r0, r3
 800220c:	3730      	adds	r7, #48	; 0x30
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800
 8002218:	431bde83 	.word	0x431bde83
 800221c:	20000244 	.word	0x20000244

08002220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002224:	e7fe      	b.n	8002224 <NMI_Handler+0x4>

08002226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800222a:	e7fe      	b.n	800222a <HardFault_Handler+0x4>

0800222c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002230:	e7fe      	b.n	8002230 <MemManage_Handler+0x4>

08002232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002236:	e7fe      	b.n	8002236 <BusFault_Handler+0x4>

08002238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800223c:	e7fe      	b.n	800223c <UsageFault_Handler+0x4>

0800223e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002250:	4802      	ldr	r0, [pc, #8]	; (800225c <TIM2_IRQHandler+0x10>)
 8002252:	f001 fe23 	bl	8003e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000244 	.word	0x20000244

08002260 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002264:	4802      	ldr	r0, [pc, #8]	; (8002270 <USART3_IRQHandler+0x10>)
 8002266:	f002 f929 	bl	80044bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000120 	.word	0x20000120

08002274 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002278:	4802      	ldr	r0, [pc, #8]	; (8002284 <UART4_IRQHandler+0x10>)
 800227a:	f002 f91f 	bl	80044bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	2000009c 	.word	0x2000009c

08002288 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <SystemInit+0x20>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002292:	4a05      	ldr	r2, [pc, #20]	; (80022a8 <SystemInit+0x20>)
 8002294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002298:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022b0:	480d      	ldr	r0, [pc, #52]	; (80022e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022b2:	490e      	ldr	r1, [pc, #56]	; (80022ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022b4:	4a0e      	ldr	r2, [pc, #56]	; (80022f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022b8:	e002      	b.n	80022c0 <LoopCopyDataInit>

080022ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022be:	3304      	adds	r3, #4

080022c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022c4:	d3f9      	bcc.n	80022ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022c6:	4a0b      	ldr	r2, [pc, #44]	; (80022f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022c8:	4c0b      	ldr	r4, [pc, #44]	; (80022f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022cc:	e001      	b.n	80022d2 <LoopFillZerobss>

080022ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022d0:	3204      	adds	r2, #4

080022d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022d4:	d3fb      	bcc.n	80022ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022d6:	f7ff ffd7 	bl	8002288 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022da:	f007 f877 	bl	80093cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022de:	f7ff fbe3 	bl	8001aa8 <main>
  bx  lr    
 80022e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022e4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80022e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022ec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80022f0:	080097a4 	.word	0x080097a4
  ldr r2, =_sbss
 80022f4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80022f8:	20004ca4 	.word	0x20004ca4

080022fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022fc:	e7fe      	b.n	80022fc <ADC_IRQHandler>

080022fe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002302:	2003      	movs	r0, #3
 8002304:	f000 f8d5 	bl	80024b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002308:	200f      	movs	r0, #15
 800230a:	f7ff ff31 	bl	8002170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800230e:	f7ff fe2d 	bl	8001f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_IncTick+0x20>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_IncTick+0x24>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4413      	add	r3, r2
 8002328:	4a04      	ldr	r2, [pc, #16]	; (800233c <HAL_IncTick+0x24>)
 800232a:	6013      	str	r3, [r2, #0]
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20000008 	.word	0x20000008
 800233c:	20000290 	.word	0x20000290

08002340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return uwTick;
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <HAL_GetTick+0x14>)
 8002346:	681b      	ldr	r3, [r3, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000290 	.word	0x20000290

08002358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <__NVIC_SetPriorityGrouping+0x40>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002374:	4013      	ands	r3, r2
 8002376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <__NVIC_SetPriorityGrouping+0x44>)
 8002382:	4313      	orrs	r3, r2
 8002384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002386:	4a04      	ldr	r2, [pc, #16]	; (8002398 <__NVIC_SetPriorityGrouping+0x40>)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	60d3      	str	r3, [r2, #12]
}
 800238c:	bf00      	nop
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000ed00 	.word	0xe000ed00
 800239c:	05fa0000 	.word	0x05fa0000

080023a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a4:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <__NVIC_GetPriorityGrouping+0x18>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	0a1b      	lsrs	r3, r3, #8
 80023aa:	f003 0307 	and.w	r3, r3, #7
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	db0b      	blt.n	80023e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	f003 021f 	and.w	r2, r3, #31
 80023d4:	4907      	ldr	r1, [pc, #28]	; (80023f4 <__NVIC_EnableIRQ+0x38>)
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	2001      	movs	r0, #1
 80023de:	fa00 f202 	lsl.w	r2, r0, r2
 80023e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	e000e100 	.word	0xe000e100

080023f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	6039      	str	r1, [r7, #0]
 8002402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002408:	2b00      	cmp	r3, #0
 800240a:	db0a      	blt.n	8002422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	b2da      	uxtb	r2, r3
 8002410:	490c      	ldr	r1, [pc, #48]	; (8002444 <__NVIC_SetPriority+0x4c>)
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	0112      	lsls	r2, r2, #4
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	440b      	add	r3, r1
 800241c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002420:	e00a      	b.n	8002438 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4908      	ldr	r1, [pc, #32]	; (8002448 <__NVIC_SetPriority+0x50>)
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	3b04      	subs	r3, #4
 8002430:	0112      	lsls	r2, r2, #4
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	440b      	add	r3, r1
 8002436:	761a      	strb	r2, [r3, #24]
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	e000e100 	.word	0xe000e100
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800244c:	b480      	push	{r7}
 800244e:	b089      	sub	sp, #36	; 0x24
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f1c3 0307 	rsb	r3, r3, #7
 8002466:	2b04      	cmp	r3, #4
 8002468:	bf28      	it	cs
 800246a:	2304      	movcs	r3, #4
 800246c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3304      	adds	r3, #4
 8002472:	2b06      	cmp	r3, #6
 8002474:	d902      	bls.n	800247c <NVIC_EncodePriority+0x30>
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3b03      	subs	r3, #3
 800247a:	e000      	b.n	800247e <NVIC_EncodePriority+0x32>
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002480:	f04f 32ff 	mov.w	r2, #4294967295
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43da      	mvns	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	401a      	ands	r2, r3
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002494:	f04f 31ff 	mov.w	r1, #4294967295
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	fa01 f303 	lsl.w	r3, r1, r3
 800249e:	43d9      	mvns	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a4:	4313      	orrs	r3, r2
         );
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3724      	adds	r7, #36	; 0x24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff ff4c 	bl	8002358 <__NVIC_SetPriorityGrouping>
}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
 80024d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024da:	f7ff ff61 	bl	80023a0 <__NVIC_GetPriorityGrouping>
 80024de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	68b9      	ldr	r1, [r7, #8]
 80024e4:	6978      	ldr	r0, [r7, #20]
 80024e6:	f7ff ffb1 	bl	800244c <NVIC_EncodePriority>
 80024ea:	4602      	mov	r2, r0
 80024ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f0:	4611      	mov	r1, r2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff ff80 	bl	80023f8 <__NVIC_SetPriority>
}
 80024f8:	bf00      	nop
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff ff54 	bl	80023bc <__NVIC_EnableIRQ>
}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002528:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800252a:	f7ff ff09 	bl	8002340 <HAL_GetTick>
 800252e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d008      	beq.n	800254e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2280      	movs	r2, #128	; 0x80
 8002540:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e052      	b.n	80025f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0216 	bic.w	r2, r2, #22
 800255c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695a      	ldr	r2, [r3, #20]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800256c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	2b00      	cmp	r3, #0
 8002574:	d103      	bne.n	800257e <HAL_DMA_Abort+0x62>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800257a:	2b00      	cmp	r3, #0
 800257c:	d007      	beq.n	800258e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0208 	bic.w	r2, r2, #8
 800258c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0201 	bic.w	r2, r2, #1
 800259c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800259e:	e013      	b.n	80025c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025a0:	f7ff fece 	bl	8002340 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b05      	cmp	r3, #5
 80025ac:	d90c      	bls.n	80025c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2220      	movs	r2, #32
 80025b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2203      	movs	r2, #3
 80025b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e015      	b.n	80025f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1e4      	bne.n	80025a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025da:	223f      	movs	r2, #63	; 0x3f
 80025dc:	409a      	lsls	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d004      	beq.n	800261a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2280      	movs	r2, #128	; 0x80
 8002614:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e00c      	b.n	8002634 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2205      	movs	r2, #5
 800261e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0201 	bic.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002640:	b480      	push	{r7}
 8002642:	b089      	sub	sp, #36	; 0x24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	e175      	b.n	800294c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002660:	2201      	movs	r2, #1
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	429a      	cmp	r2, r3
 800267a:	f040 8164 	bne.w	8002946 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b01      	cmp	r3, #1
 8002688:	d005      	beq.n	8002696 <HAL_GPIO_Init+0x56>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d130      	bne.n	80026f8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	2203      	movs	r2, #3
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026cc:	2201      	movs	r2, #1
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	f003 0201 	and.w	r2, r3, #1
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	2b03      	cmp	r3, #3
 8002702:	d017      	beq.n	8002734 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	2203      	movs	r2, #3
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d123      	bne.n	8002788 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	08da      	lsrs	r2, r3, #3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3208      	adds	r2, #8
 8002748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800274c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	220f      	movs	r2, #15
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	08da      	lsrs	r2, r3, #3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3208      	adds	r2, #8
 8002782:	69b9      	ldr	r1, [r7, #24]
 8002784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	2203      	movs	r2, #3
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 0203 	and.w	r2, r3, #3
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 80be 	beq.w	8002946 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ca:	4b66      	ldr	r3, [pc, #408]	; (8002964 <HAL_GPIO_Init+0x324>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	4a65      	ldr	r2, [pc, #404]	; (8002964 <HAL_GPIO_Init+0x324>)
 80027d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027d4:	6453      	str	r3, [r2, #68]	; 0x44
 80027d6:	4b63      	ldr	r3, [pc, #396]	; (8002964 <HAL_GPIO_Init+0x324>)
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80027e2:	4a61      	ldr	r2, [pc, #388]	; (8002968 <HAL_GPIO_Init+0x328>)
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	089b      	lsrs	r3, r3, #2
 80027e8:	3302      	adds	r3, #2
 80027ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	220f      	movs	r2, #15
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43db      	mvns	r3, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4013      	ands	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a58      	ldr	r2, [pc, #352]	; (800296c <HAL_GPIO_Init+0x32c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d037      	beq.n	800287e <HAL_GPIO_Init+0x23e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a57      	ldr	r2, [pc, #348]	; (8002970 <HAL_GPIO_Init+0x330>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d031      	beq.n	800287a <HAL_GPIO_Init+0x23a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a56      	ldr	r2, [pc, #344]	; (8002974 <HAL_GPIO_Init+0x334>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d02b      	beq.n	8002876 <HAL_GPIO_Init+0x236>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a55      	ldr	r2, [pc, #340]	; (8002978 <HAL_GPIO_Init+0x338>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d025      	beq.n	8002872 <HAL_GPIO_Init+0x232>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a54      	ldr	r2, [pc, #336]	; (800297c <HAL_GPIO_Init+0x33c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d01f      	beq.n	800286e <HAL_GPIO_Init+0x22e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a53      	ldr	r2, [pc, #332]	; (8002980 <HAL_GPIO_Init+0x340>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d019      	beq.n	800286a <HAL_GPIO_Init+0x22a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a52      	ldr	r2, [pc, #328]	; (8002984 <HAL_GPIO_Init+0x344>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d013      	beq.n	8002866 <HAL_GPIO_Init+0x226>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a51      	ldr	r2, [pc, #324]	; (8002988 <HAL_GPIO_Init+0x348>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00d      	beq.n	8002862 <HAL_GPIO_Init+0x222>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a50      	ldr	r2, [pc, #320]	; (800298c <HAL_GPIO_Init+0x34c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d007      	beq.n	800285e <HAL_GPIO_Init+0x21e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a4f      	ldr	r2, [pc, #316]	; (8002990 <HAL_GPIO_Init+0x350>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d101      	bne.n	800285a <HAL_GPIO_Init+0x21a>
 8002856:	2309      	movs	r3, #9
 8002858:	e012      	b.n	8002880 <HAL_GPIO_Init+0x240>
 800285a:	230a      	movs	r3, #10
 800285c:	e010      	b.n	8002880 <HAL_GPIO_Init+0x240>
 800285e:	2308      	movs	r3, #8
 8002860:	e00e      	b.n	8002880 <HAL_GPIO_Init+0x240>
 8002862:	2307      	movs	r3, #7
 8002864:	e00c      	b.n	8002880 <HAL_GPIO_Init+0x240>
 8002866:	2306      	movs	r3, #6
 8002868:	e00a      	b.n	8002880 <HAL_GPIO_Init+0x240>
 800286a:	2305      	movs	r3, #5
 800286c:	e008      	b.n	8002880 <HAL_GPIO_Init+0x240>
 800286e:	2304      	movs	r3, #4
 8002870:	e006      	b.n	8002880 <HAL_GPIO_Init+0x240>
 8002872:	2303      	movs	r3, #3
 8002874:	e004      	b.n	8002880 <HAL_GPIO_Init+0x240>
 8002876:	2302      	movs	r3, #2
 8002878:	e002      	b.n	8002880 <HAL_GPIO_Init+0x240>
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <HAL_GPIO_Init+0x240>
 800287e:	2300      	movs	r3, #0
 8002880:	69fa      	ldr	r2, [r7, #28]
 8002882:	f002 0203 	and.w	r2, r2, #3
 8002886:	0092      	lsls	r2, r2, #2
 8002888:	4093      	lsls	r3, r2
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4313      	orrs	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002890:	4935      	ldr	r1, [pc, #212]	; (8002968 <HAL_GPIO_Init+0x328>)
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	089b      	lsrs	r3, r3, #2
 8002896:	3302      	adds	r3, #2
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800289e:	4b3d      	ldr	r3, [pc, #244]	; (8002994 <HAL_GPIO_Init+0x354>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	43db      	mvns	r3, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4013      	ands	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028c2:	4a34      	ldr	r2, [pc, #208]	; (8002994 <HAL_GPIO_Init+0x354>)
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028c8:	4b32      	ldr	r3, [pc, #200]	; (8002994 <HAL_GPIO_Init+0x354>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028ec:	4a29      	ldr	r2, [pc, #164]	; (8002994 <HAL_GPIO_Init+0x354>)
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028f2:	4b28      	ldr	r3, [pc, #160]	; (8002994 <HAL_GPIO_Init+0x354>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002916:	4a1f      	ldr	r2, [pc, #124]	; (8002994 <HAL_GPIO_Init+0x354>)
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800291c:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <HAL_GPIO_Init+0x354>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002940:	4a14      	ldr	r2, [pc, #80]	; (8002994 <HAL_GPIO_Init+0x354>)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	3301      	adds	r3, #1
 800294a:	61fb      	str	r3, [r7, #28]
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	2b0f      	cmp	r3, #15
 8002950:	f67f ae86 	bls.w	8002660 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002954:	bf00      	nop
 8002956:	bf00      	nop
 8002958:	3724      	adds	r7, #36	; 0x24
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40023800 	.word	0x40023800
 8002968:	40013800 	.word	0x40013800
 800296c:	40020000 	.word	0x40020000
 8002970:	40020400 	.word	0x40020400
 8002974:	40020800 	.word	0x40020800
 8002978:	40020c00 	.word	0x40020c00
 800297c:	40021000 	.word	0x40021000
 8002980:	40021400 	.word	0x40021400
 8002984:	40021800 	.word	0x40021800
 8002988:	40021c00 	.word	0x40021c00
 800298c:	40022000 	.word	0x40022000
 8002990:	40022400 	.word	0x40022400
 8002994:	40013c00 	.word	0x40013c00

08002998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	807b      	strh	r3, [r7, #2]
 80029a4:	4613      	mov	r3, r2
 80029a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029a8:	787b      	ldrb	r3, [r7, #1]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ae:	887a      	ldrh	r2, [r7, #2]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80029b4:	e003      	b.n	80029be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80029b6:	887b      	ldrh	r3, [r7, #2]
 80029b8:	041a      	lsls	r2, r3, #16
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	619a      	str	r2, [r3, #24]
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a04      	ldr	r2, [pc, #16]	; (80029e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029da:	6013      	str	r3, [r2, #0]
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40007000 	.word	0x40007000

080029ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80029f6:	4b23      	ldr	r3, [pc, #140]	; (8002a84 <HAL_PWREx_EnableOverDrive+0x98>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	4a22      	ldr	r2, [pc, #136]	; (8002a84 <HAL_PWREx_EnableOverDrive+0x98>)
 80029fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a00:	6413      	str	r3, [r2, #64]	; 0x40
 8002a02:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a0e:	4b1e      	ldr	r3, [pc, #120]	; (8002a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a1d      	ldr	r2, [pc, #116]	; (8002a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a18:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a1a:	f7ff fc91 	bl	8002340 <HAL_GetTick>
 8002a1e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a20:	e009      	b.n	8002a36 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a22:	f7ff fc8d 	bl	8002340 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a30:	d901      	bls.n	8002a36 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e022      	b.n	8002a7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a36:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a42:	d1ee      	bne.n	8002a22 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a44:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a0f      	ldr	r2, [pc, #60]	; (8002a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a50:	f7ff fc76 	bl	8002340 <HAL_GetTick>
 8002a54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a56:	e009      	b.n	8002a6c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a58:	f7ff fc72 	bl	8002340 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a66:	d901      	bls.n	8002a6c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e007      	b.n	8002a7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a78:	d1ee      	bne.n	8002a58 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40023800 	.word	0x40023800
 8002a88:	40007000 	.word	0x40007000

08002a8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a94:	2300      	movs	r3, #0
 8002a96:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e29b      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 8087 	beq.w	8002bbe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ab0:	4b96      	ldr	r3, [pc, #600]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 030c 	and.w	r3, r3, #12
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d00c      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002abc:	4b93      	ldr	r3, [pc, #588]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 030c 	and.w	r3, r3, #12
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d112      	bne.n	8002aee <HAL_RCC_OscConfig+0x62>
 8002ac8:	4b90      	ldr	r3, [pc, #576]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ad4:	d10b      	bne.n	8002aee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad6:	4b8d      	ldr	r3, [pc, #564]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d06c      	beq.n	8002bbc <HAL_RCC_OscConfig+0x130>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d168      	bne.n	8002bbc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e275      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af6:	d106      	bne.n	8002b06 <HAL_RCC_OscConfig+0x7a>
 8002af8:	4b84      	ldr	r3, [pc, #528]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a83      	ldr	r2, [pc, #524]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	e02e      	b.n	8002b64 <HAL_RCC_OscConfig+0xd8>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10c      	bne.n	8002b28 <HAL_RCC_OscConfig+0x9c>
 8002b0e:	4b7f      	ldr	r3, [pc, #508]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a7e      	ldr	r2, [pc, #504]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	4b7c      	ldr	r3, [pc, #496]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a7b      	ldr	r2, [pc, #492]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002b20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	e01d      	b.n	8002b64 <HAL_RCC_OscConfig+0xd8>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b30:	d10c      	bne.n	8002b4c <HAL_RCC_OscConfig+0xc0>
 8002b32:	4b76      	ldr	r3, [pc, #472]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a75      	ldr	r2, [pc, #468]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002b38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	4b73      	ldr	r3, [pc, #460]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a72      	ldr	r2, [pc, #456]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	e00b      	b.n	8002b64 <HAL_RCC_OscConfig+0xd8>
 8002b4c:	4b6f      	ldr	r3, [pc, #444]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a6e      	ldr	r2, [pc, #440]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b56:	6013      	str	r3, [r2, #0]
 8002b58:	4b6c      	ldr	r3, [pc, #432]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a6b      	ldr	r2, [pc, #428]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d013      	beq.n	8002b94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7ff fbe8 	bl	8002340 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b74:	f7ff fbe4 	bl	8002340 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b64      	cmp	r3, #100	; 0x64
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e229      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b86:	4b61      	ldr	r3, [pc, #388]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0xe8>
 8002b92:	e014      	b.n	8002bbe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b94:	f7ff fbd4 	bl	8002340 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b9c:	f7ff fbd0 	bl	8002340 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b64      	cmp	r3, #100	; 0x64
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e215      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bae:	4b57      	ldr	r3, [pc, #348]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0x110>
 8002bba:	e000      	b.n	8002bbe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d069      	beq.n	8002c9e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bca:	4b50      	ldr	r3, [pc, #320]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00b      	beq.n	8002bee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bd6:	4b4d      	ldr	r3, [pc, #308]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 030c 	and.w	r3, r3, #12
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d11c      	bne.n	8002c1c <HAL_RCC_OscConfig+0x190>
 8002be2:	4b4a      	ldr	r3, [pc, #296]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d116      	bne.n	8002c1c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bee:	4b47      	ldr	r3, [pc, #284]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d005      	beq.n	8002c06 <HAL_RCC_OscConfig+0x17a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d001      	beq.n	8002c06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e1e9      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c06:	4b41      	ldr	r3, [pc, #260]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	493d      	ldr	r1, [pc, #244]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c1a:	e040      	b.n	8002c9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d023      	beq.n	8002c6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c24:	4b39      	ldr	r3, [pc, #228]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a38      	ldr	r2, [pc, #224]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7ff fb86 	bl	8002340 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c38:	f7ff fb82 	bl	8002340 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e1c7      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4a:	4b30      	ldr	r3, [pc, #192]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c56:	4b2d      	ldr	r3, [pc, #180]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4929      	ldr	r1, [pc, #164]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	600b      	str	r3, [r1, #0]
 8002c6a:	e018      	b.n	8002c9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c6c:	4b27      	ldr	r3, [pc, #156]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a26      	ldr	r2, [pc, #152]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002c72:	f023 0301 	bic.w	r3, r3, #1
 8002c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c78:	f7ff fb62 	bl	8002340 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c80:	f7ff fb5e 	bl	8002340 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e1a3      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c92:	4b1e      	ldr	r3, [pc, #120]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d038      	beq.n	8002d1c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d019      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cb2:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb6:	4a15      	ldr	r2, [pc, #84]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbe:	f7ff fb3f 	bl	8002340 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc6:	f7ff fb3b 	bl	8002340 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e180      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0f0      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x23a>
 8002ce4:	e01a      	b.n	8002d1c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ce6:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cea:	4a08      	ldr	r2, [pc, #32]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002cec:	f023 0301 	bic.w	r3, r3, #1
 8002cf0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf2:	f7ff fb25 	bl	8002340 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf8:	e00a      	b.n	8002d10 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cfa:	f7ff fb21 	bl	8002340 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d903      	bls.n	8002d10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e166      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
 8002d0c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d10:	4b92      	ldr	r3, [pc, #584]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1ee      	bne.n	8002cfa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 80a4 	beq.w	8002e72 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d2a:	4b8c      	ldr	r3, [pc, #560]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10d      	bne.n	8002d52 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d36:	4b89      	ldr	r3, [pc, #548]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	4a88      	ldr	r2, [pc, #544]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
 8002d42:	4b86      	ldr	r3, [pc, #536]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	60bb      	str	r3, [r7, #8]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d52:	4b83      	ldr	r3, [pc, #524]	; (8002f60 <HAL_RCC_OscConfig+0x4d4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d118      	bne.n	8002d90 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d5e:	4b80      	ldr	r3, [pc, #512]	; (8002f60 <HAL_RCC_OscConfig+0x4d4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a7f      	ldr	r2, [pc, #508]	; (8002f60 <HAL_RCC_OscConfig+0x4d4>)
 8002d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d6a:	f7ff fae9 	bl	8002340 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d72:	f7ff fae5 	bl	8002340 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b64      	cmp	r3, #100	; 0x64
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e12a      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d84:	4b76      	ldr	r3, [pc, #472]	; (8002f60 <HAL_RCC_OscConfig+0x4d4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0f0      	beq.n	8002d72 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d106      	bne.n	8002da6 <HAL_RCC_OscConfig+0x31a>
 8002d98:	4b70      	ldr	r3, [pc, #448]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9c:	4a6f      	ldr	r2, [pc, #444]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	6713      	str	r3, [r2, #112]	; 0x70
 8002da4:	e02d      	b.n	8002e02 <HAL_RCC_OscConfig+0x376>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10c      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x33c>
 8002dae:	4b6b      	ldr	r3, [pc, #428]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db2:	4a6a      	ldr	r2, [pc, #424]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002db4:	f023 0301 	bic.w	r3, r3, #1
 8002db8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dba:	4b68      	ldr	r3, [pc, #416]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbe:	4a67      	ldr	r2, [pc, #412]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002dc0:	f023 0304 	bic.w	r3, r3, #4
 8002dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc6:	e01c      	b.n	8002e02 <HAL_RCC_OscConfig+0x376>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	2b05      	cmp	r3, #5
 8002dce:	d10c      	bne.n	8002dea <HAL_RCC_OscConfig+0x35e>
 8002dd0:	4b62      	ldr	r3, [pc, #392]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd4:	4a61      	ldr	r2, [pc, #388]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002dd6:	f043 0304 	orr.w	r3, r3, #4
 8002dda:	6713      	str	r3, [r2, #112]	; 0x70
 8002ddc:	4b5f      	ldr	r3, [pc, #380]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de0:	4a5e      	ldr	r2, [pc, #376]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	6713      	str	r3, [r2, #112]	; 0x70
 8002de8:	e00b      	b.n	8002e02 <HAL_RCC_OscConfig+0x376>
 8002dea:	4b5c      	ldr	r3, [pc, #368]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	4a5b      	ldr	r2, [pc, #364]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002df0:	f023 0301 	bic.w	r3, r3, #1
 8002df4:	6713      	str	r3, [r2, #112]	; 0x70
 8002df6:	4b59      	ldr	r3, [pc, #356]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfa:	4a58      	ldr	r2, [pc, #352]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002dfc:	f023 0304 	bic.w	r3, r3, #4
 8002e00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d015      	beq.n	8002e36 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0a:	f7ff fa99 	bl	8002340 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e10:	e00a      	b.n	8002e28 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e12:	f7ff fa95 	bl	8002340 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e0d8      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e28:	4b4c      	ldr	r3, [pc, #304]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0ee      	beq.n	8002e12 <HAL_RCC_OscConfig+0x386>
 8002e34:	e014      	b.n	8002e60 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e36:	f7ff fa83 	bl	8002340 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e3c:	e00a      	b.n	8002e54 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e3e:	f7ff fa7f 	bl	8002340 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e0c2      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e54:	4b41      	ldr	r3, [pc, #260]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1ee      	bne.n	8002e3e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e60:	7dfb      	ldrb	r3, [r7, #23]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d105      	bne.n	8002e72 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e66:	4b3d      	ldr	r3, [pc, #244]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	4a3c      	ldr	r2, [pc, #240]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 80ae 	beq.w	8002fd8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e7c:	4b37      	ldr	r3, [pc, #220]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 030c 	and.w	r3, r3, #12
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d06d      	beq.n	8002f64 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d14b      	bne.n	8002f28 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e90:	4b32      	ldr	r3, [pc, #200]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a31      	ldr	r2, [pc, #196]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002e96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9c:	f7ff fa50 	bl	8002340 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea4:	f7ff fa4c 	bl	8002340 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e091      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb6:	4b29      	ldr	r3, [pc, #164]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f0      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69da      	ldr	r2, [r3, #28]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	019b      	lsls	r3, r3, #6
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	085b      	lsrs	r3, r3, #1
 8002eda:	3b01      	subs	r3, #1
 8002edc:	041b      	lsls	r3, r3, #16
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	061b      	lsls	r3, r3, #24
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	071b      	lsls	r3, r3, #28
 8002eee:	491b      	ldr	r1, [pc, #108]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ef4:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a18      	ldr	r2, [pc, #96]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7ff fa1e 	bl	8002340 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f08:	f7ff fa1a 	bl	8002340 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e05f      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1a:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x47c>
 8002f26:	e057      	b.n	8002fd8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f28:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a0b      	ldr	r2, [pc, #44]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002f2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f34:	f7ff fa04 	bl	8002340 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3c:	f7ff fa00 	bl	8002340 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e045      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4e:	4b03      	ldr	r3, [pc, #12]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x4b0>
 8002f5a:	e03d      	b.n	8002fd8 <HAL_RCC_OscConfig+0x54c>
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f64:	4b1f      	ldr	r3, [pc, #124]	; (8002fe4 <HAL_RCC_OscConfig+0x558>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d030      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d129      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d122      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f94:	4013      	ands	r3, r2
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f9a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d119      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002faa:	085b      	lsrs	r3, r3, #1
 8002fac:	3b01      	subs	r3, #1
 8002fae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d10f      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d107      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e000      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40023800 	.word	0x40023800

08002fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0d0      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003000:	4b6a      	ldr	r3, [pc, #424]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d910      	bls.n	8003030 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300e:	4b67      	ldr	r3, [pc, #412]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 020f 	bic.w	r2, r3, #15
 8003016:	4965      	ldr	r1, [pc, #404]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	4313      	orrs	r3, r2
 800301c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800301e:	4b63      	ldr	r3, [pc, #396]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d001      	beq.n	8003030 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e0b8      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d020      	beq.n	800307e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003048:	4b59      	ldr	r3, [pc, #356]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	4a58      	ldr	r2, [pc, #352]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 800304e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003052:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003060:	4b53      	ldr	r3, [pc, #332]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	4a52      	ldr	r2, [pc, #328]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003066:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800306a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800306c:	4b50      	ldr	r3, [pc, #320]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	494d      	ldr	r1, [pc, #308]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d040      	beq.n	800310c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d107      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003092:	4b47      	ldr	r3, [pc, #284]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d115      	bne.n	80030ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e07f      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d107      	bne.n	80030ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030aa:	4b41      	ldr	r3, [pc, #260]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d109      	bne.n	80030ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e073      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ba:	4b3d      	ldr	r3, [pc, #244]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e06b      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ca:	4b39      	ldr	r3, [pc, #228]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f023 0203 	bic.w	r2, r3, #3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4936      	ldr	r1, [pc, #216]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030dc:	f7ff f930 	bl	8002340 <HAL_GetTick>
 80030e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e2:	e00a      	b.n	80030fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e4:	f7ff f92c 	bl	8002340 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e053      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fa:	4b2d      	ldr	r3, [pc, #180]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 020c 	and.w	r2, r3, #12
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	429a      	cmp	r2, r3
 800310a:	d1eb      	bne.n	80030e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800310c:	4b27      	ldr	r3, [pc, #156]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 030f 	and.w	r3, r3, #15
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d210      	bcs.n	800313c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311a:	4b24      	ldr	r3, [pc, #144]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 020f 	bic.w	r2, r3, #15
 8003122:	4922      	ldr	r1, [pc, #136]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	4313      	orrs	r3, r2
 8003128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800312a:	4b20      	ldr	r3, [pc, #128]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d001      	beq.n	800313c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e032      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003148:	4b19      	ldr	r3, [pc, #100]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	4916      	ldr	r1, [pc, #88]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003156:	4313      	orrs	r3, r2
 8003158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d009      	beq.n	800317a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003166:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	490e      	ldr	r1, [pc, #56]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003176:	4313      	orrs	r3, r2
 8003178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800317a:	f000 f821 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 800317e:	4602      	mov	r2, r0
 8003180:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	091b      	lsrs	r3, r3, #4
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	490a      	ldr	r1, [pc, #40]	; (80031b4 <HAL_RCC_ClockConfig+0x1cc>)
 800318c:	5ccb      	ldrb	r3, [r1, r3]
 800318e:	fa22 f303 	lsr.w	r3, r2, r3
 8003192:	4a09      	ldr	r2, [pc, #36]	; (80031b8 <HAL_RCC_ClockConfig+0x1d0>)
 8003194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003196:	4b09      	ldr	r3, [pc, #36]	; (80031bc <HAL_RCC_ClockConfig+0x1d4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f7fe ffe8 	bl	8002170 <HAL_InitTick>

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40023c00 	.word	0x40023c00
 80031b0:	40023800 	.word	0x40023800
 80031b4:	0800971c 	.word	0x0800971c
 80031b8:	20000000 	.word	0x20000000
 80031bc:	20000004 	.word	0x20000004

080031c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031c4:	b094      	sub	sp, #80	; 0x50
 80031c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80031c8:	2300      	movs	r3, #0
 80031ca:	647b      	str	r3, [r7, #68]	; 0x44
 80031cc:	2300      	movs	r3, #0
 80031ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031d0:	2300      	movs	r3, #0
 80031d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031d8:	4b79      	ldr	r3, [pc, #484]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 030c 	and.w	r3, r3, #12
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d00d      	beq.n	8003200 <HAL_RCC_GetSysClockFreq+0x40>
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	f200 80e1 	bhi.w	80033ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <HAL_RCC_GetSysClockFreq+0x34>
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d003      	beq.n	80031fa <HAL_RCC_GetSysClockFreq+0x3a>
 80031f2:	e0db      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031f4:	4b73      	ldr	r3, [pc, #460]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80031f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031f8:	e0db      	b.n	80033b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031fa:	4b73      	ldr	r3, [pc, #460]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80031fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031fe:	e0d8      	b.n	80033b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003200:	4b6f      	ldr	r3, [pc, #444]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003208:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800320a:	4b6d      	ldr	r3, [pc, #436]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d063      	beq.n	80032de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003216:	4b6a      	ldr	r3, [pc, #424]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	099b      	lsrs	r3, r3, #6
 800321c:	2200      	movs	r2, #0
 800321e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003220:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003228:	633b      	str	r3, [r7, #48]	; 0x30
 800322a:	2300      	movs	r3, #0
 800322c:	637b      	str	r3, [r7, #52]	; 0x34
 800322e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003232:	4622      	mov	r2, r4
 8003234:	462b      	mov	r3, r5
 8003236:	f04f 0000 	mov.w	r0, #0
 800323a:	f04f 0100 	mov.w	r1, #0
 800323e:	0159      	lsls	r1, r3, #5
 8003240:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003244:	0150      	lsls	r0, r2, #5
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4621      	mov	r1, r4
 800324c:	1a51      	subs	r1, r2, r1
 800324e:	6139      	str	r1, [r7, #16]
 8003250:	4629      	mov	r1, r5
 8003252:	eb63 0301 	sbc.w	r3, r3, r1
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003264:	4659      	mov	r1, fp
 8003266:	018b      	lsls	r3, r1, #6
 8003268:	4651      	mov	r1, sl
 800326a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800326e:	4651      	mov	r1, sl
 8003270:	018a      	lsls	r2, r1, #6
 8003272:	4651      	mov	r1, sl
 8003274:	ebb2 0801 	subs.w	r8, r2, r1
 8003278:	4659      	mov	r1, fp
 800327a:	eb63 0901 	sbc.w	r9, r3, r1
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800328a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800328e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003292:	4690      	mov	r8, r2
 8003294:	4699      	mov	r9, r3
 8003296:	4623      	mov	r3, r4
 8003298:	eb18 0303 	adds.w	r3, r8, r3
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	462b      	mov	r3, r5
 80032a0:	eb49 0303 	adc.w	r3, r9, r3
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032b2:	4629      	mov	r1, r5
 80032b4:	024b      	lsls	r3, r1, #9
 80032b6:	4621      	mov	r1, r4
 80032b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032bc:	4621      	mov	r1, r4
 80032be:	024a      	lsls	r2, r1, #9
 80032c0:	4610      	mov	r0, r2
 80032c2:	4619      	mov	r1, r3
 80032c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032c6:	2200      	movs	r2, #0
 80032c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032d0:	f7fc ffb6 	bl	8000240 <__aeabi_uldivmod>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4613      	mov	r3, r2
 80032da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032dc:	e058      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032de:	4b38      	ldr	r3, [pc, #224]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	099b      	lsrs	r3, r3, #6
 80032e4:	2200      	movs	r2, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	4611      	mov	r1, r2
 80032ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032ee:	623b      	str	r3, [r7, #32]
 80032f0:	2300      	movs	r3, #0
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24
 80032f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032f8:	4642      	mov	r2, r8
 80032fa:	464b      	mov	r3, r9
 80032fc:	f04f 0000 	mov.w	r0, #0
 8003300:	f04f 0100 	mov.w	r1, #0
 8003304:	0159      	lsls	r1, r3, #5
 8003306:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800330a:	0150      	lsls	r0, r2, #5
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4641      	mov	r1, r8
 8003312:	ebb2 0a01 	subs.w	sl, r2, r1
 8003316:	4649      	mov	r1, r9
 8003318:	eb63 0b01 	sbc.w	fp, r3, r1
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003328:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800332c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003330:	ebb2 040a 	subs.w	r4, r2, sl
 8003334:	eb63 050b 	sbc.w	r5, r3, fp
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	00eb      	lsls	r3, r5, #3
 8003342:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003346:	00e2      	lsls	r2, r4, #3
 8003348:	4614      	mov	r4, r2
 800334a:	461d      	mov	r5, r3
 800334c:	4643      	mov	r3, r8
 800334e:	18e3      	adds	r3, r4, r3
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	464b      	mov	r3, r9
 8003354:	eb45 0303 	adc.w	r3, r5, r3
 8003358:	607b      	str	r3, [r7, #4]
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003366:	4629      	mov	r1, r5
 8003368:	028b      	lsls	r3, r1, #10
 800336a:	4621      	mov	r1, r4
 800336c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003370:	4621      	mov	r1, r4
 8003372:	028a      	lsls	r2, r1, #10
 8003374:	4610      	mov	r0, r2
 8003376:	4619      	mov	r1, r3
 8003378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800337a:	2200      	movs	r2, #0
 800337c:	61bb      	str	r3, [r7, #24]
 800337e:	61fa      	str	r2, [r7, #28]
 8003380:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003384:	f7fc ff5c 	bl	8000240 <__aeabi_uldivmod>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	4613      	mov	r3, r2
 800338e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	0c1b      	lsrs	r3, r3, #16
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	3301      	adds	r3, #1
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80033a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033aa:	e002      	b.n	80033b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033ac:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80033ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3750      	adds	r7, #80	; 0x50
 80033b8:	46bd      	mov	sp, r7
 80033ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800
 80033c4:	00f42400 	.word	0x00f42400
 80033c8:	007a1200 	.word	0x007a1200

080033cc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033d0:	4b03      	ldr	r3, [pc, #12]	; (80033e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033d2:	681b      	ldr	r3, [r3, #0]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	20000000 	.word	0x20000000

080033e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033e8:	f7ff fff0 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 80033ec:	4602      	mov	r2, r0
 80033ee:	4b05      	ldr	r3, [pc, #20]	; (8003404 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	0a9b      	lsrs	r3, r3, #10
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	4903      	ldr	r1, [pc, #12]	; (8003408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033fa:	5ccb      	ldrb	r3, [r1, r3]
 80033fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003400:	4618      	mov	r0, r3
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40023800 	.word	0x40023800
 8003408:	0800972c 	.word	0x0800972c

0800340c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003410:	f7ff ffdc 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 8003414:	4602      	mov	r2, r0
 8003416:	4b05      	ldr	r3, [pc, #20]	; (800342c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	0b5b      	lsrs	r3, r3, #13
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	4903      	ldr	r1, [pc, #12]	; (8003430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003422:	5ccb      	ldrb	r3, [r1, r3]
 8003424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003428:	4618      	mov	r0, r3
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40023800 	.word	0x40023800
 8003430:	0800972c 	.word	0x0800972c

08003434 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	220f      	movs	r2, #15
 8003442:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003444:	4b12      	ldr	r3, [pc, #72]	; (8003490 <HAL_RCC_GetClockConfig+0x5c>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 0203 	and.w	r2, r3, #3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003450:	4b0f      	ldr	r3, [pc, #60]	; (8003490 <HAL_RCC_GetClockConfig+0x5c>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800345c:	4b0c      	ldr	r3, [pc, #48]	; (8003490 <HAL_RCC_GetClockConfig+0x5c>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003468:	4b09      	ldr	r3, [pc, #36]	; (8003490 <HAL_RCC_GetClockConfig+0x5c>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	08db      	lsrs	r3, r3, #3
 800346e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003476:	4b07      	ldr	r3, [pc, #28]	; (8003494 <HAL_RCC_GetClockConfig+0x60>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 020f 	and.w	r2, r3, #15
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	601a      	str	r2, [r3, #0]
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40023800 	.word	0x40023800
 8003494:	40023c00 	.word	0x40023c00

08003498 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80034a4:	2300      	movs	r3, #0
 80034a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d012      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034c0:	4b69      	ldr	r3, [pc, #420]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	4a68      	ldr	r2, [pc, #416]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80034ca:	6093      	str	r3, [r2, #8]
 80034cc:	4b66      	ldr	r3, [pc, #408]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d4:	4964      	ldr	r1, [pc, #400]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80034e2:	2301      	movs	r3, #1
 80034e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d017      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034f2:	4b5d      	ldr	r3, [pc, #372]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003500:	4959      	ldr	r1, [pc, #356]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003502:	4313      	orrs	r3, r2
 8003504:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003510:	d101      	bne.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003512:	2301      	movs	r3, #1
 8003514:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800351e:	2301      	movs	r3, #1
 8003520:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d017      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800352e:	4b4e      	ldr	r3, [pc, #312]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003534:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	494a      	ldr	r1, [pc, #296]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800354c:	d101      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800354e:	2301      	movs	r3, #1
 8003550:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800355a:	2301      	movs	r3, #1
 800355c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800356a:	2301      	movs	r3, #1
 800356c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 808b 	beq.w	8003692 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800357c:	4b3a      	ldr	r3, [pc, #232]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	4a39      	ldr	r2, [pc, #228]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003586:	6413      	str	r3, [r2, #64]	; 0x40
 8003588:	4b37      	ldr	r3, [pc, #220]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003594:	4b35      	ldr	r3, [pc, #212]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a34      	ldr	r2, [pc, #208]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800359a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800359e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035a0:	f7fe fece 	bl	8002340 <HAL_GetTick>
 80035a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a8:	f7fe feca 	bl	8002340 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	; 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e38f      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035ba:	4b2c      	ldr	r3, [pc, #176]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035c6:	4b28      	ldr	r3, [pc, #160]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d035      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d02e      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035e4:	4b20      	ldr	r3, [pc, #128]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035ee:	4b1e      	ldr	r3, [pc, #120]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f2:	4a1d      	ldr	r2, [pc, #116]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035fa:	4b1b      	ldr	r3, [pc, #108]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	4a1a      	ldr	r2, [pc, #104]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003604:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003606:	4a18      	ldr	r2, [pc, #96]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800360c:	4b16      	ldr	r3, [pc, #88]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b01      	cmp	r3, #1
 8003616:	d114      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003618:	f7fe fe92 	bl	8002340 <HAL_GetTick>
 800361c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361e:	e00a      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003620:	f7fe fe8e 	bl	8002340 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	f241 3288 	movw	r2, #5000	; 0x1388
 800362e:	4293      	cmp	r3, r2
 8003630:	d901      	bls.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e351      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003636:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0ee      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800364a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800364e:	d111      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800365c:	4b04      	ldr	r3, [pc, #16]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800365e:	400b      	ands	r3, r1
 8003660:	4901      	ldr	r1, [pc, #4]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003662:	4313      	orrs	r3, r2
 8003664:	608b      	str	r3, [r1, #8]
 8003666:	e00b      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003668:	40023800 	.word	0x40023800
 800366c:	40007000 	.word	0x40007000
 8003670:	0ffffcff 	.word	0x0ffffcff
 8003674:	4bac      	ldr	r3, [pc, #688]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	4aab      	ldr	r2, [pc, #684]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800367a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800367e:	6093      	str	r3, [r2, #8]
 8003680:	4ba9      	ldr	r3, [pc, #676]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003682:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800368c:	49a6      	ldr	r1, [pc, #664]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800368e:	4313      	orrs	r3, r2
 8003690:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0310 	and.w	r3, r3, #16
 800369a:	2b00      	cmp	r3, #0
 800369c:	d010      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800369e:	4ba2      	ldr	r3, [pc, #648]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036a4:	4aa0      	ldr	r2, [pc, #640]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80036ae:	4b9e      	ldr	r3, [pc, #632]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b8:	499b      	ldr	r1, [pc, #620]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036cc:	4b96      	ldr	r3, [pc, #600]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036da:	4993      	ldr	r1, [pc, #588]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036ee:	4b8e      	ldr	r3, [pc, #568]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036fc:	498a      	ldr	r1, [pc, #552]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00a      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003710:	4b85      	ldr	r3, [pc, #532]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003716:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800371e:	4982      	ldr	r1, [pc, #520]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003732:	4b7d      	ldr	r3, [pc, #500]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003738:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003740:	4979      	ldr	r1, [pc, #484]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00a      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003754:	4b74      	ldr	r3, [pc, #464]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375a:	f023 0203 	bic.w	r2, r3, #3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003762:	4971      	ldr	r1, [pc, #452]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003776:	4b6c      	ldr	r3, [pc, #432]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377c:	f023 020c 	bic.w	r2, r3, #12
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003784:	4968      	ldr	r1, [pc, #416]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003798:	4b63      	ldr	r3, [pc, #396]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a6:	4960      	ldr	r1, [pc, #384]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037ba:	4b5b      	ldr	r3, [pc, #364]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c8:	4957      	ldr	r1, [pc, #348]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037dc:	4b52      	ldr	r3, [pc, #328]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ea:	494f      	ldr	r1, [pc, #316]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80037fe:	4b4a      	ldr	r3, [pc, #296]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003804:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380c:	4946      	ldr	r1, [pc, #280]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800380e:	4313      	orrs	r3, r2
 8003810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003820:	4b41      	ldr	r3, [pc, #260]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003826:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382e:	493e      	ldr	r1, [pc, #248]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003842:	4b39      	ldr	r3, [pc, #228]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003848:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003850:	4935      	ldr	r1, [pc, #212]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003852:	4313      	orrs	r3, r2
 8003854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003864:	4b30      	ldr	r3, [pc, #192]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003872:	492d      	ldr	r1, [pc, #180]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d011      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003886:	4b28      	ldr	r3, [pc, #160]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003894:	4924      	ldr	r1, [pc, #144]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038a4:	d101      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80038a6:	2301      	movs	r3, #1
 80038a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80038b6:	2301      	movs	r3, #1
 80038b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038c6:	4b18      	ldr	r3, [pc, #96]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d4:	4914      	ldr	r1, [pc, #80]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00b      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038e8:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038f8:	490b      	ldr	r1, [pc, #44]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00f      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800390c:	4b06      	ldr	r3, [pc, #24]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800390e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003912:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800391c:	4902      	ldr	r1, [pc, #8]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003924:	e002      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003926:	bf00      	nop
 8003928:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00b      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003938:	4b8a      	ldr	r3, [pc, #552]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800393a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800393e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003948:	4986      	ldr	r1, [pc, #536]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800394a:	4313      	orrs	r3, r2
 800394c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00b      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800395c:	4b81      	ldr	r3, [pc, #516]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800395e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003962:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800396c:	497d      	ldr	r1, [pc, #500]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d006      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 80d6 	beq.w	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003988:	4b76      	ldr	r3, [pc, #472]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a75      	ldr	r2, [pc, #468]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800398e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003992:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003994:	f7fe fcd4 	bl	8002340 <HAL_GetTick>
 8003998:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800399c:	f7fe fcd0 	bl	8002340 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b64      	cmp	r3, #100	; 0x64
 80039a8:	d901      	bls.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e195      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039ae:	4b6d      	ldr	r3, [pc, #436]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d021      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d11d      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039ce:	4b65      	ldr	r3, [pc, #404]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039dc:	4b61      	ldr	r3, [pc, #388]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039e2:	0e1b      	lsrs	r3, r3, #24
 80039e4:	f003 030f 	and.w	r3, r3, #15
 80039e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	019a      	lsls	r2, r3, #6
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	041b      	lsls	r3, r3, #16
 80039f4:	431a      	orrs	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	061b      	lsls	r3, r3, #24
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	071b      	lsls	r3, r3, #28
 8003a02:	4958      	ldr	r1, [pc, #352]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d004      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a1e:	d00a      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d02e      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a34:	d129      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a36:	4b4b      	ldr	r3, [pc, #300]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a3c:	0c1b      	lsrs	r3, r3, #16
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a44:	4b47      	ldr	r3, [pc, #284]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a4a:	0f1b      	lsrs	r3, r3, #28
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	019a      	lsls	r2, r3, #6
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	041b      	lsls	r3, r3, #16
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	061b      	lsls	r3, r3, #24
 8003a64:	431a      	orrs	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	071b      	lsls	r3, r3, #28
 8003a6a:	493e      	ldr	r1, [pc, #248]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a72:	4b3c      	ldr	r3, [pc, #240]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a78:	f023 021f 	bic.w	r2, r3, #31
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	3b01      	subs	r3, #1
 8003a82:	4938      	ldr	r1, [pc, #224]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d01d      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a96:	4b33      	ldr	r3, [pc, #204]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a9c:	0e1b      	lsrs	r3, r3, #24
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003aa4:	4b2f      	ldr	r3, [pc, #188]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aaa:	0f1b      	lsrs	r3, r3, #28
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	019a      	lsls	r2, r3, #6
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	041b      	lsls	r3, r3, #16
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	061b      	lsls	r3, r3, #24
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	071b      	lsls	r3, r3, #28
 8003aca:	4926      	ldr	r1, [pc, #152]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d011      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	019a      	lsls	r2, r3, #6
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	041b      	lsls	r3, r3, #16
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	061b      	lsls	r3, r3, #24
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	071b      	lsls	r3, r3, #28
 8003afa:	491a      	ldr	r1, [pc, #104]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b02:	4b18      	ldr	r3, [pc, #96]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a17      	ldr	r2, [pc, #92]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b0e:	f7fe fc17 	bl	8002340 <HAL_GetTick>
 8003b12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b14:	e008      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b16:	f7fe fc13 	bl	8002340 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b64      	cmp	r3, #100	; 0x64
 8003b22:	d901      	bls.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e0d8      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b28:	4b0e      	ldr	r3, [pc, #56]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0f0      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	f040 80ce 	bne.w	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b3c:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a08      	ldr	r2, [pc, #32]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b48:	f7fe fbfa 	bl	8002340 <HAL_GetTick>
 8003b4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b4e:	e00b      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b50:	f7fe fbf6 	bl	8002340 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b64      	cmp	r3, #100	; 0x64
 8003b5c:	d904      	bls.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e0bb      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003b62:	bf00      	nop
 8003b64:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b68:	4b5e      	ldr	r3, [pc, #376]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b74:	d0ec      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d009      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d02e      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d12a      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b9e:	4b51      	ldr	r3, [pc, #324]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba4:	0c1b      	lsrs	r3, r3, #16
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bac:	4b4d      	ldr	r3, [pc, #308]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb2:	0f1b      	lsrs	r3, r3, #28
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	019a      	lsls	r2, r3, #6
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	041b      	lsls	r3, r3, #16
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	061b      	lsls	r3, r3, #24
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	071b      	lsls	r3, r3, #28
 8003bd2:	4944      	ldr	r1, [pc, #272]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003bda:	4b42      	ldr	r3, [pc, #264]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003be0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be8:	3b01      	subs	r3, #1
 8003bea:	021b      	lsls	r3, r3, #8
 8003bec:	493d      	ldr	r1, [pc, #244]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d022      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c08:	d11d      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c0a:	4b36      	ldr	r3, [pc, #216]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c10:	0e1b      	lsrs	r3, r3, #24
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c18:	4b32      	ldr	r3, [pc, #200]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1e:	0f1b      	lsrs	r3, r3, #28
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	019a      	lsls	r2, r3, #6
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	041b      	lsls	r3, r3, #16
 8003c32:	431a      	orrs	r2, r3
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	061b      	lsls	r3, r3, #24
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	071b      	lsls	r3, r3, #28
 8003c3e:	4929      	ldr	r1, [pc, #164]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d028      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c52:	4b24      	ldr	r3, [pc, #144]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c58:	0e1b      	lsrs	r3, r3, #24
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c60:	4b20      	ldr	r3, [pc, #128]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c66:	0c1b      	lsrs	r3, r3, #16
 8003c68:	f003 0303 	and.w	r3, r3, #3
 8003c6c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	019a      	lsls	r2, r3, #6
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	041b      	lsls	r3, r3, #16
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	061b      	lsls	r3, r3, #24
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	071b      	lsls	r3, r3, #28
 8003c86:	4917      	ldr	r1, [pc, #92]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c8e:	4b15      	ldr	r3, [pc, #84]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	4911      	ldr	r1, [pc, #68]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ca4:	4b0f      	ldr	r3, [pc, #60]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a0e      	ldr	r2, [pc, #56]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cb0:	f7fe fb46 	bl	8002340 <HAL_GetTick>
 8003cb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cb8:	f7fe fb42 	bl	8002340 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b64      	cmp	r3, #100	; 0x64
 8003cc4:	d901      	bls.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e007      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cca:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cd6:	d1ef      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3720      	adds	r7, #32
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40023800 	.word	0x40023800

08003ce8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e049      	b.n	8003d8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f841 	bl	8003d96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3304      	adds	r3, #4
 8003d24:	4619      	mov	r1, r3
 8003d26:	4610      	mov	r0, r2
 8003d28:	f000 fa00 	bl	800412c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
	...

08003dac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d001      	beq.n	8003dc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e054      	b.n	8003e6e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a26      	ldr	r2, [pc, #152]	; (8003e7c <HAL_TIM_Base_Start_IT+0xd0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d022      	beq.n	8003e2c <HAL_TIM_Base_Start_IT+0x80>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dee:	d01d      	beq.n	8003e2c <HAL_TIM_Base_Start_IT+0x80>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a22      	ldr	r2, [pc, #136]	; (8003e80 <HAL_TIM_Base_Start_IT+0xd4>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d018      	beq.n	8003e2c <HAL_TIM_Base_Start_IT+0x80>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a21      	ldr	r2, [pc, #132]	; (8003e84 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d013      	beq.n	8003e2c <HAL_TIM_Base_Start_IT+0x80>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a1f      	ldr	r2, [pc, #124]	; (8003e88 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00e      	beq.n	8003e2c <HAL_TIM_Base_Start_IT+0x80>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a1e      	ldr	r2, [pc, #120]	; (8003e8c <HAL_TIM_Base_Start_IT+0xe0>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d009      	beq.n	8003e2c <HAL_TIM_Base_Start_IT+0x80>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a1c      	ldr	r2, [pc, #112]	; (8003e90 <HAL_TIM_Base_Start_IT+0xe4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d004      	beq.n	8003e2c <HAL_TIM_Base_Start_IT+0x80>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a1b      	ldr	r2, [pc, #108]	; (8003e94 <HAL_TIM_Base_Start_IT+0xe8>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d115      	bne.n	8003e58 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	4b19      	ldr	r3, [pc, #100]	; (8003e98 <HAL_TIM_Base_Start_IT+0xec>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2b06      	cmp	r3, #6
 8003e3c:	d015      	beq.n	8003e6a <HAL_TIM_Base_Start_IT+0xbe>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e44:	d011      	beq.n	8003e6a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f042 0201 	orr.w	r2, r2, #1
 8003e54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e56:	e008      	b.n	8003e6a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	e000      	b.n	8003e6c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	40010000 	.word	0x40010000
 8003e80:	40000400 	.word	0x40000400
 8003e84:	40000800 	.word	0x40000800
 8003e88:	40000c00 	.word	0x40000c00
 8003e8c:	40010400 	.word	0x40010400
 8003e90:	40014000 	.word	0x40014000
 8003e94:	40001800 	.word	0x40001800
 8003e98:	00010007 	.word	0x00010007

08003e9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d122      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d11b      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f06f 0202 	mvn.w	r2, #2
 8003ec8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f905 	bl	80040ee <HAL_TIM_IC_CaptureCallback>
 8003ee4:	e005      	b.n	8003ef2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f8f7 	bl	80040da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f908 	bl	8004102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d122      	bne.n	8003f4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d11b      	bne.n	8003f4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f06f 0204 	mvn.w	r2, #4
 8003f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2202      	movs	r2, #2
 8003f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f8db 	bl	80040ee <HAL_TIM_IC_CaptureCallback>
 8003f38:	e005      	b.n	8003f46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f8cd 	bl	80040da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f8de 	bl	8004102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d122      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d11b      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0208 	mvn.w	r2, #8
 8003f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2204      	movs	r2, #4
 8003f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f8b1 	bl	80040ee <HAL_TIM_IC_CaptureCallback>
 8003f8c:	e005      	b.n	8003f9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f8a3 	bl	80040da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f8b4 	bl	8004102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f003 0310 	and.w	r3, r3, #16
 8003faa:	2b10      	cmp	r3, #16
 8003fac:	d122      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	2b10      	cmp	r3, #16
 8003fba:	d11b      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0210 	mvn.w	r2, #16
 8003fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2208      	movs	r2, #8
 8003fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f887 	bl	80040ee <HAL_TIM_IC_CaptureCallback>
 8003fe0:	e005      	b.n	8003fee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f879 	bl	80040da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f88a 	bl	8004102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d10e      	bne.n	8004020 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b01      	cmp	r3, #1
 800400e:	d107      	bne.n	8004020 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0201 	mvn.w	r2, #1
 8004018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fd ff92 	bl	8001f44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402a:	2b80      	cmp	r3, #128	; 0x80
 800402c:	d10e      	bne.n	800404c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004038:	2b80      	cmp	r3, #128	; 0x80
 800403a:	d107      	bne.n	800404c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f91a 	bl	8004280 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800405a:	d10e      	bne.n	800407a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004066:	2b80      	cmp	r3, #128	; 0x80
 8004068:	d107      	bne.n	800407a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f90d 	bl	8004294 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004084:	2b40      	cmp	r3, #64	; 0x40
 8004086:	d10e      	bne.n	80040a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004092:	2b40      	cmp	r3, #64	; 0x40
 8004094:	d107      	bne.n	80040a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800409e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f838 	bl	8004116 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	f003 0320 	and.w	r3, r3, #32
 80040b0:	2b20      	cmp	r3, #32
 80040b2:	d10e      	bne.n	80040d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f003 0320 	and.w	r3, r3, #32
 80040be:	2b20      	cmp	r3, #32
 80040c0:	d107      	bne.n	80040d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f06f 0220 	mvn.w	r2, #32
 80040ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f8cd 	bl	800426c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040d2:	bf00      	nop
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
	...

0800412c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a40      	ldr	r2, [pc, #256]	; (8004240 <TIM_Base_SetConfig+0x114>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d013      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414a:	d00f      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a3d      	ldr	r2, [pc, #244]	; (8004244 <TIM_Base_SetConfig+0x118>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d00b      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a3c      	ldr	r2, [pc, #240]	; (8004248 <TIM_Base_SetConfig+0x11c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d007      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a3b      	ldr	r2, [pc, #236]	; (800424c <TIM_Base_SetConfig+0x120>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d003      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a3a      	ldr	r2, [pc, #232]	; (8004250 <TIM_Base_SetConfig+0x124>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d108      	bne.n	800417e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a2f      	ldr	r2, [pc, #188]	; (8004240 <TIM_Base_SetConfig+0x114>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d02b      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418c:	d027      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a2c      	ldr	r2, [pc, #176]	; (8004244 <TIM_Base_SetConfig+0x118>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d023      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a2b      	ldr	r2, [pc, #172]	; (8004248 <TIM_Base_SetConfig+0x11c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d01f      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a2a      	ldr	r2, [pc, #168]	; (800424c <TIM_Base_SetConfig+0x120>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d01b      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a29      	ldr	r2, [pc, #164]	; (8004250 <TIM_Base_SetConfig+0x124>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d017      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a28      	ldr	r2, [pc, #160]	; (8004254 <TIM_Base_SetConfig+0x128>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d013      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a27      	ldr	r2, [pc, #156]	; (8004258 <TIM_Base_SetConfig+0x12c>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00f      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a26      	ldr	r2, [pc, #152]	; (800425c <TIM_Base_SetConfig+0x130>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00b      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a25      	ldr	r2, [pc, #148]	; (8004260 <TIM_Base_SetConfig+0x134>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d007      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a24      	ldr	r2, [pc, #144]	; (8004264 <TIM_Base_SetConfig+0x138>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d003      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a23      	ldr	r2, [pc, #140]	; (8004268 <TIM_Base_SetConfig+0x13c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d108      	bne.n	80041f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a0a      	ldr	r2, [pc, #40]	; (8004240 <TIM_Base_SetConfig+0x114>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d003      	beq.n	8004224 <TIM_Base_SetConfig+0xf8>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a0c      	ldr	r2, [pc, #48]	; (8004250 <TIM_Base_SetConfig+0x124>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d103      	bne.n	800422c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	615a      	str	r2, [r3, #20]
}
 8004232:	bf00      	nop
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40010000 	.word	0x40010000
 8004244:	40000400 	.word	0x40000400
 8004248:	40000800 	.word	0x40000800
 800424c:	40000c00 	.word	0x40000c00
 8004250:	40010400 	.word	0x40010400
 8004254:	40014000 	.word	0x40014000
 8004258:	40014400 	.word	0x40014400
 800425c:	40014800 	.word	0x40014800
 8004260:	40001800 	.word	0x40001800
 8004264:	40001c00 	.word	0x40001c00
 8004268:	40002000 	.word	0x40002000

0800426c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e040      	b.n	800433c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fd fe76 	bl	8001fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2224      	movs	r2, #36	; 0x24
 80042d4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0201 	bic.w	r2, r2, #1
 80042e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fbfc 	bl	8004ae4 <UART_SetConfig>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d101      	bne.n	80042f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e022      	b.n	800433c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fe54 	bl	8004fac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004312:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689a      	ldr	r2, [r3, #8]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004322:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0201 	orr.w	r2, r2, #1
 8004332:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 fedb 	bl	80050f0 <UART_CheckIdleState>
 800433a:	4603      	mov	r3, r0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004344:	b480      	push	{r7}
 8004346:	b08b      	sub	sp, #44	; 0x2c
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	4613      	mov	r3, r2
 8004350:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004356:	2b20      	cmp	r3, #32
 8004358:	d156      	bne.n	8004408 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <HAL_UART_Transmit_IT+0x22>
 8004360:	88fb      	ldrh	r3, [r7, #6]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e04f      	b.n	800440a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004370:	2b01      	cmp	r3, #1
 8004372:	d101      	bne.n	8004378 <HAL_UART_Transmit_IT+0x34>
 8004374:	2302      	movs	r3, #2
 8004376:	e048      	b.n	800440a <HAL_UART_Transmit_IT+0xc6>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	88fa      	ldrh	r2, [r7, #6]
 800438a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	88fa      	ldrh	r2, [r7, #6]
 8004392:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2221      	movs	r2, #33	; 0x21
 80043a8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b2:	d107      	bne.n	80043c4 <HAL_UART_Transmit_IT+0x80>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d103      	bne.n	80043c4 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4a16      	ldr	r2, [pc, #88]	; (8004418 <HAL_UART_Transmit_IT+0xd4>)
 80043c0:	669a      	str	r2, [r3, #104]	; 0x68
 80043c2:	e002      	b.n	80043ca <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4a15      	ldr	r2, [pc, #84]	; (800441c <HAL_UART_Transmit_IT+0xd8>)
 80043c8:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	e853 3f00 	ldrex	r3, [r3]
 80043de:	613b      	str	r3, [r7, #16]
   return(result);
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	461a      	mov	r2, r3
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	623b      	str	r3, [r7, #32]
 80043f2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f4:	69f9      	ldr	r1, [r7, #28]
 80043f6:	6a3a      	ldr	r2, [r7, #32]
 80043f8:	e841 2300 	strex	r3, r2, [r1]
 80043fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1e6      	bne.n	80043d2 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8004404:	2300      	movs	r3, #0
 8004406:	e000      	b.n	800440a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004408:	2302      	movs	r3, #2
  }
}
 800440a:	4618      	mov	r0, r3
 800440c:	372c      	adds	r7, #44	; 0x2c
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	08005649 	.word	0x08005649
 800441c:	08005593 	.word	0x08005593

08004420 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b08a      	sub	sp, #40	; 0x28
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	4613      	mov	r3, r2
 800442c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004432:	2b20      	cmp	r3, #32
 8004434:	d13d      	bne.n	80044b2 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <HAL_UART_Receive_IT+0x22>
 800443c:	88fb      	ldrh	r3, [r7, #6]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e036      	b.n	80044b4 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800444c:	2b01      	cmp	r3, #1
 800444e:	d101      	bne.n	8004454 <HAL_UART_Receive_IT+0x34>
 8004450:	2302      	movs	r3, #2
 8004452:	e02f      	b.n	80044b4 <HAL_UART_Receive_IT+0x94>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d018      	beq.n	80044a2 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	e853 3f00 	ldrex	r3, [r3]
 800447c:	613b      	str	r3, [r7, #16]
   return(result);
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	623b      	str	r3, [r7, #32]
 8004490:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004492:	69f9      	ldr	r1, [r7, #28]
 8004494:	6a3a      	ldr	r2, [r7, #32]
 8004496:	e841 2300 	strex	r3, r2, [r1]
 800449a:	61bb      	str	r3, [r7, #24]
   return(result);
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1e6      	bne.n	8004470 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80044a2:	88fb      	ldrh	r3, [r7, #6]
 80044a4:	461a      	mov	r2, r3
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 ff2f 	bl	800530c <UART_Start_Receive_IT>
 80044ae:	4603      	mov	r3, r0
 80044b0:	e000      	b.n	80044b4 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044b2:	2302      	movs	r3, #2
  }
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3728      	adds	r7, #40	; 0x28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b0ba      	sub	sp, #232	; 0xe8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80044e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80044ea:	4013      	ands	r3, r2
 80044ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80044f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d115      	bne.n	8004524 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80044f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044fc:	f003 0320 	and.w	r3, r3, #32
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00f      	beq.n	8004524 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b00      	cmp	r3, #0
 800450e:	d009      	beq.n	8004524 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 82a4 	beq.w	8004a62 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	4798      	blx	r3
      }
      return;
 8004522:	e29e      	b.n	8004a62 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004524:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 8117 	beq.w	800475c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800452e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800453a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800453e:	4b85      	ldr	r3, [pc, #532]	; (8004754 <HAL_UART_IRQHandler+0x298>)
 8004540:	4013      	ands	r3, r2
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 810a 	beq.w	800475c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b00      	cmp	r3, #0
 8004552:	d011      	beq.n	8004578 <HAL_UART_IRQHandler+0xbc>
 8004554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00b      	beq.n	8004578 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2201      	movs	r2, #1
 8004566:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800456e:	f043 0201 	orr.w	r2, r3, #1
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d011      	beq.n	80045a8 <HAL_UART_IRQHandler+0xec>
 8004584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00b      	beq.n	80045a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2202      	movs	r2, #2
 8004596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800459e:	f043 0204 	orr.w	r2, r3, #4
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d011      	beq.n	80045d8 <HAL_UART_IRQHandler+0x11c>
 80045b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00b      	beq.n	80045d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2204      	movs	r2, #4
 80045c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ce:	f043 0202 	orr.w	r2, r3, #2
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d017      	beq.n	8004614 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045e8:	f003 0320 	and.w	r3, r3, #32
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d105      	bne.n	80045fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80045f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00b      	beq.n	8004614 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2208      	movs	r2, #8
 8004602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800460a:	f043 0208 	orr.w	r2, r3, #8
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800461c:	2b00      	cmp	r3, #0
 800461e:	d012      	beq.n	8004646 <HAL_UART_IRQHandler+0x18a>
 8004620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004624:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00c      	beq.n	8004646 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004634:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800463c:	f043 0220 	orr.w	r2, r3, #32
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 820a 	beq.w	8004a66 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00d      	beq.n	800467a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800465e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b00      	cmp	r3, #0
 8004668:	d007      	beq.n	800467a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004680:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468e:	2b40      	cmp	r3, #64	; 0x40
 8004690:	d005      	beq.n	800469e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004696:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800469a:	2b00      	cmp	r3, #0
 800469c:	d04f      	beq.n	800473e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 fefe 	bl	80054a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ae:	2b40      	cmp	r3, #64	; 0x40
 80046b0:	d141      	bne.n	8004736 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	3308      	adds	r3, #8
 80046b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046c0:	e853 3f00 	ldrex	r3, [r3]
 80046c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80046c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	3308      	adds	r3, #8
 80046da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046ee:	e841 2300 	strex	r3, r2, [r1]
 80046f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80046f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1d9      	bne.n	80046b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004702:	2b00      	cmp	r3, #0
 8004704:	d013      	beq.n	800472e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470a:	4a13      	ldr	r2, [pc, #76]	; (8004758 <HAL_UART_IRQHandler+0x29c>)
 800470c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	4618      	mov	r0, r3
 8004714:	f7fd ff72 	bl	80025fc <HAL_DMA_Abort_IT>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d017      	beq.n	800474e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004728:	4610      	mov	r0, r2
 800472a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800472c:	e00f      	b.n	800474e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f9a4 	bl	8004a7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004734:	e00b      	b.n	800474e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f9a0 	bl	8004a7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800473c:	e007      	b.n	800474e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f99c 	bl	8004a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800474c:	e18b      	b.n	8004a66 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800474e:	bf00      	nop
    return;
 8004750:	e189      	b.n	8004a66 <HAL_UART_IRQHandler+0x5aa>
 8004752:	bf00      	nop
 8004754:	04000120 	.word	0x04000120
 8004758:	08005567 	.word	0x08005567

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004760:	2b01      	cmp	r3, #1
 8004762:	f040 8144 	bne.w	80049ee <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800476a:	f003 0310 	and.w	r3, r3, #16
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 813d 	beq.w	80049ee <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004778:	f003 0310 	and.w	r3, r3, #16
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 8136 	beq.w	80049ee <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2210      	movs	r2, #16
 8004788:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004794:	2b40      	cmp	r3, #64	; 0x40
 8004796:	f040 80b2 	bne.w	80048fe <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 815d 	beq.w	8004a6a <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047ba:	429a      	cmp	r2, r3
 80047bc:	f080 8155 	bcs.w	8004a6a <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047d4:	f000 8085 	beq.w	80048e2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047e4:	e853 3f00 	ldrex	r3, [r3]
 80047e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	461a      	mov	r2, r3
 80047fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004802:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004806:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800480e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004812:	e841 2300 	strex	r3, r2, [r1]
 8004816:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800481a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1da      	bne.n	80047d8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3308      	adds	r3, #8
 8004828:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800482c:	e853 3f00 	ldrex	r3, [r3]
 8004830:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004832:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004834:	f023 0301 	bic.w	r3, r3, #1
 8004838:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	3308      	adds	r3, #8
 8004842:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004846:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800484a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800484e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004852:	e841 2300 	strex	r3, r2, [r1]
 8004856:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1e1      	bne.n	8004822 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3308      	adds	r3, #8
 8004864:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004866:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800486e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004874:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3308      	adds	r3, #8
 800487e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004882:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004884:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004886:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004888:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800488a:	e841 2300 	strex	r3, r2, [r1]
 800488e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1e3      	bne.n	800485e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2220      	movs	r2, #32
 800489a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048aa:	e853 3f00 	ldrex	r3, [r3]
 80048ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048b2:	f023 0310 	bic.w	r3, r3, #16
 80048b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80048c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048cc:	e841 2300 	strex	r3, r2, [r1]
 80048d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e4      	bne.n	80048a2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fd fe1d 	bl	800251c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	4619      	mov	r1, r3
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f8ca 	bl	8004a90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80048fc:	e0b5      	b.n	8004a6a <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800490a:	b29b      	uxth	r3, r3
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004918:	b29b      	uxth	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 80a7 	beq.w	8004a6e <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8004920:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 80a2 	beq.w	8004a6e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004932:	e853 3f00 	ldrex	r3, [r3]
 8004936:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800493e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800494c:	647b      	str	r3, [r7, #68]	; 0x44
 800494e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004952:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800495a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e4      	bne.n	800492a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3308      	adds	r3, #8
 8004966:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	e853 3f00 	ldrex	r3, [r3]
 800496e:	623b      	str	r3, [r7, #32]
   return(result);
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	f023 0301 	bic.w	r3, r3, #1
 8004976:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3308      	adds	r3, #8
 8004980:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004984:	633a      	str	r2, [r7, #48]	; 0x30
 8004986:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004988:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800498a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800498c:	e841 2300 	strex	r3, r2, [r1]
 8004990:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1e3      	bne.n	8004960 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2220      	movs	r2, #32
 800499c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	e853 3f00 	ldrex	r3, [r3]
 80049b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0310 	bic.w	r3, r3, #16
 80049be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049cc:	61fb      	str	r3, [r7, #28]
 80049ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d0:	69b9      	ldr	r1, [r7, #24]
 80049d2:	69fa      	ldr	r2, [r7, #28]
 80049d4:	e841 2300 	strex	r3, r2, [r1]
 80049d8:	617b      	str	r3, [r7, #20]
   return(result);
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1e4      	bne.n	80049aa <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049e4:	4619      	mov	r1, r3
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f852 	bl	8004a90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049ec:	e03f      	b.n	8004a6e <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80049ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00e      	beq.n	8004a18 <HAL_UART_IRQHandler+0x55c>
 80049fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d008      	beq.n	8004a18 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f849 	bl	8004aa8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a16:	e02d      	b.n	8004a74 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00e      	beq.n	8004a42 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d008      	beq.n	8004a42 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d01c      	beq.n	8004a72 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	4798      	blx	r3
    }
    return;
 8004a40:	e017      	b.n	8004a72 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d012      	beq.n	8004a74 <HAL_UART_IRQHandler+0x5b8>
 8004a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00c      	beq.n	8004a74 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fe54 	bl	8005708 <UART_EndTransmit_IT>
    return;
 8004a60:	e008      	b.n	8004a74 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004a62:	bf00      	nop
 8004a64:	e006      	b.n	8004a74 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004a66:	bf00      	nop
 8004a68:	e004      	b.n	8004a74 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004a6a:	bf00      	nop
 8004a6c:	e002      	b.n	8004a74 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004a6e:	bf00      	nop
 8004a70:	e000      	b.n	8004a74 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004a72:	bf00      	nop
  }

}
 8004a74:	37e8      	adds	r7, #232	; 0xe8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop

08004a7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ac8:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ace:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	4313      	orrs	r3, r2
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
	...

08004ae4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b088      	sub	sp, #32
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004aec:	2300      	movs	r3, #0
 8004aee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	4ba6      	ldr	r3, [pc, #664]	; (8004da8 <UART_SetConfig+0x2c4>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6812      	ldr	r2, [r2, #0]
 8004b16:	6979      	ldr	r1, [r7, #20]
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a94      	ldr	r2, [pc, #592]	; (8004dac <UART_SetConfig+0x2c8>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d120      	bne.n	8004ba2 <UART_SetConfig+0xbe>
 8004b60:	4b93      	ldr	r3, [pc, #588]	; (8004db0 <UART_SetConfig+0x2cc>)
 8004b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	2b03      	cmp	r3, #3
 8004b6c:	d816      	bhi.n	8004b9c <UART_SetConfig+0xb8>
 8004b6e:	a201      	add	r2, pc, #4	; (adr r2, 8004b74 <UART_SetConfig+0x90>)
 8004b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b74:	08004b85 	.word	0x08004b85
 8004b78:	08004b91 	.word	0x08004b91
 8004b7c:	08004b8b 	.word	0x08004b8b
 8004b80:	08004b97 	.word	0x08004b97
 8004b84:	2301      	movs	r3, #1
 8004b86:	77fb      	strb	r3, [r7, #31]
 8004b88:	e150      	b.n	8004e2c <UART_SetConfig+0x348>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	77fb      	strb	r3, [r7, #31]
 8004b8e:	e14d      	b.n	8004e2c <UART_SetConfig+0x348>
 8004b90:	2304      	movs	r3, #4
 8004b92:	77fb      	strb	r3, [r7, #31]
 8004b94:	e14a      	b.n	8004e2c <UART_SetConfig+0x348>
 8004b96:	2308      	movs	r3, #8
 8004b98:	77fb      	strb	r3, [r7, #31]
 8004b9a:	e147      	b.n	8004e2c <UART_SetConfig+0x348>
 8004b9c:	2310      	movs	r3, #16
 8004b9e:	77fb      	strb	r3, [r7, #31]
 8004ba0:	e144      	b.n	8004e2c <UART_SetConfig+0x348>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a83      	ldr	r2, [pc, #524]	; (8004db4 <UART_SetConfig+0x2d0>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d132      	bne.n	8004c12 <UART_SetConfig+0x12e>
 8004bac:	4b80      	ldr	r3, [pc, #512]	; (8004db0 <UART_SetConfig+0x2cc>)
 8004bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb2:	f003 030c 	and.w	r3, r3, #12
 8004bb6:	2b0c      	cmp	r3, #12
 8004bb8:	d828      	bhi.n	8004c0c <UART_SetConfig+0x128>
 8004bba:	a201      	add	r2, pc, #4	; (adr r2, 8004bc0 <UART_SetConfig+0xdc>)
 8004bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc0:	08004bf5 	.word	0x08004bf5
 8004bc4:	08004c0d 	.word	0x08004c0d
 8004bc8:	08004c0d 	.word	0x08004c0d
 8004bcc:	08004c0d 	.word	0x08004c0d
 8004bd0:	08004c01 	.word	0x08004c01
 8004bd4:	08004c0d 	.word	0x08004c0d
 8004bd8:	08004c0d 	.word	0x08004c0d
 8004bdc:	08004c0d 	.word	0x08004c0d
 8004be0:	08004bfb 	.word	0x08004bfb
 8004be4:	08004c0d 	.word	0x08004c0d
 8004be8:	08004c0d 	.word	0x08004c0d
 8004bec:	08004c0d 	.word	0x08004c0d
 8004bf0:	08004c07 	.word	0x08004c07
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	77fb      	strb	r3, [r7, #31]
 8004bf8:	e118      	b.n	8004e2c <UART_SetConfig+0x348>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	77fb      	strb	r3, [r7, #31]
 8004bfe:	e115      	b.n	8004e2c <UART_SetConfig+0x348>
 8004c00:	2304      	movs	r3, #4
 8004c02:	77fb      	strb	r3, [r7, #31]
 8004c04:	e112      	b.n	8004e2c <UART_SetConfig+0x348>
 8004c06:	2308      	movs	r3, #8
 8004c08:	77fb      	strb	r3, [r7, #31]
 8004c0a:	e10f      	b.n	8004e2c <UART_SetConfig+0x348>
 8004c0c:	2310      	movs	r3, #16
 8004c0e:	77fb      	strb	r3, [r7, #31]
 8004c10:	e10c      	b.n	8004e2c <UART_SetConfig+0x348>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a68      	ldr	r2, [pc, #416]	; (8004db8 <UART_SetConfig+0x2d4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d120      	bne.n	8004c5e <UART_SetConfig+0x17a>
 8004c1c:	4b64      	ldr	r3, [pc, #400]	; (8004db0 <UART_SetConfig+0x2cc>)
 8004c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c22:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c26:	2b30      	cmp	r3, #48	; 0x30
 8004c28:	d013      	beq.n	8004c52 <UART_SetConfig+0x16e>
 8004c2a:	2b30      	cmp	r3, #48	; 0x30
 8004c2c:	d814      	bhi.n	8004c58 <UART_SetConfig+0x174>
 8004c2e:	2b20      	cmp	r3, #32
 8004c30:	d009      	beq.n	8004c46 <UART_SetConfig+0x162>
 8004c32:	2b20      	cmp	r3, #32
 8004c34:	d810      	bhi.n	8004c58 <UART_SetConfig+0x174>
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <UART_SetConfig+0x15c>
 8004c3a:	2b10      	cmp	r3, #16
 8004c3c:	d006      	beq.n	8004c4c <UART_SetConfig+0x168>
 8004c3e:	e00b      	b.n	8004c58 <UART_SetConfig+0x174>
 8004c40:	2300      	movs	r3, #0
 8004c42:	77fb      	strb	r3, [r7, #31]
 8004c44:	e0f2      	b.n	8004e2c <UART_SetConfig+0x348>
 8004c46:	2302      	movs	r3, #2
 8004c48:	77fb      	strb	r3, [r7, #31]
 8004c4a:	e0ef      	b.n	8004e2c <UART_SetConfig+0x348>
 8004c4c:	2304      	movs	r3, #4
 8004c4e:	77fb      	strb	r3, [r7, #31]
 8004c50:	e0ec      	b.n	8004e2c <UART_SetConfig+0x348>
 8004c52:	2308      	movs	r3, #8
 8004c54:	77fb      	strb	r3, [r7, #31]
 8004c56:	e0e9      	b.n	8004e2c <UART_SetConfig+0x348>
 8004c58:	2310      	movs	r3, #16
 8004c5a:	77fb      	strb	r3, [r7, #31]
 8004c5c:	e0e6      	b.n	8004e2c <UART_SetConfig+0x348>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a56      	ldr	r2, [pc, #344]	; (8004dbc <UART_SetConfig+0x2d8>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d120      	bne.n	8004caa <UART_SetConfig+0x1c6>
 8004c68:	4b51      	ldr	r3, [pc, #324]	; (8004db0 <UART_SetConfig+0x2cc>)
 8004c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c72:	2bc0      	cmp	r3, #192	; 0xc0
 8004c74:	d013      	beq.n	8004c9e <UART_SetConfig+0x1ba>
 8004c76:	2bc0      	cmp	r3, #192	; 0xc0
 8004c78:	d814      	bhi.n	8004ca4 <UART_SetConfig+0x1c0>
 8004c7a:	2b80      	cmp	r3, #128	; 0x80
 8004c7c:	d009      	beq.n	8004c92 <UART_SetConfig+0x1ae>
 8004c7e:	2b80      	cmp	r3, #128	; 0x80
 8004c80:	d810      	bhi.n	8004ca4 <UART_SetConfig+0x1c0>
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <UART_SetConfig+0x1a8>
 8004c86:	2b40      	cmp	r3, #64	; 0x40
 8004c88:	d006      	beq.n	8004c98 <UART_SetConfig+0x1b4>
 8004c8a:	e00b      	b.n	8004ca4 <UART_SetConfig+0x1c0>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	77fb      	strb	r3, [r7, #31]
 8004c90:	e0cc      	b.n	8004e2c <UART_SetConfig+0x348>
 8004c92:	2302      	movs	r3, #2
 8004c94:	77fb      	strb	r3, [r7, #31]
 8004c96:	e0c9      	b.n	8004e2c <UART_SetConfig+0x348>
 8004c98:	2304      	movs	r3, #4
 8004c9a:	77fb      	strb	r3, [r7, #31]
 8004c9c:	e0c6      	b.n	8004e2c <UART_SetConfig+0x348>
 8004c9e:	2308      	movs	r3, #8
 8004ca0:	77fb      	strb	r3, [r7, #31]
 8004ca2:	e0c3      	b.n	8004e2c <UART_SetConfig+0x348>
 8004ca4:	2310      	movs	r3, #16
 8004ca6:	77fb      	strb	r3, [r7, #31]
 8004ca8:	e0c0      	b.n	8004e2c <UART_SetConfig+0x348>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a44      	ldr	r2, [pc, #272]	; (8004dc0 <UART_SetConfig+0x2dc>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d125      	bne.n	8004d00 <UART_SetConfig+0x21c>
 8004cb4:	4b3e      	ldr	r3, [pc, #248]	; (8004db0 <UART_SetConfig+0x2cc>)
 8004cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cc2:	d017      	beq.n	8004cf4 <UART_SetConfig+0x210>
 8004cc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cc8:	d817      	bhi.n	8004cfa <UART_SetConfig+0x216>
 8004cca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cce:	d00b      	beq.n	8004ce8 <UART_SetConfig+0x204>
 8004cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cd4:	d811      	bhi.n	8004cfa <UART_SetConfig+0x216>
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <UART_SetConfig+0x1fe>
 8004cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cde:	d006      	beq.n	8004cee <UART_SetConfig+0x20a>
 8004ce0:	e00b      	b.n	8004cfa <UART_SetConfig+0x216>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	77fb      	strb	r3, [r7, #31]
 8004ce6:	e0a1      	b.n	8004e2c <UART_SetConfig+0x348>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	77fb      	strb	r3, [r7, #31]
 8004cec:	e09e      	b.n	8004e2c <UART_SetConfig+0x348>
 8004cee:	2304      	movs	r3, #4
 8004cf0:	77fb      	strb	r3, [r7, #31]
 8004cf2:	e09b      	b.n	8004e2c <UART_SetConfig+0x348>
 8004cf4:	2308      	movs	r3, #8
 8004cf6:	77fb      	strb	r3, [r7, #31]
 8004cf8:	e098      	b.n	8004e2c <UART_SetConfig+0x348>
 8004cfa:	2310      	movs	r3, #16
 8004cfc:	77fb      	strb	r3, [r7, #31]
 8004cfe:	e095      	b.n	8004e2c <UART_SetConfig+0x348>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a2f      	ldr	r2, [pc, #188]	; (8004dc4 <UART_SetConfig+0x2e0>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d125      	bne.n	8004d56 <UART_SetConfig+0x272>
 8004d0a:	4b29      	ldr	r3, [pc, #164]	; (8004db0 <UART_SetConfig+0x2cc>)
 8004d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d18:	d017      	beq.n	8004d4a <UART_SetConfig+0x266>
 8004d1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d1e:	d817      	bhi.n	8004d50 <UART_SetConfig+0x26c>
 8004d20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d24:	d00b      	beq.n	8004d3e <UART_SetConfig+0x25a>
 8004d26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d2a:	d811      	bhi.n	8004d50 <UART_SetConfig+0x26c>
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <UART_SetConfig+0x254>
 8004d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d34:	d006      	beq.n	8004d44 <UART_SetConfig+0x260>
 8004d36:	e00b      	b.n	8004d50 <UART_SetConfig+0x26c>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	77fb      	strb	r3, [r7, #31]
 8004d3c:	e076      	b.n	8004e2c <UART_SetConfig+0x348>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	77fb      	strb	r3, [r7, #31]
 8004d42:	e073      	b.n	8004e2c <UART_SetConfig+0x348>
 8004d44:	2304      	movs	r3, #4
 8004d46:	77fb      	strb	r3, [r7, #31]
 8004d48:	e070      	b.n	8004e2c <UART_SetConfig+0x348>
 8004d4a:	2308      	movs	r3, #8
 8004d4c:	77fb      	strb	r3, [r7, #31]
 8004d4e:	e06d      	b.n	8004e2c <UART_SetConfig+0x348>
 8004d50:	2310      	movs	r3, #16
 8004d52:	77fb      	strb	r3, [r7, #31]
 8004d54:	e06a      	b.n	8004e2c <UART_SetConfig+0x348>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a1b      	ldr	r2, [pc, #108]	; (8004dc8 <UART_SetConfig+0x2e4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d138      	bne.n	8004dd2 <UART_SetConfig+0x2ee>
 8004d60:	4b13      	ldr	r3, [pc, #76]	; (8004db0 <UART_SetConfig+0x2cc>)
 8004d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d66:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004d6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d6e:	d017      	beq.n	8004da0 <UART_SetConfig+0x2bc>
 8004d70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d74:	d82a      	bhi.n	8004dcc <UART_SetConfig+0x2e8>
 8004d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d7a:	d00b      	beq.n	8004d94 <UART_SetConfig+0x2b0>
 8004d7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d80:	d824      	bhi.n	8004dcc <UART_SetConfig+0x2e8>
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <UART_SetConfig+0x2aa>
 8004d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d8a:	d006      	beq.n	8004d9a <UART_SetConfig+0x2b6>
 8004d8c:	e01e      	b.n	8004dcc <UART_SetConfig+0x2e8>
 8004d8e:	2300      	movs	r3, #0
 8004d90:	77fb      	strb	r3, [r7, #31]
 8004d92:	e04b      	b.n	8004e2c <UART_SetConfig+0x348>
 8004d94:	2302      	movs	r3, #2
 8004d96:	77fb      	strb	r3, [r7, #31]
 8004d98:	e048      	b.n	8004e2c <UART_SetConfig+0x348>
 8004d9a:	2304      	movs	r3, #4
 8004d9c:	77fb      	strb	r3, [r7, #31]
 8004d9e:	e045      	b.n	8004e2c <UART_SetConfig+0x348>
 8004da0:	2308      	movs	r3, #8
 8004da2:	77fb      	strb	r3, [r7, #31]
 8004da4:	e042      	b.n	8004e2c <UART_SetConfig+0x348>
 8004da6:	bf00      	nop
 8004da8:	efff69f3 	.word	0xefff69f3
 8004dac:	40011000 	.word	0x40011000
 8004db0:	40023800 	.word	0x40023800
 8004db4:	40004400 	.word	0x40004400
 8004db8:	40004800 	.word	0x40004800
 8004dbc:	40004c00 	.word	0x40004c00
 8004dc0:	40005000 	.word	0x40005000
 8004dc4:	40011400 	.word	0x40011400
 8004dc8:	40007800 	.word	0x40007800
 8004dcc:	2310      	movs	r3, #16
 8004dce:	77fb      	strb	r3, [r7, #31]
 8004dd0:	e02c      	b.n	8004e2c <UART_SetConfig+0x348>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a72      	ldr	r2, [pc, #456]	; (8004fa0 <UART_SetConfig+0x4bc>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d125      	bne.n	8004e28 <UART_SetConfig+0x344>
 8004ddc:	4b71      	ldr	r3, [pc, #452]	; (8004fa4 <UART_SetConfig+0x4c0>)
 8004dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004de6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004dea:	d017      	beq.n	8004e1c <UART_SetConfig+0x338>
 8004dec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004df0:	d817      	bhi.n	8004e22 <UART_SetConfig+0x33e>
 8004df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df6:	d00b      	beq.n	8004e10 <UART_SetConfig+0x32c>
 8004df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dfc:	d811      	bhi.n	8004e22 <UART_SetConfig+0x33e>
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <UART_SetConfig+0x326>
 8004e02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e06:	d006      	beq.n	8004e16 <UART_SetConfig+0x332>
 8004e08:	e00b      	b.n	8004e22 <UART_SetConfig+0x33e>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	77fb      	strb	r3, [r7, #31]
 8004e0e:	e00d      	b.n	8004e2c <UART_SetConfig+0x348>
 8004e10:	2302      	movs	r3, #2
 8004e12:	77fb      	strb	r3, [r7, #31]
 8004e14:	e00a      	b.n	8004e2c <UART_SetConfig+0x348>
 8004e16:	2304      	movs	r3, #4
 8004e18:	77fb      	strb	r3, [r7, #31]
 8004e1a:	e007      	b.n	8004e2c <UART_SetConfig+0x348>
 8004e1c:	2308      	movs	r3, #8
 8004e1e:	77fb      	strb	r3, [r7, #31]
 8004e20:	e004      	b.n	8004e2c <UART_SetConfig+0x348>
 8004e22:	2310      	movs	r3, #16
 8004e24:	77fb      	strb	r3, [r7, #31]
 8004e26:	e001      	b.n	8004e2c <UART_SetConfig+0x348>
 8004e28:	2310      	movs	r3, #16
 8004e2a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	69db      	ldr	r3, [r3, #28]
 8004e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e34:	d15b      	bne.n	8004eee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004e36:	7ffb      	ldrb	r3, [r7, #31]
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d828      	bhi.n	8004e8e <UART_SetConfig+0x3aa>
 8004e3c:	a201      	add	r2, pc, #4	; (adr r2, 8004e44 <UART_SetConfig+0x360>)
 8004e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e42:	bf00      	nop
 8004e44:	08004e69 	.word	0x08004e69
 8004e48:	08004e71 	.word	0x08004e71
 8004e4c:	08004e79 	.word	0x08004e79
 8004e50:	08004e8f 	.word	0x08004e8f
 8004e54:	08004e7f 	.word	0x08004e7f
 8004e58:	08004e8f 	.word	0x08004e8f
 8004e5c:	08004e8f 	.word	0x08004e8f
 8004e60:	08004e8f 	.word	0x08004e8f
 8004e64:	08004e87 	.word	0x08004e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e68:	f7fe fabc 	bl	80033e4 <HAL_RCC_GetPCLK1Freq>
 8004e6c:	61b8      	str	r0, [r7, #24]
        break;
 8004e6e:	e013      	b.n	8004e98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e70:	f7fe facc 	bl	800340c <HAL_RCC_GetPCLK2Freq>
 8004e74:	61b8      	str	r0, [r7, #24]
        break;
 8004e76:	e00f      	b.n	8004e98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e78:	4b4b      	ldr	r3, [pc, #300]	; (8004fa8 <UART_SetConfig+0x4c4>)
 8004e7a:	61bb      	str	r3, [r7, #24]
        break;
 8004e7c:	e00c      	b.n	8004e98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e7e:	f7fe f99f 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 8004e82:	61b8      	str	r0, [r7, #24]
        break;
 8004e84:	e008      	b.n	8004e98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e8a:	61bb      	str	r3, [r7, #24]
        break;
 8004e8c:	e004      	b.n	8004e98 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	77bb      	strb	r3, [r7, #30]
        break;
 8004e96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d074      	beq.n	8004f88 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	005a      	lsls	r2, r3, #1
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	085b      	lsrs	r3, r3, #1
 8004ea8:	441a      	add	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	2b0f      	cmp	r3, #15
 8004eb8:	d916      	bls.n	8004ee8 <UART_SetConfig+0x404>
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec0:	d212      	bcs.n	8004ee8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	f023 030f 	bic.w	r3, r3, #15
 8004eca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	085b      	lsrs	r3, r3, #1
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	89fb      	ldrh	r3, [r7, #14]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	89fa      	ldrh	r2, [r7, #14]
 8004ee4:	60da      	str	r2, [r3, #12]
 8004ee6:	e04f      	b.n	8004f88 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	77bb      	strb	r3, [r7, #30]
 8004eec:	e04c      	b.n	8004f88 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004eee:	7ffb      	ldrb	r3, [r7, #31]
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d828      	bhi.n	8004f46 <UART_SetConfig+0x462>
 8004ef4:	a201      	add	r2, pc, #4	; (adr r2, 8004efc <UART_SetConfig+0x418>)
 8004ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efa:	bf00      	nop
 8004efc:	08004f21 	.word	0x08004f21
 8004f00:	08004f29 	.word	0x08004f29
 8004f04:	08004f31 	.word	0x08004f31
 8004f08:	08004f47 	.word	0x08004f47
 8004f0c:	08004f37 	.word	0x08004f37
 8004f10:	08004f47 	.word	0x08004f47
 8004f14:	08004f47 	.word	0x08004f47
 8004f18:	08004f47 	.word	0x08004f47
 8004f1c:	08004f3f 	.word	0x08004f3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f20:	f7fe fa60 	bl	80033e4 <HAL_RCC_GetPCLK1Freq>
 8004f24:	61b8      	str	r0, [r7, #24]
        break;
 8004f26:	e013      	b.n	8004f50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f28:	f7fe fa70 	bl	800340c <HAL_RCC_GetPCLK2Freq>
 8004f2c:	61b8      	str	r0, [r7, #24]
        break;
 8004f2e:	e00f      	b.n	8004f50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f30:	4b1d      	ldr	r3, [pc, #116]	; (8004fa8 <UART_SetConfig+0x4c4>)
 8004f32:	61bb      	str	r3, [r7, #24]
        break;
 8004f34:	e00c      	b.n	8004f50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f36:	f7fe f943 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 8004f3a:	61b8      	str	r0, [r7, #24]
        break;
 8004f3c:	e008      	b.n	8004f50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f42:	61bb      	str	r3, [r7, #24]
        break;
 8004f44:	e004      	b.n	8004f50 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	77bb      	strb	r3, [r7, #30]
        break;
 8004f4e:	bf00      	nop
    }

    if (pclk != 0U)
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d018      	beq.n	8004f88 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	085a      	lsrs	r2, r3, #1
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	441a      	add	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	2b0f      	cmp	r3, #15
 8004f6e:	d909      	bls.n	8004f84 <UART_SetConfig+0x4a0>
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f76:	d205      	bcs.n	8004f84 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	60da      	str	r2, [r3, #12]
 8004f82:	e001      	b.n	8004f88 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004f94:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3720      	adds	r7, #32
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	40007c00 	.word	0x40007c00
 8004fa4:	40023800 	.word	0x40023800
 8004fa8:	00f42400 	.word	0x00f42400

08004fac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00a      	beq.n	8004fd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00a      	beq.n	800501a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	f003 0308 	and.w	r3, r3, #8
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00a      	beq.n	800503c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	f003 0310 	and.w	r3, r3, #16
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00a      	beq.n	800505e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	f003 0320 	and.w	r3, r3, #32
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00a      	beq.n	8005080 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	430a      	orrs	r2, r1
 800507e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005088:	2b00      	cmp	r3, #0
 800508a:	d01a      	beq.n	80050c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050aa:	d10a      	bne.n	80050c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00a      	beq.n	80050e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	605a      	str	r2, [r3, #4]
  }
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af02      	add	r7, sp, #8
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005100:	f7fd f91e 	bl	8002340 <HAL_GetTick>
 8005104:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0308 	and.w	r3, r3, #8
 8005110:	2b08      	cmp	r3, #8
 8005112:	d10e      	bne.n	8005132 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005114:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f82d 	bl	8005182 <UART_WaitOnFlagUntilTimeout>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e023      	b.n	800517a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b04      	cmp	r3, #4
 800513e:	d10e      	bne.n	800515e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005140:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f817 	bl	8005182 <UART_WaitOnFlagUntilTimeout>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e00d      	b.n	800517a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2220      	movs	r2, #32
 8005162:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2220      	movs	r2, #32
 8005168:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b09c      	sub	sp, #112	; 0x70
 8005186:	af00      	add	r7, sp, #0
 8005188:	60f8      	str	r0, [r7, #12]
 800518a:	60b9      	str	r1, [r7, #8]
 800518c:	603b      	str	r3, [r7, #0]
 800518e:	4613      	mov	r3, r2
 8005190:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005192:	e0a5      	b.n	80052e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005194:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519a:	f000 80a1 	beq.w	80052e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519e:	f7fd f8cf 	bl	8002340 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d302      	bcc.n	80051b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80051ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d13e      	bne.n	8005232 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051bc:	e853 3f00 	ldrex	r3, [r3]
 80051c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051c8:	667b      	str	r3, [r7, #100]	; 0x64
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	461a      	mov	r2, r3
 80051d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051da:	e841 2300 	strex	r3, r2, [r1]
 80051de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80051e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1e6      	bne.n	80051b4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	3308      	adds	r3, #8
 80051ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f0:	e853 3f00 	ldrex	r3, [r3]
 80051f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f8:	f023 0301 	bic.w	r3, r3, #1
 80051fc:	663b      	str	r3, [r7, #96]	; 0x60
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3308      	adds	r3, #8
 8005204:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005206:	64ba      	str	r2, [r7, #72]	; 0x48
 8005208:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800520c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800520e:	e841 2300 	strex	r3, r2, [r1]
 8005212:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1e5      	bne.n	80051e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2220      	movs	r2, #32
 800521e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2220      	movs	r2, #32
 8005224:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e067      	b.n	8005302 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0304 	and.w	r3, r3, #4
 800523c:	2b00      	cmp	r3, #0
 800523e:	d04f      	beq.n	80052e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800524a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800524e:	d147      	bne.n	80052e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005258:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005262:	e853 3f00 	ldrex	r3, [r3]
 8005266:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800526e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	461a      	mov	r2, r3
 8005276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005278:	637b      	str	r3, [r7, #52]	; 0x34
 800527a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800527e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005280:	e841 2300 	strex	r3, r2, [r1]
 8005284:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1e6      	bne.n	800525a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3308      	adds	r3, #8
 8005292:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	e853 3f00 	ldrex	r3, [r3]
 800529a:	613b      	str	r3, [r7, #16]
   return(result);
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	f023 0301 	bic.w	r3, r3, #1
 80052a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3308      	adds	r3, #8
 80052aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052ac:	623a      	str	r2, [r7, #32]
 80052ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b0:	69f9      	ldr	r1, [r7, #28]
 80052b2:	6a3a      	ldr	r2, [r7, #32]
 80052b4:	e841 2300 	strex	r3, r2, [r1]
 80052b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1e5      	bne.n	800528c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2220      	movs	r2, #32
 80052c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2220      	movs	r2, #32
 80052ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e010      	b.n	8005302 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	69da      	ldr	r2, [r3, #28]
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	4013      	ands	r3, r2
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	bf0c      	ite	eq
 80052f0:	2301      	moveq	r3, #1
 80052f2:	2300      	movne	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	461a      	mov	r2, r3
 80052f8:	79fb      	ldrb	r3, [r7, #7]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	f43f af4a 	beq.w	8005194 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3770      	adds	r7, #112	; 0x70
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
	...

0800530c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800530c:	b480      	push	{r7}
 800530e:	b097      	sub	sp, #92	; 0x5c
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	4613      	mov	r3, r2
 8005318:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	88fa      	ldrh	r2, [r7, #6]
 8005324:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	88fa      	ldrh	r2, [r7, #6]
 800532c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800533e:	d10e      	bne.n	800535e <UART_Start_Receive_IT+0x52>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d105      	bne.n	8005354 <UART_Start_Receive_IT+0x48>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800534e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005352:	e02d      	b.n	80053b0 <UART_Start_Receive_IT+0xa4>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	22ff      	movs	r2, #255	; 0xff
 8005358:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800535c:	e028      	b.n	80053b0 <UART_Start_Receive_IT+0xa4>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10d      	bne.n	8005382 <UART_Start_Receive_IT+0x76>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d104      	bne.n	8005378 <UART_Start_Receive_IT+0x6c>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	22ff      	movs	r2, #255	; 0xff
 8005372:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005376:	e01b      	b.n	80053b0 <UART_Start_Receive_IT+0xa4>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	227f      	movs	r2, #127	; 0x7f
 800537c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005380:	e016      	b.n	80053b0 <UART_Start_Receive_IT+0xa4>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800538a:	d10d      	bne.n	80053a8 <UART_Start_Receive_IT+0x9c>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d104      	bne.n	800539e <UART_Start_Receive_IT+0x92>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	227f      	movs	r2, #127	; 0x7f
 8005398:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800539c:	e008      	b.n	80053b0 <UART_Start_Receive_IT+0xa4>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	223f      	movs	r2, #63	; 0x3f
 80053a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053a6:	e003      	b.n	80053b0 <UART_Start_Receive_IT+0xa4>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2222      	movs	r2, #34	; 0x22
 80053bc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3308      	adds	r3, #8
 80053c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c8:	e853 3f00 	ldrex	r3, [r3]
 80053cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d0:	f043 0301 	orr.w	r3, r3, #1
 80053d4:	657b      	str	r3, [r7, #84]	; 0x54
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3308      	adds	r3, #8
 80053dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80053de:	64ba      	str	r2, [r7, #72]	; 0x48
 80053e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053e6:	e841 2300 	strex	r3, r2, [r1]
 80053ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1e5      	bne.n	80053be <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053fa:	d107      	bne.n	800540c <UART_Start_Receive_IT+0x100>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d103      	bne.n	800540c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4a24      	ldr	r2, [pc, #144]	; (8005498 <UART_Start_Receive_IT+0x18c>)
 8005408:	665a      	str	r2, [r3, #100]	; 0x64
 800540a:	e002      	b.n	8005412 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4a23      	ldr	r2, [pc, #140]	; (800549c <UART_Start_Receive_IT+0x190>)
 8005410:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d019      	beq.n	8005456 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542a:	e853 3f00 	ldrex	r3, [r3]
 800542e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	461a      	mov	r2, r3
 800543e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005440:	637b      	str	r3, [r7, #52]	; 0x34
 8005442:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005444:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005448:	e841 2300 	strex	r3, r2, [r1]
 800544c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800544e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1e6      	bne.n	8005422 <UART_Start_Receive_IT+0x116>
 8005454:	e018      	b.n	8005488 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	e853 3f00 	ldrex	r3, [r3]
 8005462:	613b      	str	r3, [r7, #16]
   return(result);
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	f043 0320 	orr.w	r3, r3, #32
 800546a:	653b      	str	r3, [r7, #80]	; 0x50
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	461a      	mov	r2, r3
 8005472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005474:	623b      	str	r3, [r7, #32]
 8005476:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005478:	69f9      	ldr	r1, [r7, #28]
 800547a:	6a3a      	ldr	r2, [r7, #32]
 800547c:	e841 2300 	strex	r3, r2, [r1]
 8005480:	61bb      	str	r3, [r7, #24]
   return(result);
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1e6      	bne.n	8005456 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	375c      	adds	r7, #92	; 0x5c
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	080058b9 	.word	0x080058b9
 800549c:	0800575d 	.word	0x0800575d

080054a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b095      	sub	sp, #84	; 0x54
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b0:	e853 3f00 	ldrex	r3, [r3]
 80054b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	461a      	mov	r2, r3
 80054c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c6:	643b      	str	r3, [r7, #64]	; 0x40
 80054c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054ce:	e841 2300 	strex	r3, r2, [r1]
 80054d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1e6      	bne.n	80054a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3308      	adds	r3, #8
 80054e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e2:	6a3b      	ldr	r3, [r7, #32]
 80054e4:	e853 3f00 	ldrex	r3, [r3]
 80054e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	f023 0301 	bic.w	r3, r3, #1
 80054f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	3308      	adds	r3, #8
 80054f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005502:	e841 2300 	strex	r3, r2, [r1]
 8005506:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1e5      	bne.n	80054da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005512:	2b01      	cmp	r3, #1
 8005514:	d118      	bne.n	8005548 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	e853 3f00 	ldrex	r3, [r3]
 8005522:	60bb      	str	r3, [r7, #8]
   return(result);
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f023 0310 	bic.w	r3, r3, #16
 800552a:	647b      	str	r3, [r7, #68]	; 0x44
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	461a      	mov	r2, r3
 8005532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005534:	61bb      	str	r3, [r7, #24]
 8005536:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005538:	6979      	ldr	r1, [r7, #20]
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	e841 2300 	strex	r3, r2, [r1]
 8005540:	613b      	str	r3, [r7, #16]
   return(result);
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1e6      	bne.n	8005516 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2220      	movs	r2, #32
 800554c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	665a      	str	r2, [r3, #100]	; 0x64
}
 800555a:	bf00      	nop
 800555c:	3754      	adds	r7, #84	; 0x54
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b084      	sub	sp, #16
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005572:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f7ff fa79 	bl	8004a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800558a:	bf00      	nop
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005592:	b480      	push	{r7}
 8005594:	b08f      	sub	sp, #60	; 0x3c
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800559e:	2b21      	cmp	r3, #33	; 0x21
 80055a0:	d14c      	bne.n	800563c <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d132      	bne.n	8005614 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	e853 3f00 	ldrex	r3, [r3]
 80055ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055c2:	637b      	str	r3, [r7, #52]	; 0x34
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	461a      	mov	r2, r3
 80055ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ce:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055d4:	e841 2300 	strex	r3, r2, [r1]
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e6      	bne.n	80055ae <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	e853 3f00 	ldrex	r3, [r3]
 80055ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055f4:	633b      	str	r3, [r7, #48]	; 0x30
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fe:	61bb      	str	r3, [r7, #24]
 8005600:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005602:	6979      	ldr	r1, [r7, #20]
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	e841 2300 	strex	r3, r2, [r1]
 800560a:	613b      	str	r3, [r7, #16]
   return(result);
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1e6      	bne.n	80055e0 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005612:	e013      	b.n	800563c <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005618:	781a      	ldrb	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005630:	b29b      	uxth	r3, r3
 8005632:	3b01      	subs	r3, #1
 8005634:	b29a      	uxth	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800563c:	bf00      	nop
 800563e:	373c      	adds	r7, #60	; 0x3c
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005648:	b480      	push	{r7}
 800564a:	b091      	sub	sp, #68	; 0x44
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005654:	2b21      	cmp	r3, #33	; 0x21
 8005656:	d151      	bne.n	80056fc <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800565e:	b29b      	uxth	r3, r3
 8005660:	2b00      	cmp	r3, #0
 8005662:	d132      	bne.n	80056ca <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566c:	e853 3f00 	ldrex	r3, [r3]
 8005670:	623b      	str	r3, [r7, #32]
   return(result);
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005678:	63bb      	str	r3, [r7, #56]	; 0x38
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	461a      	mov	r2, r3
 8005680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005682:	633b      	str	r3, [r7, #48]	; 0x30
 8005684:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005686:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800568a:	e841 2300 	strex	r3, r2, [r1]
 800568e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1e6      	bne.n	8005664 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	e853 3f00 	ldrex	r3, [r3]
 80056a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056aa:	637b      	str	r3, [r7, #52]	; 0x34
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	461a      	mov	r2, r3
 80056b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b4:	61fb      	str	r3, [r7, #28]
 80056b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b8:	69b9      	ldr	r1, [r7, #24]
 80056ba:	69fa      	ldr	r2, [r7, #28]
 80056bc:	e841 2300 	strex	r3, r2, [r1]
 80056c0:	617b      	str	r3, [r7, #20]
   return(result);
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1e6      	bne.n	8005696 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80056c8:	e018      	b.n	80056fc <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80056d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	461a      	mov	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056de:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e4:	1c9a      	adds	r2, r3, #2
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3b01      	subs	r3, #1
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80056fc:	bf00      	nop
 80056fe:	3744      	adds	r7, #68	; 0x44
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b088      	sub	sp, #32
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	e853 3f00 	ldrex	r3, [r3]
 800571c:	60bb      	str	r3, [r7, #8]
   return(result);
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005724:	61fb      	str	r3, [r7, #28]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	461a      	mov	r2, r3
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	61bb      	str	r3, [r7, #24]
 8005730:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005732:	6979      	ldr	r1, [r7, #20]
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	e841 2300 	strex	r3, r2, [r1]
 800573a:	613b      	str	r3, [r7, #16]
   return(result);
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1e6      	bne.n	8005710 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2220      	movs	r2, #32
 8005746:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7fc f978 	bl	8001a44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005754:	bf00      	nop
 8005756:	3720      	adds	r7, #32
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b096      	sub	sp, #88	; 0x58
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800576a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005772:	2b22      	cmp	r3, #34	; 0x22
 8005774:	f040 8094 	bne.w	80058a0 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005782:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005786:	b2d9      	uxtb	r1, r3
 8005788:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800578c:	b2da      	uxtb	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005792:	400a      	ands	r2, r1
 8005794:	b2d2      	uxtb	r2, r2
 8005796:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	3b01      	subs	r3, #1
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d177      	bne.n	80058b0 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c8:	e853 3f00 	ldrex	r3, [r3]
 80057cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057d4:	653b      	str	r3, [r7, #80]	; 0x50
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	461a      	mov	r2, r3
 80057dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057de:	647b      	str	r3, [r7, #68]	; 0x44
 80057e0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057e6:	e841 2300 	strex	r3, r2, [r1]
 80057ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1e6      	bne.n	80057c0 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3308      	adds	r3, #8
 80057f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fc:	e853 3f00 	ldrex	r3, [r3]
 8005800:	623b      	str	r3, [r7, #32]
   return(result);
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	f023 0301 	bic.w	r3, r3, #1
 8005808:	64fb      	str	r3, [r7, #76]	; 0x4c
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	3308      	adds	r3, #8
 8005810:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005812:	633a      	str	r2, [r7, #48]	; 0x30
 8005814:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005816:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800581a:	e841 2300 	strex	r3, r2, [r1]
 800581e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1e5      	bne.n	80057f2 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2220      	movs	r2, #32
 800582a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005836:	2b01      	cmp	r3, #1
 8005838:	d12e      	bne.n	8005898 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	e853 3f00 	ldrex	r3, [r3]
 800584c:	60fb      	str	r3, [r7, #12]
   return(result);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f023 0310 	bic.w	r3, r3, #16
 8005854:	64bb      	str	r3, [r7, #72]	; 0x48
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800585e:	61fb      	str	r3, [r7, #28]
 8005860:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	69b9      	ldr	r1, [r7, #24]
 8005864:	69fa      	ldr	r2, [r7, #28]
 8005866:	e841 2300 	strex	r3, r2, [r1]
 800586a:	617b      	str	r3, [r7, #20]
   return(result);
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1e6      	bne.n	8005840 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	69db      	ldr	r3, [r3, #28]
 8005878:	f003 0310 	and.w	r3, r3, #16
 800587c:	2b10      	cmp	r3, #16
 800587e:	d103      	bne.n	8005888 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2210      	movs	r2, #16
 8005886:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800588e:	4619      	mov	r1, r3
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f7ff f8fd 	bl	8004a90 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005896:	e00b      	b.n	80058b0 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f7fb fbed 	bl	8001078 <HAL_UART_RxCpltCallback>
}
 800589e:	e007      	b.n	80058b0 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699a      	ldr	r2, [r3, #24]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f042 0208 	orr.w	r2, r2, #8
 80058ae:	619a      	str	r2, [r3, #24]
}
 80058b0:	bf00      	nop
 80058b2:	3758      	adds	r7, #88	; 0x58
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b096      	sub	sp, #88	; 0x58
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058c6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058ce:	2b22      	cmp	r3, #34	; 0x22
 80058d0:	f040 8094 	bne.w	80059fc <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80058e4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80058e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80058ec:	4013      	ands	r3, r2
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058f2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f8:	1c9a      	adds	r2, r3, #2
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005916:	b29b      	uxth	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	d177      	bne.n	8005a0c <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005924:	e853 3f00 	ldrex	r3, [r3]
 8005928:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005930:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800593a:	643b      	str	r3, [r7, #64]	; 0x40
 800593c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005940:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005942:	e841 2300 	strex	r3, r2, [r1]
 8005946:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1e6      	bne.n	800591c <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3308      	adds	r3, #8
 8005954:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	61fb      	str	r3, [r7, #28]
   return(result);
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	f023 0301 	bic.w	r3, r3, #1
 8005964:	64bb      	str	r3, [r7, #72]	; 0x48
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3308      	adds	r3, #8
 800596c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800596e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005970:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005972:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005976:	e841 2300 	strex	r3, r2, [r1]
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1e5      	bne.n	800594e <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2220      	movs	r2, #32
 8005986:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005992:	2b01      	cmp	r3, #1
 8005994:	d12e      	bne.n	80059f4 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	e853 3f00 	ldrex	r3, [r3]
 80059a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	f023 0310 	bic.w	r3, r3, #16
 80059b0:	647b      	str	r3, [r7, #68]	; 0x44
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	461a      	mov	r2, r3
 80059b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ba:	61bb      	str	r3, [r7, #24]
 80059bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059be:	6979      	ldr	r1, [r7, #20]
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	e841 2300 	strex	r3, r2, [r1]
 80059c6:	613b      	str	r3, [r7, #16]
   return(result);
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e6      	bne.n	800599c <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	f003 0310 	and.w	r3, r3, #16
 80059d8:	2b10      	cmp	r3, #16
 80059da:	d103      	bne.n	80059e4 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2210      	movs	r2, #16
 80059e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059ea:	4619      	mov	r1, r3
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f7ff f84f 	bl	8004a90 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059f2:	e00b      	b.n	8005a0c <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f7fb fb3f 	bl	8001078 <HAL_UART_RxCpltCallback>
}
 80059fa:	e007      	b.n	8005a0c <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699a      	ldr	r2, [r3, #24]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 0208 	orr.w	r2, r2, #8
 8005a0a:	619a      	str	r2, [r3, #24]
}
 8005a0c:	bf00      	nop
 8005a0e:	3758      	adds	r7, #88	; 0x58
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005a14:	b480      	push	{r7}
 8005a16:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005a18:	bf00      	nop
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
	...

08005a24 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a2a:	f3ef 8305 	mrs	r3, IPSR
 8005a2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a30:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10f      	bne.n	8005a56 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a36:	f3ef 8310 	mrs	r3, PRIMASK
 8005a3a:	607b      	str	r3, [r7, #4]
  return(result);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d105      	bne.n	8005a4e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a42:	f3ef 8311 	mrs	r3, BASEPRI
 8005a46:	603b      	str	r3, [r7, #0]
  return(result);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d007      	beq.n	8005a5e <osKernelInitialize+0x3a>
 8005a4e:	4b0e      	ldr	r3, [pc, #56]	; (8005a88 <osKernelInitialize+0x64>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d103      	bne.n	8005a5e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005a56:	f06f 0305 	mvn.w	r3, #5
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	e00c      	b.n	8005a78 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005a5e:	4b0a      	ldr	r3, [pc, #40]	; (8005a88 <osKernelInitialize+0x64>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d105      	bne.n	8005a72 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005a66:	4b08      	ldr	r3, [pc, #32]	; (8005a88 <osKernelInitialize+0x64>)
 8005a68:	2201      	movs	r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	e002      	b.n	8005a78 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005a72:	f04f 33ff 	mov.w	r3, #4294967295
 8005a76:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005a78:	68fb      	ldr	r3, [r7, #12]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	20000294 	.word	0x20000294

08005a8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a92:	f3ef 8305 	mrs	r3, IPSR
 8005a96:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a98:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10f      	bne.n	8005abe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8005aa2:	607b      	str	r3, [r7, #4]
  return(result);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d105      	bne.n	8005ab6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005aaa:	f3ef 8311 	mrs	r3, BASEPRI
 8005aae:	603b      	str	r3, [r7, #0]
  return(result);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d007      	beq.n	8005ac6 <osKernelStart+0x3a>
 8005ab6:	4b0f      	ldr	r3, [pc, #60]	; (8005af4 <osKernelStart+0x68>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d103      	bne.n	8005ac6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8005abe:	f06f 0305 	mvn.w	r3, #5
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	e010      	b.n	8005ae8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005ac6:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <osKernelStart+0x68>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d109      	bne.n	8005ae2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005ace:	f7ff ffa1 	bl	8005a14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005ad2:	4b08      	ldr	r3, [pc, #32]	; (8005af4 <osKernelStart+0x68>)
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005ad8:	f001 fc3c 	bl	8007354 <vTaskStartScheduler>
      stat = osOK;
 8005adc:	2300      	movs	r3, #0
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	e002      	b.n	8005ae8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	20000294 	.word	0x20000294

08005af8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b090      	sub	sp, #64	; 0x40
 8005afc:	af04      	add	r7, sp, #16
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005b04:	2300      	movs	r3, #0
 8005b06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b08:	f3ef 8305 	mrs	r3, IPSR
 8005b0c:	61fb      	str	r3, [r7, #28]
  return(result);
 8005b0e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f040 808f 	bne.w	8005c34 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b16:	f3ef 8310 	mrs	r3, PRIMASK
 8005b1a:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d105      	bne.n	8005b2e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b22:	f3ef 8311 	mrs	r3, BASEPRI
 8005b26:	617b      	str	r3, [r7, #20]
  return(result);
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <osThreadNew+0x3e>
 8005b2e:	4b44      	ldr	r3, [pc, #272]	; (8005c40 <osThreadNew+0x148>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d07e      	beq.n	8005c34 <osThreadNew+0x13c>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d07b      	beq.n	8005c34 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005b3c:	2380      	movs	r3, #128	; 0x80
 8005b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005b40:	2318      	movs	r3, #24
 8005b42:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005b44:	2300      	movs	r3, #0
 8005b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005b48:	f04f 33ff 	mov.w	r3, #4294967295
 8005b4c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d045      	beq.n	8005be0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <osThreadNew+0x6a>
        name = attr->name;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d008      	beq.n	8005b88 <osThreadNew+0x90>
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	2b38      	cmp	r3, #56	; 0x38
 8005b7a:	d805      	bhi.n	8005b88 <osThreadNew+0x90>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <osThreadNew+0x94>
        return (NULL);
 8005b88:	2300      	movs	r3, #0
 8005b8a:	e054      	b.n	8005c36 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d003      	beq.n	8005b9c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	089b      	lsrs	r3, r3, #2
 8005b9a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00e      	beq.n	8005bc2 <osThreadNew+0xca>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	2bbb      	cmp	r3, #187	; 0xbb
 8005baa:	d90a      	bls.n	8005bc2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d006      	beq.n	8005bc2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d002      	beq.n	8005bc2 <osThreadNew+0xca>
        mem = 1;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	623b      	str	r3, [r7, #32]
 8005bc0:	e010      	b.n	8005be4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10c      	bne.n	8005be4 <osThreadNew+0xec>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d108      	bne.n	8005be4 <osThreadNew+0xec>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d104      	bne.n	8005be4 <osThreadNew+0xec>
          mem = 0;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	623b      	str	r3, [r7, #32]
 8005bde:	e001      	b.n	8005be4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005be0:	2300      	movs	r3, #0
 8005be2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d110      	bne.n	8005c0c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005bf2:	9202      	str	r2, [sp, #8]
 8005bf4:	9301      	str	r3, [sp, #4]
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f001 f9b1 	bl	8006f68 <xTaskCreateStatic>
 8005c06:	4603      	mov	r3, r0
 8005c08:	613b      	str	r3, [r7, #16]
 8005c0a:	e013      	b.n	8005c34 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d110      	bne.n	8005c34 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	f107 0310 	add.w	r3, r7, #16
 8005c1a:	9301      	str	r3, [sp, #4]
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f001 fa02 	bl	800702e <xTaskCreate>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d001      	beq.n	8005c34 <osThreadNew+0x13c>
          hTask = NULL;
 8005c30:	2300      	movs	r3, #0
 8005c32:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005c34:	693b      	ldr	r3, [r7, #16]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3730      	adds	r7, #48	; 0x30
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20000294 	.word	0x20000294

08005c44 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c4c:	f3ef 8305 	mrs	r3, IPSR
 8005c50:	613b      	str	r3, [r7, #16]
  return(result);
 8005c52:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10f      	bne.n	8005c78 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c58:	f3ef 8310 	mrs	r3, PRIMASK
 8005c5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d105      	bne.n	8005c70 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c64:	f3ef 8311 	mrs	r3, BASEPRI
 8005c68:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d007      	beq.n	8005c80 <osDelay+0x3c>
 8005c70:	4b0a      	ldr	r3, [pc, #40]	; (8005c9c <osDelay+0x58>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d103      	bne.n	8005c80 <osDelay+0x3c>
    stat = osErrorISR;
 8005c78:	f06f 0305 	mvn.w	r3, #5
 8005c7c:	617b      	str	r3, [r7, #20]
 8005c7e:	e007      	b.n	8005c90 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005c80:	2300      	movs	r3, #0
 8005c82:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f001 fb2c 	bl	80072e8 <vTaskDelay>
    }
  }

  return (stat);
 8005c90:	697b      	ldr	r3, [r7, #20]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20000294 	.word	0x20000294

08005ca0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08c      	sub	sp, #48	; 0x30
 8005ca4:	af02      	add	r7, sp, #8
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005cac:	2300      	movs	r3, #0
 8005cae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cb0:	f3ef 8305 	mrs	r3, IPSR
 8005cb4:	61bb      	str	r3, [r7, #24]
  return(result);
 8005cb6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f040 8086 	bne.w	8005dca <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cbe:	f3ef 8310 	mrs	r3, PRIMASK
 8005cc2:	617b      	str	r3, [r7, #20]
  return(result);
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d105      	bne.n	8005cd6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005cca:	f3ef 8311 	mrs	r3, BASEPRI
 8005cce:	613b      	str	r3, [r7, #16]
  return(result);
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <osSemaphoreNew+0x3e>
 8005cd6:	4b3f      	ldr	r3, [pc, #252]	; (8005dd4 <osSemaphoreNew+0x134>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d075      	beq.n	8005dca <osSemaphoreNew+0x12a>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d072      	beq.n	8005dca <osSemaphoreNew+0x12a>
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d86e      	bhi.n	8005dca <osSemaphoreNew+0x12a>
    mem = -1;
 8005cec:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d015      	beq.n	8005d24 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d006      	beq.n	8005d0e <osSemaphoreNew+0x6e>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	2b4f      	cmp	r3, #79	; 0x4f
 8005d06:	d902      	bls.n	8005d0e <osSemaphoreNew+0x6e>
        mem = 1;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	623b      	str	r3, [r7, #32]
 8005d0c:	e00c      	b.n	8005d28 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d108      	bne.n	8005d28 <osSemaphoreNew+0x88>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d104      	bne.n	8005d28 <osSemaphoreNew+0x88>
          mem = 0;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	623b      	str	r3, [r7, #32]
 8005d22:	e001      	b.n	8005d28 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8005d24:	2300      	movs	r3, #0
 8005d26:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2e:	d04c      	beq.n	8005dca <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d128      	bne.n	8005d88 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d10a      	bne.n	8005d52 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	2203      	movs	r2, #3
 8005d42:	9200      	str	r2, [sp, #0]
 8005d44:	2200      	movs	r2, #0
 8005d46:	2100      	movs	r1, #0
 8005d48:	2001      	movs	r0, #1
 8005d4a:	f000 fa1d 	bl	8006188 <xQueueGenericCreateStatic>
 8005d4e:	6278      	str	r0, [r7, #36]	; 0x24
 8005d50:	e005      	b.n	8005d5e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8005d52:	2203      	movs	r2, #3
 8005d54:	2100      	movs	r1, #0
 8005d56:	2001      	movs	r0, #1
 8005d58:	f000 fa98 	bl	800628c <xQueueGenericCreate>
 8005d5c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d022      	beq.n	8005daa <osSemaphoreNew+0x10a>
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d01f      	beq.n	8005daa <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	2100      	movs	r1, #0
 8005d70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d72:	f000 fb63 	bl	800643c <xQueueGenericSend>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d016      	beq.n	8005daa <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8005d7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d7e:	f000 ff1d 	bl	8006bbc <vQueueDelete>
            hSemaphore = NULL;
 8005d82:	2300      	movs	r3, #0
 8005d84:	627b      	str	r3, [r7, #36]	; 0x24
 8005d86:	e010      	b.n	8005daa <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d108      	bne.n	8005da0 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	461a      	mov	r2, r3
 8005d94:	68b9      	ldr	r1, [r7, #8]
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 fadd 	bl	8006356 <xQueueCreateCountingSemaphoreStatic>
 8005d9c:	6278      	str	r0, [r7, #36]	; 0x24
 8005d9e:	e004      	b.n	8005daa <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005da0:	68b9      	ldr	r1, [r7, #8]
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f000 fb12 	bl	80063cc <xQueueCreateCountingSemaphore>
 8005da8:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00c      	beq.n	8005dca <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <osSemaphoreNew+0x11e>
          name = attr->name;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	61fb      	str	r3, [r7, #28]
 8005dbc:	e001      	b.n	8005dc2 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005dc2:	69f9      	ldr	r1, [r7, #28]
 8005dc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005dc6:	f001 f847 	bl	8006e58 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3728      	adds	r7, #40	; 0x28
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	20000294 	.word	0x20000294

08005dd8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b08c      	sub	sp, #48	; 0x30
 8005ddc:	af02      	add	r7, sp, #8
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005de4:	2300      	movs	r3, #0
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005de8:	f3ef 8305 	mrs	r3, IPSR
 8005dec:	61bb      	str	r3, [r7, #24]
  return(result);
 8005dee:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d16f      	bne.n	8005ed4 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005df4:	f3ef 8310 	mrs	r3, PRIMASK
 8005df8:	617b      	str	r3, [r7, #20]
  return(result);
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d105      	bne.n	8005e0c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e00:	f3ef 8311 	mrs	r3, BASEPRI
 8005e04:	613b      	str	r3, [r7, #16]
  return(result);
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d003      	beq.n	8005e14 <osMessageQueueNew+0x3c>
 8005e0c:	4b34      	ldr	r3, [pc, #208]	; (8005ee0 <osMessageQueueNew+0x108>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d05f      	beq.n	8005ed4 <osMessageQueueNew+0xfc>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d05c      	beq.n	8005ed4 <osMessageQueueNew+0xfc>
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d059      	beq.n	8005ed4 <osMessageQueueNew+0xfc>
    mem = -1;
 8005e20:	f04f 33ff 	mov.w	r3, #4294967295
 8005e24:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d029      	beq.n	8005e80 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d012      	beq.n	8005e5a <osMessageQueueNew+0x82>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	2b4f      	cmp	r3, #79	; 0x4f
 8005e3a:	d90e      	bls.n	8005e5a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00a      	beq.n	8005e5a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	695a      	ldr	r2, [r3, #20]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	68b9      	ldr	r1, [r7, #8]
 8005e4c:	fb01 f303 	mul.w	r3, r1, r3
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d302      	bcc.n	8005e5a <osMessageQueueNew+0x82>
        mem = 1;
 8005e54:	2301      	movs	r3, #1
 8005e56:	623b      	str	r3, [r7, #32]
 8005e58:	e014      	b.n	8005e84 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d110      	bne.n	8005e84 <osMessageQueueNew+0xac>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10c      	bne.n	8005e84 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d108      	bne.n	8005e84 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d104      	bne.n	8005e84 <osMessageQueueNew+0xac>
          mem = 0;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	623b      	str	r3, [r7, #32]
 8005e7e:	e001      	b.n	8005e84 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005e80:	2300      	movs	r3, #0
 8005e82:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005e84:	6a3b      	ldr	r3, [r7, #32]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d10b      	bne.n	8005ea2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	691a      	ldr	r2, [r3, #16]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	2100      	movs	r1, #0
 8005e94:	9100      	str	r1, [sp, #0]
 8005e96:	68b9      	ldr	r1, [r7, #8]
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 f975 	bl	8006188 <xQueueGenericCreateStatic>
 8005e9e:	6278      	str	r0, [r7, #36]	; 0x24
 8005ea0:	e008      	b.n	8005eb4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d105      	bne.n	8005eb4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	68b9      	ldr	r1, [r7, #8]
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 f9ed 	bl	800628c <xQueueGenericCreate>
 8005eb2:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00c      	beq.n	8005ed4 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d003      	beq.n	8005ec8 <osMessageQueueNew+0xf0>
        name = attr->name;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	61fb      	str	r3, [r7, #28]
 8005ec6:	e001      	b.n	8005ecc <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005ecc:	69f9      	ldr	r1, [r7, #28]
 8005ece:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ed0:	f000 ffc2 	bl	8006e58 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3728      	adds	r7, #40	; 0x28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	20000294 	.word	0x20000294

08005ee4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4a07      	ldr	r2, [pc, #28]	; (8005f10 <vApplicationGetIdleTaskMemory+0x2c>)
 8005ef4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	4a06      	ldr	r2, [pc, #24]	; (8005f14 <vApplicationGetIdleTaskMemory+0x30>)
 8005efa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2280      	movs	r2, #128	; 0x80
 8005f00:	601a      	str	r2, [r3, #0]
}
 8005f02:	bf00      	nop
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	20000298 	.word	0x20000298
 8005f14:	20000354 	.word	0x20000354

08005f18 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4a07      	ldr	r2, [pc, #28]	; (8005f44 <vApplicationGetTimerTaskMemory+0x2c>)
 8005f28:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	4a06      	ldr	r2, [pc, #24]	; (8005f48 <vApplicationGetTimerTaskMemory+0x30>)
 8005f2e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f36:	601a      	str	r2, [r3, #0]
}
 8005f38:	bf00      	nop
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	20000554 	.word	0x20000554
 8005f48:	20000610 	.word	0x20000610

08005f4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f103 0208 	add.w	r2, r3, #8
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f04f 32ff 	mov.w	r2, #4294967295
 8005f64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f103 0208 	add.w	r2, r3, #8
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f103 0208 	add.w	r2, r3, #8
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f9a:	bf00      	nop
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b085      	sub	sp, #20
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	689a      	ldr	r2, [r3, #8]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	1c5a      	adds	r2, r3, #1
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	601a      	str	r2, [r3, #0]
}
 8005fe2:	bf00      	nop
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b085      	sub	sp, #20
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
 8005ff6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006004:	d103      	bne.n	800600e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	60fb      	str	r3, [r7, #12]
 800600c:	e00c      	b.n	8006028 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	3308      	adds	r3, #8
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	e002      	b.n	800601c <vListInsert+0x2e>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	429a      	cmp	r2, r3
 8006026:	d2f6      	bcs.n	8006016 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	683a      	ldr	r2, [r7, #0]
 8006036:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	1c5a      	adds	r2, r3, #1
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	601a      	str	r2, [r3, #0]
}
 8006054:	bf00      	nop
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6892      	ldr	r2, [r2, #8]
 8006076:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6852      	ldr	r2, [r2, #4]
 8006080:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	429a      	cmp	r2, r3
 800608a:	d103      	bne.n	8006094 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689a      	ldr	r2, [r3, #8]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	1e5a      	subs	r2, r3, #1
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3714      	adds	r7, #20
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10c      	bne.n	80060e2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80060c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060cc:	b672      	cpsid	i
 80060ce:	f383 8811 	msr	BASEPRI, r3
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	f3bf 8f4f 	dsb	sy
 80060da:	b662      	cpsie	i
 80060dc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80060de:	bf00      	nop
 80060e0:	e7fe      	b.n	80060e0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80060e2:	f002 fe63 	bl	8008dac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ee:	68f9      	ldr	r1, [r7, #12]
 80060f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80060f2:	fb01 f303 	mul.w	r3, r1, r3
 80060f6:	441a      	add	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006112:	3b01      	subs	r3, #1
 8006114:	68f9      	ldr	r1, [r7, #12]
 8006116:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006118:	fb01 f303 	mul.w	r3, r1, r3
 800611c:	441a      	add	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	22ff      	movs	r2, #255	; 0xff
 8006126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	22ff      	movs	r2, #255	; 0xff
 800612e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d114      	bne.n	8006162 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d01a      	beq.n	8006176 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	3310      	adds	r3, #16
 8006144:	4618      	mov	r0, r3
 8006146:	f001 fbbf 	bl	80078c8 <xTaskRemoveFromEventList>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d012      	beq.n	8006176 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006150:	4b0c      	ldr	r3, [pc, #48]	; (8006184 <xQueueGenericReset+0xd0>)
 8006152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006156:	601a      	str	r2, [r3, #0]
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	e009      	b.n	8006176 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	3310      	adds	r3, #16
 8006166:	4618      	mov	r0, r3
 8006168:	f7ff fef0 	bl	8005f4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	3324      	adds	r3, #36	; 0x24
 8006170:	4618      	mov	r0, r3
 8006172:	f7ff feeb 	bl	8005f4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006176:	f002 fe4d 	bl	8008e14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800617a:	2301      	movs	r3, #1
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	e000ed04 	.word	0xe000ed04

08006188 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006188:	b580      	push	{r7, lr}
 800618a:	b08e      	sub	sp, #56	; 0x38
 800618c:	af02      	add	r7, sp, #8
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
 8006194:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10c      	bne.n	80061b6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800619c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a0:	b672      	cpsid	i
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	b662      	cpsie	i
 80061b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061b2:	bf00      	nop
 80061b4:	e7fe      	b.n	80061b4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10c      	bne.n	80061d6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80061bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c0:	b672      	cpsid	i
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	b662      	cpsie	i
 80061d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061d2:	bf00      	nop
 80061d4:	e7fe      	b.n	80061d4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d002      	beq.n	80061e2 <xQueueGenericCreateStatic+0x5a>
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <xQueueGenericCreateStatic+0x5e>
 80061e2:	2301      	movs	r3, #1
 80061e4:	e000      	b.n	80061e8 <xQueueGenericCreateStatic+0x60>
 80061e6:	2300      	movs	r3, #0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10c      	bne.n	8006206 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80061ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f0:	b672      	cpsid	i
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	b662      	cpsie	i
 8006200:	623b      	str	r3, [r7, #32]
}
 8006202:	bf00      	nop
 8006204:	e7fe      	b.n	8006204 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d102      	bne.n	8006212 <xQueueGenericCreateStatic+0x8a>
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <xQueueGenericCreateStatic+0x8e>
 8006212:	2301      	movs	r3, #1
 8006214:	e000      	b.n	8006218 <xQueueGenericCreateStatic+0x90>
 8006216:	2300      	movs	r3, #0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10c      	bne.n	8006236 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800621c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006220:	b672      	cpsid	i
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	b662      	cpsie	i
 8006230:	61fb      	str	r3, [r7, #28]
}
 8006232:	bf00      	nop
 8006234:	e7fe      	b.n	8006234 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006236:	2350      	movs	r3, #80	; 0x50
 8006238:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	2b50      	cmp	r3, #80	; 0x50
 800623e:	d00c      	beq.n	800625a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	b672      	cpsid	i
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	b662      	cpsie	i
 8006254:	61bb      	str	r3, [r7, #24]
}
 8006256:	bf00      	nop
 8006258:	e7fe      	b.n	8006258 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800625a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00d      	beq.n	8006282 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006268:	2201      	movs	r2, #1
 800626a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800626e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	4613      	mov	r3, r2
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	68b9      	ldr	r1, [r7, #8]
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 f847 	bl	8006310 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006284:	4618      	mov	r0, r3
 8006286:	3730      	adds	r7, #48	; 0x30
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800628c:	b580      	push	{r7, lr}
 800628e:	b08a      	sub	sp, #40	; 0x28
 8006290:	af02      	add	r7, sp, #8
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	4613      	mov	r3, r2
 8006298:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10c      	bne.n	80062ba <xQueueGenericCreate+0x2e>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	b672      	cpsid	i
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	b662      	cpsie	i
 80062b4:	613b      	str	r3, [r7, #16]
}
 80062b6:	bf00      	nop
 80062b8:	e7fe      	b.n	80062b8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d102      	bne.n	80062c6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80062c0:	2300      	movs	r3, #0
 80062c2:	61fb      	str	r3, [r7, #28]
 80062c4:	e004      	b.n	80062d0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	fb02 f303 	mul.w	r3, r2, r3
 80062ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	3350      	adds	r3, #80	; 0x50
 80062d4:	4618      	mov	r0, r3
 80062d6:	f002 fe95 	bl	8009004 <pvPortMalloc>
 80062da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d011      	beq.n	8006306 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	3350      	adds	r3, #80	; 0x50
 80062ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80062f4:	79fa      	ldrb	r2, [r7, #7]
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	4613      	mov	r3, r2
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	68b9      	ldr	r1, [r7, #8]
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 f805 	bl	8006310 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006306:	69bb      	ldr	r3, [r7, #24]
	}
 8006308:	4618      	mov	r0, r3
 800630a:	3720      	adds	r7, #32
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
 800631c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d103      	bne.n	800632c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	601a      	str	r2, [r3, #0]
 800632a:	e002      	b.n	8006332 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800633e:	2101      	movs	r1, #1
 8006340:	69b8      	ldr	r0, [r7, #24]
 8006342:	f7ff feb7 	bl	80060b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	78fa      	ldrb	r2, [r7, #3]
 800634a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800634e:	bf00      	nop
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006356:	b580      	push	{r7, lr}
 8006358:	b08a      	sub	sp, #40	; 0x28
 800635a:	af02      	add	r7, sp, #8
 800635c:	60f8      	str	r0, [r7, #12]
 800635e:	60b9      	str	r1, [r7, #8]
 8006360:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10c      	bne.n	8006382 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636c:	b672      	cpsid	i
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	b662      	cpsie	i
 800637c:	61bb      	str	r3, [r7, #24]
}
 800637e:	bf00      	nop
 8006380:	e7fe      	b.n	8006380 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	429a      	cmp	r2, r3
 8006388:	d90c      	bls.n	80063a4 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638e:	b672      	cpsid	i
 8006390:	f383 8811 	msr	BASEPRI, r3
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	b662      	cpsie	i
 800639e:	617b      	str	r3, [r7, #20]
}
 80063a0:	bf00      	nop
 80063a2:	e7fe      	b.n	80063a2 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80063a4:	2302      	movs	r3, #2
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	2100      	movs	r1, #0
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f7ff feea 	bl	8006188 <xQueueGenericCreateStatic>
 80063b4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d002      	beq.n	80063c2 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80063c2:	69fb      	ldr	r3, [r7, #28]
	}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3720      	adds	r7, #32
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10c      	bne.n	80063f6 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 80063dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e0:	b672      	cpsid	i
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	b662      	cpsie	i
 80063f0:	613b      	str	r3, [r7, #16]
}
 80063f2:	bf00      	nop
 80063f4:	e7fe      	b.n	80063f4 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d90c      	bls.n	8006418 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006402:	b672      	cpsid	i
 8006404:	f383 8811 	msr	BASEPRI, r3
 8006408:	f3bf 8f6f 	isb	sy
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	b662      	cpsie	i
 8006412:	60fb      	str	r3, [r7, #12]
}
 8006414:	bf00      	nop
 8006416:	e7fe      	b.n	8006416 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006418:	2202      	movs	r2, #2
 800641a:	2100      	movs	r1, #0
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7ff ff35 	bl	800628c <xQueueGenericCreate>
 8006422:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d002      	beq.n	8006430 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006430:	697b      	ldr	r3, [r7, #20]
	}
 8006432:	4618      	mov	r0, r3
 8006434:	3718      	adds	r7, #24
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
	...

0800643c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b08e      	sub	sp, #56	; 0x38
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
 8006448:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800644a:	2300      	movs	r3, #0
 800644c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10c      	bne.n	8006472 <xQueueGenericSend+0x36>
	__asm volatile
 8006458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645c:	b672      	cpsid	i
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	b662      	cpsie	i
 800646c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800646e:	bf00      	nop
 8006470:	e7fe      	b.n	8006470 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d103      	bne.n	8006480 <xQueueGenericSend+0x44>
 8006478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <xQueueGenericSend+0x48>
 8006480:	2301      	movs	r3, #1
 8006482:	e000      	b.n	8006486 <xQueueGenericSend+0x4a>
 8006484:	2300      	movs	r3, #0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10c      	bne.n	80064a4 <xQueueGenericSend+0x68>
	__asm volatile
 800648a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648e:	b672      	cpsid	i
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	b662      	cpsie	i
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064a0:	bf00      	nop
 80064a2:	e7fe      	b.n	80064a2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d103      	bne.n	80064b2 <xQueueGenericSend+0x76>
 80064aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d101      	bne.n	80064b6 <xQueueGenericSend+0x7a>
 80064b2:	2301      	movs	r3, #1
 80064b4:	e000      	b.n	80064b8 <xQueueGenericSend+0x7c>
 80064b6:	2300      	movs	r3, #0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10c      	bne.n	80064d6 <xQueueGenericSend+0x9a>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c0:	b672      	cpsid	i
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	b662      	cpsie	i
 80064d0:	623b      	str	r3, [r7, #32]
}
 80064d2:	bf00      	nop
 80064d4:	e7fe      	b.n	80064d4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064d6:	f001 fbc1 	bl	8007c5c <xTaskGetSchedulerState>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d102      	bne.n	80064e6 <xQueueGenericSend+0xaa>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <xQueueGenericSend+0xae>
 80064e6:	2301      	movs	r3, #1
 80064e8:	e000      	b.n	80064ec <xQueueGenericSend+0xb0>
 80064ea:	2300      	movs	r3, #0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10c      	bne.n	800650a <xQueueGenericSend+0xce>
	__asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f4:	b672      	cpsid	i
 80064f6:	f383 8811 	msr	BASEPRI, r3
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	b662      	cpsie	i
 8006504:	61fb      	str	r3, [r7, #28]
}
 8006506:	bf00      	nop
 8006508:	e7fe      	b.n	8006508 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800650a:	f002 fc4f 	bl	8008dac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800650e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006516:	429a      	cmp	r2, r3
 8006518:	d302      	bcc.n	8006520 <xQueueGenericSend+0xe4>
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2b02      	cmp	r3, #2
 800651e:	d129      	bne.n	8006574 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	68b9      	ldr	r1, [r7, #8]
 8006524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006526:	f000 fb86 	bl	8006c36 <prvCopyDataToQueue>
 800652a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800652c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	2b00      	cmp	r3, #0
 8006532:	d010      	beq.n	8006556 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006536:	3324      	adds	r3, #36	; 0x24
 8006538:	4618      	mov	r0, r3
 800653a:	f001 f9c5 	bl	80078c8 <xTaskRemoveFromEventList>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d013      	beq.n	800656c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006544:	4b3f      	ldr	r3, [pc, #252]	; (8006644 <xQueueGenericSend+0x208>)
 8006546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	e00a      	b.n	800656c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006558:	2b00      	cmp	r3, #0
 800655a:	d007      	beq.n	800656c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800655c:	4b39      	ldr	r3, [pc, #228]	; (8006644 <xQueueGenericSend+0x208>)
 800655e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	f3bf 8f4f 	dsb	sy
 8006568:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800656c:	f002 fc52 	bl	8008e14 <vPortExitCritical>
				return pdPASS;
 8006570:	2301      	movs	r3, #1
 8006572:	e063      	b.n	800663c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d103      	bne.n	8006582 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800657a:	f002 fc4b 	bl	8008e14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800657e:	2300      	movs	r3, #0
 8006580:	e05c      	b.n	800663c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006584:	2b00      	cmp	r3, #0
 8006586:	d106      	bne.n	8006596 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006588:	f107 0314 	add.w	r3, r7, #20
 800658c:	4618      	mov	r0, r3
 800658e:	f001 fa01 	bl	8007994 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006592:	2301      	movs	r3, #1
 8006594:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006596:	f002 fc3d 	bl	8008e14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800659a:	f000 ff4f 	bl	800743c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800659e:	f002 fc05 	bl	8008dac <vPortEnterCritical>
 80065a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065a8:	b25b      	sxtb	r3, r3
 80065aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ae:	d103      	bne.n	80065b8 <xQueueGenericSend+0x17c>
 80065b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065be:	b25b      	sxtb	r3, r3
 80065c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c4:	d103      	bne.n	80065ce <xQueueGenericSend+0x192>
 80065c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065ce:	f002 fc21 	bl	8008e14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065d2:	1d3a      	adds	r2, r7, #4
 80065d4:	f107 0314 	add.w	r3, r7, #20
 80065d8:	4611      	mov	r1, r2
 80065da:	4618      	mov	r0, r3
 80065dc:	f001 f9f0 	bl	80079c0 <xTaskCheckForTimeOut>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d124      	bne.n	8006630 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80065e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065e8:	f000 fc1d 	bl	8006e26 <prvIsQueueFull>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d018      	beq.n	8006624 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f4:	3310      	adds	r3, #16
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	4611      	mov	r1, r2
 80065fa:	4618      	mov	r0, r3
 80065fc:	f001 f910 	bl	8007820 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006600:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006602:	f000 fba8 	bl	8006d56 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006606:	f000 ff27 	bl	8007458 <xTaskResumeAll>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	f47f af7c 	bne.w	800650a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006612:	4b0c      	ldr	r3, [pc, #48]	; (8006644 <xQueueGenericSend+0x208>)
 8006614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	e772      	b.n	800650a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006626:	f000 fb96 	bl	8006d56 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800662a:	f000 ff15 	bl	8007458 <xTaskResumeAll>
 800662e:	e76c      	b.n	800650a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006632:	f000 fb90 	bl	8006d56 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006636:	f000 ff0f 	bl	8007458 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800663a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800663c:	4618      	mov	r0, r3
 800663e:	3738      	adds	r7, #56	; 0x38
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	e000ed04 	.word	0xe000ed04

08006648 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b08e      	sub	sp, #56	; 0x38
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
 8006654:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10c      	bne.n	800667a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006664:	b672      	cpsid	i
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	b662      	cpsie	i
 8006674:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006676:	bf00      	nop
 8006678:	e7fe      	b.n	8006678 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d103      	bne.n	8006688 <xQueueGenericSendFromISR+0x40>
 8006680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <xQueueGenericSendFromISR+0x44>
 8006688:	2301      	movs	r3, #1
 800668a:	e000      	b.n	800668e <xQueueGenericSendFromISR+0x46>
 800668c:	2300      	movs	r3, #0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10c      	bne.n	80066ac <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8006692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006696:	b672      	cpsid	i
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	b662      	cpsie	i
 80066a6:	623b      	str	r3, [r7, #32]
}
 80066a8:	bf00      	nop
 80066aa:	e7fe      	b.n	80066aa <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d103      	bne.n	80066ba <xQueueGenericSendFromISR+0x72>
 80066b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d101      	bne.n	80066be <xQueueGenericSendFromISR+0x76>
 80066ba:	2301      	movs	r3, #1
 80066bc:	e000      	b.n	80066c0 <xQueueGenericSendFromISR+0x78>
 80066be:	2300      	movs	r3, #0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10c      	bne.n	80066de <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80066c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c8:	b672      	cpsid	i
 80066ca:	f383 8811 	msr	BASEPRI, r3
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	b662      	cpsie	i
 80066d8:	61fb      	str	r3, [r7, #28]
}
 80066da:	bf00      	nop
 80066dc:	e7fe      	b.n	80066dc <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066de:	f002 fc4d 	bl	8008f7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80066e2:	f3ef 8211 	mrs	r2, BASEPRI
 80066e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ea:	b672      	cpsid	i
 80066ec:	f383 8811 	msr	BASEPRI, r3
 80066f0:	f3bf 8f6f 	isb	sy
 80066f4:	f3bf 8f4f 	dsb	sy
 80066f8:	b662      	cpsie	i
 80066fa:	61ba      	str	r2, [r7, #24]
 80066fc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80066fe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006700:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800670a:	429a      	cmp	r2, r3
 800670c:	d302      	bcc.n	8006714 <xQueueGenericSendFromISR+0xcc>
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2b02      	cmp	r3, #2
 8006712:	d12c      	bne.n	800676e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006716:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800671a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	68b9      	ldr	r1, [r7, #8]
 8006722:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006724:	f000 fa87 	bl	8006c36 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006728:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800672c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006730:	d112      	bne.n	8006758 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006736:	2b00      	cmp	r3, #0
 8006738:	d016      	beq.n	8006768 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800673a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673c:	3324      	adds	r3, #36	; 0x24
 800673e:	4618      	mov	r0, r3
 8006740:	f001 f8c2 	bl	80078c8 <xTaskRemoveFromEventList>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00e      	beq.n	8006768 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00b      	beq.n	8006768 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	e007      	b.n	8006768 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006758:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800675c:	3301      	adds	r3, #1
 800675e:	b2db      	uxtb	r3, r3
 8006760:	b25a      	sxtb	r2, r3
 8006762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006768:	2301      	movs	r3, #1
 800676a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800676c:	e001      	b.n	8006772 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800676e:	2300      	movs	r3, #0
 8006770:	637b      	str	r3, [r7, #52]	; 0x34
 8006772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006774:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800677c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800677e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006780:	4618      	mov	r0, r3
 8006782:	3738      	adds	r7, #56	; 0x38
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b08c      	sub	sp, #48	; 0x30
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006794:	2300      	movs	r3, #0
 8006796:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800679c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10c      	bne.n	80067bc <xQueueReceive+0x34>
	__asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a6:	b672      	cpsid	i
 80067a8:	f383 8811 	msr	BASEPRI, r3
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	b662      	cpsie	i
 80067b6:	623b      	str	r3, [r7, #32]
}
 80067b8:	bf00      	nop
 80067ba:	e7fe      	b.n	80067ba <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d103      	bne.n	80067ca <xQueueReceive+0x42>
 80067c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <xQueueReceive+0x46>
 80067ca:	2301      	movs	r3, #1
 80067cc:	e000      	b.n	80067d0 <xQueueReceive+0x48>
 80067ce:	2300      	movs	r3, #0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10c      	bne.n	80067ee <xQueueReceive+0x66>
	__asm volatile
 80067d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d8:	b672      	cpsid	i
 80067da:	f383 8811 	msr	BASEPRI, r3
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f3bf 8f4f 	dsb	sy
 80067e6:	b662      	cpsie	i
 80067e8:	61fb      	str	r3, [r7, #28]
}
 80067ea:	bf00      	nop
 80067ec:	e7fe      	b.n	80067ec <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067ee:	f001 fa35 	bl	8007c5c <xTaskGetSchedulerState>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d102      	bne.n	80067fe <xQueueReceive+0x76>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <xQueueReceive+0x7a>
 80067fe:	2301      	movs	r3, #1
 8006800:	e000      	b.n	8006804 <xQueueReceive+0x7c>
 8006802:	2300      	movs	r3, #0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10c      	bne.n	8006822 <xQueueReceive+0x9a>
	__asm volatile
 8006808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680c:	b672      	cpsid	i
 800680e:	f383 8811 	msr	BASEPRI, r3
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	b662      	cpsie	i
 800681c:	61bb      	str	r3, [r7, #24]
}
 800681e:	bf00      	nop
 8006820:	e7fe      	b.n	8006820 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006822:	f002 fac3 	bl	8008dac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	2b00      	cmp	r3, #0
 8006830:	d01f      	beq.n	8006872 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006832:	68b9      	ldr	r1, [r7, #8]
 8006834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006836:	f000 fa68 	bl	8006d0a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	1e5a      	subs	r2, r3, #1
 800683e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006840:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00f      	beq.n	800686a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800684a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684c:	3310      	adds	r3, #16
 800684e:	4618      	mov	r0, r3
 8006850:	f001 f83a 	bl	80078c8 <xTaskRemoveFromEventList>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d007      	beq.n	800686a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800685a:	4b3d      	ldr	r3, [pc, #244]	; (8006950 <xQueueReceive+0x1c8>)
 800685c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006860:	601a      	str	r2, [r3, #0]
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800686a:	f002 fad3 	bl	8008e14 <vPortExitCritical>
				return pdPASS;
 800686e:	2301      	movs	r3, #1
 8006870:	e069      	b.n	8006946 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d103      	bne.n	8006880 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006878:	f002 facc 	bl	8008e14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800687c:	2300      	movs	r3, #0
 800687e:	e062      	b.n	8006946 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006882:	2b00      	cmp	r3, #0
 8006884:	d106      	bne.n	8006894 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006886:	f107 0310 	add.w	r3, r7, #16
 800688a:	4618      	mov	r0, r3
 800688c:	f001 f882 	bl	8007994 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006890:	2301      	movs	r3, #1
 8006892:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006894:	f002 fabe 	bl	8008e14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006898:	f000 fdd0 	bl	800743c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800689c:	f002 fa86 	bl	8008dac <vPortEnterCritical>
 80068a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068a6:	b25b      	sxtb	r3, r3
 80068a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ac:	d103      	bne.n	80068b6 <xQueueReceive+0x12e>
 80068ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068bc:	b25b      	sxtb	r3, r3
 80068be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c2:	d103      	bne.n	80068cc <xQueueReceive+0x144>
 80068c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068cc:	f002 faa2 	bl	8008e14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068d0:	1d3a      	adds	r2, r7, #4
 80068d2:	f107 0310 	add.w	r3, r7, #16
 80068d6:	4611      	mov	r1, r2
 80068d8:	4618      	mov	r0, r3
 80068da:	f001 f871 	bl	80079c0 <xTaskCheckForTimeOut>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d123      	bne.n	800692c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068e6:	f000 fa88 	bl	8006dfa <prvIsQueueEmpty>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d017      	beq.n	8006920 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80068f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f2:	3324      	adds	r3, #36	; 0x24
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	4611      	mov	r1, r2
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 ff91 	bl	8007820 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006900:	f000 fa29 	bl	8006d56 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006904:	f000 fda8 	bl	8007458 <xTaskResumeAll>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d189      	bne.n	8006822 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800690e:	4b10      	ldr	r3, [pc, #64]	; (8006950 <xQueueReceive+0x1c8>)
 8006910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	e780      	b.n	8006822 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006922:	f000 fa18 	bl	8006d56 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006926:	f000 fd97 	bl	8007458 <xTaskResumeAll>
 800692a:	e77a      	b.n	8006822 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800692c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800692e:	f000 fa12 	bl	8006d56 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006932:	f000 fd91 	bl	8007458 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006938:	f000 fa5f 	bl	8006dfa <prvIsQueueEmpty>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	f43f af6f 	beq.w	8006822 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006944:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006946:	4618      	mov	r0, r3
 8006948:	3730      	adds	r7, #48	; 0x30
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	e000ed04 	.word	0xe000ed04

08006954 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b08e      	sub	sp, #56	; 0x38
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800695e:	2300      	movs	r3, #0
 8006960:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006966:	2300      	movs	r3, #0
 8006968:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800696a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10c      	bne.n	800698a <xQueueSemaphoreTake+0x36>
	__asm volatile
 8006970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006974:	b672      	cpsid	i
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	b662      	cpsie	i
 8006984:	623b      	str	r3, [r7, #32]
}
 8006986:	bf00      	nop
 8006988:	e7fe      	b.n	8006988 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800698a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00c      	beq.n	80069ac <xQueueSemaphoreTake+0x58>
	__asm volatile
 8006992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006996:	b672      	cpsid	i
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	b662      	cpsie	i
 80069a6:	61fb      	str	r3, [r7, #28]
}
 80069a8:	bf00      	nop
 80069aa:	e7fe      	b.n	80069aa <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069ac:	f001 f956 	bl	8007c5c <xTaskGetSchedulerState>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d102      	bne.n	80069bc <xQueueSemaphoreTake+0x68>
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d101      	bne.n	80069c0 <xQueueSemaphoreTake+0x6c>
 80069bc:	2301      	movs	r3, #1
 80069be:	e000      	b.n	80069c2 <xQueueSemaphoreTake+0x6e>
 80069c0:	2300      	movs	r3, #0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10c      	bne.n	80069e0 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80069c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ca:	b672      	cpsid	i
 80069cc:	f383 8811 	msr	BASEPRI, r3
 80069d0:	f3bf 8f6f 	isb	sy
 80069d4:	f3bf 8f4f 	dsb	sy
 80069d8:	b662      	cpsie	i
 80069da:	61bb      	str	r3, [r7, #24]
}
 80069dc:	bf00      	nop
 80069de:	e7fe      	b.n	80069de <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069e0:	f002 f9e4 	bl	8008dac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80069e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80069ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d024      	beq.n	8006a3a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80069f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f2:	1e5a      	subs	r2, r3, #1
 80069f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d104      	bne.n	8006a0a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006a00:	f001 faaa 	bl	8007f58 <pvTaskIncrementMutexHeldCount>
 8006a04:	4602      	mov	r2, r0
 8006a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a08:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00f      	beq.n	8006a32 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a14:	3310      	adds	r3, #16
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 ff56 	bl	80078c8 <xTaskRemoveFromEventList>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d007      	beq.n	8006a32 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a22:	4b55      	ldr	r3, [pc, #340]	; (8006b78 <xQueueSemaphoreTake+0x224>)
 8006a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a32:	f002 f9ef 	bl	8008e14 <vPortExitCritical>
				return pdPASS;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e099      	b.n	8006b6e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d113      	bne.n	8006a68 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00c      	beq.n	8006a60 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8006a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4a:	b672      	cpsid	i
 8006a4c:	f383 8811 	msr	BASEPRI, r3
 8006a50:	f3bf 8f6f 	isb	sy
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	b662      	cpsie	i
 8006a5a:	617b      	str	r3, [r7, #20]
}
 8006a5c:	bf00      	nop
 8006a5e:	e7fe      	b.n	8006a5e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006a60:	f002 f9d8 	bl	8008e14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a64:	2300      	movs	r3, #0
 8006a66:	e082      	b.n	8006b6e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d106      	bne.n	8006a7c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a6e:	f107 030c 	add.w	r3, r7, #12
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 ff8e 	bl	8007994 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a7c:	f002 f9ca 	bl	8008e14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a80:	f000 fcdc 	bl	800743c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a84:	f002 f992 	bl	8008dac <vPortEnterCritical>
 8006a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a8e:	b25b      	sxtb	r3, r3
 8006a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a94:	d103      	bne.n	8006a9e <xQueueSemaphoreTake+0x14a>
 8006a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006aa4:	b25b      	sxtb	r3, r3
 8006aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aaa:	d103      	bne.n	8006ab4 <xQueueSemaphoreTake+0x160>
 8006aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ab4:	f002 f9ae 	bl	8008e14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ab8:	463a      	mov	r2, r7
 8006aba:	f107 030c 	add.w	r3, r7, #12
 8006abe:	4611      	mov	r1, r2
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f000 ff7d 	bl	80079c0 <xTaskCheckForTimeOut>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d132      	bne.n	8006b32 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006acc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ace:	f000 f994 	bl	8006dfa <prvIsQueueEmpty>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d026      	beq.n	8006b26 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d109      	bne.n	8006af4 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8006ae0:	f002 f964 	bl	8008dac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f001 f8d5 	bl	8007c98 <xTaskPriorityInherit>
 8006aee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006af0:	f002 f990 	bl	8008e14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af6:	3324      	adds	r3, #36	; 0x24
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	4611      	mov	r1, r2
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 fe8f 	bl	8007820 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b04:	f000 f927 	bl	8006d56 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b08:	f000 fca6 	bl	8007458 <xTaskResumeAll>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f47f af66 	bne.w	80069e0 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8006b14:	4b18      	ldr	r3, [pc, #96]	; (8006b78 <xQueueSemaphoreTake+0x224>)
 8006b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	e75c      	b.n	80069e0 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006b26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b28:	f000 f915 	bl	8006d56 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b2c:	f000 fc94 	bl	8007458 <xTaskResumeAll>
 8006b30:	e756      	b.n	80069e0 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006b32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b34:	f000 f90f 	bl	8006d56 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b38:	f000 fc8e 	bl	8007458 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b3e:	f000 f95c 	bl	8006dfa <prvIsQueueEmpty>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f43f af4b 	beq.w	80069e0 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00d      	beq.n	8006b6c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8006b50:	f002 f92c 	bl	8008dac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006b54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b56:	f000 f856 	bl	8006c06 <prvGetDisinheritPriorityAfterTimeout>
 8006b5a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b62:	4618      	mov	r0, r3
 8006b64:	f001 f972 	bl	8007e4c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006b68:	f002 f954 	bl	8008e14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3738      	adds	r7, #56	; 0x38
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	e000ed04 	.word	0xe000ed04

08006b7c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10c      	bne.n	8006ba4 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8e:	b672      	cpsid	i
 8006b90:	f383 8811 	msr	BASEPRI, r3
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	b662      	cpsie	i
 8006b9e:	60bb      	str	r3, [r7, #8]
}
 8006ba0:	bf00      	nop
 8006ba2:	e7fe      	b.n	8006ba2 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8006ba4:	f002 f902 	bl	8008dac <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bac:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006bae:	f002 f931 	bl	8008e14 <vPortExitCritical>

	return uxReturn;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10c      	bne.n	8006be8 <vQueueDelete+0x2c>
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd2:	b672      	cpsid	i
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	b662      	cpsie	i
 8006be2:	60bb      	str	r3, [r7, #8]
}
 8006be4:	bf00      	nop
 8006be6:	e7fe      	b.n	8006be6 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 f95f 	bl	8006eac <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d102      	bne.n	8006bfe <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f002 facd 	bl	8009198 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006bfe:	bf00      	nop
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006c06:	b480      	push	{r7}
 8006c08:	b085      	sub	sp, #20
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d006      	beq.n	8006c24 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006c20:	60fb      	str	r3, [r7, #12]
 8006c22:	e001      	b.n	8006c28 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006c24:	2300      	movs	r3, #0
 8006c26:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006c28:	68fb      	ldr	r3, [r7, #12]
	}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b086      	sub	sp, #24
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	60f8      	str	r0, [r7, #12]
 8006c3e:	60b9      	str	r1, [r7, #8]
 8006c40:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006c42:	2300      	movs	r3, #0
 8006c44:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10d      	bne.n	8006c70 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d14d      	bne.n	8006cf8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	4618      	mov	r0, r3
 8006c62:	f001 f881 	bl	8007d68 <xTaskPriorityDisinherit>
 8006c66:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	609a      	str	r2, [r3, #8]
 8006c6e:	e043      	b.n	8006cf8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d119      	bne.n	8006caa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6858      	ldr	r0, [r3, #4]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	461a      	mov	r2, r3
 8006c80:	68b9      	ldr	r1, [r7, #8]
 8006c82:	f002 fbc9 	bl	8009418 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	685a      	ldr	r2, [r3, #4]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8e:	441a      	add	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	685a      	ldr	r2, [r3, #4]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d32b      	bcc.n	8006cf8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	605a      	str	r2, [r3, #4]
 8006ca8:	e026      	b.n	8006cf8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	68d8      	ldr	r0, [r3, #12]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	68b9      	ldr	r1, [r7, #8]
 8006cb6:	f002 fbaf 	bl	8009418 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	68da      	ldr	r2, [r3, #12]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	425b      	negs	r3, r3
 8006cc4:	441a      	add	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	68da      	ldr	r2, [r3, #12]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d207      	bcs.n	8006ce6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	689a      	ldr	r2, [r3, #8]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cde:	425b      	negs	r3, r3
 8006ce0:	441a      	add	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d105      	bne.n	8006cf8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d002      	beq.n	8006cf8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	1c5a      	adds	r2, r3, #1
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006d00:	697b      	ldr	r3, [r7, #20]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3718      	adds	r7, #24
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b082      	sub	sp, #8
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
 8006d12:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d018      	beq.n	8006d4e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	68da      	ldr	r2, [r3, #12]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d24:	441a      	add	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	68da      	ldr	r2, [r3, #12]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d303      	bcc.n	8006d3e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68d9      	ldr	r1, [r3, #12]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d46:	461a      	mov	r2, r3
 8006d48:	6838      	ldr	r0, [r7, #0]
 8006d4a:	f002 fb65 	bl	8009418 <memcpy>
	}
}
 8006d4e:	bf00      	nop
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b084      	sub	sp, #16
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006d5e:	f002 f825 	bl	8008dac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d68:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d6a:	e011      	b.n	8006d90 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d012      	beq.n	8006d9a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3324      	adds	r3, #36	; 0x24
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 fda5 	bl	80078c8 <xTaskRemoveFromEventList>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d001      	beq.n	8006d88 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006d84:	f000 fe82 	bl	8007a8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006d88:	7bfb      	ldrb	r3, [r7, #15]
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	dce9      	bgt.n	8006d6c <prvUnlockQueue+0x16>
 8006d98:	e000      	b.n	8006d9c <prvUnlockQueue+0x46>
					break;
 8006d9a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	22ff      	movs	r2, #255	; 0xff
 8006da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006da4:	f002 f836 	bl	8008e14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006da8:	f002 f800 	bl	8008dac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006db2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006db4:	e011      	b.n	8006dda <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d012      	beq.n	8006de4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	3310      	adds	r3, #16
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 fd80 	bl	80078c8 <xTaskRemoveFromEventList>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d001      	beq.n	8006dd2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006dce:	f000 fe5d 	bl	8007a8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006dd2:	7bbb      	ldrb	r3, [r7, #14]
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006dda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	dce9      	bgt.n	8006db6 <prvUnlockQueue+0x60>
 8006de2:	e000      	b.n	8006de6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006de4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	22ff      	movs	r2, #255	; 0xff
 8006dea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006dee:	f002 f811 	bl	8008e14 <vPortExitCritical>
}
 8006df2:	bf00      	nop
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b084      	sub	sp, #16
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e02:	f001 ffd3 	bl	8008dac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d102      	bne.n	8006e14 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	60fb      	str	r3, [r7, #12]
 8006e12:	e001      	b.n	8006e18 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006e14:	2300      	movs	r3, #0
 8006e16:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e18:	f001 fffc 	bl	8008e14 <vPortExitCritical>

	return xReturn;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e2e:	f001 ffbd 	bl	8008dac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d102      	bne.n	8006e44 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	60fb      	str	r3, [r7, #12]
 8006e42:	e001      	b.n	8006e48 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006e44:	2300      	movs	r3, #0
 8006e46:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e48:	f001 ffe4 	bl	8008e14 <vPortExitCritical>

	return xReturn;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
	...

08006e58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e62:	2300      	movs	r3, #0
 8006e64:	60fb      	str	r3, [r7, #12]
 8006e66:	e014      	b.n	8006e92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006e68:	4a0f      	ldr	r2, [pc, #60]	; (8006ea8 <vQueueAddToRegistry+0x50>)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10b      	bne.n	8006e8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006e74:	490c      	ldr	r1, [pc, #48]	; (8006ea8 <vQueueAddToRegistry+0x50>)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006e7e:	4a0a      	ldr	r2, [pc, #40]	; (8006ea8 <vQueueAddToRegistry+0x50>)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	4413      	add	r3, r2
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006e8a:	e006      	b.n	8006e9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	60fb      	str	r3, [r7, #12]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2b07      	cmp	r3, #7
 8006e96:	d9e7      	bls.n	8006e68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006e98:	bf00      	nop
 8006e9a:	bf00      	nop
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	20000a10 	.word	0x20000a10

08006eac <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	60fb      	str	r3, [r7, #12]
 8006eb8:	e016      	b.n	8006ee8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006eba:	4a10      	ldr	r2, [pc, #64]	; (8006efc <vQueueUnregisterQueue+0x50>)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	00db      	lsls	r3, r3, #3
 8006ec0:	4413      	add	r3, r2
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d10b      	bne.n	8006ee2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006eca:	4a0c      	ldr	r2, [pc, #48]	; (8006efc <vQueueUnregisterQueue+0x50>)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2100      	movs	r1, #0
 8006ed0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006ed4:	4a09      	ldr	r2, [pc, #36]	; (8006efc <vQueueUnregisterQueue+0x50>)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	00db      	lsls	r3, r3, #3
 8006eda:	4413      	add	r3, r2
 8006edc:	2200      	movs	r2, #0
 8006ede:	605a      	str	r2, [r3, #4]
				break;
 8006ee0:	e006      	b.n	8006ef0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	60fb      	str	r3, [r7, #12]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2b07      	cmp	r3, #7
 8006eec:	d9e5      	bls.n	8006eba <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006eee:	bf00      	nop
 8006ef0:	bf00      	nop
 8006ef2:	3714      	adds	r7, #20
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr
 8006efc:	20000a10 	.word	0x20000a10

08006f00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006f10:	f001 ff4c 	bl	8008dac <vPortEnterCritical>
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f1a:	b25b      	sxtb	r3, r3
 8006f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f20:	d103      	bne.n	8006f2a <vQueueWaitForMessageRestricted+0x2a>
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f30:	b25b      	sxtb	r3, r3
 8006f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f36:	d103      	bne.n	8006f40 <vQueueWaitForMessageRestricted+0x40>
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f40:	f001 ff68 	bl	8008e14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d106      	bne.n	8006f5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	3324      	adds	r3, #36	; 0x24
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	68b9      	ldr	r1, [r7, #8]
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 fc89 	bl	800786c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006f5a:	6978      	ldr	r0, [r7, #20]
 8006f5c:	f7ff fefb 	bl	8006d56 <prvUnlockQueue>
	}
 8006f60:	bf00      	nop
 8006f62:	3718      	adds	r7, #24
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b08e      	sub	sp, #56	; 0x38
 8006f6c:	af04      	add	r7, sp, #16
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
 8006f74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10c      	bne.n	8006f96 <xTaskCreateStatic+0x2e>
	__asm volatile
 8006f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f80:	b672      	cpsid	i
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	b662      	cpsie	i
 8006f90:	623b      	str	r3, [r7, #32]
}
 8006f92:	bf00      	nop
 8006f94:	e7fe      	b.n	8006f94 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10c      	bne.n	8006fb6 <xTaskCreateStatic+0x4e>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa0:	b672      	cpsid	i
 8006fa2:	f383 8811 	msr	BASEPRI, r3
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	b662      	cpsie	i
 8006fb0:	61fb      	str	r3, [r7, #28]
}
 8006fb2:	bf00      	nop
 8006fb4:	e7fe      	b.n	8006fb4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006fb6:	23bc      	movs	r3, #188	; 0xbc
 8006fb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	2bbc      	cmp	r3, #188	; 0xbc
 8006fbe:	d00c      	beq.n	8006fda <xTaskCreateStatic+0x72>
	__asm volatile
 8006fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc4:	b672      	cpsid	i
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	b662      	cpsie	i
 8006fd4:	61bb      	str	r3, [r7, #24]
}
 8006fd6:	bf00      	nop
 8006fd8:	e7fe      	b.n	8006fd8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006fda:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d01e      	beq.n	8007020 <xTaskCreateStatic+0xb8>
 8006fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d01b      	beq.n	8007020 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ff0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	9303      	str	r3, [sp, #12]
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007000:	9302      	str	r3, [sp, #8]
 8007002:	f107 0314 	add.w	r3, r7, #20
 8007006:	9301      	str	r3, [sp, #4]
 8007008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	68b9      	ldr	r1, [r7, #8]
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f000 f850 	bl	80070b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007018:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800701a:	f000 f8f5 	bl	8007208 <prvAddNewTaskToReadyList>
 800701e:	e001      	b.n	8007024 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007020:	2300      	movs	r3, #0
 8007022:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007024:	697b      	ldr	r3, [r7, #20]
	}
 8007026:	4618      	mov	r0, r3
 8007028:	3728      	adds	r7, #40	; 0x28
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800702e:	b580      	push	{r7, lr}
 8007030:	b08c      	sub	sp, #48	; 0x30
 8007032:	af04      	add	r7, sp, #16
 8007034:	60f8      	str	r0, [r7, #12]
 8007036:	60b9      	str	r1, [r7, #8]
 8007038:	603b      	str	r3, [r7, #0]
 800703a:	4613      	mov	r3, r2
 800703c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800703e:	88fb      	ldrh	r3, [r7, #6]
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	4618      	mov	r0, r3
 8007044:	f001 ffde 	bl	8009004 <pvPortMalloc>
 8007048:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00e      	beq.n	800706e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007050:	20bc      	movs	r0, #188	; 0xbc
 8007052:	f001 ffd7 	bl	8009004 <pvPortMalloc>
 8007056:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d003      	beq.n	8007066 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	631a      	str	r2, [r3, #48]	; 0x30
 8007064:	e005      	b.n	8007072 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007066:	6978      	ldr	r0, [r7, #20]
 8007068:	f002 f896 	bl	8009198 <vPortFree>
 800706c:	e001      	b.n	8007072 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800706e:	2300      	movs	r3, #0
 8007070:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d017      	beq.n	80070a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007080:	88fa      	ldrh	r2, [r7, #6]
 8007082:	2300      	movs	r3, #0
 8007084:	9303      	str	r3, [sp, #12]
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	9302      	str	r3, [sp, #8]
 800708a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708c:	9301      	str	r3, [sp, #4]
 800708e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	68b9      	ldr	r1, [r7, #8]
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 f80e 	bl	80070b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800709c:	69f8      	ldr	r0, [r7, #28]
 800709e:	f000 f8b3 	bl	8007208 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80070a2:	2301      	movs	r3, #1
 80070a4:	61bb      	str	r3, [r7, #24]
 80070a6:	e002      	b.n	80070ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80070a8:	f04f 33ff 	mov.w	r3, #4294967295
 80070ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80070ae:	69bb      	ldr	r3, [r7, #24]
	}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3720      	adds	r7, #32
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b088      	sub	sp, #32
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
 80070c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80070c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	461a      	mov	r2, r3
 80070d0:	21a5      	movs	r1, #165	; 0xa5
 80070d2:	f002 f9af 	bl	8009434 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80070d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070da:	6879      	ldr	r1, [r7, #4]
 80070dc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80070e0:	440b      	add	r3, r1
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4413      	add	r3, r2
 80070e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	f023 0307 	bic.w	r3, r3, #7
 80070ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	f003 0307 	and.w	r3, r3, #7
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00c      	beq.n	8007114 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80070fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fe:	b672      	cpsid	i
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	b662      	cpsie	i
 800710e:	617b      	str	r3, [r7, #20]
}
 8007110:	bf00      	nop
 8007112:	e7fe      	b.n	8007112 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d01f      	beq.n	800715a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800711a:	2300      	movs	r3, #0
 800711c:	61fb      	str	r3, [r7, #28]
 800711e:	e012      	b.n	8007146 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	4413      	add	r3, r2
 8007126:	7819      	ldrb	r1, [r3, #0]
 8007128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	4413      	add	r3, r2
 800712e:	3334      	adds	r3, #52	; 0x34
 8007130:	460a      	mov	r2, r1
 8007132:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	4413      	add	r3, r2
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d006      	beq.n	800714e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	3301      	adds	r3, #1
 8007144:	61fb      	str	r3, [r7, #28]
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	2b0f      	cmp	r3, #15
 800714a:	d9e9      	bls.n	8007120 <prvInitialiseNewTask+0x68>
 800714c:	e000      	b.n	8007150 <prvInitialiseNewTask+0x98>
			{
				break;
 800714e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007152:	2200      	movs	r2, #0
 8007154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007158:	e003      	b.n	8007162 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800715a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007164:	2b37      	cmp	r3, #55	; 0x37
 8007166:	d901      	bls.n	800716c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007168:	2337      	movs	r3, #55	; 0x37
 800716a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800716c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007170:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007174:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007176:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717a:	2200      	movs	r2, #0
 800717c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800717e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007180:	3304      	adds	r3, #4
 8007182:	4618      	mov	r0, r3
 8007184:	f7fe ff02 	bl	8005f8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718a:	3318      	adds	r3, #24
 800718c:	4618      	mov	r0, r3
 800718e:	f7fe fefd 	bl	8005f8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007196:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800719e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80071a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	2200      	movs	r2, #0
 80071ac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80071b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80071b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ba:	3354      	adds	r3, #84	; 0x54
 80071bc:	2260      	movs	r2, #96	; 0x60
 80071be:	2100      	movs	r1, #0
 80071c0:	4618      	mov	r0, r3
 80071c2:	f002 f937 	bl	8009434 <memset>
 80071c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c8:	4a0c      	ldr	r2, [pc, #48]	; (80071fc <prvInitialiseNewTask+0x144>)
 80071ca:	659a      	str	r2, [r3, #88]	; 0x58
 80071cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ce:	4a0c      	ldr	r2, [pc, #48]	; (8007200 <prvInitialiseNewTask+0x148>)
 80071d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80071d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d4:	4a0b      	ldr	r2, [pc, #44]	; (8007204 <prvInitialiseNewTask+0x14c>)
 80071d6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	68f9      	ldr	r1, [r7, #12]
 80071dc:	69b8      	ldr	r0, [r7, #24]
 80071de:	f001 fcd9 	bl	8008b94 <pxPortInitialiseStack>
 80071e2:	4602      	mov	r2, r0
 80071e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80071e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d002      	beq.n	80071f4 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80071ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071f4:	bf00      	nop
 80071f6:	3720      	adds	r7, #32
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	08009754 	.word	0x08009754
 8007200:	08009774 	.word	0x08009774
 8007204:	08009734 	.word	0x08009734

08007208 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007210:	f001 fdcc 	bl	8008dac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007214:	4b2d      	ldr	r3, [pc, #180]	; (80072cc <prvAddNewTaskToReadyList+0xc4>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3301      	adds	r3, #1
 800721a:	4a2c      	ldr	r2, [pc, #176]	; (80072cc <prvAddNewTaskToReadyList+0xc4>)
 800721c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800721e:	4b2c      	ldr	r3, [pc, #176]	; (80072d0 <prvAddNewTaskToReadyList+0xc8>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d109      	bne.n	800723a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007226:	4a2a      	ldr	r2, [pc, #168]	; (80072d0 <prvAddNewTaskToReadyList+0xc8>)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800722c:	4b27      	ldr	r3, [pc, #156]	; (80072cc <prvAddNewTaskToReadyList+0xc4>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d110      	bne.n	8007256 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007234:	f000 fc4e 	bl	8007ad4 <prvInitialiseTaskLists>
 8007238:	e00d      	b.n	8007256 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800723a:	4b26      	ldr	r3, [pc, #152]	; (80072d4 <prvAddNewTaskToReadyList+0xcc>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d109      	bne.n	8007256 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007242:	4b23      	ldr	r3, [pc, #140]	; (80072d0 <prvAddNewTaskToReadyList+0xc8>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724c:	429a      	cmp	r2, r3
 800724e:	d802      	bhi.n	8007256 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007250:	4a1f      	ldr	r2, [pc, #124]	; (80072d0 <prvAddNewTaskToReadyList+0xc8>)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007256:	4b20      	ldr	r3, [pc, #128]	; (80072d8 <prvAddNewTaskToReadyList+0xd0>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	3301      	adds	r3, #1
 800725c:	4a1e      	ldr	r2, [pc, #120]	; (80072d8 <prvAddNewTaskToReadyList+0xd0>)
 800725e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007260:	4b1d      	ldr	r3, [pc, #116]	; (80072d8 <prvAddNewTaskToReadyList+0xd0>)
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800726c:	4b1b      	ldr	r3, [pc, #108]	; (80072dc <prvAddNewTaskToReadyList+0xd4>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	429a      	cmp	r2, r3
 8007272:	d903      	bls.n	800727c <prvAddNewTaskToReadyList+0x74>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007278:	4a18      	ldr	r2, [pc, #96]	; (80072dc <prvAddNewTaskToReadyList+0xd4>)
 800727a:	6013      	str	r3, [r2, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007280:	4613      	mov	r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4413      	add	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4a15      	ldr	r2, [pc, #84]	; (80072e0 <prvAddNewTaskToReadyList+0xd8>)
 800728a:	441a      	add	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	3304      	adds	r3, #4
 8007290:	4619      	mov	r1, r3
 8007292:	4610      	mov	r0, r2
 8007294:	f7fe fe87 	bl	8005fa6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007298:	f001 fdbc 	bl	8008e14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800729c:	4b0d      	ldr	r3, [pc, #52]	; (80072d4 <prvAddNewTaskToReadyList+0xcc>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00e      	beq.n	80072c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072a4:	4b0a      	ldr	r3, [pc, #40]	; (80072d0 <prvAddNewTaskToReadyList+0xc8>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d207      	bcs.n	80072c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80072b2:	4b0c      	ldr	r3, [pc, #48]	; (80072e4 <prvAddNewTaskToReadyList+0xdc>)
 80072b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072c2:	bf00      	nop
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	20000f24 	.word	0x20000f24
 80072d0:	20000a50 	.word	0x20000a50
 80072d4:	20000f30 	.word	0x20000f30
 80072d8:	20000f40 	.word	0x20000f40
 80072dc:	20000f2c 	.word	0x20000f2c
 80072e0:	20000a54 	.word	0x20000a54
 80072e4:	e000ed04 	.word	0xe000ed04

080072e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80072f0:	2300      	movs	r3, #0
 80072f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d019      	beq.n	800732e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80072fa:	4b14      	ldr	r3, [pc, #80]	; (800734c <vTaskDelay+0x64>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00c      	beq.n	800731c <vTaskDelay+0x34>
	__asm volatile
 8007302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007306:	b672      	cpsid	i
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	b662      	cpsie	i
 8007316:	60bb      	str	r3, [r7, #8]
}
 8007318:	bf00      	nop
 800731a:	e7fe      	b.n	800731a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800731c:	f000 f88e 	bl	800743c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007320:	2100      	movs	r1, #0
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f001 f828 	bl	8008378 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007328:	f000 f896 	bl	8007458 <xTaskResumeAll>
 800732c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d107      	bne.n	8007344 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007334:	4b06      	ldr	r3, [pc, #24]	; (8007350 <vTaskDelay+0x68>)
 8007336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800733a:	601a      	str	r2, [r3, #0]
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007344:	bf00      	nop
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	20000f4c 	.word	0x20000f4c
 8007350:	e000ed04 	.word	0xe000ed04

08007354 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b08a      	sub	sp, #40	; 0x28
 8007358:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800735a:	2300      	movs	r3, #0
 800735c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800735e:	2300      	movs	r3, #0
 8007360:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007362:	463a      	mov	r2, r7
 8007364:	1d39      	adds	r1, r7, #4
 8007366:	f107 0308 	add.w	r3, r7, #8
 800736a:	4618      	mov	r0, r3
 800736c:	f7fe fdba 	bl	8005ee4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007370:	6839      	ldr	r1, [r7, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	9202      	str	r2, [sp, #8]
 8007378:	9301      	str	r3, [sp, #4]
 800737a:	2300      	movs	r3, #0
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	2300      	movs	r3, #0
 8007380:	460a      	mov	r2, r1
 8007382:	4926      	ldr	r1, [pc, #152]	; (800741c <vTaskStartScheduler+0xc8>)
 8007384:	4826      	ldr	r0, [pc, #152]	; (8007420 <vTaskStartScheduler+0xcc>)
 8007386:	f7ff fdef 	bl	8006f68 <xTaskCreateStatic>
 800738a:	4603      	mov	r3, r0
 800738c:	4a25      	ldr	r2, [pc, #148]	; (8007424 <vTaskStartScheduler+0xd0>)
 800738e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007390:	4b24      	ldr	r3, [pc, #144]	; (8007424 <vTaskStartScheduler+0xd0>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d002      	beq.n	800739e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007398:	2301      	movs	r3, #1
 800739a:	617b      	str	r3, [r7, #20]
 800739c:	e001      	b.n	80073a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800739e:	2300      	movs	r3, #0
 80073a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d102      	bne.n	80073ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80073a8:	f001 f83a 	bl	8008420 <xTimerCreateTimerTask>
 80073ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d11d      	bne.n	80073f0 <vTaskStartScheduler+0x9c>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b8:	b672      	cpsid	i
 80073ba:	f383 8811 	msr	BASEPRI, r3
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f3bf 8f4f 	dsb	sy
 80073c6:	b662      	cpsie	i
 80073c8:	613b      	str	r3, [r7, #16]
}
 80073ca:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80073cc:	4b16      	ldr	r3, [pc, #88]	; (8007428 <vTaskStartScheduler+0xd4>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	3354      	adds	r3, #84	; 0x54
 80073d2:	4a16      	ldr	r2, [pc, #88]	; (800742c <vTaskStartScheduler+0xd8>)
 80073d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80073d6:	4b16      	ldr	r3, [pc, #88]	; (8007430 <vTaskStartScheduler+0xdc>)
 80073d8:	f04f 32ff 	mov.w	r2, #4294967295
 80073dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80073de:	4b15      	ldr	r3, [pc, #84]	; (8007434 <vTaskStartScheduler+0xe0>)
 80073e0:	2201      	movs	r2, #1
 80073e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80073e4:	4b14      	ldr	r3, [pc, #80]	; (8007438 <vTaskStartScheduler+0xe4>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80073ea:	f001 fc61 	bl	8008cb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80073ee:	e010      	b.n	8007412 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f6:	d10c      	bne.n	8007412 <vTaskStartScheduler+0xbe>
	__asm volatile
 80073f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fc:	b672      	cpsid	i
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	b662      	cpsie	i
 800740c:	60fb      	str	r3, [r7, #12]
}
 800740e:	bf00      	nop
 8007410:	e7fe      	b.n	8007410 <vTaskStartScheduler+0xbc>
}
 8007412:	bf00      	nop
 8007414:	3718      	adds	r7, #24
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	08009650 	.word	0x08009650
 8007420:	08007aa5 	.word	0x08007aa5
 8007424:	20000f48 	.word	0x20000f48
 8007428:	20000a50 	.word	0x20000a50
 800742c:	20000010 	.word	0x20000010
 8007430:	20000f44 	.word	0x20000f44
 8007434:	20000f30 	.word	0x20000f30
 8007438:	20000f28 	.word	0x20000f28

0800743c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800743c:	b480      	push	{r7}
 800743e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007440:	4b04      	ldr	r3, [pc, #16]	; (8007454 <vTaskSuspendAll+0x18>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	3301      	adds	r3, #1
 8007446:	4a03      	ldr	r2, [pc, #12]	; (8007454 <vTaskSuspendAll+0x18>)
 8007448:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800744a:	bf00      	nop
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr
 8007454:	20000f4c 	.word	0x20000f4c

08007458 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800745e:	2300      	movs	r3, #0
 8007460:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007462:	2300      	movs	r3, #0
 8007464:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007466:	4b43      	ldr	r3, [pc, #268]	; (8007574 <xTaskResumeAll+0x11c>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10c      	bne.n	8007488 <xTaskResumeAll+0x30>
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007472:	b672      	cpsid	i
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	b662      	cpsie	i
 8007482:	603b      	str	r3, [r7, #0]
}
 8007484:	bf00      	nop
 8007486:	e7fe      	b.n	8007486 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007488:	f001 fc90 	bl	8008dac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800748c:	4b39      	ldr	r3, [pc, #228]	; (8007574 <xTaskResumeAll+0x11c>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3b01      	subs	r3, #1
 8007492:	4a38      	ldr	r2, [pc, #224]	; (8007574 <xTaskResumeAll+0x11c>)
 8007494:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007496:	4b37      	ldr	r3, [pc, #220]	; (8007574 <xTaskResumeAll+0x11c>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d162      	bne.n	8007564 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800749e:	4b36      	ldr	r3, [pc, #216]	; (8007578 <xTaskResumeAll+0x120>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d05e      	beq.n	8007564 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074a6:	e02f      	b.n	8007508 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074a8:	4b34      	ldr	r3, [pc, #208]	; (800757c <xTaskResumeAll+0x124>)
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	3318      	adds	r3, #24
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7fe fdd3 	bl	8006060 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	3304      	adds	r3, #4
 80074be:	4618      	mov	r0, r3
 80074c0:	f7fe fdce 	bl	8006060 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c8:	4b2d      	ldr	r3, [pc, #180]	; (8007580 <xTaskResumeAll+0x128>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d903      	bls.n	80074d8 <xTaskResumeAll+0x80>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d4:	4a2a      	ldr	r2, [pc, #168]	; (8007580 <xTaskResumeAll+0x128>)
 80074d6:	6013      	str	r3, [r2, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074dc:	4613      	mov	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	4413      	add	r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4a27      	ldr	r2, [pc, #156]	; (8007584 <xTaskResumeAll+0x12c>)
 80074e6:	441a      	add	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	3304      	adds	r3, #4
 80074ec:	4619      	mov	r1, r3
 80074ee:	4610      	mov	r0, r2
 80074f0:	f7fe fd59 	bl	8005fa6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f8:	4b23      	ldr	r3, [pc, #140]	; (8007588 <xTaskResumeAll+0x130>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fe:	429a      	cmp	r2, r3
 8007500:	d302      	bcc.n	8007508 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8007502:	4b22      	ldr	r3, [pc, #136]	; (800758c <xTaskResumeAll+0x134>)
 8007504:	2201      	movs	r2, #1
 8007506:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007508:	4b1c      	ldr	r3, [pc, #112]	; (800757c <xTaskResumeAll+0x124>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1cb      	bne.n	80074a8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d001      	beq.n	800751a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007516:	f000 fb81 	bl	8007c1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800751a:	4b1d      	ldr	r3, [pc, #116]	; (8007590 <xTaskResumeAll+0x138>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d010      	beq.n	8007548 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007526:	f000 f859 	bl	80075dc <xTaskIncrementTick>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8007530:	4b16      	ldr	r3, [pc, #88]	; (800758c <xTaskResumeAll+0x134>)
 8007532:	2201      	movs	r2, #1
 8007534:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	3b01      	subs	r3, #1
 800753a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1f1      	bne.n	8007526 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8007542:	4b13      	ldr	r3, [pc, #76]	; (8007590 <xTaskResumeAll+0x138>)
 8007544:	2200      	movs	r2, #0
 8007546:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007548:	4b10      	ldr	r3, [pc, #64]	; (800758c <xTaskResumeAll+0x134>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d009      	beq.n	8007564 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007550:	2301      	movs	r3, #1
 8007552:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007554:	4b0f      	ldr	r3, [pc, #60]	; (8007594 <xTaskResumeAll+0x13c>)
 8007556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007564:	f001 fc56 	bl	8008e14 <vPortExitCritical>

	return xAlreadyYielded;
 8007568:	68bb      	ldr	r3, [r7, #8]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	20000f4c 	.word	0x20000f4c
 8007578:	20000f24 	.word	0x20000f24
 800757c:	20000ee4 	.word	0x20000ee4
 8007580:	20000f2c 	.word	0x20000f2c
 8007584:	20000a54 	.word	0x20000a54
 8007588:	20000a50 	.word	0x20000a50
 800758c:	20000f38 	.word	0x20000f38
 8007590:	20000f34 	.word	0x20000f34
 8007594:	e000ed04 	.word	0xe000ed04

08007598 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800759e:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <xTaskGetTickCount+0x1c>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80075a4:	687b      	ldr	r3, [r7, #4]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	20000f28 	.word	0x20000f28

080075b8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075be:	f001 fcdd 	bl	8008f7c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80075c2:	2300      	movs	r3, #0
 80075c4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80075c6:	4b04      	ldr	r3, [pc, #16]	; (80075d8 <xTaskGetTickCountFromISR+0x20>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80075cc:	683b      	ldr	r3, [r7, #0]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	20000f28 	.word	0x20000f28

080075dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b086      	sub	sp, #24
 80075e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075e2:	2300      	movs	r3, #0
 80075e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075e6:	4b50      	ldr	r3, [pc, #320]	; (8007728 <xTaskIncrementTick+0x14c>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f040 808b 	bne.w	8007706 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075f0:	4b4e      	ldr	r3, [pc, #312]	; (800772c <xTaskIncrementTick+0x150>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	3301      	adds	r3, #1
 80075f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80075f8:	4a4c      	ldr	r2, [pc, #304]	; (800772c <xTaskIncrementTick+0x150>)
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d122      	bne.n	800764a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007604:	4b4a      	ldr	r3, [pc, #296]	; (8007730 <xTaskIncrementTick+0x154>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00c      	beq.n	8007628 <xTaskIncrementTick+0x4c>
	__asm volatile
 800760e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007612:	b672      	cpsid	i
 8007614:	f383 8811 	msr	BASEPRI, r3
 8007618:	f3bf 8f6f 	isb	sy
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	b662      	cpsie	i
 8007622:	603b      	str	r3, [r7, #0]
}
 8007624:	bf00      	nop
 8007626:	e7fe      	b.n	8007626 <xTaskIncrementTick+0x4a>
 8007628:	4b41      	ldr	r3, [pc, #260]	; (8007730 <xTaskIncrementTick+0x154>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	60fb      	str	r3, [r7, #12]
 800762e:	4b41      	ldr	r3, [pc, #260]	; (8007734 <xTaskIncrementTick+0x158>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a3f      	ldr	r2, [pc, #252]	; (8007730 <xTaskIncrementTick+0x154>)
 8007634:	6013      	str	r3, [r2, #0]
 8007636:	4a3f      	ldr	r2, [pc, #252]	; (8007734 <xTaskIncrementTick+0x158>)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6013      	str	r3, [r2, #0]
 800763c:	4b3e      	ldr	r3, [pc, #248]	; (8007738 <xTaskIncrementTick+0x15c>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	3301      	adds	r3, #1
 8007642:	4a3d      	ldr	r2, [pc, #244]	; (8007738 <xTaskIncrementTick+0x15c>)
 8007644:	6013      	str	r3, [r2, #0]
 8007646:	f000 fae9 	bl	8007c1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800764a:	4b3c      	ldr	r3, [pc, #240]	; (800773c <xTaskIncrementTick+0x160>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	693a      	ldr	r2, [r7, #16]
 8007650:	429a      	cmp	r2, r3
 8007652:	d349      	bcc.n	80076e8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007654:	4b36      	ldr	r3, [pc, #216]	; (8007730 <xTaskIncrementTick+0x154>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d104      	bne.n	8007668 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800765e:	4b37      	ldr	r3, [pc, #220]	; (800773c <xTaskIncrementTick+0x160>)
 8007660:	f04f 32ff 	mov.w	r2, #4294967295
 8007664:	601a      	str	r2, [r3, #0]
					break;
 8007666:	e03f      	b.n	80076e8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007668:	4b31      	ldr	r3, [pc, #196]	; (8007730 <xTaskIncrementTick+0x154>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	429a      	cmp	r2, r3
 800767e:	d203      	bcs.n	8007688 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007680:	4a2e      	ldr	r2, [pc, #184]	; (800773c <xTaskIncrementTick+0x160>)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007686:	e02f      	b.n	80076e8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	3304      	adds	r3, #4
 800768c:	4618      	mov	r0, r3
 800768e:	f7fe fce7 	bl	8006060 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007696:	2b00      	cmp	r3, #0
 8007698:	d004      	beq.n	80076a4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	3318      	adds	r3, #24
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fe fcde 	bl	8006060 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a8:	4b25      	ldr	r3, [pc, #148]	; (8007740 <xTaskIncrementTick+0x164>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d903      	bls.n	80076b8 <xTaskIncrementTick+0xdc>
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b4:	4a22      	ldr	r2, [pc, #136]	; (8007740 <xTaskIncrementTick+0x164>)
 80076b6:	6013      	str	r3, [r2, #0]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076bc:	4613      	mov	r3, r2
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	4413      	add	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4a1f      	ldr	r2, [pc, #124]	; (8007744 <xTaskIncrementTick+0x168>)
 80076c6:	441a      	add	r2, r3
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	3304      	adds	r3, #4
 80076cc:	4619      	mov	r1, r3
 80076ce:	4610      	mov	r0, r2
 80076d0:	f7fe fc69 	bl	8005fa6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d8:	4b1b      	ldr	r3, [pc, #108]	; (8007748 <xTaskIncrementTick+0x16c>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076de:	429a      	cmp	r2, r3
 80076e0:	d3b8      	bcc.n	8007654 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80076e2:	2301      	movs	r3, #1
 80076e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076e6:	e7b5      	b.n	8007654 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076e8:	4b17      	ldr	r3, [pc, #92]	; (8007748 <xTaskIncrementTick+0x16c>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ee:	4915      	ldr	r1, [pc, #84]	; (8007744 <xTaskIncrementTick+0x168>)
 80076f0:	4613      	mov	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	4413      	add	r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	440b      	add	r3, r1
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d907      	bls.n	8007710 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8007700:	2301      	movs	r3, #1
 8007702:	617b      	str	r3, [r7, #20]
 8007704:	e004      	b.n	8007710 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007706:	4b11      	ldr	r3, [pc, #68]	; (800774c <xTaskIncrementTick+0x170>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3301      	adds	r3, #1
 800770c:	4a0f      	ldr	r2, [pc, #60]	; (800774c <xTaskIncrementTick+0x170>)
 800770e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007710:	4b0f      	ldr	r3, [pc, #60]	; (8007750 <xTaskIncrementTick+0x174>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d001      	beq.n	800771c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8007718:	2301      	movs	r3, #1
 800771a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800771c:	697b      	ldr	r3, [r7, #20]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3718      	adds	r7, #24
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	20000f4c 	.word	0x20000f4c
 800772c:	20000f28 	.word	0x20000f28
 8007730:	20000edc 	.word	0x20000edc
 8007734:	20000ee0 	.word	0x20000ee0
 8007738:	20000f3c 	.word	0x20000f3c
 800773c:	20000f44 	.word	0x20000f44
 8007740:	20000f2c 	.word	0x20000f2c
 8007744:	20000a54 	.word	0x20000a54
 8007748:	20000a50 	.word	0x20000a50
 800774c:	20000f34 	.word	0x20000f34
 8007750:	20000f38 	.word	0x20000f38

08007754 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800775a:	4b2b      	ldr	r3, [pc, #172]	; (8007808 <vTaskSwitchContext+0xb4>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d003      	beq.n	800776a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007762:	4b2a      	ldr	r3, [pc, #168]	; (800780c <vTaskSwitchContext+0xb8>)
 8007764:	2201      	movs	r2, #1
 8007766:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007768:	e048      	b.n	80077fc <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800776a:	4b28      	ldr	r3, [pc, #160]	; (800780c <vTaskSwitchContext+0xb8>)
 800776c:	2200      	movs	r2, #0
 800776e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007770:	4b27      	ldr	r3, [pc, #156]	; (8007810 <vTaskSwitchContext+0xbc>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	60fb      	str	r3, [r7, #12]
 8007776:	e012      	b.n	800779e <vTaskSwitchContext+0x4a>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10c      	bne.n	8007798 <vTaskSwitchContext+0x44>
	__asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007782:	b672      	cpsid	i
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	b662      	cpsie	i
 8007792:	607b      	str	r3, [r7, #4]
}
 8007794:	bf00      	nop
 8007796:	e7fe      	b.n	8007796 <vTaskSwitchContext+0x42>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	3b01      	subs	r3, #1
 800779c:	60fb      	str	r3, [r7, #12]
 800779e:	491d      	ldr	r1, [pc, #116]	; (8007814 <vTaskSwitchContext+0xc0>)
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	4613      	mov	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4413      	add	r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	440b      	add	r3, r1
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d0e2      	beq.n	8007778 <vTaskSwitchContext+0x24>
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	4613      	mov	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4a15      	ldr	r2, [pc, #84]	; (8007814 <vTaskSwitchContext+0xc0>)
 80077be:	4413      	add	r3, r2
 80077c0:	60bb      	str	r3, [r7, #8]
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	685a      	ldr	r2, [r3, #4]
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	605a      	str	r2, [r3, #4]
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	3308      	adds	r3, #8
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d104      	bne.n	80077e2 <vTaskSwitchContext+0x8e>
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	685a      	ldr	r2, [r3, #4]
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	605a      	str	r2, [r3, #4]
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	4a0b      	ldr	r2, [pc, #44]	; (8007818 <vTaskSwitchContext+0xc4>)
 80077ea:	6013      	str	r3, [r2, #0]
 80077ec:	4a08      	ldr	r2, [pc, #32]	; (8007810 <vTaskSwitchContext+0xbc>)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80077f2:	4b09      	ldr	r3, [pc, #36]	; (8007818 <vTaskSwitchContext+0xc4>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3354      	adds	r3, #84	; 0x54
 80077f8:	4a08      	ldr	r2, [pc, #32]	; (800781c <vTaskSwitchContext+0xc8>)
 80077fa:	6013      	str	r3, [r2, #0]
}
 80077fc:	bf00      	nop
 80077fe:	3714      	adds	r7, #20
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr
 8007808:	20000f4c 	.word	0x20000f4c
 800780c:	20000f38 	.word	0x20000f38
 8007810:	20000f2c 	.word	0x20000f2c
 8007814:	20000a54 	.word	0x20000a54
 8007818:	20000a50 	.word	0x20000a50
 800781c:	20000010 	.word	0x20000010

08007820 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10c      	bne.n	800784a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	b672      	cpsid	i
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	b662      	cpsie	i
 8007844:	60fb      	str	r3, [r7, #12]
}
 8007846:	bf00      	nop
 8007848:	e7fe      	b.n	8007848 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800784a:	4b07      	ldr	r3, [pc, #28]	; (8007868 <vTaskPlaceOnEventList+0x48>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	3318      	adds	r3, #24
 8007850:	4619      	mov	r1, r3
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7fe fbcb 	bl	8005fee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007858:	2101      	movs	r1, #1
 800785a:	6838      	ldr	r0, [r7, #0]
 800785c:	f000 fd8c 	bl	8008378 <prvAddCurrentTaskToDelayedList>
}
 8007860:	bf00      	nop
 8007862:	3710      	adds	r7, #16
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	20000a50 	.word	0x20000a50

0800786c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10c      	bne.n	8007898 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800787e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007882:	b672      	cpsid	i
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	b662      	cpsie	i
 8007892:	617b      	str	r3, [r7, #20]
}
 8007894:	bf00      	nop
 8007896:	e7fe      	b.n	8007896 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007898:	4b0a      	ldr	r3, [pc, #40]	; (80078c4 <vTaskPlaceOnEventListRestricted+0x58>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	3318      	adds	r3, #24
 800789e:	4619      	mov	r1, r3
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f7fe fb80 	bl	8005fa6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d002      	beq.n	80078b2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80078ac:	f04f 33ff 	mov.w	r3, #4294967295
 80078b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80078b2:	6879      	ldr	r1, [r7, #4]
 80078b4:	68b8      	ldr	r0, [r7, #8]
 80078b6:	f000 fd5f 	bl	8008378 <prvAddCurrentTaskToDelayedList>
	}
 80078ba:	bf00      	nop
 80078bc:	3718      	adds	r7, #24
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	20000a50 	.word	0x20000a50

080078c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b086      	sub	sp, #24
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d10c      	bne.n	80078f8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80078de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e2:	b672      	cpsid	i
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	b662      	cpsie	i
 80078f2:	60fb      	str	r3, [r7, #12]
}
 80078f4:	bf00      	nop
 80078f6:	e7fe      	b.n	80078f6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	3318      	adds	r3, #24
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7fe fbaf 	bl	8006060 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007902:	4b1e      	ldr	r3, [pc, #120]	; (800797c <xTaskRemoveFromEventList+0xb4>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d11d      	bne.n	8007946 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	3304      	adds	r3, #4
 800790e:	4618      	mov	r0, r3
 8007910:	f7fe fba6 	bl	8006060 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007918:	4b19      	ldr	r3, [pc, #100]	; (8007980 <xTaskRemoveFromEventList+0xb8>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	429a      	cmp	r2, r3
 800791e:	d903      	bls.n	8007928 <xTaskRemoveFromEventList+0x60>
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007924:	4a16      	ldr	r2, [pc, #88]	; (8007980 <xTaskRemoveFromEventList+0xb8>)
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800792c:	4613      	mov	r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	4413      	add	r3, r2
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	4a13      	ldr	r2, [pc, #76]	; (8007984 <xTaskRemoveFromEventList+0xbc>)
 8007936:	441a      	add	r2, r3
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	3304      	adds	r3, #4
 800793c:	4619      	mov	r1, r3
 800793e:	4610      	mov	r0, r2
 8007940:	f7fe fb31 	bl	8005fa6 <vListInsertEnd>
 8007944:	e005      	b.n	8007952 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	3318      	adds	r3, #24
 800794a:	4619      	mov	r1, r3
 800794c:	480e      	ldr	r0, [pc, #56]	; (8007988 <xTaskRemoveFromEventList+0xc0>)
 800794e:	f7fe fb2a 	bl	8005fa6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007956:	4b0d      	ldr	r3, [pc, #52]	; (800798c <xTaskRemoveFromEventList+0xc4>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795c:	429a      	cmp	r2, r3
 800795e:	d905      	bls.n	800796c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007960:	2301      	movs	r3, #1
 8007962:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007964:	4b0a      	ldr	r3, [pc, #40]	; (8007990 <xTaskRemoveFromEventList+0xc8>)
 8007966:	2201      	movs	r2, #1
 8007968:	601a      	str	r2, [r3, #0]
 800796a:	e001      	b.n	8007970 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800796c:	2300      	movs	r3, #0
 800796e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007970:	697b      	ldr	r3, [r7, #20]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3718      	adds	r7, #24
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	20000f4c 	.word	0x20000f4c
 8007980:	20000f2c 	.word	0x20000f2c
 8007984:	20000a54 	.word	0x20000a54
 8007988:	20000ee4 	.word	0x20000ee4
 800798c:	20000a50 	.word	0x20000a50
 8007990:	20000f38 	.word	0x20000f38

08007994 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800799c:	4b06      	ldr	r3, [pc, #24]	; (80079b8 <vTaskInternalSetTimeOutState+0x24>)
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80079a4:	4b05      	ldr	r3, [pc, #20]	; (80079bc <vTaskInternalSetTimeOutState+0x28>)
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	605a      	str	r2, [r3, #4]
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	20000f3c 	.word	0x20000f3c
 80079bc:	20000f28 	.word	0x20000f28

080079c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b088      	sub	sp, #32
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10c      	bne.n	80079ea <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80079d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d4:	b672      	cpsid	i
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	b662      	cpsie	i
 80079e4:	613b      	str	r3, [r7, #16]
}
 80079e6:	bf00      	nop
 80079e8:	e7fe      	b.n	80079e8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d10c      	bne.n	8007a0a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80079f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f4:	b672      	cpsid	i
 80079f6:	f383 8811 	msr	BASEPRI, r3
 80079fa:	f3bf 8f6f 	isb	sy
 80079fe:	f3bf 8f4f 	dsb	sy
 8007a02:	b662      	cpsie	i
 8007a04:	60fb      	str	r3, [r7, #12]
}
 8007a06:	bf00      	nop
 8007a08:	e7fe      	b.n	8007a08 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007a0a:	f001 f9cf 	bl	8008dac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007a0e:	4b1d      	ldr	r3, [pc, #116]	; (8007a84 <xTaskCheckForTimeOut+0xc4>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a26:	d102      	bne.n	8007a2e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	61fb      	str	r3, [r7, #28]
 8007a2c:	e023      	b.n	8007a76 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	4b15      	ldr	r3, [pc, #84]	; (8007a88 <xTaskCheckForTimeOut+0xc8>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d007      	beq.n	8007a4a <xTaskCheckForTimeOut+0x8a>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d302      	bcc.n	8007a4a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a44:	2301      	movs	r3, #1
 8007a46:	61fb      	str	r3, [r7, #28]
 8007a48:	e015      	b.n	8007a76 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d20b      	bcs.n	8007a6c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	1ad2      	subs	r2, r2, r3
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7ff ff97 	bl	8007994 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a66:	2300      	movs	r3, #0
 8007a68:	61fb      	str	r3, [r7, #28]
 8007a6a:	e004      	b.n	8007a76 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a72:	2301      	movs	r3, #1
 8007a74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a76:	f001 f9cd 	bl	8008e14 <vPortExitCritical>

	return xReturn;
 8007a7a:	69fb      	ldr	r3, [r7, #28]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3720      	adds	r7, #32
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	20000f28 	.word	0x20000f28
 8007a88:	20000f3c 	.word	0x20000f3c

08007a8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a90:	4b03      	ldr	r3, [pc, #12]	; (8007aa0 <vTaskMissedYield+0x14>)
 8007a92:	2201      	movs	r2, #1
 8007a94:	601a      	str	r2, [r3, #0]
}
 8007a96:	bf00      	nop
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr
 8007aa0:	20000f38 	.word	0x20000f38

08007aa4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007aac:	f000 f852 	bl	8007b54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ab0:	4b06      	ldr	r3, [pc, #24]	; (8007acc <prvIdleTask+0x28>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d9f9      	bls.n	8007aac <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ab8:	4b05      	ldr	r3, [pc, #20]	; (8007ad0 <prvIdleTask+0x2c>)
 8007aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007abe:	601a      	str	r2, [r3, #0]
 8007ac0:	f3bf 8f4f 	dsb	sy
 8007ac4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ac8:	e7f0      	b.n	8007aac <prvIdleTask+0x8>
 8007aca:	bf00      	nop
 8007acc:	20000a54 	.word	0x20000a54
 8007ad0:	e000ed04 	.word	0xe000ed04

08007ad4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ada:	2300      	movs	r3, #0
 8007adc:	607b      	str	r3, [r7, #4]
 8007ade:	e00c      	b.n	8007afa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	4413      	add	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4a12      	ldr	r2, [pc, #72]	; (8007b34 <prvInitialiseTaskLists+0x60>)
 8007aec:	4413      	add	r3, r2
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fe fa2c 	bl	8005f4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	3301      	adds	r3, #1
 8007af8:	607b      	str	r3, [r7, #4]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2b37      	cmp	r3, #55	; 0x37
 8007afe:	d9ef      	bls.n	8007ae0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b00:	480d      	ldr	r0, [pc, #52]	; (8007b38 <prvInitialiseTaskLists+0x64>)
 8007b02:	f7fe fa23 	bl	8005f4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b06:	480d      	ldr	r0, [pc, #52]	; (8007b3c <prvInitialiseTaskLists+0x68>)
 8007b08:	f7fe fa20 	bl	8005f4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b0c:	480c      	ldr	r0, [pc, #48]	; (8007b40 <prvInitialiseTaskLists+0x6c>)
 8007b0e:	f7fe fa1d 	bl	8005f4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b12:	480c      	ldr	r0, [pc, #48]	; (8007b44 <prvInitialiseTaskLists+0x70>)
 8007b14:	f7fe fa1a 	bl	8005f4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b18:	480b      	ldr	r0, [pc, #44]	; (8007b48 <prvInitialiseTaskLists+0x74>)
 8007b1a:	f7fe fa17 	bl	8005f4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b1e:	4b0b      	ldr	r3, [pc, #44]	; (8007b4c <prvInitialiseTaskLists+0x78>)
 8007b20:	4a05      	ldr	r2, [pc, #20]	; (8007b38 <prvInitialiseTaskLists+0x64>)
 8007b22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b24:	4b0a      	ldr	r3, [pc, #40]	; (8007b50 <prvInitialiseTaskLists+0x7c>)
 8007b26:	4a05      	ldr	r2, [pc, #20]	; (8007b3c <prvInitialiseTaskLists+0x68>)
 8007b28:	601a      	str	r2, [r3, #0]
}
 8007b2a:	bf00      	nop
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	20000a54 	.word	0x20000a54
 8007b38:	20000eb4 	.word	0x20000eb4
 8007b3c:	20000ec8 	.word	0x20000ec8
 8007b40:	20000ee4 	.word	0x20000ee4
 8007b44:	20000ef8 	.word	0x20000ef8
 8007b48:	20000f10 	.word	0x20000f10
 8007b4c:	20000edc 	.word	0x20000edc
 8007b50:	20000ee0 	.word	0x20000ee0

08007b54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b5a:	e019      	b.n	8007b90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b5c:	f001 f926 	bl	8008dac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b60:	4b10      	ldr	r3, [pc, #64]	; (8007ba4 <prvCheckTasksWaitingTermination+0x50>)
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	3304      	adds	r3, #4
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7fe fa77 	bl	8006060 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b72:	4b0d      	ldr	r3, [pc, #52]	; (8007ba8 <prvCheckTasksWaitingTermination+0x54>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	3b01      	subs	r3, #1
 8007b78:	4a0b      	ldr	r2, [pc, #44]	; (8007ba8 <prvCheckTasksWaitingTermination+0x54>)
 8007b7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b7c:	4b0b      	ldr	r3, [pc, #44]	; (8007bac <prvCheckTasksWaitingTermination+0x58>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3b01      	subs	r3, #1
 8007b82:	4a0a      	ldr	r2, [pc, #40]	; (8007bac <prvCheckTasksWaitingTermination+0x58>)
 8007b84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b86:	f001 f945 	bl	8008e14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f810 	bl	8007bb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b90:	4b06      	ldr	r3, [pc, #24]	; (8007bac <prvCheckTasksWaitingTermination+0x58>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1e1      	bne.n	8007b5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b98:	bf00      	nop
 8007b9a:	bf00      	nop
 8007b9c:	3708      	adds	r7, #8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	20000ef8 	.word	0x20000ef8
 8007ba8:	20000f24 	.word	0x20000f24
 8007bac:	20000f0c 	.word	0x20000f0c

08007bb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	3354      	adds	r3, #84	; 0x54
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f001 fc4f 	bl	8009460 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d108      	bne.n	8007bde <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f001 fae1 	bl	8009198 <vPortFree>
				vPortFree( pxTCB );
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f001 fade 	bl	8009198 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007bdc:	e01a      	b.n	8007c14 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d103      	bne.n	8007bf0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f001 fad5 	bl	8009198 <vPortFree>
	}
 8007bee:	e011      	b.n	8007c14 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d00c      	beq.n	8007c14 <prvDeleteTCB+0x64>
	__asm volatile
 8007bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfe:	b672      	cpsid	i
 8007c00:	f383 8811 	msr	BASEPRI, r3
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	b662      	cpsie	i
 8007c0e:	60fb      	str	r3, [r7, #12]
}
 8007c10:	bf00      	nop
 8007c12:	e7fe      	b.n	8007c12 <prvDeleteTCB+0x62>
	}
 8007c14:	bf00      	nop
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c22:	4b0c      	ldr	r3, [pc, #48]	; (8007c54 <prvResetNextTaskUnblockTime+0x38>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d104      	bne.n	8007c36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c2c:	4b0a      	ldr	r3, [pc, #40]	; (8007c58 <prvResetNextTaskUnblockTime+0x3c>)
 8007c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c34:	e008      	b.n	8007c48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c36:	4b07      	ldr	r3, [pc, #28]	; (8007c54 <prvResetNextTaskUnblockTime+0x38>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	4a04      	ldr	r2, [pc, #16]	; (8007c58 <prvResetNextTaskUnblockTime+0x3c>)
 8007c46:	6013      	str	r3, [r2, #0]
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr
 8007c54:	20000edc 	.word	0x20000edc
 8007c58:	20000f44 	.word	0x20000f44

08007c5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c62:	4b0b      	ldr	r3, [pc, #44]	; (8007c90 <xTaskGetSchedulerState+0x34>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d102      	bne.n	8007c70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	607b      	str	r3, [r7, #4]
 8007c6e:	e008      	b.n	8007c82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c70:	4b08      	ldr	r3, [pc, #32]	; (8007c94 <xTaskGetSchedulerState+0x38>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d102      	bne.n	8007c7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c78:	2302      	movs	r3, #2
 8007c7a:	607b      	str	r3, [r7, #4]
 8007c7c:	e001      	b.n	8007c82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c82:	687b      	ldr	r3, [r7, #4]
	}
 8007c84:	4618      	mov	r0, r3
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr
 8007c90:	20000f30 	.word	0x20000f30
 8007c94:	20000f4c 	.word	0x20000f4c

08007c98 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d051      	beq.n	8007d52 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb2:	4b2a      	ldr	r3, [pc, #168]	; (8007d5c <xTaskPriorityInherit+0xc4>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d241      	bcs.n	8007d40 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	db06      	blt.n	8007cd2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cc4:	4b25      	ldr	r3, [pc, #148]	; (8007d5c <xTaskPriorityInherit+0xc4>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	6959      	ldr	r1, [r3, #20]
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cda:	4613      	mov	r3, r2
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	4413      	add	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4a1f      	ldr	r2, [pc, #124]	; (8007d60 <xTaskPriorityInherit+0xc8>)
 8007ce4:	4413      	add	r3, r2
 8007ce6:	4299      	cmp	r1, r3
 8007ce8:	d122      	bne.n	8007d30 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	3304      	adds	r3, #4
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7fe f9b6 	bl	8006060 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007cf4:	4b19      	ldr	r3, [pc, #100]	; (8007d5c <xTaskPriorityInherit+0xc4>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d02:	4b18      	ldr	r3, [pc, #96]	; (8007d64 <xTaskPriorityInherit+0xcc>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d903      	bls.n	8007d12 <xTaskPriorityInherit+0x7a>
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0e:	4a15      	ldr	r2, [pc, #84]	; (8007d64 <xTaskPriorityInherit+0xcc>)
 8007d10:	6013      	str	r3, [r2, #0]
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d16:	4613      	mov	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4413      	add	r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4a10      	ldr	r2, [pc, #64]	; (8007d60 <xTaskPriorityInherit+0xc8>)
 8007d20:	441a      	add	r2, r3
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	3304      	adds	r3, #4
 8007d26:	4619      	mov	r1, r3
 8007d28:	4610      	mov	r0, r2
 8007d2a:	f7fe f93c 	bl	8005fa6 <vListInsertEnd>
 8007d2e:	e004      	b.n	8007d3a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d30:	4b0a      	ldr	r3, [pc, #40]	; (8007d5c <xTaskPriorityInherit+0xc4>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	60fb      	str	r3, [r7, #12]
 8007d3e:	e008      	b.n	8007d52 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d44:	4b05      	ldr	r3, [pc, #20]	; (8007d5c <xTaskPriorityInherit+0xc4>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d201      	bcs.n	8007d52 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d52:	68fb      	ldr	r3, [r7, #12]
	}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	20000a50 	.word	0x20000a50
 8007d60:	20000a54 	.word	0x20000a54
 8007d64:	20000f2c 	.word	0x20000f2c

08007d68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b086      	sub	sp, #24
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d74:	2300      	movs	r3, #0
 8007d76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d05a      	beq.n	8007e34 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d7e:	4b30      	ldr	r3, [pc, #192]	; (8007e40 <xTaskPriorityDisinherit+0xd8>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d00c      	beq.n	8007da2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8c:	b672      	cpsid	i
 8007d8e:	f383 8811 	msr	BASEPRI, r3
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	f3bf 8f4f 	dsb	sy
 8007d9a:	b662      	cpsie	i
 8007d9c:	60fb      	str	r3, [r7, #12]
}
 8007d9e:	bf00      	nop
 8007da0:	e7fe      	b.n	8007da0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d10c      	bne.n	8007dc4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dae:	b672      	cpsid	i
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	b662      	cpsie	i
 8007dbe:	60bb      	str	r3, [r7, #8]
}
 8007dc0:	bf00      	nop
 8007dc2:	e7fe      	b.n	8007dc2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dc8:	1e5a      	subs	r2, r3, #1
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d02c      	beq.n	8007e34 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d128      	bne.n	8007e34 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	3304      	adds	r3, #4
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fe f93a 	bl	8006060 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e04:	4b0f      	ldr	r3, [pc, #60]	; (8007e44 <xTaskPriorityDisinherit+0xdc>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d903      	bls.n	8007e14 <xTaskPriorityDisinherit+0xac>
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e10:	4a0c      	ldr	r2, [pc, #48]	; (8007e44 <xTaskPriorityDisinherit+0xdc>)
 8007e12:	6013      	str	r3, [r2, #0]
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e18:	4613      	mov	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4413      	add	r3, r2
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	4a09      	ldr	r2, [pc, #36]	; (8007e48 <xTaskPriorityDisinherit+0xe0>)
 8007e22:	441a      	add	r2, r3
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	3304      	adds	r3, #4
 8007e28:	4619      	mov	r1, r3
 8007e2a:	4610      	mov	r0, r2
 8007e2c:	f7fe f8bb 	bl	8005fa6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e30:	2301      	movs	r3, #1
 8007e32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e34:	697b      	ldr	r3, [r7, #20]
	}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3718      	adds	r7, #24
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	20000a50 	.word	0x20000a50
 8007e44:	20000f2c 	.word	0x20000f2c
 8007e48:	20000a54 	.word	0x20000a54

08007e4c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b088      	sub	sp, #32
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d06e      	beq.n	8007f42 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d10c      	bne.n	8007e86 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8007e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e70:	b672      	cpsid	i
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	b662      	cpsie	i
 8007e80:	60fb      	str	r3, [r7, #12]
}
 8007e82:	bf00      	nop
 8007e84:	e7fe      	b.n	8007e84 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e8a:	683a      	ldr	r2, [r7, #0]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d902      	bls.n	8007e96 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	61fb      	str	r3, [r7, #28]
 8007e94:	e002      	b.n	8007e9c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e9a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea0:	69fa      	ldr	r2, [r7, #28]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d04d      	beq.n	8007f42 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d148      	bne.n	8007f42 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007eb0:	4b26      	ldr	r3, [pc, #152]	; (8007f4c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	69ba      	ldr	r2, [r7, #24]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d10c      	bne.n	8007ed4 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8007eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ebe:	b672      	cpsid	i
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	b662      	cpsie	i
 8007ece:	60bb      	str	r3, [r7, #8]
}
 8007ed0:	bf00      	nop
 8007ed2:	e7fe      	b.n	8007ed2 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	69fa      	ldr	r2, [r7, #28]
 8007ede:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	db04      	blt.n	8007ef2 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	6959      	ldr	r1, [r3, #20]
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4413      	add	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4a13      	ldr	r2, [pc, #76]	; (8007f50 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007f02:	4413      	add	r3, r2
 8007f04:	4299      	cmp	r1, r3
 8007f06:	d11c      	bne.n	8007f42 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fe f8a7 	bl	8006060 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f16:	4b0f      	ldr	r3, [pc, #60]	; (8007f54 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d903      	bls.n	8007f26 <vTaskPriorityDisinheritAfterTimeout+0xda>
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f22:	4a0c      	ldr	r2, [pc, #48]	; (8007f54 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007f24:	6013      	str	r3, [r2, #0]
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4413      	add	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4a07      	ldr	r2, [pc, #28]	; (8007f50 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007f34:	441a      	add	r2, r3
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	3304      	adds	r3, #4
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	4610      	mov	r0, r2
 8007f3e:	f7fe f832 	bl	8005fa6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f42:	bf00      	nop
 8007f44:	3720      	adds	r7, #32
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20000a50 	.word	0x20000a50
 8007f50:	20000a54 	.word	0x20000a54
 8007f54:	20000f2c 	.word	0x20000f2c

08007f58 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007f58:	b480      	push	{r7}
 8007f5a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007f5c:	4b07      	ldr	r3, [pc, #28]	; (8007f7c <pvTaskIncrementMutexHeldCount+0x24>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d004      	beq.n	8007f6e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007f64:	4b05      	ldr	r3, [pc, #20]	; (8007f7c <pvTaskIncrementMutexHeldCount+0x24>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f6a:	3201      	adds	r2, #1
 8007f6c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007f6e:	4b03      	ldr	r3, [pc, #12]	; (8007f7c <pvTaskIncrementMutexHeldCount+0x24>)
 8007f70:	681b      	ldr	r3, [r3, #0]
	}
 8007f72:	4618      	mov	r0, r3
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	20000a50 	.word	0x20000a50

08007f80 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8007f8a:	f000 ff0f 	bl	8008dac <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8007f8e:	4b20      	ldr	r3, [pc, #128]	; (8008010 <ulTaskNotifyTake+0x90>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d113      	bne.n	8007fc2 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007f9a:	4b1d      	ldr	r3, [pc, #116]	; (8008010 <ulTaskNotifyTake+0x90>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00b      	beq.n	8007fc2 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007faa:	2101      	movs	r1, #1
 8007fac:	6838      	ldr	r0, [r7, #0]
 8007fae:	f000 f9e3 	bl	8008378 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007fb2:	4b18      	ldr	r3, [pc, #96]	; (8008014 <ulTaskNotifyTake+0x94>)
 8007fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fb8:	601a      	str	r2, [r3, #0]
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007fc2:	f000 ff27 	bl	8008e14 <vPortExitCritical>

		taskENTER_CRITICAL();
 8007fc6:	f000 fef1 	bl	8008dac <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8007fca:	4b11      	ldr	r3, [pc, #68]	; (8008010 <ulTaskNotifyTake+0x90>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007fd2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00e      	beq.n	8007ff8 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d005      	beq.n	8007fec <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8007fe0:	4b0b      	ldr	r3, [pc, #44]	; (8008010 <ulTaskNotifyTake+0x90>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8007fea:	e005      	b.n	8007ff8 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8007fec:	4b08      	ldr	r3, [pc, #32]	; (8008010 <ulTaskNotifyTake+0x90>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	3a01      	subs	r2, #1
 8007ff4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ff8:	4b05      	ldr	r3, [pc, #20]	; (8008010 <ulTaskNotifyTake+0x90>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8008002:	f000 ff07 	bl	8008e14 <vPortExitCritical>

		return ulReturn;
 8008006:	68fb      	ldr	r3, [r7, #12]
	}
 8008008:	4618      	mov	r0, r3
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	20000a50 	.word	0x20000a50
 8008014:	e000ed04 	.word	0xe000ed04

08008018 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008018:	b580      	push	{r7, lr}
 800801a:	b08a      	sub	sp, #40	; 0x28
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	603b      	str	r3, [r7, #0]
 8008024:	4613      	mov	r3, r2
 8008026:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008028:	2301      	movs	r3, #1
 800802a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10c      	bne.n	800804c <xTaskGenericNotify+0x34>
	__asm volatile
 8008032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008036:	b672      	cpsid	i
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	b662      	cpsie	i
 8008046:	61bb      	str	r3, [r7, #24]
}
 8008048:	bf00      	nop
 800804a:	e7fe      	b.n	800804a <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8008050:	f000 feac 	bl	8008dac <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d004      	beq.n	8008064 <xTaskGenericNotify+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800805a:	6a3b      	ldr	r3, [r7, #32]
 800805c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800806a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800806c:	6a3b      	ldr	r3, [r7, #32]
 800806e:	2202      	movs	r2, #2
 8008070:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8008074:	79fb      	ldrb	r3, [r7, #7]
 8008076:	2b04      	cmp	r3, #4
 8008078:	d82d      	bhi.n	80080d6 <xTaskGenericNotify+0xbe>
 800807a:	a201      	add	r2, pc, #4	; (adr r2, 8008080 <xTaskGenericNotify+0x68>)
 800807c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008080:	080080fd 	.word	0x080080fd
 8008084:	08008095 	.word	0x08008095
 8008088:	080080a7 	.word	0x080080a7
 800808c:	080080b7 	.word	0x080080b7
 8008090:	080080c1 	.word	0x080080c1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	431a      	orrs	r2, r3
 800809e:	6a3b      	ldr	r3, [r7, #32]
 80080a0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80080a4:	e02d      	b.n	8008102 <xTaskGenericNotify+0xea>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80080ac:	1c5a      	adds	r2, r3, #1
 80080ae:	6a3b      	ldr	r3, [r7, #32]
 80080b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80080b4:	e025      	b.n	8008102 <xTaskGenericNotify+0xea>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	68ba      	ldr	r2, [r7, #8]
 80080ba:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80080be:	e020      	b.n	8008102 <xTaskGenericNotify+0xea>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80080c0:	7ffb      	ldrb	r3, [r7, #31]
 80080c2:	2b02      	cmp	r3, #2
 80080c4:	d004      	beq.n	80080d0 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80080c6:	6a3b      	ldr	r3, [r7, #32]
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80080ce:	e018      	b.n	8008102 <xTaskGenericNotify+0xea>
						xReturn = pdFAIL;
 80080d0:	2300      	movs	r3, #0
 80080d2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80080d4:	e015      	b.n	8008102 <xTaskGenericNotify+0xea>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80080d6:	6a3b      	ldr	r3, [r7, #32]
 80080d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80080dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e0:	d00e      	beq.n	8008100 <xTaskGenericNotify+0xe8>
	__asm volatile
 80080e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e6:	b672      	cpsid	i
 80080e8:	f383 8811 	msr	BASEPRI, r3
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	b662      	cpsie	i
 80080f6:	617b      	str	r3, [r7, #20]
}
 80080f8:	bf00      	nop
 80080fa:	e7fe      	b.n	80080fa <xTaskGenericNotify+0xe2>
					break;
 80080fc:	bf00      	nop
 80080fe:	e000      	b.n	8008102 <xTaskGenericNotify+0xea>

					break;
 8008100:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008102:	7ffb      	ldrb	r3, [r7, #31]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d13c      	bne.n	8008182 <xTaskGenericNotify+0x16a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008108:	6a3b      	ldr	r3, [r7, #32]
 800810a:	3304      	adds	r3, #4
 800810c:	4618      	mov	r0, r3
 800810e:	f7fd ffa7 	bl	8006060 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8008112:	6a3b      	ldr	r3, [r7, #32]
 8008114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008116:	4b1e      	ldr	r3, [pc, #120]	; (8008190 <xTaskGenericNotify+0x178>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	429a      	cmp	r2, r3
 800811c:	d903      	bls.n	8008126 <xTaskGenericNotify+0x10e>
 800811e:	6a3b      	ldr	r3, [r7, #32]
 8008120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008122:	4a1b      	ldr	r2, [pc, #108]	; (8008190 <xTaskGenericNotify+0x178>)
 8008124:	6013      	str	r3, [r2, #0]
 8008126:	6a3b      	ldr	r3, [r7, #32]
 8008128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800812a:	4613      	mov	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4413      	add	r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4a18      	ldr	r2, [pc, #96]	; (8008194 <xTaskGenericNotify+0x17c>)
 8008134:	441a      	add	r2, r3
 8008136:	6a3b      	ldr	r3, [r7, #32]
 8008138:	3304      	adds	r3, #4
 800813a:	4619      	mov	r1, r3
 800813c:	4610      	mov	r0, r2
 800813e:	f7fd ff32 	bl	8005fa6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008142:	6a3b      	ldr	r3, [r7, #32]
 8008144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00c      	beq.n	8008164 <xTaskGenericNotify+0x14c>
	__asm volatile
 800814a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814e:	b672      	cpsid	i
 8008150:	f383 8811 	msr	BASEPRI, r3
 8008154:	f3bf 8f6f 	isb	sy
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	b662      	cpsie	i
 800815e:	613b      	str	r3, [r7, #16]
}
 8008160:	bf00      	nop
 8008162:	e7fe      	b.n	8008162 <xTaskGenericNotify+0x14a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008164:	6a3b      	ldr	r3, [r7, #32]
 8008166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008168:	4b0b      	ldr	r3, [pc, #44]	; (8008198 <xTaskGenericNotify+0x180>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816e:	429a      	cmp	r2, r3
 8008170:	d907      	bls.n	8008182 <xTaskGenericNotify+0x16a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8008172:	4b0a      	ldr	r3, [pc, #40]	; (800819c <xTaskGenericNotify+0x184>)
 8008174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008178:	601a      	str	r2, [r3, #0]
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008182:	f000 fe47 	bl	8008e14 <vPortExitCritical>

		return xReturn;
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008188:	4618      	mov	r0, r3
 800818a:	3728      	adds	r7, #40	; 0x28
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	20000f2c 	.word	0x20000f2c
 8008194:	20000a54 	.word	0x20000a54
 8008198:	20000a50 	.word	0x20000a50
 800819c:	e000ed04 	.word	0xe000ed04

080081a0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b08e      	sub	sp, #56	; 0x38
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	603b      	str	r3, [r7, #0]
 80081ac:	4613      	mov	r3, r2
 80081ae:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80081b0:	2301      	movs	r3, #1
 80081b2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d10c      	bne.n	80081d4 <xTaskGenericNotifyFromISR+0x34>
	__asm volatile
 80081ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081be:	b672      	cpsid	i
 80081c0:	f383 8811 	msr	BASEPRI, r3
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	b662      	cpsie	i
 80081ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80081d0:	bf00      	nop
 80081d2:	e7fe      	b.n	80081d2 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081d4:	f000 fed2 	bl	8008f7c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80081dc:	f3ef 8211 	mrs	r2, BASEPRI
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	b672      	cpsid	i
 80081e6:	f383 8811 	msr	BASEPRI, r3
 80081ea:	f3bf 8f6f 	isb	sy
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	b662      	cpsie	i
 80081f4:	623a      	str	r2, [r7, #32]
 80081f6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80081f8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80081fa:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d004      	beq.n	800820c <xTaskGenericNotifyFromISR+0x6c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008204:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800820c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8008212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008218:	2202      	movs	r2, #2
 800821a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800821e:	79fb      	ldrb	r3, [r7, #7]
 8008220:	2b04      	cmp	r3, #4
 8008222:	d82f      	bhi.n	8008284 <xTaskGenericNotifyFromISR+0xe4>
 8008224:	a201      	add	r2, pc, #4	; (adr r2, 800822c <xTaskGenericNotifyFromISR+0x8c>)
 8008226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822a:	bf00      	nop
 800822c:	080082ab 	.word	0x080082ab
 8008230:	08008241 	.word	0x08008241
 8008234:	08008253 	.word	0x08008253
 8008238:	08008263 	.word	0x08008263
 800823c:	0800826d 	.word	0x0800826d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008242:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	431a      	orrs	r2, r3
 800824a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8008250:	e02e      	b.n	80082b0 <xTaskGenericNotifyFromISR+0x110>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008254:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008258:	1c5a      	adds	r2, r3, #1
 800825a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8008260:	e026      	b.n	80082b0 <xTaskGenericNotifyFromISR+0x110>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800826a:	e021      	b.n	80082b0 <xTaskGenericNotifyFromISR+0x110>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800826c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008270:	2b02      	cmp	r3, #2
 8008272:	d004      	beq.n	800827e <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800827c:	e018      	b.n	80082b0 <xTaskGenericNotifyFromISR+0x110>
						xReturn = pdFAIL;
 800827e:	2300      	movs	r3, #0
 8008280:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8008282:	e015      	b.n	80082b0 <xTaskGenericNotifyFromISR+0x110>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008286:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800828a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800828e:	d00e      	beq.n	80082ae <xTaskGenericNotifyFromISR+0x10e>
	__asm volatile
 8008290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008294:	b672      	cpsid	i
 8008296:	f383 8811 	msr	BASEPRI, r3
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	b662      	cpsie	i
 80082a4:	61bb      	str	r3, [r7, #24]
}
 80082a6:	bf00      	nop
 80082a8:	e7fe      	b.n	80082a8 <xTaskGenericNotifyFromISR+0x108>
					break;
 80082aa:	bf00      	nop
 80082ac:	e000      	b.n	80082b0 <xTaskGenericNotifyFromISR+0x110>
					break;
 80082ae:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80082b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d148      	bne.n	800834a <xTaskGenericNotifyFromISR+0x1aa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80082b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00c      	beq.n	80082da <xTaskGenericNotifyFromISR+0x13a>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c4:	b672      	cpsid	i
 80082c6:	f383 8811 	msr	BASEPRI, r3
 80082ca:	f3bf 8f6f 	isb	sy
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	b662      	cpsie	i
 80082d4:	617b      	str	r3, [r7, #20]
}
 80082d6:	bf00      	nop
 80082d8:	e7fe      	b.n	80082d8 <xTaskGenericNotifyFromISR+0x138>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082da:	4b21      	ldr	r3, [pc, #132]	; (8008360 <xTaskGenericNotifyFromISR+0x1c0>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d11d      	bne.n	800831e <xTaskGenericNotifyFromISR+0x17e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e4:	3304      	adds	r3, #4
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7fd feba 	bl	8006060 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082f0:	4b1c      	ldr	r3, [pc, #112]	; (8008364 <xTaskGenericNotifyFromISR+0x1c4>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d903      	bls.n	8008300 <xTaskGenericNotifyFromISR+0x160>
 80082f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fc:	4a19      	ldr	r2, [pc, #100]	; (8008364 <xTaskGenericNotifyFromISR+0x1c4>)
 80082fe:	6013      	str	r3, [r2, #0]
 8008300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008304:	4613      	mov	r3, r2
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	4413      	add	r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	4a16      	ldr	r2, [pc, #88]	; (8008368 <xTaskGenericNotifyFromISR+0x1c8>)
 800830e:	441a      	add	r2, r3
 8008310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008312:	3304      	adds	r3, #4
 8008314:	4619      	mov	r1, r3
 8008316:	4610      	mov	r0, r2
 8008318:	f7fd fe45 	bl	8005fa6 <vListInsertEnd>
 800831c:	e005      	b.n	800832a <xTaskGenericNotifyFromISR+0x18a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800831e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008320:	3318      	adds	r3, #24
 8008322:	4619      	mov	r1, r3
 8008324:	4811      	ldr	r0, [pc, #68]	; (800836c <xTaskGenericNotifyFromISR+0x1cc>)
 8008326:	f7fd fe3e 	bl	8005fa6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800832a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800832e:	4b10      	ldr	r3, [pc, #64]	; (8008370 <xTaskGenericNotifyFromISR+0x1d0>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008334:	429a      	cmp	r2, r3
 8008336:	d908      	bls.n	800834a <xTaskGenericNotifyFromISR+0x1aa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800833a:	2b00      	cmp	r3, #0
 800833c:	d002      	beq.n	8008344 <xTaskGenericNotifyFromISR+0x1a4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800833e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008340:	2201      	movs	r2, #1
 8008342:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8008344:	4b0b      	ldr	r3, [pc, #44]	; (8008374 <xTaskGenericNotifyFromISR+0x1d4>)
 8008346:	2201      	movs	r2, #1
 8008348:	601a      	str	r2, [r3, #0]
 800834a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	f383 8811 	msr	BASEPRI, r3
}
 8008354:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8008356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8008358:	4618      	mov	r0, r3
 800835a:	3738      	adds	r7, #56	; 0x38
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	20000f4c 	.word	0x20000f4c
 8008364:	20000f2c 	.word	0x20000f2c
 8008368:	20000a54 	.word	0x20000a54
 800836c:	20000ee4 	.word	0x20000ee4
 8008370:	20000a50 	.word	0x20000a50
 8008374:	20000f38 	.word	0x20000f38

08008378 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008382:	4b21      	ldr	r3, [pc, #132]	; (8008408 <prvAddCurrentTaskToDelayedList+0x90>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008388:	4b20      	ldr	r3, [pc, #128]	; (800840c <prvAddCurrentTaskToDelayedList+0x94>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	3304      	adds	r3, #4
 800838e:	4618      	mov	r0, r3
 8008390:	f7fd fe66 	bl	8006060 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800839a:	d10a      	bne.n	80083b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d007      	beq.n	80083b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083a2:	4b1a      	ldr	r3, [pc, #104]	; (800840c <prvAddCurrentTaskToDelayedList+0x94>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	3304      	adds	r3, #4
 80083a8:	4619      	mov	r1, r3
 80083aa:	4819      	ldr	r0, [pc, #100]	; (8008410 <prvAddCurrentTaskToDelayedList+0x98>)
 80083ac:	f7fd fdfb 	bl	8005fa6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80083b0:	e026      	b.n	8008400 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4413      	add	r3, r2
 80083b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80083ba:	4b14      	ldr	r3, [pc, #80]	; (800840c <prvAddCurrentTaskToDelayedList+0x94>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d209      	bcs.n	80083de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083ca:	4b12      	ldr	r3, [pc, #72]	; (8008414 <prvAddCurrentTaskToDelayedList+0x9c>)
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	4b0f      	ldr	r3, [pc, #60]	; (800840c <prvAddCurrentTaskToDelayedList+0x94>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	3304      	adds	r3, #4
 80083d4:	4619      	mov	r1, r3
 80083d6:	4610      	mov	r0, r2
 80083d8:	f7fd fe09 	bl	8005fee <vListInsert>
}
 80083dc:	e010      	b.n	8008400 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083de:	4b0e      	ldr	r3, [pc, #56]	; (8008418 <prvAddCurrentTaskToDelayedList+0xa0>)
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	4b0a      	ldr	r3, [pc, #40]	; (800840c <prvAddCurrentTaskToDelayedList+0x94>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	3304      	adds	r3, #4
 80083e8:	4619      	mov	r1, r3
 80083ea:	4610      	mov	r0, r2
 80083ec:	f7fd fdff 	bl	8005fee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80083f0:	4b0a      	ldr	r3, [pc, #40]	; (800841c <prvAddCurrentTaskToDelayedList+0xa4>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d202      	bcs.n	8008400 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80083fa:	4a08      	ldr	r2, [pc, #32]	; (800841c <prvAddCurrentTaskToDelayedList+0xa4>)
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	6013      	str	r3, [r2, #0]
}
 8008400:	bf00      	nop
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	20000f28 	.word	0x20000f28
 800840c:	20000a50 	.word	0x20000a50
 8008410:	20000f10 	.word	0x20000f10
 8008414:	20000ee0 	.word	0x20000ee0
 8008418:	20000edc 	.word	0x20000edc
 800841c:	20000f44 	.word	0x20000f44

08008420 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b08a      	sub	sp, #40	; 0x28
 8008424:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008426:	2300      	movs	r3, #0
 8008428:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800842a:	f000 fb73 	bl	8008b14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800842e:	4b1d      	ldr	r3, [pc, #116]	; (80084a4 <xTimerCreateTimerTask+0x84>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d021      	beq.n	800847a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008436:	2300      	movs	r3, #0
 8008438:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800843a:	2300      	movs	r3, #0
 800843c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800843e:	1d3a      	adds	r2, r7, #4
 8008440:	f107 0108 	add.w	r1, r7, #8
 8008444:	f107 030c 	add.w	r3, r7, #12
 8008448:	4618      	mov	r0, r3
 800844a:	f7fd fd65 	bl	8005f18 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800844e:	6879      	ldr	r1, [r7, #4]
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	9202      	str	r2, [sp, #8]
 8008456:	9301      	str	r3, [sp, #4]
 8008458:	2302      	movs	r3, #2
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	2300      	movs	r3, #0
 800845e:	460a      	mov	r2, r1
 8008460:	4911      	ldr	r1, [pc, #68]	; (80084a8 <xTimerCreateTimerTask+0x88>)
 8008462:	4812      	ldr	r0, [pc, #72]	; (80084ac <xTimerCreateTimerTask+0x8c>)
 8008464:	f7fe fd80 	bl	8006f68 <xTaskCreateStatic>
 8008468:	4603      	mov	r3, r0
 800846a:	4a11      	ldr	r2, [pc, #68]	; (80084b0 <xTimerCreateTimerTask+0x90>)
 800846c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800846e:	4b10      	ldr	r3, [pc, #64]	; (80084b0 <xTimerCreateTimerTask+0x90>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d001      	beq.n	800847a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008476:	2301      	movs	r3, #1
 8008478:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10c      	bne.n	800849a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8008480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008484:	b672      	cpsid	i
 8008486:	f383 8811 	msr	BASEPRI, r3
 800848a:	f3bf 8f6f 	isb	sy
 800848e:	f3bf 8f4f 	dsb	sy
 8008492:	b662      	cpsie	i
 8008494:	613b      	str	r3, [r7, #16]
}
 8008496:	bf00      	nop
 8008498:	e7fe      	b.n	8008498 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800849a:	697b      	ldr	r3, [r7, #20]
}
 800849c:	4618      	mov	r0, r3
 800849e:	3718      	adds	r7, #24
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	20000f80 	.word	0x20000f80
 80084a8:	08009658 	.word	0x08009658
 80084ac:	080086ad 	.word	0x080086ad
 80084b0:	20000f84 	.word	0x20000f84

080084b4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b088      	sub	sp, #32
 80084b8:	af02      	add	r7, sp, #8
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
 80084c0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80084c2:	202c      	movs	r0, #44	; 0x2c
 80084c4:	f000 fd9e 	bl	8009004 <pvPortMalloc>
 80084c8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00d      	beq.n	80084ec <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	9301      	str	r3, [sp, #4]
 80084dc:	6a3b      	ldr	r3, [r7, #32]
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	68b9      	ldr	r1, [r7, #8]
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f000 f805 	bl	80084f6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80084ec:	697b      	ldr	r3, [r7, #20]
	}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3718      	adds	r7, #24
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b086      	sub	sp, #24
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	60f8      	str	r0, [r7, #12]
 80084fe:	60b9      	str	r1, [r7, #8]
 8008500:	607a      	str	r2, [r7, #4]
 8008502:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d10c      	bne.n	8008524 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800850a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850e:	b672      	cpsid	i
 8008510:	f383 8811 	msr	BASEPRI, r3
 8008514:	f3bf 8f6f 	isb	sy
 8008518:	f3bf 8f4f 	dsb	sy
 800851c:	b662      	cpsie	i
 800851e:	617b      	str	r3, [r7, #20]
}
 8008520:	bf00      	nop
 8008522:	e7fe      	b.n	8008522 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 8008524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008526:	2b00      	cmp	r3, #0
 8008528:	d01e      	beq.n	8008568 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800852a:	f000 faf3 	bl	8008b14 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800852e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008536:	68ba      	ldr	r2, [r7, #8]
 8008538:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008542:	6a3a      	ldr	r2, [r7, #32]
 8008544:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008548:	3304      	adds	r3, #4
 800854a:	4618      	mov	r0, r3
 800854c:	f7fd fd1e 	bl	8005f8c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d008      	beq.n	8008568 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008558:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800855c:	f043 0304 	orr.w	r3, r3, #4
 8008560:	b2da      	uxtb	r2, r3
 8008562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008564:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008568:	bf00      	nop
 800856a:	3718      	adds	r7, #24
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b08a      	sub	sp, #40	; 0x28
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
 800857c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800857e:	2300      	movs	r3, #0
 8008580:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10c      	bne.n	80085a2 <xTimerGenericCommand+0x32>
	__asm volatile
 8008588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858c:	b672      	cpsid	i
 800858e:	f383 8811 	msr	BASEPRI, r3
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	f3bf 8f4f 	dsb	sy
 800859a:	b662      	cpsie	i
 800859c:	623b      	str	r3, [r7, #32]
}
 800859e:	bf00      	nop
 80085a0:	e7fe      	b.n	80085a0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80085a2:	4b1a      	ldr	r3, [pc, #104]	; (800860c <xTimerGenericCommand+0x9c>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d02a      	beq.n	8008600 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	2b05      	cmp	r3, #5
 80085ba:	dc18      	bgt.n	80085ee <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80085bc:	f7ff fb4e 	bl	8007c5c <xTaskGetSchedulerState>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d109      	bne.n	80085da <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80085c6:	4b11      	ldr	r3, [pc, #68]	; (800860c <xTimerGenericCommand+0x9c>)
 80085c8:	6818      	ldr	r0, [r3, #0]
 80085ca:	f107 0110 	add.w	r1, r7, #16
 80085ce:	2300      	movs	r3, #0
 80085d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085d2:	f7fd ff33 	bl	800643c <xQueueGenericSend>
 80085d6:	6278      	str	r0, [r7, #36]	; 0x24
 80085d8:	e012      	b.n	8008600 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80085da:	4b0c      	ldr	r3, [pc, #48]	; (800860c <xTimerGenericCommand+0x9c>)
 80085dc:	6818      	ldr	r0, [r3, #0]
 80085de:	f107 0110 	add.w	r1, r7, #16
 80085e2:	2300      	movs	r3, #0
 80085e4:	2200      	movs	r2, #0
 80085e6:	f7fd ff29 	bl	800643c <xQueueGenericSend>
 80085ea:	6278      	str	r0, [r7, #36]	; 0x24
 80085ec:	e008      	b.n	8008600 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80085ee:	4b07      	ldr	r3, [pc, #28]	; (800860c <xTimerGenericCommand+0x9c>)
 80085f0:	6818      	ldr	r0, [r3, #0]
 80085f2:	f107 0110 	add.w	r1, r7, #16
 80085f6:	2300      	movs	r3, #0
 80085f8:	683a      	ldr	r2, [r7, #0]
 80085fa:	f7fe f825 	bl	8006648 <xQueueGenericSendFromISR>
 80085fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008602:	4618      	mov	r0, r3
 8008604:	3728      	adds	r7, #40	; 0x28
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	20000f80 	.word	0x20000f80

08008610 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b088      	sub	sp, #32
 8008614:	af02      	add	r7, sp, #8
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800861a:	4b23      	ldr	r3, [pc, #140]	; (80086a8 <prvProcessExpiredTimer+0x98>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	3304      	adds	r3, #4
 8008628:	4618      	mov	r0, r3
 800862a:	f7fd fd19 	bl	8006060 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008634:	f003 0304 	and.w	r3, r3, #4
 8008638:	2b00      	cmp	r3, #0
 800863a:	d024      	beq.n	8008686 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	699a      	ldr	r2, [r3, #24]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	18d1      	adds	r1, r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	6978      	ldr	r0, [r7, #20]
 800864a:	f000 f8d3 	bl	80087f4 <prvInsertTimerInActiveList>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d021      	beq.n	8008698 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008654:	2300      	movs	r3, #0
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	2300      	movs	r3, #0
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	2100      	movs	r1, #0
 800865e:	6978      	ldr	r0, [r7, #20]
 8008660:	f7ff ff86 	bl	8008570 <xTimerGenericCommand>
 8008664:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d115      	bne.n	8008698 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800866c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008670:	b672      	cpsid	i
 8008672:	f383 8811 	msr	BASEPRI, r3
 8008676:	f3bf 8f6f 	isb	sy
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	b662      	cpsie	i
 8008680:	60fb      	str	r3, [r7, #12]
}
 8008682:	bf00      	nop
 8008684:	e7fe      	b.n	8008684 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800868c:	f023 0301 	bic.w	r3, r3, #1
 8008690:	b2da      	uxtb	r2, r3
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	6a1b      	ldr	r3, [r3, #32]
 800869c:	6978      	ldr	r0, [r7, #20]
 800869e:	4798      	blx	r3
}
 80086a0:	bf00      	nop
 80086a2:	3718      	adds	r7, #24
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	20000f78 	.word	0x20000f78

080086ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80086b4:	f107 0308 	add.w	r3, r7, #8
 80086b8:	4618      	mov	r0, r3
 80086ba:	f000 f857 	bl	800876c <prvGetNextExpireTime>
 80086be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	4619      	mov	r1, r3
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f000 f803 	bl	80086d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80086ca:	f000 f8d5 	bl	8008878 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80086ce:	e7f1      	b.n	80086b4 <prvTimerTask+0x8>

080086d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80086da:	f7fe feaf 	bl	800743c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086de:	f107 0308 	add.w	r3, r7, #8
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 f866 	bl	80087b4 <prvSampleTimeNow>
 80086e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d130      	bne.n	8008752 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10a      	bne.n	800870c <prvProcessTimerOrBlockTask+0x3c>
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d806      	bhi.n	800870c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80086fe:	f7fe feab 	bl	8007458 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008702:	68f9      	ldr	r1, [r7, #12]
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7ff ff83 	bl	8008610 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800870a:	e024      	b.n	8008756 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d008      	beq.n	8008724 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008712:	4b13      	ldr	r3, [pc, #76]	; (8008760 <prvProcessTimerOrBlockTask+0x90>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d101      	bne.n	8008720 <prvProcessTimerOrBlockTask+0x50>
 800871c:	2301      	movs	r3, #1
 800871e:	e000      	b.n	8008722 <prvProcessTimerOrBlockTask+0x52>
 8008720:	2300      	movs	r3, #0
 8008722:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008724:	4b0f      	ldr	r3, [pc, #60]	; (8008764 <prvProcessTimerOrBlockTask+0x94>)
 8008726:	6818      	ldr	r0, [r3, #0]
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	4619      	mov	r1, r3
 8008732:	f7fe fbe5 	bl	8006f00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008736:	f7fe fe8f 	bl	8007458 <xTaskResumeAll>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d10a      	bne.n	8008756 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008740:	4b09      	ldr	r3, [pc, #36]	; (8008768 <prvProcessTimerOrBlockTask+0x98>)
 8008742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	f3bf 8f6f 	isb	sy
}
 8008750:	e001      	b.n	8008756 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008752:	f7fe fe81 	bl	8007458 <xTaskResumeAll>
}
 8008756:	bf00      	nop
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	20000f7c 	.word	0x20000f7c
 8008764:	20000f80 	.word	0x20000f80
 8008768:	e000ed04 	.word	0xe000ed04

0800876c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800876c:	b480      	push	{r7}
 800876e:	b085      	sub	sp, #20
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008774:	4b0e      	ldr	r3, [pc, #56]	; (80087b0 <prvGetNextExpireTime+0x44>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d101      	bne.n	8008782 <prvGetNextExpireTime+0x16>
 800877e:	2201      	movs	r2, #1
 8008780:	e000      	b.n	8008784 <prvGetNextExpireTime+0x18>
 8008782:	2200      	movs	r2, #0
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d105      	bne.n	800879c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008790:	4b07      	ldr	r3, [pc, #28]	; (80087b0 <prvGetNextExpireTime+0x44>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	60fb      	str	r3, [r7, #12]
 800879a:	e001      	b.n	80087a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800879c:	2300      	movs	r3, #0
 800879e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80087a0:	68fb      	ldr	r3, [r7, #12]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3714      	adds	r7, #20
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	20000f78 	.word	0x20000f78

080087b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80087bc:	f7fe feec 	bl	8007598 <xTaskGetTickCount>
 80087c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80087c2:	4b0b      	ldr	r3, [pc, #44]	; (80087f0 <prvSampleTimeNow+0x3c>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d205      	bcs.n	80087d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80087cc:	f000 f93c 	bl	8008a48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	601a      	str	r2, [r3, #0]
 80087d6:	e002      	b.n	80087de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80087de:	4a04      	ldr	r2, [pc, #16]	; (80087f0 <prvSampleTimeNow+0x3c>)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80087e4:	68fb      	ldr	r3, [r7, #12]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	20000f88 	.word	0x20000f88

080087f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
 8008800:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008802:	2300      	movs	r3, #0
 8008804:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	429a      	cmp	r2, r3
 8008818:	d812      	bhi.n	8008840 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	1ad2      	subs	r2, r2, r3
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	699b      	ldr	r3, [r3, #24]
 8008824:	429a      	cmp	r2, r3
 8008826:	d302      	bcc.n	800882e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008828:	2301      	movs	r3, #1
 800882a:	617b      	str	r3, [r7, #20]
 800882c:	e01b      	b.n	8008866 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800882e:	4b10      	ldr	r3, [pc, #64]	; (8008870 <prvInsertTimerInActiveList+0x7c>)
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	3304      	adds	r3, #4
 8008836:	4619      	mov	r1, r3
 8008838:	4610      	mov	r0, r2
 800883a:	f7fd fbd8 	bl	8005fee <vListInsert>
 800883e:	e012      	b.n	8008866 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	429a      	cmp	r2, r3
 8008846:	d206      	bcs.n	8008856 <prvInsertTimerInActiveList+0x62>
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	429a      	cmp	r2, r3
 800884e:	d302      	bcc.n	8008856 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008850:	2301      	movs	r3, #1
 8008852:	617b      	str	r3, [r7, #20]
 8008854:	e007      	b.n	8008866 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008856:	4b07      	ldr	r3, [pc, #28]	; (8008874 <prvInsertTimerInActiveList+0x80>)
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	3304      	adds	r3, #4
 800885e:	4619      	mov	r1, r3
 8008860:	4610      	mov	r0, r2
 8008862:	f7fd fbc4 	bl	8005fee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008866:	697b      	ldr	r3, [r7, #20]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3718      	adds	r7, #24
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	20000f7c 	.word	0x20000f7c
 8008874:	20000f78 	.word	0x20000f78

08008878 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b08e      	sub	sp, #56	; 0x38
 800887c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800887e:	e0d0      	b.n	8008a22 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2b00      	cmp	r3, #0
 8008884:	da1a      	bge.n	80088bc <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008886:	1d3b      	adds	r3, r7, #4
 8008888:	3304      	adds	r3, #4
 800888a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800888c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10c      	bne.n	80088ac <prvProcessReceivedCommands+0x34>
	__asm volatile
 8008892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008896:	b672      	cpsid	i
 8008898:	f383 8811 	msr	BASEPRI, r3
 800889c:	f3bf 8f6f 	isb	sy
 80088a0:	f3bf 8f4f 	dsb	sy
 80088a4:	b662      	cpsie	i
 80088a6:	61fb      	str	r3, [r7, #28]
}
 80088a8:	bf00      	nop
 80088aa:	e7fe      	b.n	80088aa <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80088ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088b2:	6850      	ldr	r0, [r2, #4]
 80088b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088b6:	6892      	ldr	r2, [r2, #8]
 80088b8:	4611      	mov	r1, r2
 80088ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f2c0 80ae 	blt.w	8008a20 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80088c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ca:	695b      	ldr	r3, [r3, #20]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d004      	beq.n	80088da <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d2:	3304      	adds	r3, #4
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7fd fbc3 	bl	8006060 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80088da:	463b      	mov	r3, r7
 80088dc:	4618      	mov	r0, r3
 80088de:	f7ff ff69 	bl	80087b4 <prvSampleTimeNow>
 80088e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2b09      	cmp	r3, #9
 80088e8:	f200 809b 	bhi.w	8008a22 <prvProcessReceivedCommands+0x1aa>
 80088ec:	a201      	add	r2, pc, #4	; (adr r2, 80088f4 <prvProcessReceivedCommands+0x7c>)
 80088ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f2:	bf00      	nop
 80088f4:	0800891d 	.word	0x0800891d
 80088f8:	0800891d 	.word	0x0800891d
 80088fc:	0800891d 	.word	0x0800891d
 8008900:	08008995 	.word	0x08008995
 8008904:	080089a9 	.word	0x080089a9
 8008908:	080089f7 	.word	0x080089f7
 800890c:	0800891d 	.word	0x0800891d
 8008910:	0800891d 	.word	0x0800891d
 8008914:	08008995 	.word	0x08008995
 8008918:	080089a9 	.word	0x080089a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800891c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008922:	f043 0301 	orr.w	r3, r3, #1
 8008926:	b2da      	uxtb	r2, r3
 8008928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	699b      	ldr	r3, [r3, #24]
 8008934:	18d1      	adds	r1, r2, r3
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800893a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800893c:	f7ff ff5a 	bl	80087f4 <prvInsertTimerInActiveList>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d06d      	beq.n	8008a22 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008948:	6a1b      	ldr	r3, [r3, #32]
 800894a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800894c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800894e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008950:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008954:	f003 0304 	and.w	r3, r3, #4
 8008958:	2b00      	cmp	r3, #0
 800895a:	d062      	beq.n	8008a22 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800895c:	68ba      	ldr	r2, [r7, #8]
 800895e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008960:	699b      	ldr	r3, [r3, #24]
 8008962:	441a      	add	r2, r3
 8008964:	2300      	movs	r3, #0
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	2300      	movs	r3, #0
 800896a:	2100      	movs	r1, #0
 800896c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800896e:	f7ff fdff 	bl	8008570 <xTimerGenericCommand>
 8008972:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008974:	6a3b      	ldr	r3, [r7, #32]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d153      	bne.n	8008a22 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800897a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897e:	b672      	cpsid	i
 8008980:	f383 8811 	msr	BASEPRI, r3
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	b662      	cpsie	i
 800898e:	61bb      	str	r3, [r7, #24]
}
 8008990:	bf00      	nop
 8008992:	e7fe      	b.n	8008992 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008996:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800899a:	f023 0301 	bic.w	r3, r3, #1
 800899e:	b2da      	uxtb	r2, r3
 80089a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80089a6:	e03c      	b.n	8008a22 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80089a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089ae:	f043 0301 	orr.w	r3, r3, #1
 80089b2:	b2da      	uxtb	r2, r3
 80089b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80089c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d10c      	bne.n	80089e2 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80089c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089cc:	b672      	cpsid	i
 80089ce:	f383 8811 	msr	BASEPRI, r3
 80089d2:	f3bf 8f6f 	isb	sy
 80089d6:	f3bf 8f4f 	dsb	sy
 80089da:	b662      	cpsie	i
 80089dc:	617b      	str	r3, [r7, #20]
}
 80089de:	bf00      	nop
 80089e0:	e7fe      	b.n	80089e0 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80089e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e4:	699a      	ldr	r2, [r3, #24]
 80089e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e8:	18d1      	adds	r1, r2, r3
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089f0:	f7ff ff00 	bl	80087f4 <prvInsertTimerInActiveList>
					break;
 80089f4:	e015      	b.n	8008a22 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80089f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089fc:	f003 0302 	and.w	r3, r3, #2
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d103      	bne.n	8008a0c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8008a04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a06:	f000 fbc7 	bl	8009198 <vPortFree>
 8008a0a:	e00a      	b.n	8008a22 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a12:	f023 0301 	bic.w	r3, r3, #1
 8008a16:	b2da      	uxtb	r2, r3
 8008a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008a1e:	e000      	b.n	8008a22 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008a20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a22:	4b08      	ldr	r3, [pc, #32]	; (8008a44 <prvProcessReceivedCommands+0x1cc>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	1d39      	adds	r1, r7, #4
 8008a28:	2200      	movs	r2, #0
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fd feac 	bl	8006788 <xQueueReceive>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f47f af24 	bne.w	8008880 <prvProcessReceivedCommands+0x8>
	}
}
 8008a38:	bf00      	nop
 8008a3a:	bf00      	nop
 8008a3c:	3730      	adds	r7, #48	; 0x30
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	20000f80 	.word	0x20000f80

08008a48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b088      	sub	sp, #32
 8008a4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a4e:	e04a      	b.n	8008ae6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a50:	4b2e      	ldr	r3, [pc, #184]	; (8008b0c <prvSwitchTimerLists+0xc4>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a5a:	4b2c      	ldr	r3, [pc, #176]	; (8008b0c <prvSwitchTimerLists+0xc4>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	3304      	adds	r3, #4
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fd faf9 	bl	8006060 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6a1b      	ldr	r3, [r3, #32]
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a7c:	f003 0304 	and.w	r3, r3, #4
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d030      	beq.n	8008ae6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d90e      	bls.n	8008ab4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008aa2:	4b1a      	ldr	r3, [pc, #104]	; (8008b0c <prvSwitchTimerLists+0xc4>)
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	3304      	adds	r3, #4
 8008aaa:	4619      	mov	r1, r3
 8008aac:	4610      	mov	r0, r2
 8008aae:	f7fd fa9e 	bl	8005fee <vListInsert>
 8008ab2:	e018      	b.n	8008ae6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	9300      	str	r3, [sp, #0]
 8008ab8:	2300      	movs	r3, #0
 8008aba:	693a      	ldr	r2, [r7, #16]
 8008abc:	2100      	movs	r1, #0
 8008abe:	68f8      	ldr	r0, [r7, #12]
 8008ac0:	f7ff fd56 	bl	8008570 <xTimerGenericCommand>
 8008ac4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d10c      	bne.n	8008ae6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8008acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad0:	b672      	cpsid	i
 8008ad2:	f383 8811 	msr	BASEPRI, r3
 8008ad6:	f3bf 8f6f 	isb	sy
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	b662      	cpsie	i
 8008ae0:	603b      	str	r3, [r7, #0]
}
 8008ae2:	bf00      	nop
 8008ae4:	e7fe      	b.n	8008ae4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ae6:	4b09      	ldr	r3, [pc, #36]	; (8008b0c <prvSwitchTimerLists+0xc4>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d1af      	bne.n	8008a50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008af0:	4b06      	ldr	r3, [pc, #24]	; (8008b0c <prvSwitchTimerLists+0xc4>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008af6:	4b06      	ldr	r3, [pc, #24]	; (8008b10 <prvSwitchTimerLists+0xc8>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a04      	ldr	r2, [pc, #16]	; (8008b0c <prvSwitchTimerLists+0xc4>)
 8008afc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008afe:	4a04      	ldr	r2, [pc, #16]	; (8008b10 <prvSwitchTimerLists+0xc8>)
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	6013      	str	r3, [r2, #0]
}
 8008b04:	bf00      	nop
 8008b06:	3718      	adds	r7, #24
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	20000f78 	.word	0x20000f78
 8008b10:	20000f7c 	.word	0x20000f7c

08008b14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008b1a:	f000 f947 	bl	8008dac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008b1e:	4b15      	ldr	r3, [pc, #84]	; (8008b74 <prvCheckForValidListAndQueue+0x60>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d120      	bne.n	8008b68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008b26:	4814      	ldr	r0, [pc, #80]	; (8008b78 <prvCheckForValidListAndQueue+0x64>)
 8008b28:	f7fd fa10 	bl	8005f4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008b2c:	4813      	ldr	r0, [pc, #76]	; (8008b7c <prvCheckForValidListAndQueue+0x68>)
 8008b2e:	f7fd fa0d 	bl	8005f4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008b32:	4b13      	ldr	r3, [pc, #76]	; (8008b80 <prvCheckForValidListAndQueue+0x6c>)
 8008b34:	4a10      	ldr	r2, [pc, #64]	; (8008b78 <prvCheckForValidListAndQueue+0x64>)
 8008b36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008b38:	4b12      	ldr	r3, [pc, #72]	; (8008b84 <prvCheckForValidListAndQueue+0x70>)
 8008b3a:	4a10      	ldr	r2, [pc, #64]	; (8008b7c <prvCheckForValidListAndQueue+0x68>)
 8008b3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008b3e:	2300      	movs	r3, #0
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	4b11      	ldr	r3, [pc, #68]	; (8008b88 <prvCheckForValidListAndQueue+0x74>)
 8008b44:	4a11      	ldr	r2, [pc, #68]	; (8008b8c <prvCheckForValidListAndQueue+0x78>)
 8008b46:	2110      	movs	r1, #16
 8008b48:	200a      	movs	r0, #10
 8008b4a:	f7fd fb1d 	bl	8006188 <xQueueGenericCreateStatic>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	4a08      	ldr	r2, [pc, #32]	; (8008b74 <prvCheckForValidListAndQueue+0x60>)
 8008b52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008b54:	4b07      	ldr	r3, [pc, #28]	; (8008b74 <prvCheckForValidListAndQueue+0x60>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d005      	beq.n	8008b68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b5c:	4b05      	ldr	r3, [pc, #20]	; (8008b74 <prvCheckForValidListAndQueue+0x60>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	490b      	ldr	r1, [pc, #44]	; (8008b90 <prvCheckForValidListAndQueue+0x7c>)
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fe f978 	bl	8006e58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b68:	f000 f954 	bl	8008e14 <vPortExitCritical>
}
 8008b6c:	bf00      	nop
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	20000f80 	.word	0x20000f80
 8008b78:	20000f50 	.word	0x20000f50
 8008b7c:	20000f64 	.word	0x20000f64
 8008b80:	20000f78 	.word	0x20000f78
 8008b84:	20000f7c 	.word	0x20000f7c
 8008b88:	2000102c 	.word	0x2000102c
 8008b8c:	20000f8c 	.word	0x20000f8c
 8008b90:	08009660 	.word	0x08009660

08008b94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	3b04      	subs	r3, #4
 8008ba4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008bac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	3b04      	subs	r3, #4
 8008bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	f023 0201 	bic.w	r2, r3, #1
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	3b04      	subs	r3, #4
 8008bc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008bc4:	4a0c      	ldr	r2, [pc, #48]	; (8008bf8 <pxPortInitialiseStack+0x64>)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	3b14      	subs	r3, #20
 8008bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	3b04      	subs	r3, #4
 8008bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f06f 0202 	mvn.w	r2, #2
 8008be2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	3b20      	subs	r3, #32
 8008be8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008bea:	68fb      	ldr	r3, [r7, #12]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr
 8008bf8:	08008bfd 	.word	0x08008bfd

08008bfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008c02:	2300      	movs	r3, #0
 8008c04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c06:	4b14      	ldr	r3, [pc, #80]	; (8008c58 <prvTaskExitError+0x5c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c0e:	d00c      	beq.n	8008c2a <prvTaskExitError+0x2e>
	__asm volatile
 8008c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c14:	b672      	cpsid	i
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	b662      	cpsie	i
 8008c24:	60fb      	str	r3, [r7, #12]
}
 8008c26:	bf00      	nop
 8008c28:	e7fe      	b.n	8008c28 <prvTaskExitError+0x2c>
	__asm volatile
 8008c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2e:	b672      	cpsid	i
 8008c30:	f383 8811 	msr	BASEPRI, r3
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	b662      	cpsie	i
 8008c3e:	60bb      	str	r3, [r7, #8]
}
 8008c40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c42:	bf00      	nop
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d0fc      	beq.n	8008c44 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c4a:	bf00      	nop
 8008c4c:	bf00      	nop
 8008c4e:	3714      	adds	r7, #20
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr
 8008c58:	2000000c 	.word	0x2000000c
 8008c5c:	00000000 	.word	0x00000000

08008c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c60:	4b07      	ldr	r3, [pc, #28]	; (8008c80 <pxCurrentTCBConst2>)
 8008c62:	6819      	ldr	r1, [r3, #0]
 8008c64:	6808      	ldr	r0, [r1, #0]
 8008c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c6a:	f380 8809 	msr	PSP, r0
 8008c6e:	f3bf 8f6f 	isb	sy
 8008c72:	f04f 0000 	mov.w	r0, #0
 8008c76:	f380 8811 	msr	BASEPRI, r0
 8008c7a:	4770      	bx	lr
 8008c7c:	f3af 8000 	nop.w

08008c80 <pxCurrentTCBConst2>:
 8008c80:	20000a50 	.word	0x20000a50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c84:	bf00      	nop
 8008c86:	bf00      	nop

08008c88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008c88:	4808      	ldr	r0, [pc, #32]	; (8008cac <prvPortStartFirstTask+0x24>)
 8008c8a:	6800      	ldr	r0, [r0, #0]
 8008c8c:	6800      	ldr	r0, [r0, #0]
 8008c8e:	f380 8808 	msr	MSP, r0
 8008c92:	f04f 0000 	mov.w	r0, #0
 8008c96:	f380 8814 	msr	CONTROL, r0
 8008c9a:	b662      	cpsie	i
 8008c9c:	b661      	cpsie	f
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	df00      	svc	0
 8008ca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008caa:	bf00      	nop
 8008cac:	e000ed08 	.word	0xe000ed08

08008cb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008cb6:	4b37      	ldr	r3, [pc, #220]	; (8008d94 <xPortStartScheduler+0xe4>)
 8008cb8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	22ff      	movs	r2, #255	; 0xff
 8008cc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008cd0:	78fb      	ldrb	r3, [r7, #3]
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008cd8:	b2da      	uxtb	r2, r3
 8008cda:	4b2f      	ldr	r3, [pc, #188]	; (8008d98 <xPortStartScheduler+0xe8>)
 8008cdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008cde:	4b2f      	ldr	r3, [pc, #188]	; (8008d9c <xPortStartScheduler+0xec>)
 8008ce0:	2207      	movs	r2, #7
 8008ce2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ce4:	e009      	b.n	8008cfa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008ce6:	4b2d      	ldr	r3, [pc, #180]	; (8008d9c <xPortStartScheduler+0xec>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	3b01      	subs	r3, #1
 8008cec:	4a2b      	ldr	r2, [pc, #172]	; (8008d9c <xPortStartScheduler+0xec>)
 8008cee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008cf0:	78fb      	ldrb	r3, [r7, #3]
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	005b      	lsls	r3, r3, #1
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cfa:	78fb      	ldrb	r3, [r7, #3]
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d02:	2b80      	cmp	r3, #128	; 0x80
 8008d04:	d0ef      	beq.n	8008ce6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008d06:	4b25      	ldr	r3, [pc, #148]	; (8008d9c <xPortStartScheduler+0xec>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f1c3 0307 	rsb	r3, r3, #7
 8008d0e:	2b04      	cmp	r3, #4
 8008d10:	d00c      	beq.n	8008d2c <xPortStartScheduler+0x7c>
	__asm volatile
 8008d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d16:	b672      	cpsid	i
 8008d18:	f383 8811 	msr	BASEPRI, r3
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	b662      	cpsie	i
 8008d26:	60bb      	str	r3, [r7, #8]
}
 8008d28:	bf00      	nop
 8008d2a:	e7fe      	b.n	8008d2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d2c:	4b1b      	ldr	r3, [pc, #108]	; (8008d9c <xPortStartScheduler+0xec>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	021b      	lsls	r3, r3, #8
 8008d32:	4a1a      	ldr	r2, [pc, #104]	; (8008d9c <xPortStartScheduler+0xec>)
 8008d34:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d36:	4b19      	ldr	r3, [pc, #100]	; (8008d9c <xPortStartScheduler+0xec>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d3e:	4a17      	ldr	r2, [pc, #92]	; (8008d9c <xPortStartScheduler+0xec>)
 8008d40:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	b2da      	uxtb	r2, r3
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d4a:	4b15      	ldr	r3, [pc, #84]	; (8008da0 <xPortStartScheduler+0xf0>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a14      	ldr	r2, [pc, #80]	; (8008da0 <xPortStartScheduler+0xf0>)
 8008d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d54:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d56:	4b12      	ldr	r3, [pc, #72]	; (8008da0 <xPortStartScheduler+0xf0>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a11      	ldr	r2, [pc, #68]	; (8008da0 <xPortStartScheduler+0xf0>)
 8008d5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008d60:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008d62:	f000 f8dd 	bl	8008f20 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d66:	4b0f      	ldr	r3, [pc, #60]	; (8008da4 <xPortStartScheduler+0xf4>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008d6c:	f000 f8fc 	bl	8008f68 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d70:	4b0d      	ldr	r3, [pc, #52]	; (8008da8 <xPortStartScheduler+0xf8>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a0c      	ldr	r2, [pc, #48]	; (8008da8 <xPortStartScheduler+0xf8>)
 8008d76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008d7a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d7c:	f7ff ff84 	bl	8008c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d80:	f7fe fce8 	bl	8007754 <vTaskSwitchContext>
	prvTaskExitError();
 8008d84:	f7ff ff3a 	bl	8008bfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	e000e400 	.word	0xe000e400
 8008d98:	2000107c 	.word	0x2000107c
 8008d9c:	20001080 	.word	0x20001080
 8008da0:	e000ed20 	.word	0xe000ed20
 8008da4:	2000000c 	.word	0x2000000c
 8008da8:	e000ef34 	.word	0xe000ef34

08008dac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
	__asm volatile
 8008db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db6:	b672      	cpsid	i
 8008db8:	f383 8811 	msr	BASEPRI, r3
 8008dbc:	f3bf 8f6f 	isb	sy
 8008dc0:	f3bf 8f4f 	dsb	sy
 8008dc4:	b662      	cpsie	i
 8008dc6:	607b      	str	r3, [r7, #4]
}
 8008dc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008dca:	4b10      	ldr	r3, [pc, #64]	; (8008e0c <vPortEnterCritical+0x60>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	4a0e      	ldr	r2, [pc, #56]	; (8008e0c <vPortEnterCritical+0x60>)
 8008dd2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008dd4:	4b0d      	ldr	r3, [pc, #52]	; (8008e0c <vPortEnterCritical+0x60>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d111      	bne.n	8008e00 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ddc:	4b0c      	ldr	r3, [pc, #48]	; (8008e10 <vPortEnterCritical+0x64>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00c      	beq.n	8008e00 <vPortEnterCritical+0x54>
	__asm volatile
 8008de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dea:	b672      	cpsid	i
 8008dec:	f383 8811 	msr	BASEPRI, r3
 8008df0:	f3bf 8f6f 	isb	sy
 8008df4:	f3bf 8f4f 	dsb	sy
 8008df8:	b662      	cpsie	i
 8008dfa:	603b      	str	r3, [r7, #0]
}
 8008dfc:	bf00      	nop
 8008dfe:	e7fe      	b.n	8008dfe <vPortEnterCritical+0x52>
	}
}
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr
 8008e0c:	2000000c 	.word	0x2000000c
 8008e10:	e000ed04 	.word	0xe000ed04

08008e14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e1a:	4b13      	ldr	r3, [pc, #76]	; (8008e68 <vPortExitCritical+0x54>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d10c      	bne.n	8008e3c <vPortExitCritical+0x28>
	__asm volatile
 8008e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e26:	b672      	cpsid	i
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	b662      	cpsie	i
 8008e36:	607b      	str	r3, [r7, #4]
}
 8008e38:	bf00      	nop
 8008e3a:	e7fe      	b.n	8008e3a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008e3c:	4b0a      	ldr	r3, [pc, #40]	; (8008e68 <vPortExitCritical+0x54>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	3b01      	subs	r3, #1
 8008e42:	4a09      	ldr	r2, [pc, #36]	; (8008e68 <vPortExitCritical+0x54>)
 8008e44:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e46:	4b08      	ldr	r3, [pc, #32]	; (8008e68 <vPortExitCritical+0x54>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d105      	bne.n	8008e5a <vPortExitCritical+0x46>
 8008e4e:	2300      	movs	r3, #0
 8008e50:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	f383 8811 	msr	BASEPRI, r3
}
 8008e58:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008e5a:	bf00      	nop
 8008e5c:	370c      	adds	r7, #12
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop
 8008e68:	2000000c 	.word	0x2000000c
 8008e6c:	00000000 	.word	0x00000000

08008e70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e70:	f3ef 8009 	mrs	r0, PSP
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	4b15      	ldr	r3, [pc, #84]	; (8008ed0 <pxCurrentTCBConst>)
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	f01e 0f10 	tst.w	lr, #16
 8008e80:	bf08      	it	eq
 8008e82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008e86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e8a:	6010      	str	r0, [r2, #0]
 8008e8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008e94:	b672      	cpsid	i
 8008e96:	f380 8811 	msr	BASEPRI, r0
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	b662      	cpsie	i
 8008ea4:	f7fe fc56 	bl	8007754 <vTaskSwitchContext>
 8008ea8:	f04f 0000 	mov.w	r0, #0
 8008eac:	f380 8811 	msr	BASEPRI, r0
 8008eb0:	bc09      	pop	{r0, r3}
 8008eb2:	6819      	ldr	r1, [r3, #0]
 8008eb4:	6808      	ldr	r0, [r1, #0]
 8008eb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eba:	f01e 0f10 	tst.w	lr, #16
 8008ebe:	bf08      	it	eq
 8008ec0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ec4:	f380 8809 	msr	PSP, r0
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop

08008ed0 <pxCurrentTCBConst>:
 8008ed0:	20000a50 	.word	0x20000a50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ed4:	bf00      	nop
 8008ed6:	bf00      	nop

08008ed8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
	__asm volatile
 8008ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee2:	b672      	cpsid	i
 8008ee4:	f383 8811 	msr	BASEPRI, r3
 8008ee8:	f3bf 8f6f 	isb	sy
 8008eec:	f3bf 8f4f 	dsb	sy
 8008ef0:	b662      	cpsie	i
 8008ef2:	607b      	str	r3, [r7, #4]
}
 8008ef4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ef6:	f7fe fb71 	bl	80075dc <xTaskIncrementTick>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d003      	beq.n	8008f08 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f00:	4b06      	ldr	r3, [pc, #24]	; (8008f1c <SysTick_Handler+0x44>)
 8008f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f06:	601a      	str	r2, [r3, #0]
 8008f08:	2300      	movs	r3, #0
 8008f0a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	f383 8811 	msr	BASEPRI, r3
}
 8008f12:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008f14:	bf00      	nop
 8008f16:	3708      	adds	r7, #8
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	e000ed04 	.word	0xe000ed04

08008f20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008f20:	b480      	push	{r7}
 8008f22:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f24:	4b0b      	ldr	r3, [pc, #44]	; (8008f54 <vPortSetupTimerInterrupt+0x34>)
 8008f26:	2200      	movs	r2, #0
 8008f28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f2a:	4b0b      	ldr	r3, [pc, #44]	; (8008f58 <vPortSetupTimerInterrupt+0x38>)
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f30:	4b0a      	ldr	r3, [pc, #40]	; (8008f5c <vPortSetupTimerInterrupt+0x3c>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a0a      	ldr	r2, [pc, #40]	; (8008f60 <vPortSetupTimerInterrupt+0x40>)
 8008f36:	fba2 2303 	umull	r2, r3, r2, r3
 8008f3a:	099b      	lsrs	r3, r3, #6
 8008f3c:	4a09      	ldr	r2, [pc, #36]	; (8008f64 <vPortSetupTimerInterrupt+0x44>)
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f42:	4b04      	ldr	r3, [pc, #16]	; (8008f54 <vPortSetupTimerInterrupt+0x34>)
 8008f44:	2207      	movs	r2, #7
 8008f46:	601a      	str	r2, [r3, #0]
}
 8008f48:	bf00      	nop
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	e000e010 	.word	0xe000e010
 8008f58:	e000e018 	.word	0xe000e018
 8008f5c:	20000000 	.word	0x20000000
 8008f60:	10624dd3 	.word	0x10624dd3
 8008f64:	e000e014 	.word	0xe000e014

08008f68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008f68:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008f78 <vPortEnableVFP+0x10>
 8008f6c:	6801      	ldr	r1, [r0, #0]
 8008f6e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008f72:	6001      	str	r1, [r0, #0]
 8008f74:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008f76:	bf00      	nop
 8008f78:	e000ed88 	.word	0xe000ed88

08008f7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b085      	sub	sp, #20
 8008f80:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f82:	f3ef 8305 	mrs	r3, IPSR
 8008f86:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2b0f      	cmp	r3, #15
 8008f8c:	d916      	bls.n	8008fbc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f8e:	4a19      	ldr	r2, [pc, #100]	; (8008ff4 <vPortValidateInterruptPriority+0x78>)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	4413      	add	r3, r2
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f98:	4b17      	ldr	r3, [pc, #92]	; (8008ff8 <vPortValidateInterruptPriority+0x7c>)
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	7afa      	ldrb	r2, [r7, #11]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d20c      	bcs.n	8008fbc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa6:	b672      	cpsid	i
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	b662      	cpsie	i
 8008fb6:	607b      	str	r3, [r7, #4]
}
 8008fb8:	bf00      	nop
 8008fba:	e7fe      	b.n	8008fba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008fbc:	4b0f      	ldr	r3, [pc, #60]	; (8008ffc <vPortValidateInterruptPriority+0x80>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008fc4:	4b0e      	ldr	r3, [pc, #56]	; (8009000 <vPortValidateInterruptPriority+0x84>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d90c      	bls.n	8008fe6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8008fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd0:	b672      	cpsid	i
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	b662      	cpsie	i
 8008fe0:	603b      	str	r3, [r7, #0]
}
 8008fe2:	bf00      	nop
 8008fe4:	e7fe      	b.n	8008fe4 <vPortValidateInterruptPriority+0x68>
	}
 8008fe6:	bf00      	nop
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	e000e3f0 	.word	0xe000e3f0
 8008ff8:	2000107c 	.word	0x2000107c
 8008ffc:	e000ed0c 	.word	0xe000ed0c
 8009000:	20001080 	.word	0x20001080

08009004 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b08a      	sub	sp, #40	; 0x28
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800900c:	2300      	movs	r3, #0
 800900e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009010:	f7fe fa14 	bl	800743c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009014:	4b5b      	ldr	r3, [pc, #364]	; (8009184 <pvPortMalloc+0x180>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d101      	bne.n	8009020 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800901c:	f000 f91a 	bl	8009254 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009020:	4b59      	ldr	r3, [pc, #356]	; (8009188 <pvPortMalloc+0x184>)
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4013      	ands	r3, r2
 8009028:	2b00      	cmp	r3, #0
 800902a:	f040 8092 	bne.w	8009152 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d01f      	beq.n	8009074 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009034:	2208      	movs	r2, #8
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4413      	add	r3, r2
 800903a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f003 0307 	and.w	r3, r3, #7
 8009042:	2b00      	cmp	r3, #0
 8009044:	d016      	beq.n	8009074 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f023 0307 	bic.w	r3, r3, #7
 800904c:	3308      	adds	r3, #8
 800904e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f003 0307 	and.w	r3, r3, #7
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00c      	beq.n	8009074 <pvPortMalloc+0x70>
	__asm volatile
 800905a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905e:	b672      	cpsid	i
 8009060:	f383 8811 	msr	BASEPRI, r3
 8009064:	f3bf 8f6f 	isb	sy
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	b662      	cpsie	i
 800906e:	617b      	str	r3, [r7, #20]
}
 8009070:	bf00      	nop
 8009072:	e7fe      	b.n	8009072 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d06b      	beq.n	8009152 <pvPortMalloc+0x14e>
 800907a:	4b44      	ldr	r3, [pc, #272]	; (800918c <pvPortMalloc+0x188>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	429a      	cmp	r2, r3
 8009082:	d866      	bhi.n	8009152 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009084:	4b42      	ldr	r3, [pc, #264]	; (8009190 <pvPortMalloc+0x18c>)
 8009086:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009088:	4b41      	ldr	r3, [pc, #260]	; (8009190 <pvPortMalloc+0x18c>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800908e:	e004      	b.n	800909a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009092:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800909a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d903      	bls.n	80090ac <pvPortMalloc+0xa8>
 80090a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d1f1      	bne.n	8009090 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80090ac:	4b35      	ldr	r3, [pc, #212]	; (8009184 <pvPortMalloc+0x180>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d04d      	beq.n	8009152 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80090b6:	6a3b      	ldr	r3, [r7, #32]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2208      	movs	r2, #8
 80090bc:	4413      	add	r3, r2
 80090be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80090c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	6a3b      	ldr	r3, [r7, #32]
 80090c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80090c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ca:	685a      	ldr	r2, [r3, #4]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	1ad2      	subs	r2, r2, r3
 80090d0:	2308      	movs	r3, #8
 80090d2:	005b      	lsls	r3, r3, #1
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d921      	bls.n	800911c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80090d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4413      	add	r3, r2
 80090de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	f003 0307 	and.w	r3, r3, #7
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00c      	beq.n	8009104 <pvPortMalloc+0x100>
	__asm volatile
 80090ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ee:	b672      	cpsid	i
 80090f0:	f383 8811 	msr	BASEPRI, r3
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	b662      	cpsie	i
 80090fe:	613b      	str	r3, [r7, #16]
}
 8009100:	bf00      	nop
 8009102:	e7fe      	b.n	8009102 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009106:	685a      	ldr	r2, [r3, #4]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	1ad2      	subs	r2, r2, r3
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009116:	69b8      	ldr	r0, [r7, #24]
 8009118:	f000 f8fe 	bl	8009318 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800911c:	4b1b      	ldr	r3, [pc, #108]	; (800918c <pvPortMalloc+0x188>)
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	1ad3      	subs	r3, r2, r3
 8009126:	4a19      	ldr	r2, [pc, #100]	; (800918c <pvPortMalloc+0x188>)
 8009128:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800912a:	4b18      	ldr	r3, [pc, #96]	; (800918c <pvPortMalloc+0x188>)
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	4b19      	ldr	r3, [pc, #100]	; (8009194 <pvPortMalloc+0x190>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	429a      	cmp	r2, r3
 8009134:	d203      	bcs.n	800913e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009136:	4b15      	ldr	r3, [pc, #84]	; (800918c <pvPortMalloc+0x188>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a16      	ldr	r2, [pc, #88]	; (8009194 <pvPortMalloc+0x190>)
 800913c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800913e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009140:	685a      	ldr	r2, [r3, #4]
 8009142:	4b11      	ldr	r3, [pc, #68]	; (8009188 <pvPortMalloc+0x184>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	431a      	orrs	r2, r3
 8009148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800914c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914e:	2200      	movs	r2, #0
 8009150:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009152:	f7fe f981 	bl	8007458 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	f003 0307 	and.w	r3, r3, #7
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00c      	beq.n	800917a <pvPortMalloc+0x176>
	__asm volatile
 8009160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009164:	b672      	cpsid	i
 8009166:	f383 8811 	msr	BASEPRI, r3
 800916a:	f3bf 8f6f 	isb	sy
 800916e:	f3bf 8f4f 	dsb	sy
 8009172:	b662      	cpsie	i
 8009174:	60fb      	str	r3, [r7, #12]
}
 8009176:	bf00      	nop
 8009178:	e7fe      	b.n	8009178 <pvPortMalloc+0x174>
	return pvReturn;
 800917a:	69fb      	ldr	r3, [r7, #28]
}
 800917c:	4618      	mov	r0, r3
 800917e:	3728      	adds	r7, #40	; 0x28
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}
 8009184:	20004c8c 	.word	0x20004c8c
 8009188:	20004c98 	.word	0x20004c98
 800918c:	20004c90 	.word	0x20004c90
 8009190:	20004c84 	.word	0x20004c84
 8009194:	20004c94 	.word	0x20004c94

08009198 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b086      	sub	sp, #24
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d04c      	beq.n	8009244 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80091aa:	2308      	movs	r3, #8
 80091ac:	425b      	negs	r3, r3
 80091ae:	697a      	ldr	r2, [r7, #20]
 80091b0:	4413      	add	r3, r2
 80091b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	685a      	ldr	r2, [r3, #4]
 80091bc:	4b23      	ldr	r3, [pc, #140]	; (800924c <vPortFree+0xb4>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4013      	ands	r3, r2
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10c      	bne.n	80091e0 <vPortFree+0x48>
	__asm volatile
 80091c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ca:	b672      	cpsid	i
 80091cc:	f383 8811 	msr	BASEPRI, r3
 80091d0:	f3bf 8f6f 	isb	sy
 80091d4:	f3bf 8f4f 	dsb	sy
 80091d8:	b662      	cpsie	i
 80091da:	60fb      	str	r3, [r7, #12]
}
 80091dc:	bf00      	nop
 80091de:	e7fe      	b.n	80091de <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00c      	beq.n	8009202 <vPortFree+0x6a>
	__asm volatile
 80091e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ec:	b672      	cpsid	i
 80091ee:	f383 8811 	msr	BASEPRI, r3
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	b662      	cpsie	i
 80091fc:	60bb      	str	r3, [r7, #8]
}
 80091fe:	bf00      	nop
 8009200:	e7fe      	b.n	8009200 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	685a      	ldr	r2, [r3, #4]
 8009206:	4b11      	ldr	r3, [pc, #68]	; (800924c <vPortFree+0xb4>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4013      	ands	r3, r2
 800920c:	2b00      	cmp	r3, #0
 800920e:	d019      	beq.n	8009244 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d115      	bne.n	8009244 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	685a      	ldr	r2, [r3, #4]
 800921c:	4b0b      	ldr	r3, [pc, #44]	; (800924c <vPortFree+0xb4>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	43db      	mvns	r3, r3
 8009222:	401a      	ands	r2, r3
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009228:	f7fe f908 	bl	800743c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	685a      	ldr	r2, [r3, #4]
 8009230:	4b07      	ldr	r3, [pc, #28]	; (8009250 <vPortFree+0xb8>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4413      	add	r3, r2
 8009236:	4a06      	ldr	r2, [pc, #24]	; (8009250 <vPortFree+0xb8>)
 8009238:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800923a:	6938      	ldr	r0, [r7, #16]
 800923c:	f000 f86c 	bl	8009318 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009240:	f7fe f90a 	bl	8007458 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009244:	bf00      	nop
 8009246:	3718      	adds	r7, #24
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	20004c98 	.word	0x20004c98
 8009250:	20004c90 	.word	0x20004c90

08009254 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009254:	b480      	push	{r7}
 8009256:	b085      	sub	sp, #20
 8009258:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800925a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800925e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009260:	4b27      	ldr	r3, [pc, #156]	; (8009300 <prvHeapInit+0xac>)
 8009262:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f003 0307 	and.w	r3, r3, #7
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00c      	beq.n	8009288 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	3307      	adds	r3, #7
 8009272:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f023 0307 	bic.w	r3, r3, #7
 800927a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800927c:	68ba      	ldr	r2, [r7, #8]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	1ad3      	subs	r3, r2, r3
 8009282:	4a1f      	ldr	r2, [pc, #124]	; (8009300 <prvHeapInit+0xac>)
 8009284:	4413      	add	r3, r2
 8009286:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800928c:	4a1d      	ldr	r2, [pc, #116]	; (8009304 <prvHeapInit+0xb0>)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009292:	4b1c      	ldr	r3, [pc, #112]	; (8009304 <prvHeapInit+0xb0>)
 8009294:	2200      	movs	r2, #0
 8009296:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	68ba      	ldr	r2, [r7, #8]
 800929c:	4413      	add	r3, r2
 800929e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80092a0:	2208      	movs	r2, #8
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	1a9b      	subs	r3, r3, r2
 80092a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f023 0307 	bic.w	r3, r3, #7
 80092ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	4a15      	ldr	r2, [pc, #84]	; (8009308 <prvHeapInit+0xb4>)
 80092b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80092b6:	4b14      	ldr	r3, [pc, #80]	; (8009308 <prvHeapInit+0xb4>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2200      	movs	r2, #0
 80092bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80092be:	4b12      	ldr	r3, [pc, #72]	; (8009308 <prvHeapInit+0xb4>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2200      	movs	r2, #0
 80092c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	1ad2      	subs	r2, r2, r3
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80092d4:	4b0c      	ldr	r3, [pc, #48]	; (8009308 <prvHeapInit+0xb4>)
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	4a0a      	ldr	r2, [pc, #40]	; (800930c <prvHeapInit+0xb8>)
 80092e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	4a09      	ldr	r2, [pc, #36]	; (8009310 <prvHeapInit+0xbc>)
 80092ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80092ec:	4b09      	ldr	r3, [pc, #36]	; (8009314 <prvHeapInit+0xc0>)
 80092ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80092f2:	601a      	str	r2, [r3, #0]
}
 80092f4:	bf00      	nop
 80092f6:	3714      	adds	r7, #20
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr
 8009300:	20001084 	.word	0x20001084
 8009304:	20004c84 	.word	0x20004c84
 8009308:	20004c8c 	.word	0x20004c8c
 800930c:	20004c94 	.word	0x20004c94
 8009310:	20004c90 	.word	0x20004c90
 8009314:	20004c98 	.word	0x20004c98

08009318 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009318:	b480      	push	{r7}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009320:	4b28      	ldr	r3, [pc, #160]	; (80093c4 <prvInsertBlockIntoFreeList+0xac>)
 8009322:	60fb      	str	r3, [r7, #12]
 8009324:	e002      	b.n	800932c <prvInsertBlockIntoFreeList+0x14>
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	60fb      	str	r3, [r7, #12]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	429a      	cmp	r2, r3
 8009334:	d8f7      	bhi.n	8009326 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	68ba      	ldr	r2, [r7, #8]
 8009340:	4413      	add	r3, r2
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	429a      	cmp	r2, r3
 8009346:	d108      	bne.n	800935a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	685a      	ldr	r2, [r3, #4]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	441a      	add	r2, r3
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	68ba      	ldr	r2, [r7, #8]
 8009364:	441a      	add	r2, r3
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	429a      	cmp	r2, r3
 800936c:	d118      	bne.n	80093a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	4b15      	ldr	r3, [pc, #84]	; (80093c8 <prvInsertBlockIntoFreeList+0xb0>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	429a      	cmp	r2, r3
 8009378:	d00d      	beq.n	8009396 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	685a      	ldr	r2, [r3, #4]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	441a      	add	r2, r3
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	601a      	str	r2, [r3, #0]
 8009394:	e008      	b.n	80093a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009396:	4b0c      	ldr	r3, [pc, #48]	; (80093c8 <prvInsertBlockIntoFreeList+0xb0>)
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	601a      	str	r2, [r3, #0]
 800939e:	e003      	b.n	80093a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d002      	beq.n	80093b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093b6:	bf00      	nop
 80093b8:	3714      	adds	r7, #20
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr
 80093c2:	bf00      	nop
 80093c4:	20004c84 	.word	0x20004c84
 80093c8:	20004c8c 	.word	0x20004c8c

080093cc <__libc_init_array>:
 80093cc:	b570      	push	{r4, r5, r6, lr}
 80093ce:	4d0d      	ldr	r5, [pc, #52]	; (8009404 <__libc_init_array+0x38>)
 80093d0:	4c0d      	ldr	r4, [pc, #52]	; (8009408 <__libc_init_array+0x3c>)
 80093d2:	1b64      	subs	r4, r4, r5
 80093d4:	10a4      	asrs	r4, r4, #2
 80093d6:	2600      	movs	r6, #0
 80093d8:	42a6      	cmp	r6, r4
 80093da:	d109      	bne.n	80093f0 <__libc_init_array+0x24>
 80093dc:	4d0b      	ldr	r5, [pc, #44]	; (800940c <__libc_init_array+0x40>)
 80093de:	4c0c      	ldr	r4, [pc, #48]	; (8009410 <__libc_init_array+0x44>)
 80093e0:	f000 f8f2 	bl	80095c8 <_init>
 80093e4:	1b64      	subs	r4, r4, r5
 80093e6:	10a4      	asrs	r4, r4, #2
 80093e8:	2600      	movs	r6, #0
 80093ea:	42a6      	cmp	r6, r4
 80093ec:	d105      	bne.n	80093fa <__libc_init_array+0x2e>
 80093ee:	bd70      	pop	{r4, r5, r6, pc}
 80093f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80093f4:	4798      	blx	r3
 80093f6:	3601      	adds	r6, #1
 80093f8:	e7ee      	b.n	80093d8 <__libc_init_array+0xc>
 80093fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80093fe:	4798      	blx	r3
 8009400:	3601      	adds	r6, #1
 8009402:	e7f2      	b.n	80093ea <__libc_init_array+0x1e>
 8009404:	0800979c 	.word	0x0800979c
 8009408:	0800979c 	.word	0x0800979c
 800940c:	0800979c 	.word	0x0800979c
 8009410:	080097a0 	.word	0x080097a0

08009414 <__retarget_lock_acquire_recursive>:
 8009414:	4770      	bx	lr

08009416 <__retarget_lock_release_recursive>:
 8009416:	4770      	bx	lr

08009418 <memcpy>:
 8009418:	440a      	add	r2, r1
 800941a:	4291      	cmp	r1, r2
 800941c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009420:	d100      	bne.n	8009424 <memcpy+0xc>
 8009422:	4770      	bx	lr
 8009424:	b510      	push	{r4, lr}
 8009426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800942a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800942e:	4291      	cmp	r1, r2
 8009430:	d1f9      	bne.n	8009426 <memcpy+0xe>
 8009432:	bd10      	pop	{r4, pc}

08009434 <memset>:
 8009434:	4402      	add	r2, r0
 8009436:	4603      	mov	r3, r0
 8009438:	4293      	cmp	r3, r2
 800943a:	d100      	bne.n	800943e <memset+0xa>
 800943c:	4770      	bx	lr
 800943e:	f803 1b01 	strb.w	r1, [r3], #1
 8009442:	e7f9      	b.n	8009438 <memset+0x4>

08009444 <cleanup_glue>:
 8009444:	b538      	push	{r3, r4, r5, lr}
 8009446:	460c      	mov	r4, r1
 8009448:	6809      	ldr	r1, [r1, #0]
 800944a:	4605      	mov	r5, r0
 800944c:	b109      	cbz	r1, 8009452 <cleanup_glue+0xe>
 800944e:	f7ff fff9 	bl	8009444 <cleanup_glue>
 8009452:	4621      	mov	r1, r4
 8009454:	4628      	mov	r0, r5
 8009456:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800945a:	f000 b869 	b.w	8009530 <_free_r>
	...

08009460 <_reclaim_reent>:
 8009460:	4b2c      	ldr	r3, [pc, #176]	; (8009514 <_reclaim_reent+0xb4>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4283      	cmp	r3, r0
 8009466:	b570      	push	{r4, r5, r6, lr}
 8009468:	4604      	mov	r4, r0
 800946a:	d051      	beq.n	8009510 <_reclaim_reent+0xb0>
 800946c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800946e:	b143      	cbz	r3, 8009482 <_reclaim_reent+0x22>
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d14a      	bne.n	800950c <_reclaim_reent+0xac>
 8009476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009478:	6819      	ldr	r1, [r3, #0]
 800947a:	b111      	cbz	r1, 8009482 <_reclaim_reent+0x22>
 800947c:	4620      	mov	r0, r4
 800947e:	f000 f857 	bl	8009530 <_free_r>
 8009482:	6961      	ldr	r1, [r4, #20]
 8009484:	b111      	cbz	r1, 800948c <_reclaim_reent+0x2c>
 8009486:	4620      	mov	r0, r4
 8009488:	f000 f852 	bl	8009530 <_free_r>
 800948c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800948e:	b111      	cbz	r1, 8009496 <_reclaim_reent+0x36>
 8009490:	4620      	mov	r0, r4
 8009492:	f000 f84d 	bl	8009530 <_free_r>
 8009496:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009498:	b111      	cbz	r1, 80094a0 <_reclaim_reent+0x40>
 800949a:	4620      	mov	r0, r4
 800949c:	f000 f848 	bl	8009530 <_free_r>
 80094a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80094a2:	b111      	cbz	r1, 80094aa <_reclaim_reent+0x4a>
 80094a4:	4620      	mov	r0, r4
 80094a6:	f000 f843 	bl	8009530 <_free_r>
 80094aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80094ac:	b111      	cbz	r1, 80094b4 <_reclaim_reent+0x54>
 80094ae:	4620      	mov	r0, r4
 80094b0:	f000 f83e 	bl	8009530 <_free_r>
 80094b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80094b6:	b111      	cbz	r1, 80094be <_reclaim_reent+0x5e>
 80094b8:	4620      	mov	r0, r4
 80094ba:	f000 f839 	bl	8009530 <_free_r>
 80094be:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80094c0:	b111      	cbz	r1, 80094c8 <_reclaim_reent+0x68>
 80094c2:	4620      	mov	r0, r4
 80094c4:	f000 f834 	bl	8009530 <_free_r>
 80094c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094ca:	b111      	cbz	r1, 80094d2 <_reclaim_reent+0x72>
 80094cc:	4620      	mov	r0, r4
 80094ce:	f000 f82f 	bl	8009530 <_free_r>
 80094d2:	69a3      	ldr	r3, [r4, #24]
 80094d4:	b1e3      	cbz	r3, 8009510 <_reclaim_reent+0xb0>
 80094d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80094d8:	4620      	mov	r0, r4
 80094da:	4798      	blx	r3
 80094dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80094de:	b1b9      	cbz	r1, 8009510 <_reclaim_reent+0xb0>
 80094e0:	4620      	mov	r0, r4
 80094e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80094e6:	f7ff bfad 	b.w	8009444 <cleanup_glue>
 80094ea:	5949      	ldr	r1, [r1, r5]
 80094ec:	b941      	cbnz	r1, 8009500 <_reclaim_reent+0xa0>
 80094ee:	3504      	adds	r5, #4
 80094f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094f2:	2d80      	cmp	r5, #128	; 0x80
 80094f4:	68d9      	ldr	r1, [r3, #12]
 80094f6:	d1f8      	bne.n	80094ea <_reclaim_reent+0x8a>
 80094f8:	4620      	mov	r0, r4
 80094fa:	f000 f819 	bl	8009530 <_free_r>
 80094fe:	e7ba      	b.n	8009476 <_reclaim_reent+0x16>
 8009500:	680e      	ldr	r6, [r1, #0]
 8009502:	4620      	mov	r0, r4
 8009504:	f000 f814 	bl	8009530 <_free_r>
 8009508:	4631      	mov	r1, r6
 800950a:	e7ef      	b.n	80094ec <_reclaim_reent+0x8c>
 800950c:	2500      	movs	r5, #0
 800950e:	e7ef      	b.n	80094f0 <_reclaim_reent+0x90>
 8009510:	bd70      	pop	{r4, r5, r6, pc}
 8009512:	bf00      	nop
 8009514:	20000010 	.word	0x20000010

08009518 <__malloc_lock>:
 8009518:	4801      	ldr	r0, [pc, #4]	; (8009520 <__malloc_lock+0x8>)
 800951a:	f7ff bf7b 	b.w	8009414 <__retarget_lock_acquire_recursive>
 800951e:	bf00      	nop
 8009520:	20004c9c 	.word	0x20004c9c

08009524 <__malloc_unlock>:
 8009524:	4801      	ldr	r0, [pc, #4]	; (800952c <__malloc_unlock+0x8>)
 8009526:	f7ff bf76 	b.w	8009416 <__retarget_lock_release_recursive>
 800952a:	bf00      	nop
 800952c:	20004c9c 	.word	0x20004c9c

08009530 <_free_r>:
 8009530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009532:	2900      	cmp	r1, #0
 8009534:	d044      	beq.n	80095c0 <_free_r+0x90>
 8009536:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800953a:	9001      	str	r0, [sp, #4]
 800953c:	2b00      	cmp	r3, #0
 800953e:	f1a1 0404 	sub.w	r4, r1, #4
 8009542:	bfb8      	it	lt
 8009544:	18e4      	addlt	r4, r4, r3
 8009546:	f7ff ffe7 	bl	8009518 <__malloc_lock>
 800954a:	4a1e      	ldr	r2, [pc, #120]	; (80095c4 <_free_r+0x94>)
 800954c:	9801      	ldr	r0, [sp, #4]
 800954e:	6813      	ldr	r3, [r2, #0]
 8009550:	b933      	cbnz	r3, 8009560 <_free_r+0x30>
 8009552:	6063      	str	r3, [r4, #4]
 8009554:	6014      	str	r4, [r2, #0]
 8009556:	b003      	add	sp, #12
 8009558:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800955c:	f7ff bfe2 	b.w	8009524 <__malloc_unlock>
 8009560:	42a3      	cmp	r3, r4
 8009562:	d908      	bls.n	8009576 <_free_r+0x46>
 8009564:	6825      	ldr	r5, [r4, #0]
 8009566:	1961      	adds	r1, r4, r5
 8009568:	428b      	cmp	r3, r1
 800956a:	bf01      	itttt	eq
 800956c:	6819      	ldreq	r1, [r3, #0]
 800956e:	685b      	ldreq	r3, [r3, #4]
 8009570:	1949      	addeq	r1, r1, r5
 8009572:	6021      	streq	r1, [r4, #0]
 8009574:	e7ed      	b.n	8009552 <_free_r+0x22>
 8009576:	461a      	mov	r2, r3
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	b10b      	cbz	r3, 8009580 <_free_r+0x50>
 800957c:	42a3      	cmp	r3, r4
 800957e:	d9fa      	bls.n	8009576 <_free_r+0x46>
 8009580:	6811      	ldr	r1, [r2, #0]
 8009582:	1855      	adds	r5, r2, r1
 8009584:	42a5      	cmp	r5, r4
 8009586:	d10b      	bne.n	80095a0 <_free_r+0x70>
 8009588:	6824      	ldr	r4, [r4, #0]
 800958a:	4421      	add	r1, r4
 800958c:	1854      	adds	r4, r2, r1
 800958e:	42a3      	cmp	r3, r4
 8009590:	6011      	str	r1, [r2, #0]
 8009592:	d1e0      	bne.n	8009556 <_free_r+0x26>
 8009594:	681c      	ldr	r4, [r3, #0]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	6053      	str	r3, [r2, #4]
 800959a:	4421      	add	r1, r4
 800959c:	6011      	str	r1, [r2, #0]
 800959e:	e7da      	b.n	8009556 <_free_r+0x26>
 80095a0:	d902      	bls.n	80095a8 <_free_r+0x78>
 80095a2:	230c      	movs	r3, #12
 80095a4:	6003      	str	r3, [r0, #0]
 80095a6:	e7d6      	b.n	8009556 <_free_r+0x26>
 80095a8:	6825      	ldr	r5, [r4, #0]
 80095aa:	1961      	adds	r1, r4, r5
 80095ac:	428b      	cmp	r3, r1
 80095ae:	bf04      	itt	eq
 80095b0:	6819      	ldreq	r1, [r3, #0]
 80095b2:	685b      	ldreq	r3, [r3, #4]
 80095b4:	6063      	str	r3, [r4, #4]
 80095b6:	bf04      	itt	eq
 80095b8:	1949      	addeq	r1, r1, r5
 80095ba:	6021      	streq	r1, [r4, #0]
 80095bc:	6054      	str	r4, [r2, #4]
 80095be:	e7ca      	b.n	8009556 <_free_r+0x26>
 80095c0:	b003      	add	sp, #12
 80095c2:	bd30      	pop	{r4, r5, pc}
 80095c4:	20004ca0 	.word	0x20004ca0

080095c8 <_init>:
 80095c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ca:	bf00      	nop
 80095cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ce:	bc08      	pop	{r3}
 80095d0:	469e      	mov	lr, r3
 80095d2:	4770      	bx	lr

080095d4 <_fini>:
 80095d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d6:	bf00      	nop
 80095d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095da:	bc08      	pop	{r3}
 80095dc:	469e      	mov	lr, r3
 80095de:	4770      	bx	lr
