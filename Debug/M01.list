
M01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a238  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  0800a438  0800a438  0001a438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a63c  0800a63c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a63c  0800a63c  0001a63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a644  0800a644  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a644  0800a644  0001a644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a648  0800a648  0001a648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a64c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c3c  20000074  0800a6c0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004cb0  0800a6c0  00024cb0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001efa7  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cf5  00000000  00000000  0003f049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  00042d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001598  00000000  00000000  00044450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b37d  00000000  00000000  000459e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b578  00000000  00000000  00070d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108dcf  00000000  00000000  0008c2dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001950ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006814  00000000  00000000  001950fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a420 	.word	0x0800a420

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	0800a420 	.word	0x0800a420

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <ModbusInit>:
 * @param EN_Port_v port for txen RS-485
 * @param EN_Pin_v pin for txen RS-485 (NULL means RS232C mode)
 * @ingroup setup
 */
void ModbusInit(modbusHandler_t * modH)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 80005ec:	4b34      	ldr	r3, [pc, #208]	; (80006c0 <ModbusInit+0xdc>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d860      	bhi.n	80006b6 <ModbusInit+0xd2>
  {
	  //Create QueueModbus
	  modH->QueueModbusHandle = osMessageQueueNew (MAX_BUFFER, sizeof(uint8_t), &QueueModbus_attributes);
 80005f4:	4a33      	ldr	r2, [pc, #204]	; (80006c4 <ModbusInit+0xe0>)
 80005f6:	2101      	movs	r1, #1
 80005f8:	2040      	movs	r0, #64	; 0x40
 80005fa:	f005 fcc9 	bl	8005f90 <osMessageQueueNew>
 80005fe:	4602      	mov	r2, r0
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	675a      	str	r2, [r3, #116]	; 0x74

	  if(modH->uiModbusType == SLAVE_RTU)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b03      	cmp	r3, #3
 800060a:	d108      	bne.n	800061e <ModbusInit+0x3a>
	  {
		  //Create Modbus task slave
	  	  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 800060c:	4a2e      	ldr	r2, [pc, #184]	; (80006c8 <ModbusInit+0xe4>)
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	482e      	ldr	r0, [pc, #184]	; (80006cc <ModbusInit+0xe8>)
 8000612:	f005 fb4d 	bl	8005cb0 <osThreadNew>
 8000616:	4602      	mov	r2, r0
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	67da      	str	r2, [r3, #124]	; 0x7c
 800061c:	e026      	b.n	800066c <ModbusInit+0x88>
	  }
	  else if (modH->uiModbusType == MASTER_RTU)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b04      	cmp	r3, #4
 8000624:	d121      	bne.n	800066a <ModbusInit+0x86>
	  {
		  //Create Modbus task Master  and Queue for telegrams
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8000626:	4a2a      	ldr	r2, [pc, #168]	; (80006d0 <ModbusInit+0xec>)
 8000628:	6879      	ldr	r1, [r7, #4]
 800062a:	482a      	ldr	r0, [pc, #168]	; (80006d4 <ModbusInit+0xf0>)
 800062c:	f005 fb40 	bl	8005cb0 <osThreadNew>
 8000630:	4602      	mov	r2, r0
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	67da      	str	r2, [r3, #124]	; 0x7c
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800063c:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8000644:	4a24      	ldr	r2, [pc, #144]	; (80006d8 <ModbusInit+0xf4>)
 8000646:	9200      	str	r2, [sp, #0]
 8000648:	2200      	movs	r2, #0
 800064a:	4824      	ldr	r0, [pc, #144]	; (80006dc <ModbusInit+0xf8>)
 800064c:	f007 ff22 	bl	8008494 <xTimerCreate>
 8000650:	4602      	mov	r2, r0
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);
		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8000658:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <ModbusInit+0xfc>)
 800065a:	210c      	movs	r1, #12
 800065c:	2002      	movs	r0, #2
 800065e:	f005 fc97 	bl	8005f90 <osMessageQueueNew>
 8000662:	4602      	mov	r2, r0
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	679a      	str	r2, [r3, #120]	; 0x78
 8000668:	e000      	b.n	800066c <ModbusInit+0x88>
	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 800066a:	e7fe      	b.n	800066a <ModbusInit+0x86>
	  //Create timer T35

	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	5 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8000672:	4a1c      	ldr	r2, [pc, #112]	; (80006e4 <ModbusInit+0x100>)
 8000674:	9200      	str	r2, [sp, #0]
 8000676:	2200      	movs	r2, #0
 8000678:	2105      	movs	r1, #5
 800067a:	481b      	ldr	r0, [pc, #108]	; (80006e8 <ModbusInit+0x104>)
 800067c:	f007 ff0a 	bl	8008494 <xTimerCreate>
 8000680:	4602      	mov	r2, r0
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );

	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 8000688:	4a18      	ldr	r2, [pc, #96]	; (80006ec <ModbusInit+0x108>)
 800068a:	2101      	movs	r1, #1
 800068c:	2001      	movs	r0, #1
 800068e:	f005 fbe3 	bl	8005e58 <osSemaphoreNew>
 8000692:	4602      	mov	r2, r0
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	  mHandlers[numberHandlers] = modH;
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <ModbusInit+0xdc>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	4619      	mov	r1, r3
 80006a0:	4a13      	ldr	r2, [pc, #76]	; (80006f0 <ModbusInit+0x10c>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <ModbusInit+0xdc>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	3301      	adds	r3, #1
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <ModbusInit+0xdc>)
 80006b2:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 80006b4:	e000      	b.n	80006b8 <ModbusInit+0xd4>
	  while(1); //error no more Modbus handlers supported
 80006b6:	e7fe      	b.n	80006b6 <ModbusInit+0xd2>
}
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000098 	.word	0x20000098
 80006c4:	0800a4d8 	.word	0x0800a4d8
 80006c8:	0800a508 	.word	0x0800a508
 80006cc:	08000865 	.word	0x08000865
 80006d0:	0800a52c 	.word	0x0800a52c
 80006d4:	08000d05 	.word	0x08000d05
 80006d8:	0800080d 	.word	0x0800080d
 80006dc:	0800a480 	.word	0x0800a480
 80006e0:	0800a4f0 	.word	0x0800a4f0
 80006e4:	0800078d 	.word	0x0800078d
 80006e8:	0800a490 	.word	0x0800a490
 80006ec:	0800a550 	.word	0x0800a550
 80006f0:	20000090 	.word	0x20000090

080006f4 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
    if (modH->EN_Port != NULL )
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d007      	beq.n	8000714 <ModbusStart+0x20>
    {
        // return RS485 transceiver to transmit mode
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	68d8      	ldr	r0, [r3, #12]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	8a1b      	ldrh	r3, [r3, #16]
 800070c:	2200      	movs	r2, #0
 800070e:	4619      	mov	r1, r3
 8000710:	f002 fa14 	bl	8002b3c <HAL_GPIO_WritePin>
    }

    if (modH->uiModbusType == SLAVE_RTU &&  modH->au16regs == NULL )
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b03      	cmp	r3, #3
 800071a:	d104      	bne.n	8000726 <ModbusStart+0x32>
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000720:	2b00      	cmp	r3, #0
 8000722:	d100      	bne.n	8000726 <ModbusStart+0x32>
    {
    	while(1); //ERROR define the DATA pointer shared through Modbus
 8000724:	e7fe      	b.n	8000724 <ModbusStart+0x30>
    }

    //check that port is initialized
    while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8000726:	bf00      	nop
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	4618      	mov	r0, r3
 800072e:	f004 faa1 	bl	8004c74 <HAL_UART_GetState>
 8000732:	4603      	mov	r3, r0
 8000734:	2b20      	cmp	r3, #32
 8000736:	d1f7      	bne.n	8000728 <ModbusStart+0x34>
    {
    }

    // Receive data from serial port for Modbus using interrupt
    if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6858      	ldr	r0, [r3, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3371      	adds	r3, #113	; 0x71
 8000740:	2201      	movs	r2, #1
 8000742:	4619      	mov	r1, r3
 8000744:	f003 ff3e 	bl	80045c4 <HAL_UART_Receive_IT>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d000      	beq.n	8000750 <ModbusStart+0x5c>
    {
        while(1)
 800074e:	e7fe      	b.n	800074e <ModbusStart+0x5a>
        {
        }
    }

    modH->u8lastRec = modH->u8BufferSize = 0;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2200      	movs	r2, #0
 8000754:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2200      	movs	r2, #0
 8000768:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <vTimerCallbackT35>:


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af02      	add	r7, sp, #8
 8000792:	6078      	str	r0, [r7, #4]
	//Notify that a steam has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	e029      	b.n	80007ee <vTimerCallbackT35+0x62>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 800079a:	4a1a      	ldr	r2, [pc, #104]	; (8000804 <vTimerCallbackT35+0x78>)
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d11d      	bne.n	80007e8 <vTimerCallbackT35+0x5c>
			if(mHandlers[i]->uiModbusType == MASTER_RTU)
 80007ac:	4a15      	ldr	r2, [pc, #84]	; (8000804 <vTimerCallbackT35+0x78>)
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	d10c      	bne.n	80007d4 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 80007ba:	4a12      	ldr	r2, [pc, #72]	; (8000804 <vTimerCallbackT35+0x78>)
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c2:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 80007c6:	2300      	movs	r3, #0
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	2300      	movs	r3, #0
 80007cc:	2200      	movs	r2, #0
 80007ce:	2103      	movs	r1, #3
 80007d0:	f007 febe 	bl	8008550 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 80007d4:	4a0b      	ldr	r2, [pc, #44]	; (8000804 <vTimerCallbackT35+0x78>)
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007dc:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80007de:	2300      	movs	r3, #0
 80007e0:	2203      	movs	r2, #3
 80007e2:	2100      	movs	r1, #0
 80007e4:	f007 fcf4 	bl	80081d0 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	3301      	adds	r3, #1
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <vTimerCallbackT35+0x7c>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	461a      	mov	r2, r3
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	4293      	cmp	r3, r2
 80007f8:	dbcf      	blt.n	800079a <vTimerCallbackT35+0xe>
		}

	}
}
 80007fa:	bf00      	nop
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000090 	.word	0x20000090
 8000808:	20000098 	.word	0x20000098

0800080c <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	//Notify that a steam has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	e015      	b.n	8000846 <vTimerCallbackTimeout+0x3a>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 800081a:	4a10      	ldr	r2, [pc, #64]	; (800085c <vTimerCallbackTimeout+0x50>)
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	429a      	cmp	r2, r3
 800082a:	d109      	bne.n	8000840 <vTimerCallbackTimeout+0x34>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, NO_REPLY, eSetValueWithOverwrite);
 800082c:	4a0b      	ldr	r2, [pc, #44]	; (800085c <vTimerCallbackTimeout+0x50>)
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000834:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8000836:	2300      	movs	r3, #0
 8000838:	2203      	movs	r2, #3
 800083a:	21ff      	movs	r1, #255	; 0xff
 800083c:	f007 fcc8 	bl	80081d0 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	3301      	adds	r3, #1
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <vTimerCallbackTimeout+0x54>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	461a      	mov	r2, r3
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	4293      	cmp	r3, r2
 8000850:	dbe3      	blt.n	800081a <vTimerCallbackTimeout+0xe>
		}

	}

}
 8000852:	bf00      	nop
 8000854:	bf00      	nop
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000090 	.word	0x20000090
 8000860:	20000098 	.word	0x20000098

08000864 <StartTaskModbusSlave>:


void StartTaskModbusSlave(void *argument)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block indefinitely until a Modbus Frame arrives */
 8000870:	f04f 31ff 	mov.w	r1, #4294967295
 8000874:	2001      	movs	r0, #1
 8000876:	f007 fc5f 	bl	8008138 <ulTaskNotifyTake>

	  modH->i8lastError = 0;
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	2200      	movs	r2, #0
 800087e:	749a      	strb	r2, [r3, #18]
	  modH->u8BufferSize = uxQueueMessagesWaiting(modH->QueueModbusHandle);
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000884:	4618      	mov	r0, r3
 8000886:	f006 fa55 	bl	8006d34 <uxQueueMessagesWaiting>
 800088a:	4603      	mov	r3, r0
 800088c:	b2da      	uxtb	r2, r3
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	  if (modH->EN_Port != NULL )
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d007      	beq.n	80008ac <StartTaskModbusSlave+0x48>
	  {
	     	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET); // is this required?
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	68d8      	ldr	r0, [r3, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	8a1b      	ldrh	r3, [r3, #16]
 80008a4:	2200      	movs	r2, #0
 80008a6:	4619      	mov	r1, r3
 80008a8:	f002 f948 	bl	8002b3c <HAL_GPIO_WritePin>
	  }

	  int8_t i8state = getRxBuffer(modH);
 80008ac:	68f8      	ldr	r0, [r7, #12]
 80008ae:	f000 fbe5 	bl	800107c <getRxBuffer>
 80008b2:	4603      	mov	r3, r0
 80008b4:	72fb      	strb	r3, [r7, #11]

	  if (i8state < 7){
 80008b6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80008ba:	2b06      	cmp	r3, #6
 80008bc:	dc09      	bgt.n	80008d2 <StartTaskModbusSlave+0x6e>
		  //The size of the frame is invalid
		  modH->i8lastError = ERR_BAD_SIZE;;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	22fa      	movs	r2, #250	; 0xfa
 80008c2:	749a      	strb	r2, [r3, #18]
		  xQueueGenericReset(modH->QueueModbusHandle, pdFALSE);
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f005 fcce 	bl	800626c <xQueueGenericReset>
		  continue;
 80008d0:	e093      	b.n	80009fa <StartTaskModbusSlave+0x196>
	  }


		// check slave id
	  if ( modH->au8Buffer[ID] !=  modH->u8id) continue;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	7cda      	ldrb	r2, [r3, #19]
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	7a1b      	ldrb	r3, [r3, #8]
 80008da:	429a      	cmp	r2, r3
 80008dc:	f040 808c 	bne.w	80009f8 <StartTaskModbusSlave+0x194>

	  // validate message: CRC, FCT, address and size
	  uint8_t u8exception = validateRequest(modH);
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	f000 fc6f 	bl	80011c4 <validateRequest>
 80008e6:	4603      	mov	r3, r0
 80008e8:	72bb      	strb	r3, [r7, #10]
	  if (u8exception > 0)
 80008ea:	7abb      	ldrb	r3, [r7, #10]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d00f      	beq.n	8000910 <StartTaskModbusSlave+0xac>
	  {
		  if (u8exception != NO_REPLY)
 80008f0:	7abb      	ldrb	r3, [r7, #10]
 80008f2:	2bff      	cmp	r3, #255	; 0xff
 80008f4:	d007      	beq.n	8000906 <StartTaskModbusSlave+0xa2>
		  {
			  buildException( u8exception, modH);
 80008f6:	7abb      	ldrb	r3, [r7, #10]
 80008f8:	68f9      	ldr	r1, [r7, #12]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 fdbb 	bl	8001476 <buildException>
			  sendTxBuffer(modH);
 8000900:	68f8      	ldr	r0, [r7, #12]
 8000902:	f000 fdd7 	bl	80014b4 <sendTxBuffer>
		  }
		  modH->i8lastError = u8exception;
 8000906:	f997 200a 	ldrsb.w	r2, [r7, #10]
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	749a      	strb	r2, [r3, #18]
		  //return u8exception
		  continue;
 800090e:	e074      	b.n	80009fa <StartTaskModbusSlave+0x196>
	  }

	  //u32timeOut = millis(); TODO is this really need?
	  modH->i8lastError = 0;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2200      	movs	r2, #0
 8000914:	749a      	strb	r2, [r3, #18]


	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091c:	f04f 31ff 	mov.w	r1, #4294967295
 8000920:	4618      	mov	r0, r3
 8000922:	f006 f8f3 	bl	8006b0c <xQueueSemaphoreTake>

	  // process message
	    switch(modH->au8Buffer[ FUNC ] )
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	7d1b      	ldrb	r3, [r3, #20]
 800092a:	3b01      	subs	r3, #1
 800092c:	2b0f      	cmp	r3, #15
 800092e:	d859      	bhi.n	80009e4 <StartTaskModbusSlave+0x180>
 8000930:	a201      	add	r2, pc, #4	; (adr r2, 8000938 <StartTaskModbusSlave+0xd4>)
 8000932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000936:	bf00      	nop
 8000938:	08000979 	.word	0x08000979
 800093c:	08000979 	.word	0x08000979
 8000940:	0800098b 	.word	0x0800098b
 8000944:	0800098b 	.word	0x0800098b
 8000948:	0800099d 	.word	0x0800099d
 800094c:	080009af 	.word	0x080009af
 8000950:	080009e5 	.word	0x080009e5
 8000954:	080009e5 	.word	0x080009e5
 8000958:	080009e5 	.word	0x080009e5
 800095c:	080009e5 	.word	0x080009e5
 8000960:	080009e5 	.word	0x080009e5
 8000964:	080009e5 	.word	0x080009e5
 8000968:	080009e5 	.word	0x080009e5
 800096c:	080009e5 	.word	0x080009e5
 8000970:	080009c1 	.word	0x080009c1
 8000974:	080009d3 	.word	0x080009d3
	    {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH);
 8000978:	68f8      	ldr	r0, [r7, #12]
 800097a:	f000 fe33 	bl	80015e4 <process_FC1>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 8000988:	e02d      	b.n	80009e6 <StartTaskModbusSlave+0x182>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 800098a:	68f8      	ldr	r0, [r7, #12]
 800098c:	f000 fedf 	bl	800174e <process_FC3>
 8000990:	4603      	mov	r3, r0
 8000992:	461a      	mov	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 800099a:	e024      	b.n	80009e6 <StartTaskModbusSlave+0x182>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 800099c:	68f8      	ldr	r0, [r7, #12]
 800099e:	f000 ff3f 	bl	8001820 <process_FC5>
 80009a2:	4603      	mov	r3, r0
 80009a4:	461a      	mov	r2, r3
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 80009ac:	e01b      	b.n	80009e6 <StartTaskModbusSlave+0x182>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 80009ae:	68f8      	ldr	r0, [r7, #12]
 80009b0:	f000 ff8c 	bl	80018cc <process_FC6>
 80009b4:	4603      	mov	r3, r0
 80009b6:	461a      	mov	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 80009be:	e012      	b.n	80009e6 <StartTaskModbusSlave+0x182>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 80009c0:	68f8      	ldr	r0, [r7, #12]
 80009c2:	f000 ffb4 	bl	800192e <process_FC15>
 80009c6:	4603      	mov	r3, r0
 80009c8:	461a      	mov	r2, r3
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 80009d0:	e009      	b.n	80009e6 <StartTaskModbusSlave+0x182>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 80009d2:	68f8      	ldr	r0, [r7, #12]
 80009d4:	f001 f836 	bl	8001a44 <process_FC16>
 80009d8:	4603      	mov	r3, r0
 80009da:	461a      	mov	r2, r3
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 80009e2:	e000      	b.n	80009e6 <StartTaskModbusSlave+0x182>
			default:
				break;
 80009e4:	bf00      	nop
	    }

	    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80009ec:	2300      	movs	r3, #0
 80009ee:	2200      	movs	r2, #0
 80009f0:	2100      	movs	r1, #0
 80009f2:	f005 fdff 	bl	80065f4 <xQueueGenericSend>
	    //return i8state;
	    continue;
 80009f6:	e000      	b.n	80009fa <StartTaskModbusSlave+0x196>
	  if ( modH->au8Buffer[ID] !=  modH->u8id) continue;
 80009f8:	bf00      	nop
  {
 80009fa:	e739      	b.n	8000870 <StartTaskModbusSlave+0xc>

080009fc <ModbusQuery>:
}



void ModbusQuery(modbusHandler_t * modH, modbus_t telegram )
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	4638      	mov	r0, r7
 8000a06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Add the telegram to the TX Queue of Modbus
	xQueueSendToBack(modH->QueueTelegramHandle, &telegram, 0);
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8000a0e:	4639      	mov	r1, r7
 8000a10:	2300      	movs	r3, #0
 8000a12:	2200      	movs	r2, #0
 8000a14:	f005 fdee 	bl	80065f4 <xQueueGenericSend>
}
 8000a18:	bf00      	nop
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	4638      	mov	r0, r7
 8000a2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	printf("Sending query.......");
 8000a2e:	488d      	ldr	r0, [pc, #564]	; (8000c64 <SendQuery+0x244>)
 8000a30:	f008 fe8a 	bl	8009748 <iprintf>

	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	75bb      	strb	r3, [r7, #22]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3e:	f04f 31ff 	mov.w	r1, #4294967295
 8000a42:	4618      	mov	r0, r3
 8000a44:	f006 f862 	bl	8006b0c <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	7a1b      	ldrb	r3, [r3, #8]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SendQuery+0x34>
 8000a50:	23ff      	movs	r3, #255	; 0xff
 8000a52:	75bb      	strb	r3, [r7, #22]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SendQuery+0x42>
 8000a5e:	23fe      	movs	r3, #254	; 0xfe
 8000a60:	75bb      	strb	r3, [r7, #22]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8000a62:	783b      	ldrb	r3, [r7, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d002      	beq.n	8000a6e <SendQuery+0x4e>
 8000a68:	783b      	ldrb	r3, [r7, #0]
 8000a6a:	2bf7      	cmp	r3, #247	; 0xf7
 8000a6c:	d901      	bls.n	8000a72 <SendQuery+0x52>
 8000a6e:	23f7      	movs	r3, #247	; 0xf7
 8000a70:	75bb      	strb	r3, [r7, #22]

	if(error)
 8000a72:	7dbb      	ldrb	r3, [r7, #22]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d00e      	beq.n	8000a96 <SendQuery+0x76>
	{
		 modH->i8lastError = error;
 8000a78:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8000a86:	2300      	movs	r3, #0
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	f005 fdb2 	bl	80065f4 <xQueueGenericSend>
		 return error;
 8000a90:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000a94:	e131      	b.n	8000cfa <SendQuery+0x2da>
	}


	modH->au16regs = telegram.au16reg;
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	659a      	str	r2, [r3, #88]	; 0x58

	// telegram header
	modH->au8Buffer[ ID ]         = telegram.u8id;
 8000a9c:	783a      	ldrb	r2, [r7, #0]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	74da      	strb	r2, [r3, #19]
	modH->au8Buffer[ FUNC ]       = telegram.u8fct;
 8000aa2:	787a      	ldrb	r2, [r7, #1]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	751a      	strb	r2, [r3, #20]
	modH->au8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 8000aa8:	887b      	ldrh	r3, [r7, #2]
 8000aaa:	0a1b      	lsrs	r3, r3, #8
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	755a      	strb	r2, [r3, #21]
	modH->au8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 8000ab4:	887b      	ldrh	r3, [r7, #2]
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 8000abc:	787b      	ldrb	r3, [r7, #1]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	2b0f      	cmp	r3, #15
 8000ac2:	f200 8107 	bhi.w	8000cd4 <SendQuery+0x2b4>
 8000ac6:	a201      	add	r2, pc, #4	; (adr r2, 8000acc <SendQuery+0xac>)
 8000ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000acc:	08000b0d 	.word	0x08000b0d
 8000ad0:	08000b0d 	.word	0x08000b0d
 8000ad4:	08000b0d 	.word	0x08000b0d
 8000ad8:	08000b0d 	.word	0x08000b0d
 8000adc:	08000b2b 	.word	0x08000b2b
 8000ae0:	08000b4f 	.word	0x08000b4f
 8000ae4:	08000cd5 	.word	0x08000cd5
 8000ae8:	08000cd5 	.word	0x08000cd5
 8000aec:	08000cd5 	.word	0x08000cd5
 8000af0:	08000cd5 	.word	0x08000cd5
 8000af4:	08000cd5 	.word	0x08000cd5
 8000af8:	08000cd5 	.word	0x08000cd5
 8000afc:	08000cd5 	.word	0x08000cd5
 8000b00:	08000cd5 	.word	0x08000cd5
 8000b04:	08000b75 	.word	0x08000b75
 8000b08:	08000c37 	.word	0x08000c37
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8000b0c:	88bb      	ldrh	r3, [r7, #4]
 8000b0e:	0a1b      	lsrs	r3, r3, #8
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8000b18:	88bb      	ldrh	r3, [r7, #4]
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2206      	movs	r2, #6
 8000b24:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    break;
 8000b28:	e0d4      	b.n	8000cd4 <SendQuery+0x2b4>
	case MB_FC_WRITE_COIL:
	    modH->au8Buffer[ NB_HI ]      = ((modH->au16regs[0] > 0) ? 0xff : 0);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SendQuery+0x118>
 8000b34:	22ff      	movs	r2, #255	; 0xff
 8000b36:	e000      	b.n	8000b3a <SendQuery+0x11a>
 8000b38:	2200      	movs	r2, #0
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = 0;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	2200      	movs	r2, #0
 8000b42:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2206      	movs	r2, #6
 8000b48:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    break;
 8000b4c:	e0c2      	b.n	8000cd4 <SendQuery+0x2b4>
	case MB_FC_WRITE_REGISTER:
	    modH->au8Buffer[ NB_HI ]      = highByte(modH->au16regs[0]);
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte(modH->au16regs[0]);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b62:	881b      	ldrh	r3, [r3, #0]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	2206      	movs	r2, #6
 8000b6e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    break;
 8000b72:	e0af      	b.n	8000cd4 <SendQuery+0x2b4>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 8000b74:	88bb      	ldrh	r3, [r7, #4]
 8000b76:	091b      	lsrs	r3, r3, #4
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	747b      	strb	r3, [r7, #17]
	    u8bytesno = u8regsno * 2;
 8000b7c:	7c7b      	ldrb	r3, [r7, #17]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	75fb      	strb	r3, [r7, #23]
	    if ((telegram.u16CoilsNo % 16) != 0)
 8000b82:	88bb      	ldrh	r3, [r7, #4]
 8000b84:	f003 030f 	and.w	r3, r3, #15
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d005      	beq.n	8000b9a <SendQuery+0x17a>
	    {
	        u8bytesno++;
 8000b8e:	7dfb      	ldrb	r3, [r7, #23]
 8000b90:	3301      	adds	r3, #1
 8000b92:	75fb      	strb	r3, [r7, #23]
	        u8regsno++;
 8000b94:	7c7b      	ldrb	r3, [r7, #17]
 8000b96:	3301      	adds	r3, #1
 8000b98:	747b      	strb	r3, [r7, #17]
	    }

	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8000b9a:	88bb      	ldrh	r3, [r7, #4]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8000ba6:	88bb      	ldrh	r3, [r7, #4]
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	761a      	strb	r2, [r3, #24]
	    modH->au8Buffer[ BYTE_CNT ]    = u8bytesno;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	7dfa      	ldrb	r2, [r7, #23]
 8000bb2:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	2207      	movs	r2, #7
 8000bb8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	    for (uint16_t i = 0; i < u8bytesno; i++)
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	82bb      	strh	r3, [r7, #20]
 8000bc0:	e033      	b.n	8000c2a <SendQuery+0x20a>
	    {
	        if(i%2)
 8000bc2:	8abb      	ldrh	r3, [r7, #20]
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d010      	beq.n	8000bf0 <SendQuery+0x1d0>
	        {
	            modH->au8Buffer[ modH->u8BufferSize ] = lowByte( modH->au16regs[ i/2 ] );
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bd2:	8abb      	ldrh	r3, [r7, #20]
 8000bd4:	085b      	lsrs	r3, r3, #1
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	4413      	add	r3, r2
 8000bdc:	881a      	ldrh	r2, [r3, #0]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000be4:	4619      	mov	r1, r3
 8000be6:	b2d2      	uxtb	r2, r2
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	440b      	add	r3, r1
 8000bec:	74da      	strb	r2, [r3, #19]
 8000bee:	e011      	b.n	8000c14 <SendQuery+0x1f4>
	        }
	        else
	        {
	        	 modH->au8Buffer[  modH->u8BufferSize ] = highByte(  modH->au16regs[ i/2] );
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bf4:	8abb      	ldrh	r3, [r7, #20]
 8000bf6:	085b      	lsrs	r3, r3, #1
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	4413      	add	r3, r2
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	440b      	add	r3, r1
 8000c12:	74da      	strb	r2, [r3, #19]
	        }
	        modH->u8BufferSize++;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8000c24:	8abb      	ldrh	r3, [r7, #20]
 8000c26:	3301      	adds	r3, #1
 8000c28:	82bb      	strh	r3, [r7, #20]
 8000c2a:	7dfb      	ldrb	r3, [r7, #23]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	8aba      	ldrh	r2, [r7, #20]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d3c6      	bcc.n	8000bc2 <SendQuery+0x1a2>
	    }
	    break;
 8000c34:	e04e      	b.n	8000cd4 <SendQuery+0x2b4>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8000c36:	88bb      	ldrh	r3, [r7, #4]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8000c42:	88bb      	ldrh	r3, [r7, #4]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	761a      	strb	r2, [r3, #24]
	    modH->au8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 8000c4a:	88bb      	ldrh	r3, [r7, #4]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	2207      	movs	r2, #7
 8000c5a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	827b      	strh	r3, [r7, #18]
 8000c62:	e032      	b.n	8000cca <SendQuery+0x2aa>
 8000c64:	0800a49c 	.word	0x0800a49c
	    {
	        modH->au8Buffer[  modH->u8BufferSize ] = highByte(  modH->au16regs[ i ] );
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c6c:	8a7b      	ldrh	r3, [r7, #18]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	4413      	add	r3, r2
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	0a1b      	lsrs	r3, r3, #8
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000c7e:	4619      	mov	r1, r3
 8000c80:	b2d2      	uxtb	r2, r2
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	440b      	add	r3, r1
 8000c86:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000c8e:	3301      	adds	r3, #1
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	        modH->au8Buffer[  modH->u8BufferSize ] = lowByte(  modH->au16regs[ i ] );
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c9c:	8a7b      	ldrh	r3, [r7, #18]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	4413      	add	r3, r2
 8000ca2:	881a      	ldrh	r2, [r3, #0]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000caa:	4619      	mov	r1, r3
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	440b      	add	r3, r1
 8000cb2:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000cba:	3301      	adds	r3, #1
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8000cc4:	8a7b      	ldrh	r3, [r7, #18]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	827b      	strh	r3, [r7, #18]
 8000cca:	88bb      	ldrh	r3, [r7, #4]
 8000ccc:	8a7a      	ldrh	r2, [r7, #18]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d3ca      	bcc.n	8000c68 <SendQuery+0x248>
	    }
	    break;
 8000cd2:	bf00      	nop
	}

	xSemaphoreGive(modH->ModBusSphrHandle);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8000cda:	2300      	movs	r3, #0
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2100      	movs	r1, #0
 8000ce0:	f005 fc88 	bl	80065f4 <xQueueGenericSend>

	sendTxBuffer(modH);
 8000ce4:	68f8      	ldr	r0, [r7, #12]
 8000ce6:	f000 fbe5 	bl	80014b4 <sendTxBuffer>
	modH->i8state = COM_WAITING;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	2201      	movs	r2, #1
 8000cee:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	modH->i8lastError = 0;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	749a      	strb	r2, [r3, #18]
	return 0;
 8000cf8:	2300      	movs	r3, #0


}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop

08000d04 <StartTaskModbusMaster>:




void StartTaskModbusMaster(void *argument)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af02      	add	r7, sp, #8
 8000d0a:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	61fb      	str	r3, [r7, #28]
  modbus_t telegram;

  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000d14:	f107 0108 	add.w	r1, r7, #8
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f005 fe0f 	bl	8006940 <xQueueReceive>

	  /*Format and Send query */
	  SendQuery(modH, telegram);
 8000d22:	f107 0308 	add.w	r3, r7, #8
 8000d26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d28:	69f8      	ldr	r0, [r7, #28]
 8000d2a:	f7ff fe79 	bl	8000a20 <SendQuery>

	  /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
	  ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000d2e:	f04f 31ff 	mov.w	r1, #4294967295
 8000d32:	2001      	movs	r0, #1
 8000d34:	f007 fa00 	bl	8008138 <ulTaskNotifyTake>
 8000d38:	61b8      	str	r0, [r7, #24]
	  modH->i8lastError = 0;
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue == NO_REPLY)
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	2bff      	cmp	r3, #255	; 0xff
 8000d44:	d10f      	bne.n	8000d66 <StartTaskModbusMaster+0x62>
      {
    	  modH->i8state = COM_IDLE;
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
    	  modH->i8lastError = NO_REPLY;
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	22ff      	movs	r2, #255	; 0xff
 8000d52:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    	  continue;
 8000d64:	e09a      	b.n	8000e9c <StartTaskModbusMaster+0x198>
      }

	  modH->u8BufferSize = uxQueueMessagesWaiting(modH->QueueModbusHandle);
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f005 ffe2 	bl	8006d34 <uxQueueMessagesWaiting>
 8000d70:	4603      	mov	r3, r0
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	  int8_t i8state = getRxBuffer(modH);
 8000d7a:	69f8      	ldr	r0, [r7, #28]
 8000d7c:	f000 f97e 	bl	800107c <getRxBuffer>
 8000d80:	4603      	mov	r3, r0
 8000d82:	75fb      	strb	r3, [r7, #23]
	  //modH->u8lastError = i8state;

	  if (i8state < 6){
 8000d84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d88:	2b05      	cmp	r3, #5
 8000d8a:	dc1d      	bgt.n	8000dc8 <StartTaskModbusMaster+0xc4>
		  //The size of the frame is invalid
		  xQueueGenericReset(modH->QueueModbusHandle, pdFALSE);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f005 fa6a 	bl	800626c <xQueueGenericReset>
		  modH->i8state = COM_IDLE;
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		  modH->i8lastError = ERR_BAD_SIZE;
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	22fa      	movs	r2, #250	; 0xfa
 8000da4:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8000dac:	3301      	adds	r3, #1
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		  xSemaphoreGive(modH->ModBusSphrHandle);
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	f005 fc17 	bl	80065f4 <xQueueGenericSend>
		  continue;
 8000dc6:	e069      	b.n	8000e9c <StartTaskModbusMaster+0x198>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8000dce:	2300      	movs	r3, #0
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2103      	movs	r1, #3
 8000dd8:	f007 fbba 	bl	8008550 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  uint8_t u8exception = validateAnswer(modH);
 8000ddc:	69f8      	ldr	r0, [r7, #28]
 8000dde:	f000 f8df 	bl	8000fa0 <validateAnswer>
 8000de2:	4603      	mov	r3, r0
 8000de4:	75bb      	strb	r3, [r7, #22]
	  if (u8exception != 0)
 8000de6:	7dbb      	ldrb	r3, [r7, #22]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d00c      	beq.n	8000e06 <StartTaskModbusMaster+0x102>
	  {
		 modH->i8state = COM_IDLE;
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2100      	movs	r1, #0
 8000e00:	f005 fbf8 	bl	80065f4 <xQueueGenericSend>
	     continue;
 8000e04:	e04a      	b.n	8000e9c <StartTaskModbusMaster+0x198>
	  }



	  modH->i8lastError = u8exception;
 8000e06:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f005 fe77 	bl	8006b0c <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->au8Buffer[ FUNC ] )
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	7d1b      	ldrb	r3, [r3, #20]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	2b0f      	cmp	r3, #15
 8000e26:	d82b      	bhi.n	8000e80 <StartTaskModbusMaster+0x17c>
 8000e28:	a201      	add	r2, pc, #4	; (adr r2, 8000e30 <StartTaskModbusMaster+0x12c>)
 8000e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2e:	bf00      	nop
 8000e30:	08000e71 	.word	0x08000e71
 8000e34:	08000e71 	.word	0x08000e71
 8000e38:	08000e79 	.word	0x08000e79
 8000e3c:	08000e79 	.word	0x08000e79
 8000e40:	08000e81 	.word	0x08000e81
 8000e44:	08000e81 	.word	0x08000e81
 8000e48:	08000e81 	.word	0x08000e81
 8000e4c:	08000e81 	.word	0x08000e81
 8000e50:	08000e81 	.word	0x08000e81
 8000e54:	08000e81 	.word	0x08000e81
 8000e58:	08000e81 	.word	0x08000e81
 8000e5c:	08000e81 	.word	0x08000e81
 8000e60:	08000e81 	.word	0x08000e81
 8000e64:	08000e81 	.word	0x08000e81
 8000e68:	08000e81 	.word	0x08000e81
 8000e6c:	08000e81 	.word	0x08000e81
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to au16regs buffer
	      get_FC1(modH);
 8000e70:	69f8      	ldr	r0, [r7, #28]
 8000e72:	f000 f815 	bl	8000ea0 <get_FC1>
	      break;
 8000e76:	e004      	b.n	8000e82 <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to au16regs buffer
	      get_FC3(modH);
 8000e78:	69f8      	ldr	r0, [r7, #28]
 8000e7a:	f000 f864 	bl	8000f46 <get_FC3>
	      break;
 8000e7e:	e000      	b.n	8000e82 <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 8000e80:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

	  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8000e90:	2300      	movs	r3, #0
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	f005 fbad 	bl	80065f4 <xQueueGenericSend>
	  //return i8state;
	  continue;
 8000e9a:	bf00      	nop
  {
 8000e9c:	e738      	b.n	8000d10 <StartTaskModbusMaster+0xc>
 8000e9e:	bf00      	nop

08000ea0 <get_FC1>:
 *
 * @ingroup register
 * TODO: finish its implementation
 */
void get_FC1(modbusHandler_t *modH)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->au8Buffer[2]; i++) {
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]
 8000eb0:	e03f      	b.n	8000f32 <get_FC1+0x92>

        if(i%2)
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d01a      	beq.n	8000ef4 <get_FC1+0x54>
        {
        	modH->au16regs[i/2]= word(modH->au8Buffer[i+u8byte], lowByte(modH->au16regs[i/2]));
 8000ebe:	7bfa      	ldrb	r2, [r7, #15]
 8000ec0:	7bbb      	ldrb	r3, [r7, #14]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	7cd8      	ldrb	r0, [r3, #19]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	085b      	lsrs	r3, r3, #1
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	4413      	add	r3, r2
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	b2d9      	uxtb	r1, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	085b      	lsrs	r3, r3, #1
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	18d4      	adds	r4, r2, r3
 8000eea:	f000 fa6b 	bl	80013c4 <word>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	8023      	strh	r3, [r4, #0]
 8000ef2:	e01b      	b.n	8000f2c <get_FC1+0x8c>
        }
        else
        {

        	modH->au16regs[i/2]= word(highByte(modH->au16regs[i/2]), modH->au8Buffer[i+u8byte]);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	085b      	lsrs	r3, r3, #1
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4413      	add	r3, r2
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	b2d8      	uxtb	r0, r3
 8000f0a:	7bfa      	ldrb	r2, [r7, #15]
 8000f0c:	7bbb      	ldrb	r3, [r7, #14]
 8000f0e:	4413      	add	r3, r2
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	4413      	add	r3, r2
 8000f14:	7cd9      	ldrb	r1, [r3, #19]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	085b      	lsrs	r3, r3, #1
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	18d4      	adds	r4, r2, r3
 8000f24:	f000 fa4e 	bl	80013c4 <word>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->au8Buffer[2]; i++) {
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	73fb      	strb	r3, [r7, #15]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	7d5b      	ldrb	r3, [r3, #21]
 8000f36:	7bfa      	ldrb	r2, [r7, #15]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d3ba      	bcc.n	8000eb2 <get_FC1+0x12>
        }

     }
}
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd90      	pop	{r4, r7, pc}

08000f46 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 8000f46:	b590      	push	{r4, r7, lr}
 8000f48:	b085      	sub	sp, #20
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->au8Buffer[ 2 ] /2; i++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	73bb      	strb	r3, [r7, #14]
 8000f56:	e017      	b.n	8000f88 <get_FC3+0x42>
    {
    	modH->au16regs[ i ] = word(modH->au8Buffer[ u8byte ], modH->au8Buffer[ u8byte +1 ]);
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	7cd8      	ldrb	r0, [r3, #19]
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	3301      	adds	r3, #1
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	4413      	add	r3, r2
 8000f68:	7cd9      	ldrb	r1, [r3, #19]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f6e:	7bbb      	ldrb	r3, [r7, #14]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	18d4      	adds	r4, r2, r3
 8000f74:	f000 fa26 	bl	80013c4 <word>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	3302      	adds	r3, #2
 8000f80:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->au8Buffer[ 2 ] /2; i++)
 8000f82:	7bbb      	ldrb	r3, [r7, #14]
 8000f84:	3301      	adds	r3, #1
 8000f86:	73bb      	strb	r3, [r7, #14]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	7d5b      	ldrb	r3, [r3, #21]
 8000f8c:	085b      	lsrs	r3, r3, #1
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	7bba      	ldrb	r2, [r7, #14]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d3e0      	bcc.n	8000f58 <get_FC3+0x12>
    }
}
 8000f96:	bf00      	nop
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd90      	pop	{r4, r7, pc}

08000fa0 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
    // check message crc vs calculated crc
    uint16_t u16MsgCRC =
        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000fae:	3b02      	subs	r3, #2
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	7cdb      	ldrb	r3, [r3, #19]
 8000fb6:	021b      	lsls	r3, r3, #8
         | modH->au8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	440b      	add	r3, r1
 8000fc6:	7cdb      	ldrb	r3, [r3, #19]
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	b21b      	sxth	r3, r3
    uint16_t u16MsgCRC =
 8000fce:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->au8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f103 0213 	add.w	r2, r3, #19
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000fdc:	3b02      	subs	r3, #2
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	f000 fa01 	bl	80013ea <calcCRC>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	89bb      	ldrh	r3, [r7, #12]
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d009      	beq.n	8001006 <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        return NO_REPLY;
 8001002:	23ff      	movs	r3, #255	; 0xff
 8001004:	e034      	b.n	8001070 <validateAnswer+0xd0>
    }

    // check exception
    if ((modH->au8Buffer[ FUNC ] & 0x80) != 0)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7d1b      	ldrb	r3, [r3, #20]
 800100a:	b25b      	sxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	da09      	bge.n	8001024 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001016:	3301      	adds	r3, #1
 8001018:	b29a      	uxth	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        return ERR_EXCEPTION;
 8001020:	23fb      	movs	r3, #251	; 0xfb
 8001022:	e025      	b.n	8001070 <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8001028:	2300      	movs	r3, #0
 800102a:	73bb      	strb	r3, [r7, #14]
 800102c:	e00c      	b.n	8001048 <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->au8Buffer[FUNC])
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	4a11      	ldr	r2, [pc, #68]	; (8001078 <validateAnswer+0xd8>)
 8001032:	5cd2      	ldrb	r2, [r2, r3]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7d1b      	ldrb	r3, [r3, #20]
 8001038:	429a      	cmp	r2, r3
 800103a:	d102      	bne.n	8001042 <validateAnswer+0xa2>
        {
            isSupported = 1;
 800103c:	2301      	movs	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
            break;
 8001040:	e005      	b.n	800104e <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	3301      	adds	r3, #1
 8001046:	73bb      	strb	r3, [r7, #14]
 8001048:	7bbb      	ldrb	r3, [r7, #14]
 800104a:	2b07      	cmp	r3, #7
 800104c:	d9ef      	bls.n	800102e <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	f083 0301 	eor.w	r3, r3, #1
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d009      	beq.n	800106e <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001060:	3301      	adds	r3, #1
 8001062:	b29a      	uxth	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        return EXC_FUNC_CODE;
 800106a:	2301      	movs	r3, #1
 800106c:	e000      	b.n	8001070 <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	0800a560 	.word	0x0800a560

0800107c <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int8_t getRxBuffer(modbusHandler_t *modH)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
    bool bBuffOverflow = false;
 8001084:	2300      	movs	r3, #0
 8001086:	72fb      	strb	r3, [r7, #11]
    int i;
    if (modH->EN_Port)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d007      	beq.n	80010a0 <getRxBuffer+0x24>
    {
    	//digitalWrite( u8txenpin, LOW );
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68d8      	ldr	r0, [r3, #12]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	8a1b      	ldrh	r3, [r3, #16]
 8001098:	2200      	movs	r2, #0
 800109a:	4619      	mov	r1, r3
 800109c:	f001 fd4e 	bl	8002b3c <HAL_GPIO_WritePin>
    }


    modH->u8BufferSize = uxQueueMessagesWaiting(modH->QueueModbusHandle);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010a4:	4618      	mov	r0, r3
 80010a6:	f005 fe45 	bl	8006d34 <uxQueueMessagesWaiting>
 80010aa:	4603      	mov	r3, r0
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    for(i = 0; i<  modH->u8BufferSize; i++ )
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	e00d      	b.n	80010d6 <getRxBuffer+0x5a>
   	{
   		  xQueueReceive(modH->QueueModbusHandle, &modH->au8Buffer[i], 0);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	3310      	adds	r3, #16
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	3303      	adds	r3, #3
 80010c8:	2200      	movs	r2, #0
 80010ca:	4619      	mov	r1, r3
 80010cc:	f005 fc38 	bl	8006940 <xQueueReceive>
    for(i = 0; i<  modH->u8BufferSize; i++ )
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	3301      	adds	r3, #1
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80010dc:	461a      	mov	r2, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4293      	cmp	r3, r2
 80010e2:	dbea      	blt.n	80010ba <getRxBuffer+0x3e>
   	}

    modH->u16InCnt++;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80010ea:	3301      	adds	r3, #1
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c


    if (bBuffOverflow)
 80010f4:	7afb      	ldrb	r3, [r7, #11]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00a      	beq.n	8001110 <getRxBuffer+0x94>
    {
    	modH->u16errCnt++;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001100:	3301      	adds	r3, #1
 8001102:	b29a      	uxth	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        return ERR_BUFF_OVERFLOW;  //using queues this will not happen
 800110a:	f06f 0302 	mvn.w	r3, #2
 800110e:	e003      	b.n	8001118 <getRxBuffer+0x9c>
    }
    return modH->u8BufferSize;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001116:	b25b      	sxtb	r3, r3
}
 8001118:	4618      	mov	r0, r3
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_UART_RxCpltCallback>:
 * This is the callback for HAL interrupt of UART RX
 *
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b087      	sub	sp, #28
 8001124:	af02      	add	r7, sp, #8
 8001126:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]

    int i;
    for (i = 0; i < numberHandlers; i++ )
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	e039      	b.n	80011a6 <HAL_UART_RxCpltCallback+0x86>
    {
    	if (mHandlers[i]->port == UartHandle  )
 8001132:	4a22      	ldr	r2, [pc, #136]	; (80011bc <HAL_UART_RxCpltCallback+0x9c>)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	429a      	cmp	r2, r3
 8001140:	d12e      	bne.n	80011a0 <HAL_UART_RxCpltCallback+0x80>
    	{
    		xQueueSendToBackFromISR( mHandlers[i]->QueueModbusHandle, &mHandlers[i]->dataRX, pdFALSE);
 8001142:	4a1e      	ldr	r2, [pc, #120]	; (80011bc <HAL_UART_RxCpltCallback+0x9c>)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800114c:	4a1b      	ldr	r2, [pc, #108]	; (80011bc <HAL_UART_RxCpltCallback+0x9c>)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001154:	f103 0171 	add.w	r1, r3, #113	; 0x71
 8001158:	2300      	movs	r3, #0
 800115a:	2200      	movs	r2, #0
 800115c:	f005 fb50 	bl	8006800 <xQueueGenericSendFromISR>
    		HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 8001160:	4a16      	ldr	r2, [pc, #88]	; (80011bc <HAL_UART_RxCpltCallback+0x9c>)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001168:	6858      	ldr	r0, [r3, #4]
 800116a:	4a14      	ldr	r2, [pc, #80]	; (80011bc <HAL_UART_RxCpltCallback+0x9c>)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001172:	3371      	adds	r3, #113	; 0x71
 8001174:	2201      	movs	r2, #1
 8001176:	4619      	mov	r1, r3
 8001178:	f003 fa24 	bl	80045c4 <HAL_UART_Receive_IT>
    		xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 800117c:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <HAL_UART_RxCpltCallback+0x9c>)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001184:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8001188:	f006 faf2 	bl	8007770 <xTaskGetTickCountFromISR>
 800118c:	4602      	mov	r2, r0
 800118e:	f107 0308 	add.w	r3, r7, #8
 8001192:	2100      	movs	r1, #0
 8001194:	9100      	str	r1, [sp, #0]
 8001196:	2107      	movs	r1, #7
 8001198:	4620      	mov	r0, r4
 800119a:	f007 f9d9 	bl	8008550 <xTimerGenericCommand>
    		break;
 800119e:	e009      	b.n	80011b4 <HAL_UART_RxCpltCallback+0x94>
    for (i = 0; i < numberHandlers; i++ )
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	3301      	adds	r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_UART_RxCpltCallback+0xa0>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4293      	cmp	r3, r2
 80011b0:	dbbf      	blt.n	8001132 <HAL_UART_RxCpltCallback+0x12>
    	}
    }


}
 80011b2:	bf00      	nop
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd90      	pop	{r4, r7, pc}
 80011bc:	20000090 	.word	0x20000090
 80011c0:	20000098 	.word	0x20000098

080011c4 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	// check message crc vs calculated crc
	    uint16_t u16MsgCRC =
	        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80011d2:	3b02      	subs	r3, #2
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	4413      	add	r3, r2
 80011d8:	7cdb      	ldrb	r3, [r3, #19]
 80011da:	021b      	lsls	r3, r3, #8
	         | modH->au8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 80011dc:	b21a      	sxth	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80011e4:	3b01      	subs	r3, #1
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	440b      	add	r3, r1
 80011ea:	7cdb      	ldrb	r3, [r3, #19]
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b21b      	sxth	r3, r3
	    uint16_t u16MsgCRC =
 80011f2:	81bb      	strh	r3, [r7, #12]
	    if ( calcCRC( modH->au8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f103 0213 	add.w	r2, r3, #19
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001200:	3b02      	subs	r3, #2
 8001202:	b2db      	uxtb	r3, r3
 8001204:	4619      	mov	r1, r3
 8001206:	4610      	mov	r0, r2
 8001208:	f000 f8ef 	bl	80013ea <calcCRC>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	89bb      	ldrh	r3, [r7, #12]
 8001212:	4293      	cmp	r3, r2
 8001214:	d009      	beq.n	800122a <validateRequest+0x66>
	    {
	    	modH->u16errCnt ++;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800121c:	3301      	adds	r3, #1
 800121e:	b29a      	uxth	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	        return NO_REPLY;
 8001226:	23ff      	movs	r3, #255	; 0xff
 8001228:	e0c6      	b.n	80013b8 <validateRequest+0x1f4>
	    }

	    // check fct code
	    bool isSupported = false;
 800122a:	2300      	movs	r3, #0
 800122c:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800122e:	2300      	movs	r3, #0
 8001230:	73bb      	strb	r3, [r7, #14]
 8001232:	e00c      	b.n	800124e <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->au8Buffer[FUNC])
 8001234:	7bbb      	ldrb	r3, [r7, #14]
 8001236:	4a62      	ldr	r2, [pc, #392]	; (80013c0 <validateRequest+0x1fc>)
 8001238:	5cd2      	ldrb	r2, [r2, r3]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	7d1b      	ldrb	r3, [r3, #20]
 800123e:	429a      	cmp	r2, r3
 8001240:	d102      	bne.n	8001248 <validateRequest+0x84>
	        {
	            isSupported = 1;
 8001242:	2301      	movs	r3, #1
 8001244:	73fb      	strb	r3, [r7, #15]
	            break;
 8001246:	e005      	b.n	8001254 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8001248:	7bbb      	ldrb	r3, [r7, #14]
 800124a:	3301      	adds	r3, #1
 800124c:	73bb      	strb	r3, [r7, #14]
 800124e:	7bbb      	ldrb	r3, [r7, #14]
 8001250:	2b07      	cmp	r3, #7
 8001252:	d9ef      	bls.n	8001234 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	f083 0301 	eor.w	r3, r3, #1
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d009      	beq.n	8001274 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001266:	3301      	adds	r3, #1
 8001268:	b29a      	uxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	        return EXC_FUNC_CODE;
 8001270:	2301      	movs	r3, #1
 8001272:	e0a1      	b.n	80013b8 <validateRequest+0x1f4>
	    }

	    // check start address & nb range
	    uint16_t u16regs = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	817b      	strh	r3, [r7, #10]
	    uint8_t u8regs;
	    switch ( modH->au8Buffer[ FUNC ] )
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	7d1b      	ldrb	r3, [r3, #20]
 800127c:	3b01      	subs	r3, #1
 800127e:	2b0f      	cmp	r3, #15
 8001280:	f200 8099 	bhi.w	80013b6 <validateRequest+0x1f2>
 8001284:	a201      	add	r2, pc, #4	; (adr r2, 800128c <validateRequest+0xc8>)
 8001286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128a:	bf00      	nop
 800128c:	080012cd 	.word	0x080012cd
 8001290:	080012cd 	.word	0x080012cd
 8001294:	08001367 	.word	0x08001367
 8001298:	08001367 	.word	0x08001367
 800129c:	08001315 	.word	0x08001315
 80012a0:	0800133f 	.word	0x0800133f
 80012a4:	080013b7 	.word	0x080013b7
 80012a8:	080013b7 	.word	0x080013b7
 80012ac:	080013b7 	.word	0x080013b7
 80012b0:	080013b7 	.word	0x080013b7
 80012b4:	080013b7 	.word	0x080013b7
 80012b8:	080013b7 	.word	0x080013b7
 80012bc:	080013b7 	.word	0x080013b7
 80012c0:	080013b7 	.word	0x080013b7
 80012c4:	080012cd 	.word	0x080012cd
 80012c8:	08001367 	.word	0x08001367
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]) / 16;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	7d5a      	ldrb	r2, [r3, #21]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	7d9b      	ldrb	r3, [r3, #22]
 80012d4:	4619      	mov	r1, r3
 80012d6:	4610      	mov	r0, r2
 80012d8:	f000 f874 	bl	80013c4 <word>
 80012dc:	4603      	mov	r3, r0
 80012de:	091b      	lsrs	r3, r3, #4
 80012e0:	817b      	strh	r3, [r7, #10]
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]) /16;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	7dda      	ldrb	r2, [r3, #23]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	7e1b      	ldrb	r3, [r3, #24]
 80012ea:	4619      	mov	r1, r3
 80012ec:	4610      	mov	r0, r2
 80012ee:	f000 f869 	bl	80013c4 <word>
 80012f2:	4603      	mov	r3, r0
 80012f4:	091b      	lsrs	r3, r3, #4
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	897b      	ldrh	r3, [r7, #10]
 80012fc:	4413      	add	r3, r2
 80012fe:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 8001300:	897b      	ldrh	r3, [r7, #10]
 8001302:	727b      	strb	r3, [r7, #9]
	        if (u8regs > modH->u8regsize) return EXC_ADDR_RANGE;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800130a:	7a7a      	ldrb	r2, [r7, #9]
 800130c:	429a      	cmp	r2, r3
 800130e:	d94b      	bls.n	80013a8 <validateRequest+0x1e4>
 8001310:	2302      	movs	r3, #2
 8001312:	e051      	b.n	80013b8 <validateRequest+0x1f4>
	        break;
	    case MB_FC_WRITE_COIL:
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]) / 16;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	7d5a      	ldrb	r2, [r3, #21]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	7d9b      	ldrb	r3, [r3, #22]
 800131c:	4619      	mov	r1, r3
 800131e:	4610      	mov	r0, r2
 8001320:	f000 f850 	bl	80013c4 <word>
 8001324:	4603      	mov	r3, r0
 8001326:	091b      	lsrs	r3, r3, #4
 8001328:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 800132a:	897b      	ldrh	r3, [r7, #10]
 800132c:	727b      	strb	r3, [r7, #9]
	        if (u8regs > modH->u8regsize) return EXC_ADDR_RANGE;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001334:	7a7a      	ldrb	r2, [r7, #9]
 8001336:	429a      	cmp	r2, r3
 8001338:	d938      	bls.n	80013ac <validateRequest+0x1e8>
 800133a:	2302      	movs	r3, #2
 800133c:	e03c      	b.n	80013b8 <validateRequest+0x1f4>
	        break;
	    case MB_FC_WRITE_REGISTER :
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	7d5a      	ldrb	r2, [r3, #21]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	7d9b      	ldrb	r3, [r3, #22]
 8001346:	4619      	mov	r1, r3
 8001348:	4610      	mov	r0, r2
 800134a:	f000 f83b 	bl	80013c4 <word>
 800134e:	4603      	mov	r3, r0
 8001350:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 8001352:	897b      	ldrh	r3, [r7, #10]
 8001354:	727b      	strb	r3, [r7, #9]
	        if (u8regs >modH-> u8regsize) return EXC_ADDR_RANGE;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800135c:	7a7a      	ldrb	r2, [r7, #9]
 800135e:	429a      	cmp	r2, r3
 8001360:	d926      	bls.n	80013b0 <validateRequest+0x1ec>
 8001362:	2302      	movs	r3, #2
 8001364:	e028      	b.n	80013b8 <validateRequest+0x1f4>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7d5a      	ldrb	r2, [r3, #21]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	7d9b      	ldrb	r3, [r3, #22]
 800136e:	4619      	mov	r1, r3
 8001370:	4610      	mov	r0, r2
 8001372:	f000 f827 	bl	80013c4 <word>
 8001376:	4603      	mov	r3, r0
 8001378:	817b      	strh	r3, [r7, #10]
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	7dda      	ldrb	r2, [r3, #23]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	7e1b      	ldrb	r3, [r3, #24]
 8001382:	4619      	mov	r1, r3
 8001384:	4610      	mov	r0, r2
 8001386:	f000 f81d 	bl	80013c4 <word>
 800138a:	4603      	mov	r3, r0
 800138c:	461a      	mov	r2, r3
 800138e:	897b      	ldrh	r3, [r7, #10]
 8001390:	4413      	add	r3, r2
 8001392:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 8001394:	897b      	ldrh	r3, [r7, #10]
 8001396:	727b      	strb	r3, [r7, #9]
	        if (u8regs > modH->u8regsize) return EXC_ADDR_RANGE;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800139e:	7a7a      	ldrb	r2, [r7, #9]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d907      	bls.n	80013b4 <validateRequest+0x1f0>
 80013a4:	2302      	movs	r3, #2
 80013a6:	e007      	b.n	80013b8 <validateRequest+0x1f4>
	        break;
 80013a8:	bf00      	nop
 80013aa:	e004      	b.n	80013b6 <validateRequest+0x1f2>
	        break;
 80013ac:	bf00      	nop
 80013ae:	e002      	b.n	80013b6 <validateRequest+0x1f2>
	        break;
 80013b0:	bf00      	nop
 80013b2:	e000      	b.n	80013b6 <validateRequest+0x1f2>
	        break;
 80013b4:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 80013b6:	2300      	movs	r3, #0

}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	0800a560 	.word	0x0800a560

080013c4 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	460a      	mov	r2, r1
 80013ce:	71fb      	strb	r3, [r7, #7]
 80013d0:	4613      	mov	r3, r2
 80013d2:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 80013d4:	79bb      	ldrb	r3, [r7, #6]
 80013d6:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 80013dc:	89bb      	ldrh	r3, [r7, #12]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b087      	sub	sp, #28
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	460b      	mov	r3, r1
 80013f4:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 80013f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013fa:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	74fb      	strb	r3, [r7, #19]
 8001400:	e022      	b.n	8001448 <calcCRC+0x5e>
    {
        temp = temp ^ Buffer[i];
 8001402:	7cfb      	ldrb	r3, [r7, #19]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	4053      	eors	r3, r2
 8001410:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8001412:	2301      	movs	r3, #1
 8001414:	74bb      	strb	r3, [r7, #18]
 8001416:	e011      	b.n	800143c <calcCRC+0x52>
        {
            flag = temp & 0x0001;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	085b      	lsrs	r3, r3, #1
 8001424:	617b      	str	r3, [r7, #20]
            if (flag)
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d004      	beq.n	8001436 <calcCRC+0x4c>
                temp ^= 0xA001;
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	f24a 0301 	movw	r3, #40961	; 0xa001
 8001432:	4053      	eors	r3, r2
 8001434:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8001436:	7cbb      	ldrb	r3, [r7, #18]
 8001438:	3301      	adds	r3, #1
 800143a:	74bb      	strb	r3, [r7, #18]
 800143c:	7cbb      	ldrb	r3, [r7, #18]
 800143e:	2b08      	cmp	r3, #8
 8001440:	d9ea      	bls.n	8001418 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 8001442:	7cfb      	ldrb	r3, [r7, #19]
 8001444:	3301      	adds	r3, #1
 8001446:	74fb      	strb	r3, [r7, #19]
 8001448:	7cfa      	ldrb	r2, [r7, #19]
 800144a:	78fb      	ldrb	r3, [r7, #3]
 800144c:	429a      	cmp	r2, r3
 800144e:	d3d8      	bcc.n	8001402 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	0a1b      	lsrs	r3, r3, #8
 8001454:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	4313      	orrs	r3, r2
 800145e:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	b29b      	uxth	r3, r3
 8001464:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	b29b      	uxth	r3, r3

}
 800146a:	4618      	mov	r0, r3
 800146c:	371c      	adds	r7, #28
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8001476:	b480      	push	{r7}
 8001478:	b085      	sub	sp, #20
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	6039      	str	r1, [r7, #0]
 8001480:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->au8Buffer[ FUNC ];  // get the original FUNC code
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	7d1b      	ldrb	r3, [r3, #20]
 8001486:	73fb      	strb	r3, [r7, #15]

    modH->au8Buffer[ ID ]      = modH->u8id;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	7a1a      	ldrb	r2, [r3, #8]
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	74da      	strb	r2, [r3, #19]
    modH->au8Buffer[ FUNC ]    = u8func + 0x80;
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	3b80      	subs	r3, #128	; 0x80
 8001494:	b2da      	uxtb	r2, r3
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	751a      	strb	r2, [r3, #20]
    modH->au8Buffer[ 2 ]       = u8exception;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	79fa      	ldrb	r2, [r7, #7]
 800149e:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	2203      	movs	r2, #3
 80014a4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
}
 80014a8:	bf00      	nop
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
void sendTxBuffer(modbusHandler_t *modH)
{
 80014b4:	b590      	push	{r4, r7, lr}
 80014b6:	b087      	sub	sp, #28
 80014b8:	af02      	add	r7, sp, #8
 80014ba:	6078      	str	r0, [r7, #4]
    // append CRC to message
    uint16_t u16crc = calcCRC(modH->au8Buffer, modH->u8BufferSize);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f103 0213 	add.w	r2, r3, #19
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80014c8:	4619      	mov	r1, r3
 80014ca:	4610      	mov	r0, r2
 80014cc:	f7ff ff8d 	bl	80013ea <calcCRC>
 80014d0:	4603      	mov	r3, r0
 80014d2:	81fb      	strh	r3, [r7, #14]
    modH->au8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 80014d4:	89fb      	ldrh	r3, [r7, #14]
 80014d6:	0a1b      	lsrs	r3, r3, #8
 80014d8:	b29a      	uxth	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80014e0:	4619      	mov	r1, r3
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	440b      	add	r3, r1
 80014e8:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80014f0:	3301      	adds	r3, #1
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    modH->au8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001500:	4619      	mov	r1, r3
 8001502:	89fb      	ldrh	r3, [r7, #14]
 8001504:	b2da      	uxtb	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	440b      	add	r3, r1
 800150a:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001512:	3301      	adds	r3, #1
 8001514:	b2da      	uxtb	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    if (modH->EN_Port != NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d007      	beq.n	8001534 <sendTxBuffer+0x80>
    {
        // set RS485 transceiver to transmit mode
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68d8      	ldr	r0, [r3, #12]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	8a1b      	ldrh	r3, [r3, #16]
 800152c:	2201      	movs	r2, #1
 800152e:	4619      	mov	r1, r3
 8001530:	f001 fb04 	bl	8002b3c <HAL_GPIO_WritePin>
    }

    // transfer buffer to serial line
    //port->write( au8Buffer, u8BufferSize );
    //HAL_UART_Transmit(modH->port, modH->au8Buffer , modH->u8BufferSize, 100);
    HAL_UART_Transmit_IT(modH->port, modH->au8Buffer,  modH->u8BufferSize);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6858      	ldr	r0, [r3, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f103 0113 	add.w	r1, r3, #19
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001544:	b29b      	uxth	r3, r3
 8001546:	461a      	mov	r2, r3
 8001548:	f002 ffce 	bl	80044e8 <HAL_UART_Transmit_IT>

    ulTaskNotifyTake(pdTRUE, portMAX_DELAY); //wait notification from TXE interrupt
 800154c:	f04f 31ff 	mov.w	r1, #4294967295
 8001550:	2001      	movs	r0, #1
 8001552:	f006 fdf1 	bl	8008138 <ulTaskNotifyTake>


     if (modH->EN_Port != NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d018      	beq.n	8001590 <sendTxBuffer+0xdc>
     {
         // must wait transmission end before changing pin state
         //return RS485 transceiver to receive mode


    	 while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )  //USART_SR_TC
 800155e:	e007      	b.n	8001570 <sendTxBuffer+0xbc>
	   	 {
    		taskYIELD();
 8001560:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <sendTxBuffer+0x12c>)
 8001562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	f3bf 8f4f 	dsb	sy
 800156c:	f3bf 8f6f 	isb	sy
    	 while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )  //USART_SR_TC
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0ef      	beq.n	8001560 <sendTxBuffer+0xac>
    	 }
    	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68d8      	ldr	r0, [r3, #12]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	8a1b      	ldrh	r3, [r3, #16]
 8001588:	2200      	movs	r2, #0
 800158a:	4619      	mov	r1, r3
 800158c:	f001 fad6 	bl	8002b3c <HAL_GPIO_WritePin>
     }

     xQueueGenericReset(modH->QueueModbusHandle, pdFALSE);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f004 fe68 	bl	800626c <xQueueGenericReset>

     modH->u8BufferSize = 0;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

     // set timeout for master query
     if(modH->uiModbusType == MASTER_RTU )
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b04      	cmp	r3, #4
 80015aa:	d10c      	bne.n	80015c6 <sendTxBuffer+0x112>
     {
 		xTimerReset(modH->xTimerTimeout,0);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80015b2:	f006 f8cd 	bl	8007750 <xTaskGetTickCount>
 80015b6:	4602      	mov	r2, r0
 80015b8:	2300      	movs	r3, #0
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	2300      	movs	r3, #0
 80015be:	2102      	movs	r1, #2
 80015c0:	4620      	mov	r0, r4
 80015c2:	f006 ffc5 	bl	8008550 <xTimerGenericCommand>
     }

     // increase message counter
     modH->u16OutCnt++;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80015cc:	3301      	adds	r3, #1
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

}
 80015d6:	bf00      	nop
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd90      	pop	{r4, r7, pc}
 80015de:	bf00      	nop
 80015e0:	e000ed04 	.word	0xe000ed04

080015e4 <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
    uint8_t u8currentRegister, u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	7d5a      	ldrb	r2, [r3, #21]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	7d9b      	ldrb	r3, [r3, #22]
 80015f4:	4619      	mov	r1, r3
 80015f6:	4610      	mov	r0, r2
 80015f8:	f7ff fee4 	bl	80013c4 <word>
 80015fc:	4603      	mov	r3, r0
 80015fe:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	7dda      	ldrb	r2, [r3, #23]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	7e1b      	ldrb	r3, [r3, #24]
 8001608:	4619      	mov	r1, r3
 800160a:	4610      	mov	r0, r2
 800160c:	f7ff feda 	bl	80013c4 <word>
 8001610:	4603      	mov	r3, r0
 8001612:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8001614:	8a3b      	ldrh	r3, [r7, #16]
 8001616:	08db      	lsrs	r3, r3, #3
 8001618:	b29b      	uxth	r3, r3
 800161a:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 800161c:	8a3b      	ldrh	r3, [r7, #16]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	b29b      	uxth	r3, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	d002      	beq.n	800162e <process_FC1+0x4a>
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	3301      	adds	r3, #1
 800162c:	75fb      	strb	r3, [r7, #23]
    modH->au8Buffer[ ADD_HI ]  = u8bytesno;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	7dfa      	ldrb	r2, [r7, #23]
 8001632:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2203      	movs	r2, #3
 8001638:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    modH->au8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001642:	461a      	mov	r2, r3
 8001644:	7dfb      	ldrb	r3, [r7, #23]
 8001646:	4413      	add	r3, r2
 8001648:	3b01      	subs	r3, #1
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	2200      	movs	r2, #0
 8001650:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8001656:	2300      	movs	r3, #0
 8001658:	82bb      	strh	r3, [r7, #20]
 800165a:	e058      	b.n	800170e <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 800165c:	8a7a      	ldrh	r2, [r7, #18]
 800165e:	8abb      	ldrh	r3, [r7, #20]
 8001660:	4413      	add	r3, r2
 8001662:	81bb      	strh	r3, [r7, #12]
        u8currentRegister = (uint8_t) (u16coil / 16);
 8001664:	89bb      	ldrh	r3, [r7, #12]
 8001666:	091b      	lsrs	r3, r3, #4
 8001668:	b29b      	uxth	r3, r3
 800166a:	72fb      	strb	r3, [r7, #11]
        u8currentBit = (uint8_t) (u16coil % 16);
 800166c:	89bb      	ldrh	r3, [r7, #12]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	72bb      	strb	r3, [r7, #10]

        bitWrite(
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800167a:	7afb      	ldrb	r3, [r7, #11]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4413      	add	r3, r2
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	7abb      	ldrb	r3, [r7, #10]
 8001686:	fa42 f303 	asr.w	r3, r2, r3
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d014      	beq.n	80016bc <process_FC1+0xd8>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001698:	461a      	mov	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	7cda      	ldrb	r2, [r3, #19]
 80016a0:	7dbb      	ldrb	r3, [r7, #22]
 80016a2:	2101      	movs	r1, #1
 80016a4:	fa01 f303 	lsl.w	r3, r1, r3
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	f891 1053 	ldrb.w	r1, [r1, #83]	; 0x53
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	440b      	add	r3, r1
 80016b8:	74da      	strb	r2, [r3, #19]
 80016ba:	e015      	b.n	80016e8 <process_FC1+0x104>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80016c2:	461a      	mov	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4413      	add	r3, r2
 80016c8:	7cda      	ldrb	r2, [r3, #19]
 80016ca:	7dbb      	ldrb	r3, [r7, #22]
 80016cc:	2101      	movs	r1, #1
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	f891 1053 	ldrb.w	r1, [r1, #83]	; 0x53
 80016de:	4013      	ands	r3, r2
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	440b      	add	r3, r1
 80016e6:	74da      	strb	r2, [r3, #19]
        	modH->au8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->au16regs[ u8currentRegister ], u8currentBit ) );
        u8bitsno ++;
 80016e8:	7dbb      	ldrb	r3, [r7, #22]
 80016ea:	3301      	adds	r3, #1
 80016ec:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 80016ee:	7dbb      	ldrb	r3, [r7, #22]
 80016f0:	2b07      	cmp	r3, #7
 80016f2:	d909      	bls.n	8001708 <process_FC1+0x124>
        {
            u8bitsno = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80016fe:	3301      	adds	r3, #1
 8001700:	b2da      	uxtb	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8001708:	8abb      	ldrh	r3, [r7, #20]
 800170a:	3301      	adds	r3, #1
 800170c:	82bb      	strh	r3, [r7, #20]
 800170e:	8aba      	ldrh	r2, [r7, #20]
 8001710:	8a3b      	ldrh	r3, [r7, #16]
 8001712:	429a      	cmp	r2, r3
 8001714:	d3a2      	bcc.n	800165c <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8001716:	8a3b      	ldrh	r3, [r7, #16]
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	b29b      	uxth	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d007      	beq.n	8001732 <process_FC1+0x14e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001728:	3301      	adds	r3, #1
 800172a:	b2da      	uxtb	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    u8CopyBufferSize = modH->u8BufferSize +2;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001738:	3302      	adds	r3, #2
 800173a:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff feb9 	bl	80014b4 <sendTxBuffer>
    return u8CopyBufferSize;
 8001742:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b084      	sub	sp, #16
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]

    uint8_t u8StartAdd = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	7d5a      	ldrb	r2, [r3, #21]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	7d9b      	ldrb	r3, [r3, #22]
 800175e:	4619      	mov	r1, r3
 8001760:	4610      	mov	r0, r2
 8001762:	f7ff fe2f 	bl	80013c4 <word>
 8001766:	4603      	mov	r3, r0
 8001768:	73bb      	strb	r3, [r7, #14]
    uint8_t u8regsno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	7dda      	ldrb	r2, [r3, #23]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	7e1b      	ldrb	r3, [r3, #24]
 8001772:	4619      	mov	r1, r3
 8001774:	4610      	mov	r0, r2
 8001776:	f7ff fe25 	bl	80013c4 <word>
 800177a:	4603      	mov	r3, r0
 800177c:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint8_t i;

    modH->au8Buffer[ 2 ]       = u8regsno * 2;
 800177e:	7b7b      	ldrb	r3, [r7, #13]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	b2da      	uxtb	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2203      	movs	r2, #3
 800178c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 8001790:	7bbb      	ldrb	r3, [r7, #14]
 8001792:	73fb      	strb	r3, [r7, #15]
 8001794:	e030      	b.n	80017f8 <process_FC3+0xaa>
    {
    	modH->au8Buffer[ modH->u8BufferSize ] = highByte(modH->au16regs[i]);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	4413      	add	r3, r2
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	0a1b      	lsrs	r3, r3, #8
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80017ac:	4619      	mov	r1, r3
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	440b      	add	r3, r1
 80017b4:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80017bc:	3301      	adds	r3, #1
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    	modH->au8Buffer[ modH->u8BufferSize ] = lowByte(modH->au16regs[i]);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	4413      	add	r3, r2
 80017d0:	881a      	ldrh	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80017d8:	4619      	mov	r1, r3
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	440b      	add	r3, r1
 80017e0:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80017e8:	3301      	adds	r3, #1
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	3301      	adds	r3, #1
 80017f6:	73fb      	strb	r3, [r7, #15]
 80017f8:	7bfa      	ldrb	r2, [r7, #15]
 80017fa:	7bb9      	ldrb	r1, [r7, #14]
 80017fc:	7b7b      	ldrb	r3, [r7, #13]
 80017fe:	440b      	add	r3, r1
 8001800:	429a      	cmp	r2, r3
 8001802:	dbc8      	blt.n	8001796 <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800180a:	3302      	adds	r3, #2
 800180c:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff fe50 	bl	80014b4 <sendTxBuffer>

    return u8CopyBufferSize;
 8001814:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
    uint8_t u8currentRegister, u8currentBit;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7d5a      	ldrb	r2, [r3, #21]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	7d9b      	ldrb	r3, [r3, #22]
 8001830:	4619      	mov	r1, r3
 8001832:	4610      	mov	r0, r2
 8001834:	f7ff fdc6 	bl	80013c4 <word>
 8001838:	4603      	mov	r3, r0
 800183a:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u8currentRegister = (uint8_t) (u16coil / 16);
 800183c:	89fb      	ldrh	r3, [r7, #14]
 800183e:	091b      	lsrs	r3, r3, #4
 8001840:	b29b      	uxth	r3, r3
 8001842:	737b      	strb	r3, [r7, #13]
    u8currentBit = (uint8_t) (u16coil % 16);
 8001844:	89fb      	ldrh	r3, [r7, #14]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	f003 030f 	and.w	r3, r3, #15
 800184c:	733b      	strb	r3, [r7, #12]

    // write to coil
    bitWrite(
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	7ddb      	ldrb	r3, [r3, #23]
 8001852:	2bff      	cmp	r3, #255	; 0xff
 8001854:	d113      	bne.n	800187e <process_FC5+0x5e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800185a:	7b7b      	ldrb	r3, [r7, #13]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	4413      	add	r3, r2
 8001860:	8819      	ldrh	r1, [r3, #0]
 8001862:	7b3b      	ldrb	r3, [r7, #12]
 8001864:	2201      	movs	r2, #1
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	b29a      	uxth	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8001870:	7b7b      	ldrb	r3, [r7, #13]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4403      	add	r3, r0
 8001876:	430a      	orrs	r2, r1
 8001878:	b292      	uxth	r2, r2
 800187a:	801a      	strh	r2, [r3, #0]
 800187c:	e014      	b.n	80018a8 <process_FC5+0x88>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001882:	7b7b      	ldrb	r3, [r7, #13]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4413      	add	r3, r2
 8001888:	8819      	ldrh	r1, [r3, #0]
 800188a:	7b3b      	ldrb	r3, [r7, #12]
 800188c:	2201      	movs	r2, #1
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	b29b      	uxth	r3, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	b29a      	uxth	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800189c:	7b7b      	ldrb	r3, [r7, #13]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	4403      	add	r3, r0
 80018a2:	400a      	ands	r2, r1
 80018a4:	b292      	uxth	r2, r2
 80018a6:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->au8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2206      	movs	r2, #6
 80018ac:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    u8CopyBufferSize =  modH->u8BufferSize +2;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80018b6:	3302      	adds	r3, #2
 80018b8:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff fdfa 	bl	80014b4 <sendTxBuffer>

    return u8CopyBufferSize;
 80018c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]

    uint8_t u8add = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	7d5a      	ldrb	r2, [r3, #21]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7d9b      	ldrb	r3, [r3, #22]
 80018dc:	4619      	mov	r1, r3
 80018de:	4610      	mov	r0, r2
 80018e0:	f7ff fd70 	bl	80013c4 <word>
 80018e4:	4603      	mov	r3, r0
 80018e6:	73fb      	strb	r3, [r7, #15]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7dda      	ldrb	r2, [r3, #23]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	7e1b      	ldrb	r3, [r3, #24]
 80018f0:	4619      	mov	r1, r3
 80018f2:	4610      	mov	r0, r2
 80018f4:	f7ff fd66 	bl	80013c4 <word>
 80018f8:	4603      	mov	r3, r0
 80018fa:	81bb      	strh	r3, [r7, #12]

    modH->au16regs[ u8add ] = u16val;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4413      	add	r3, r2
 8001906:	89ba      	ldrh	r2, [r7, #12]
 8001908:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2206      	movs	r2, #6
 800190e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    u8CopyBufferSize = modH->u8BufferSize +2;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001918:	3302      	adds	r3, #2
 800191a:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff fdc9 	bl	80014b4 <sendTxBuffer>

    return u8CopyBufferSize;
 8001922:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	7d5a      	ldrb	r2, [r3, #21]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	7d9b      	ldrb	r3, [r3, #22]
 800193e:	4619      	mov	r1, r3
 8001940:	4610      	mov	r0, r2
 8001942:	f7ff fd3f 	bl	80013c4 <word>
 8001946:	4603      	mov	r3, r0
 8001948:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	7dda      	ldrb	r2, [r3, #23]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	7e1b      	ldrb	r3, [r3, #24]
 8001952:	4619      	mov	r1, r3
 8001954:	4610      	mov	r0, r2
 8001956:	f7ff fd35 	bl	80013c4 <word>
 800195a:	4603      	mov	r3, r0
 800195c:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 8001962:	2307      	movs	r3, #7
 8001964:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8001966:	2300      	movs	r3, #0
 8001968:	82bb      	strh	r3, [r7, #20]
 800196a:	e055      	b.n	8001a18 <process_FC15+0xea>
    {

        u16coil = u16StartCoil + u16currentCoil;
 800196c:	8a7a      	ldrh	r2, [r7, #18]
 800196e:	8abb      	ldrh	r3, [r7, #20]
 8001970:	4413      	add	r3, r2
 8001972:	81bb      	strh	r3, [r7, #12]
        u8currentRegister = (uint8_t) (u16coil / 16);
 8001974:	89bb      	ldrh	r3, [r7, #12]
 8001976:	091b      	lsrs	r3, r3, #4
 8001978:	b29b      	uxth	r3, r3
 800197a:	72fb      	strb	r3, [r7, #11]
        u8currentBit = (uint8_t) (u16coil % 16);
 800197c:	89bb      	ldrh	r3, [r7, #12]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	f003 030f 	and.w	r3, r3, #15
 8001984:	72bb      	strb	r3, [r7, #10]

        bTemp = bitRead(
 8001986:	7dfb      	ldrb	r3, [r7, #23]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	4413      	add	r3, r2
 800198c:	7cdb      	ldrb	r3, [r3, #19]
 800198e:	461a      	mov	r2, r3
 8001990:	7dbb      	ldrb	r3, [r7, #22]
 8001992:	fa42 f303 	asr.w	r3, r2, r3
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	bf14      	ite	ne
 800199e:	2301      	movne	r3, #1
 80019a0:	2300      	moveq	r3, #0
 80019a2:	727b      	strb	r3, [r7, #9]
        			modH->au8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 80019a4:	7a7b      	ldrb	r3, [r7, #9]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d013      	beq.n	80019d2 <process_FC15+0xa4>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019ae:	7afb      	ldrb	r3, [r7, #11]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	8819      	ldrh	r1, [r3, #0]
 80019b6:	7abb      	ldrb	r3, [r7, #10]
 80019b8:	2201      	movs	r2, #1
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	b29a      	uxth	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80019c4:	7afb      	ldrb	r3, [r7, #11]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4403      	add	r3, r0
 80019ca:	430a      	orrs	r2, r1
 80019cc:	b292      	uxth	r2, r2
 80019ce:	801a      	strh	r2, [r3, #0]
 80019d0:	e014      	b.n	80019fc <process_FC15+0xce>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019d6:	7afb      	ldrb	r3, [r7, #11]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	4413      	add	r3, r2
 80019dc:	8819      	ldrh	r1, [r3, #0]
 80019de:	7abb      	ldrb	r3, [r7, #10]
 80019e0:	2201      	movs	r2, #1
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80019f0:	7afb      	ldrb	r3, [r7, #11]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4403      	add	r3, r0
 80019f6:	400a      	ands	r2, r1
 80019f8:	b292      	uxth	r2, r2
 80019fa:	801a      	strh	r2, [r3, #0]
            modH->au16regs[ u8currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 80019fc:	7dbb      	ldrb	r3, [r7, #22]
 80019fe:	3301      	adds	r3, #1
 8001a00:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8001a02:	7dbb      	ldrb	r3, [r7, #22]
 8001a04:	2b07      	cmp	r3, #7
 8001a06:	d904      	bls.n	8001a12 <process_FC15+0xe4>
        {
            u8bitsno = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 8001a0c:	7dfb      	ldrb	r3, [r7, #23]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8001a12:	8abb      	ldrh	r3, [r7, #20]
 8001a14:	3301      	adds	r3, #1
 8001a16:	82bb      	strh	r3, [r7, #20]
 8001a18:	8aba      	ldrh	r2, [r7, #20]
 8001a1a:	8a3b      	ldrh	r3, [r7, #16]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d3a5      	bcc.n	800196c <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2206      	movs	r2, #6
 8001a24:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    u8CopyBufferSize = modH->u8BufferSize +2;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001a2e:	3302      	adds	r3, #2
 8001a30:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff fd3e 	bl	80014b4 <sendTxBuffer>
    return u8CopyBufferSize;
 8001a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
    uint8_t u8StartAdd = modH->au8Buffer[ ADD_HI ] << 8 | modH->au8Buffer[ ADD_LO ];
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7d5b      	ldrb	r3, [r3, #21]
 8001a50:	021b      	lsls	r3, r3, #8
 8001a52:	b25a      	sxtb	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	7d9b      	ldrb	r3, [r3, #22]
 8001a58:	b25b      	sxtb	r3, r3
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	b25b      	sxtb	r3, r3
 8001a5e:	73bb      	strb	r3, [r7, #14]
    uint8_t u8regsno = modH->au8Buffer[ NB_HI ] << 8 | modH->au8Buffer[ NB_LO ];
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7ddb      	ldrb	r3, [r3, #23]
 8001a64:	021b      	lsls	r3, r3, #8
 8001a66:	b25a      	sxtb	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	7e1b      	ldrb	r3, [r3, #24]
 8001a6c:	b25b      	sxtb	r3, r3
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	b25b      	sxtb	r3, r3
 8001a72:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint8_t i;
    uint16_t temp;

    // build header
    modH->au8Buffer[ NB_HI ]   = 0;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	75da      	strb	r2, [r3, #23]
    modH->au8Buffer[ NB_LO ]   = u8regsno;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	7b7a      	ldrb	r2, [r7, #13]
 8001a7e:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2206      	movs	r2, #6
 8001a84:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    // write registers
    for (i = 0; i < u8regsno; i++)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	73fb      	strb	r3, [r7, #15]
 8001a8c:	e01c      	b.n	8001ac8 <process_FC16+0x84>
    {
        temp = word(
        		modH->au8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	3307      	adds	r3, #7
        temp = word(
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	4413      	add	r3, r2
 8001a98:	7cd8      	ldrb	r0, [r3, #19]
				modH->au8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	005b      	lsls	r3, r3, #1
        temp = word(
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	7cdb      	ldrb	r3, [r3, #19]
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f7ff fc8c 	bl	80013c4 <word>
 8001aac:	4603      	mov	r3, r0
 8001aae:	817b      	strh	r3, [r7, #10]

        modH->au16regs[ u8StartAdd + i ] = temp;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ab4:	7bb9      	ldrb	r1, [r7, #14]
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	440b      	add	r3, r1
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4413      	add	r3, r2
 8001abe:	897a      	ldrh	r2, [r7, #10]
 8001ac0:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u8regsno; i++)
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
 8001ac8:	7bfa      	ldrb	r2, [r7, #15]
 8001aca:	7b7b      	ldrb	r3, [r7, #13]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d3de      	bcc.n	8001a8e <process_FC16+0x4a>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fcea 	bl	80014b4 <sendTxBuffer>

    return u8CopyBufferSize;
 8001ae0:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001af2:	f000 fcd6 	bl	80024a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001af6:	f000 f863 	bl	8001bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001afa:	f000 f933 	bl	8001d64 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001afe:	f000 f901 	bl	8001d04 <MX_USART3_UART_Init>
  MX_UART4_Init();
 8001b02:	f000 f8cf 	bl	8001ca4 <MX_UART4_Init>




  uint8_t temp[5];
  temp[0] = 0xF1F6;
 8001b06:	23f6      	movs	r3, #246	; 0xf6
 8001b08:	743b      	strb	r3, [r7, #16]
  temp[1] = 0xF2F7;
 8001b0a:	23f7      	movs	r3, #247	; 0xf7
 8001b0c:	747b      	strb	r3, [r7, #17]
  temp[2] = 0xF3F8;
 8001b0e:	23f8      	movs	r3, #248	; 0xf8
 8001b10:	74bb      	strb	r3, [r7, #18]
  temp[3] = 0xF4F9;
 8001b12:	23f9      	movs	r3, #249	; 0xf9
 8001b14:	74fb      	strb	r3, [r7, #19]
  temp[4] = 0xF5FA;
 8001b16:	23fa      	movs	r3, #250	; 0xfa
 8001b18:	753b      	strb	r3, [r7, #20]


  modbus_t data_query;
  data_query.u8id = 0x0A;
 8001b1a:	230a      	movs	r3, #10
 8001b1c:	713b      	strb	r3, [r7, #4]
  data_query.u8fct = 3;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	717b      	strb	r3, [r7, #5]
  data_query.u16RegAdd = 0x04; // 40005
 8001b22:	2304      	movs	r3, #4
 8001b24:	80fb      	strh	r3, [r7, #6]
  data_query.u16CoilsNo = 0x05;
 8001b26:	2305      	movs	r3, #5
 8001b28:	813b      	strh	r3, [r7, #8]
  data_query.au16reg = &temp;
 8001b2a:	f107 0310 	add.w	r3, r7, #16
 8001b2e:	60fb      	str	r3, [r7, #12]


  /* Master initialization */
   ModbusH.uiModbusType = MASTER_RTU;
 8001b30:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <main+0xb8>)
 8001b32:	2204      	movs	r2, #4
 8001b34:	701a      	strb	r2, [r3, #0]
   ModbusH.port =  &huart4;
 8001b36:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <main+0xb8>)
 8001b38:	4a1b      	ldr	r2, [pc, #108]	; (8001ba8 <main+0xbc>)
 8001b3a:	605a      	str	r2, [r3, #4]
   ModbusH.u8id = 0; // Form master it must be 0
 8001b3c:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <main+0xb8>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	721a      	strb	r2, [r3, #8]
   ModbusH.u16timeOut = 1000;
 8001b42:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <main+0xb8>)
 8001b44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
   ModbusH.EN_Port = NULL;
 8001b4c:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <main+0xb8>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]
   ModbusH.EN_Port = EN_485_GPIO_Port;
 8001b52:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <main+0xb8>)
 8001b54:	4a15      	ldr	r2, [pc, #84]	; (8001bac <main+0xc0>)
 8001b56:	60da      	str	r2, [r3, #12]
   ModbusH.EN_Pin = EN_485_Pin;
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <main+0xb8>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	821a      	strh	r2, [r3, #16]
   ModbusH.u32overTime = 0;
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <main+0xb8>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	66da      	str	r2, [r3, #108]	; 0x6c
   ModbusH.au16regs = ModbusDATA;
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <main+0xb8>)
 8001b66:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <main+0xc4>)
 8001b68:	659a      	str	r2, [r3, #88]	; 0x58
   ModbusH.u8regsize= sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <main+0xb8>)
 8001b6c:	2208      	movs	r2, #8
 8001b6e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
   //Initialize Modbus library
   ModbusInit(&ModbusH);
 8001b72:	480c      	ldr	r0, [pc, #48]	; (8001ba4 <main+0xb8>)
 8001b74:	f7fe fd36 	bl	80005e4 <ModbusInit>
   //Start capturing traffic on serial Port
   ModbusStart(&ModbusH);
 8001b78:	480a      	ldr	r0, [pc, #40]	; (8001ba4 <main+0xb8>)
 8001b7a:	f7fe fdbb 	bl	80006f4 <ModbusStart>


//   SendQuery(&ModbusH,data_query);
   ModbusQuery(&ModbusH,data_query);
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b82:	4808      	ldr	r0, [pc, #32]	; (8001ba4 <main+0xb8>)
 8001b84:	f7fe ff3a 	bl	80009fc <ModbusQuery>
//   ModbusStart(&ModbusH2);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b88:	f004 f828 	bl	8005bdc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001b8c:	4a09      	ldr	r2, [pc, #36]	; (8001bb4 <main+0xc8>)
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4809      	ldr	r0, [pc, #36]	; (8001bb8 <main+0xcc>)
 8001b92:	f004 f88d 	bl	8005cb0 <osThreadNew>
 8001b96:	4603      	mov	r3, r0
 8001b98:	4a08      	ldr	r2, [pc, #32]	; (8001bbc <main+0xd0>)
 8001b9a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001b9c:	f004 f852 	bl	8005c44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <main+0xb4>
 8001ba2:	bf00      	nop
 8001ba4:	200001a8 	.word	0x200001a8
 8001ba8:	2000009c 	.word	0x2000009c
 8001bac:	40020800 	.word	0x40020800
 8001bb0:	20000234 	.word	0x20000234
 8001bb4:	0800a568 	.word	0x0800a568
 8001bb8:	08001f91 	.word	0x08001f91
 8001bbc:	200001a4 	.word	0x200001a4

08001bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b094      	sub	sp, #80	; 0x50
 8001bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bc6:	f107 031c 	add.w	r3, r7, #28
 8001bca:	2234      	movs	r2, #52	; 0x34
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f007 fd1d 	bl	800960e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd4:	f107 0308 	add.w	r3, r7, #8
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001be4:	f000 ffc4 	bl	8002b70 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be8:	4b2c      	ldr	r3, [pc, #176]	; (8001c9c <SystemClock_Config+0xdc>)
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	4a2b      	ldr	r2, [pc, #172]	; (8001c9c <SystemClock_Config+0xdc>)
 8001bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf4:	4b29      	ldr	r3, [pc, #164]	; (8001c9c <SystemClock_Config+0xdc>)
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c00:	4b27      	ldr	r3, [pc, #156]	; (8001ca0 <SystemClock_Config+0xe0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c08:	4a25      	ldr	r2, [pc, #148]	; (8001ca0 <SystemClock_Config+0xe0>)
 8001c0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	4b23      	ldr	r3, [pc, #140]	; (8001ca0 <SystemClock_Config+0xe0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c20:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c24:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c26:	2302      	movs	r3, #2
 8001c28:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c30:	2304      	movs	r3, #4
 8001c32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001c34:	2360      	movs	r3, #96	; 0x60
 8001c36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c3c:	2304      	movs	r3, #4
 8001c3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c40:	2302      	movs	r3, #2
 8001c42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c44:	f107 031c 	add.w	r3, r7, #28
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 fff1 	bl	8002c30 <HAL_RCC_OscConfig>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c54:	f000 f9b3 	bl	8001fbe <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c58:	f000 ff9a 	bl	8002b90 <HAL_PWREx_EnableOverDrive>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c62:	f000 f9ac 	bl	8001fbe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c66:	230f      	movs	r3, #15
 8001c68:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c7c:	f107 0308 	add.w	r3, r7, #8
 8001c80:	2103      	movs	r1, #3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f001 fa82 	bl	800318c <HAL_RCC_ClockConfig>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001c8e:	f000 f996 	bl	8001fbe <Error_Handler>
  }
}
 8001c92:	bf00      	nop
 8001c94:	3750      	adds	r7, #80	; 0x50
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40007000 	.word	0x40007000

08001ca4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ca8:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <MX_UART4_Init+0x58>)
 8001caa:	4a15      	ldr	r2, [pc, #84]	; (8001d00 <MX_UART4_Init+0x5c>)
 8001cac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001cae:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <MX_UART4_Init+0x58>)
 8001cb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cb4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <MX_UART4_Init+0x58>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <MX_UART4_Init+0x58>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <MX_UART4_Init+0x58>)
 8001cc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cc8:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001cca:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <MX_UART4_Init+0x58>)
 8001ccc:	220c      	movs	r2, #12
 8001cce:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <MX_UART4_Init+0x58>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <MX_UART4_Init+0x58>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cdc:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <MX_UART4_Init+0x58>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <MX_UART4_Init+0x58>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001ce8:	4804      	ldr	r0, [pc, #16]	; (8001cfc <MX_UART4_Init+0x58>)
 8001cea:	f002 fbaf 	bl	800444c <HAL_UART_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_UART4_Init+0x54>
  {
    Error_Handler();
 8001cf4:	f000 f963 	bl	8001fbe <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	2000009c 	.word	0x2000009c
 8001d00:	40004c00 	.word	0x40004c00

08001d04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d08:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <MX_USART3_UART_Init+0x58>)
 8001d0a:	4a15      	ldr	r2, [pc, #84]	; (8001d60 <MX_USART3_UART_Init+0x5c>)
 8001d0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d0e:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <MX_USART3_UART_Init+0x58>)
 8001d10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <MX_USART3_UART_Init+0x58>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <MX_USART3_UART_Init+0x58>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <MX_USART3_UART_Init+0x58>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <MX_USART3_UART_Init+0x58>)
 8001d2a:	220c      	movs	r2, #12
 8001d2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <MX_USART3_UART_Init+0x58>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <MX_USART3_UART_Init+0x58>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d3a:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <MX_USART3_UART_Init+0x58>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <MX_USART3_UART_Init+0x58>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d46:	4805      	ldr	r0, [pc, #20]	; (8001d5c <MX_USART3_UART_Init+0x58>)
 8001d48:	f002 fb80 	bl	800444c <HAL_UART_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001d52:	f000 f934 	bl	8001fbe <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000120 	.word	0x20000120
 8001d60:	40004800 	.word	0x40004800

08001d64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08c      	sub	sp, #48	; 0x30
 8001d68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6a:	f107 031c 	add.w	r3, r7, #28
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]
 8001d76:	60da      	str	r2, [r3, #12]
 8001d78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7a:	4b80      	ldr	r3, [pc, #512]	; (8001f7c <MX_GPIO_Init+0x218>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a7f      	ldr	r2, [pc, #508]	; (8001f7c <MX_GPIO_Init+0x218>)
 8001d80:	f043 0304 	orr.w	r3, r3, #4
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b7d      	ldr	r3, [pc, #500]	; (8001f7c <MX_GPIO_Init+0x218>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	61bb      	str	r3, [r7, #24]
 8001d90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d92:	4b7a      	ldr	r3, [pc, #488]	; (8001f7c <MX_GPIO_Init+0x218>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a79      	ldr	r2, [pc, #484]	; (8001f7c <MX_GPIO_Init+0x218>)
 8001d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b77      	ldr	r3, [pc, #476]	; (8001f7c <MX_GPIO_Init+0x218>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	4b74      	ldr	r3, [pc, #464]	; (8001f7c <MX_GPIO_Init+0x218>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a73      	ldr	r2, [pc, #460]	; (8001f7c <MX_GPIO_Init+0x218>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b71      	ldr	r3, [pc, #452]	; (8001f7c <MX_GPIO_Init+0x218>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc2:	4b6e      	ldr	r3, [pc, #440]	; (8001f7c <MX_GPIO_Init+0x218>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a6d      	ldr	r2, [pc, #436]	; (8001f7c <MX_GPIO_Init+0x218>)
 8001dc8:	f043 0302 	orr.w	r3, r3, #2
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b6b      	ldr	r3, [pc, #428]	; (8001f7c <MX_GPIO_Init+0x218>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dda:	4b68      	ldr	r3, [pc, #416]	; (8001f7c <MX_GPIO_Init+0x218>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a67      	ldr	r2, [pc, #412]	; (8001f7c <MX_GPIO_Init+0x218>)
 8001de0:	f043 0308 	orr.w	r3, r3, #8
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b65      	ldr	r3, [pc, #404]	; (8001f7c <MX_GPIO_Init+0x218>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001df2:	4b62      	ldr	r3, [pc, #392]	; (8001f7c <MX_GPIO_Init+0x218>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	4a61      	ldr	r2, [pc, #388]	; (8001f7c <MX_GPIO_Init+0x218>)
 8001df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfe:	4b5f      	ldr	r3, [pc, #380]	; (8001f7c <MX_GPIO_Init+0x218>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_485_GPIO_Port, EN_485_Pin, GPIO_PIN_RESET);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	485c      	ldr	r0, [pc, #368]	; (8001f80 <MX_GPIO_Init+0x21c>)
 8001e10:	f000 fe94 	bl	8002b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001e14:	2200      	movs	r2, #0
 8001e16:	f244 0181 	movw	r1, #16513	; 0x4081
 8001e1a:	485a      	ldr	r0, [pc, #360]	; (8001f84 <MX_GPIO_Init+0x220>)
 8001e1c:	f000 fe8e 	bl	8002b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001e20:	2200      	movs	r2, #0
 8001e22:	2140      	movs	r1, #64	; 0x40
 8001e24:	4858      	ldr	r0, [pc, #352]	; (8001f88 <MX_GPIO_Init+0x224>)
 8001e26:	f000 fe89 	bl	8002b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001e2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e30:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001e3a:	f107 031c 	add.w	r3, r7, #28
 8001e3e:	4619      	mov	r1, r3
 8001e40:	484f      	ldr	r0, [pc, #316]	; (8001f80 <MX_GPIO_Init+0x21c>)
 8001e42:	f000 fccf 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_485_Pin */
  GPIO_InitStruct.Pin = EN_485_Pin;
 8001e46:	2301      	movs	r3, #1
 8001e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e52:	2300      	movs	r3, #0
 8001e54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(EN_485_GPIO_Port, &GPIO_InitStruct);
 8001e56:	f107 031c 	add.w	r3, r7, #28
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4848      	ldr	r0, [pc, #288]	; (8001f80 <MX_GPIO_Init+0x21c>)
 8001e5e:	f000 fcc1 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001e62:	2332      	movs	r3, #50	; 0x32
 8001e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e66:	2302      	movs	r3, #2
 8001e68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e72:	230b      	movs	r3, #11
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4840      	ldr	r0, [pc, #256]	; (8001f80 <MX_GPIO_Init+0x21c>)
 8001e7e:	f000 fcb1 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001e82:	2386      	movs	r3, #134	; 0x86
 8001e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e92:	230b      	movs	r3, #11
 8001e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e96:	f107 031c 	add.w	r3, r7, #28
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	483b      	ldr	r0, [pc, #236]	; (8001f8c <MX_GPIO_Init+0x228>)
 8001e9e:	f000 fca1 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001ea2:	f244 0381 	movw	r3, #16513	; 0x4081
 8001ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb4:	f107 031c 	add.w	r3, r7, #28
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4832      	ldr	r0, [pc, #200]	; (8001f84 <MX_GPIO_Init+0x220>)
 8001ebc:	f000 fc92 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001ec0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ed2:	230b      	movs	r3, #11
 8001ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001ed6:	f107 031c 	add.w	r3, r7, #28
 8001eda:	4619      	mov	r1, r3
 8001edc:	4829      	ldr	r0, [pc, #164]	; (8001f84 <MX_GPIO_Init+0x220>)
 8001ede:	f000 fc81 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001ee2:	2340      	movs	r3, #64	; 0x40
 8001ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001ef2:	f107 031c 	add.w	r3, r7, #28
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4823      	ldr	r0, [pc, #140]	; (8001f88 <MX_GPIO_Init+0x224>)
 8001efa:	f000 fc73 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f02:	2300      	movs	r3, #0
 8001f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f0a:	f107 031c 	add.w	r3, r7, #28
 8001f0e:	4619      	mov	r1, r3
 8001f10:	481d      	ldr	r0, [pc, #116]	; (8001f88 <MX_GPIO_Init+0x224>)
 8001f12:	f000 fc67 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001f16:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f24:	2303      	movs	r3, #3
 8001f26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f28:	230a      	movs	r3, #10
 8001f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2c:	f107 031c 	add.w	r3, r7, #28
 8001f30:	4619      	mov	r1, r3
 8001f32:	4816      	ldr	r0, [pc, #88]	; (8001f8c <MX_GPIO_Init+0x228>)
 8001f34:	f000 fc56 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f46:	f107 031c 	add.w	r3, r7, #28
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	480f      	ldr	r0, [pc, #60]	; (8001f8c <MX_GPIO_Init+0x228>)
 8001f4e:	f000 fc49 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001f52:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001f56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f60:	2303      	movs	r3, #3
 8001f62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f64:	230b      	movs	r3, #11
 8001f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f68:	f107 031c 	add.w	r3, r7, #28
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4806      	ldr	r0, [pc, #24]	; (8001f88 <MX_GPIO_Init+0x224>)
 8001f70:	f000 fc38 	bl	80027e4 <HAL_GPIO_Init>

}
 8001f74:	bf00      	nop
 8001f76:	3730      	adds	r7, #48	; 0x30
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40020800 	.word	0x40020800
 8001f84:	40020400 	.word	0x40020400
 8001f88:	40021800 	.word	0x40021800
 8001f8c:	40020000 	.word	0x40020000

08001f90 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f98:	2001      	movs	r0, #1
 8001f9a:	f003 ff2f 	bl	8005dfc <osDelay>
 8001f9e:	e7fb      	b.n	8001f98 <StartDefaultTask+0x8>

08001fa0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb0:	d101      	bne.n	8001fb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fb2:	f000 fa83 	bl	80024bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc2:	b672      	cpsid	i
}
 8001fc4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fc6:	e7fe      	b.n	8001fc6 <Error_Handler+0x8>

08001fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	4b11      	ldr	r3, [pc, #68]	; (8002014 <HAL_MspInit+0x4c>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	4a10      	ldr	r2, [pc, #64]	; (8002014 <HAL_MspInit+0x4c>)
 8001fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <HAL_MspInit+0x4c>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_MspInit+0x4c>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <HAL_MspInit+0x4c>)
 8001fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff2:	4b08      	ldr	r3, [pc, #32]	; (8002014 <HAL_MspInit+0x4c>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	210f      	movs	r1, #15
 8002002:	f06f 0001 	mvn.w	r0, #1
 8002006:	f000 fb31 	bl	800266c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40023800 	.word	0x40023800

08002018 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b0b0      	sub	sp, #192	; 0xc0
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002030:	f107 031c 	add.w	r3, r7, #28
 8002034:	2290      	movs	r2, #144	; 0x90
 8002036:	2100      	movs	r1, #0
 8002038:	4618      	mov	r0, r3
 800203a:	f007 fae8 	bl	800960e <memset>
  if(huart->Instance==UART4)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a5c      	ldr	r2, [pc, #368]	; (80021b4 <HAL_UART_MspInit+0x19c>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d166      	bne.n	8002116 <HAL_UART_MspInit+0xfe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002048:	f44f 7300 	mov.w	r3, #512	; 0x200
 800204c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800204e:	2300      	movs	r3, #0
 8002050:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002052:	f107 031c 	add.w	r3, r7, #28
 8002056:	4618      	mov	r0, r3
 8002058:	f001 faf0 	bl	800363c <HAL_RCCEx_PeriphCLKConfig>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002062:	f7ff ffac 	bl	8001fbe <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002066:	4b54      	ldr	r3, [pc, #336]	; (80021b8 <HAL_UART_MspInit+0x1a0>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	4a53      	ldr	r2, [pc, #332]	; (80021b8 <HAL_UART_MspInit+0x1a0>)
 800206c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002070:	6413      	str	r3, [r2, #64]	; 0x40
 8002072:	4b51      	ldr	r3, [pc, #324]	; (80021b8 <HAL_UART_MspInit+0x1a0>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800207a:	61bb      	str	r3, [r7, #24]
 800207c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207e:	4b4e      	ldr	r3, [pc, #312]	; (80021b8 <HAL_UART_MspInit+0x1a0>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a4d      	ldr	r2, [pc, #308]	; (80021b8 <HAL_UART_MspInit+0x1a0>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b4b      	ldr	r3, [pc, #300]	; (80021b8 <HAL_UART_MspInit+0x1a0>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002096:	4b48      	ldr	r3, [pc, #288]	; (80021b8 <HAL_UART_MspInit+0x1a0>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a47      	ldr	r2, [pc, #284]	; (80021b8 <HAL_UART_MspInit+0x1a0>)
 800209c:	f043 0304 	orr.w	r3, r3, #4
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b45      	ldr	r3, [pc, #276]	; (80021b8 <HAL_UART_MspInit+0x1a0>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020ae:	2301      	movs	r3, #1
 80020b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c0:	2303      	movs	r3, #3
 80020c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80020c6:	2308      	movs	r3, #8
 80020c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020cc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80020d0:	4619      	mov	r1, r3
 80020d2:	483a      	ldr	r0, [pc, #232]	; (80021bc <HAL_UART_MspInit+0x1a4>)
 80020d4:	f000 fb86 	bl	80027e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80020d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e0:	2302      	movs	r3, #2
 80020e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ec:	2303      	movs	r3, #3
 80020ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80020f2:	2308      	movs	r3, #8
 80020f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80020fc:	4619      	mov	r1, r3
 80020fe:	4830      	ldr	r0, [pc, #192]	; (80021c0 <HAL_UART_MspInit+0x1a8>)
 8002100:	f000 fb70 	bl	80027e4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002104:	2200      	movs	r2, #0
 8002106:	2105      	movs	r1, #5
 8002108:	2034      	movs	r0, #52	; 0x34
 800210a:	f000 faaf 	bl	800266c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800210e:	2034      	movs	r0, #52	; 0x34
 8002110:	f000 fac8 	bl	80026a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002114:	e049      	b.n	80021aa <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART3)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a2a      	ldr	r2, [pc, #168]	; (80021c4 <HAL_UART_MspInit+0x1ac>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d144      	bne.n	80021aa <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002120:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002124:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002126:	2300      	movs	r3, #0
 8002128:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800212a:	f107 031c 	add.w	r3, r7, #28
 800212e:	4618      	mov	r0, r3
 8002130:	f001 fa84 	bl	800363c <HAL_RCCEx_PeriphCLKConfig>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_UART_MspInit+0x126>
      Error_Handler();
 800213a:	f7ff ff40 	bl	8001fbe <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800213e:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <HAL_UART_MspInit+0x1a0>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	4a1d      	ldr	r2, [pc, #116]	; (80021b8 <HAL_UART_MspInit+0x1a0>)
 8002144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002148:	6413      	str	r3, [r2, #64]	; 0x40
 800214a:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <HAL_UART_MspInit+0x1a0>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002156:	4b18      	ldr	r3, [pc, #96]	; (80021b8 <HAL_UART_MspInit+0x1a0>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a17      	ldr	r2, [pc, #92]	; (80021b8 <HAL_UART_MspInit+0x1a0>)
 800215c:	f043 0308 	orr.w	r3, r3, #8
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <HAL_UART_MspInit+0x1a0>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800216e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002172:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002176:	2302      	movs	r3, #2
 8002178:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002182:	2303      	movs	r3, #3
 8002184:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002188:	2307      	movs	r3, #7
 800218a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800218e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002192:	4619      	mov	r1, r3
 8002194:	480c      	ldr	r0, [pc, #48]	; (80021c8 <HAL_UART_MspInit+0x1b0>)
 8002196:	f000 fb25 	bl	80027e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800219a:	2200      	movs	r2, #0
 800219c:	2105      	movs	r1, #5
 800219e:	2027      	movs	r0, #39	; 0x27
 80021a0:	f000 fa64 	bl	800266c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80021a4:	2027      	movs	r0, #39	; 0x27
 80021a6:	f000 fa7d 	bl	80026a4 <HAL_NVIC_EnableIRQ>
}
 80021aa:	bf00      	nop
 80021ac:	37c0      	adds	r7, #192	; 0xc0
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40004c00 	.word	0x40004c00
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40020000 	.word	0x40020000
 80021c0:	40020800 	.word	0x40020800
 80021c4:	40004800 	.word	0x40004800
 80021c8:	40020c00 	.word	0x40020c00

080021cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08c      	sub	sp, #48	; 0x30
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80021dc:	2200      	movs	r2, #0
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	201c      	movs	r0, #28
 80021e2:	f000 fa43 	bl	800266c <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021e6:	201c      	movs	r0, #28
 80021e8:	f000 fa5c 	bl	80026a4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80021ec:	4b20      	ldr	r3, [pc, #128]	; (8002270 <HAL_InitTick+0xa4>)
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	4a1f      	ldr	r2, [pc, #124]	; (8002270 <HAL_InitTick+0xa4>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6413      	str	r3, [r2, #64]	; 0x40
 80021f8:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <HAL_InitTick+0xa4>)
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002204:	f107 0210 	add.w	r2, r7, #16
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	4611      	mov	r1, r2
 800220e:	4618      	mov	r0, r3
 8002210:	f001 f9e2 	bl	80035d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002214:	f001 f9b8 	bl	8003588 <HAL_RCC_GetPCLK1Freq>
 8002218:	4603      	mov	r3, r0
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800221e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002220:	4a14      	ldr	r2, [pc, #80]	; (8002274 <HAL_InitTick+0xa8>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	0c9b      	lsrs	r3, r3, #18
 8002228:	3b01      	subs	r3, #1
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800222c:	4b12      	ldr	r3, [pc, #72]	; (8002278 <HAL_InitTick+0xac>)
 800222e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002232:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002234:	4b10      	ldr	r3, [pc, #64]	; (8002278 <HAL_InitTick+0xac>)
 8002236:	f240 32e7 	movw	r2, #999	; 0x3e7
 800223a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800223c:	4a0e      	ldr	r2, [pc, #56]	; (8002278 <HAL_InitTick+0xac>)
 800223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002240:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002242:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <HAL_InitTick+0xac>)
 8002244:	2200      	movs	r2, #0
 8002246:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HAL_InitTick+0xac>)
 800224a:	2200      	movs	r2, #0
 800224c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800224e:	480a      	ldr	r0, [pc, #40]	; (8002278 <HAL_InitTick+0xac>)
 8002250:	f001 fe1c 	bl	8003e8c <HAL_TIM_Base_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d104      	bne.n	8002264 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800225a:	4807      	ldr	r0, [pc, #28]	; (8002278 <HAL_InitTick+0xac>)
 800225c:	f001 fe78 	bl	8003f50 <HAL_TIM_Base_Start_IT>
 8002260:	4603      	mov	r3, r0
 8002262:	e000      	b.n	8002266 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
}
 8002266:	4618      	mov	r0, r3
 8002268:	3730      	adds	r7, #48	; 0x30
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800
 8002274:	431bde83 	.word	0x431bde83
 8002278:	20000244 	.word	0x20000244

0800227c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002280:	e7fe      	b.n	8002280 <NMI_Handler+0x4>

08002282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002286:	e7fe      	b.n	8002286 <HardFault_Handler+0x4>

08002288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800228c:	e7fe      	b.n	800228c <MemManage_Handler+0x4>

0800228e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002292:	e7fe      	b.n	8002292 <BusFault_Handler+0x4>

08002294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002298:	e7fe      	b.n	8002298 <UsageFault_Handler+0x4>

0800229a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022ac:	4802      	ldr	r0, [pc, #8]	; (80022b8 <TIM2_IRQHandler+0x10>)
 80022ae:	f001 fec7 	bl	8004040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000244 	.word	0x20000244

080022bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80022c0:	4802      	ldr	r0, [pc, #8]	; (80022cc <USART3_IRQHandler+0x10>)
 80022c2:	f002 f9cd 	bl	8004660 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000120 	.word	0x20000120

080022d0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80022d4:	4802      	ldr	r0, [pc, #8]	; (80022e0 <UART4_IRQHandler+0x10>)
 80022d6:	f002 f9c3 	bl	8004660 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	2000009c 	.word	0x2000009c

080022e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	e00a      	b.n	800230c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022f6:	f3af 8000 	nop.w
 80022fa:	4601      	mov	r1, r0
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	60ba      	str	r2, [r7, #8]
 8002302:	b2ca      	uxtb	r2, r1
 8002304:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	3301      	adds	r3, #1
 800230a:	617b      	str	r3, [r7, #20]
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	429a      	cmp	r2, r3
 8002312:	dbf0      	blt.n	80022f6 <_read+0x12>
	}

return len;
 8002314:	687b      	ldr	r3, [r7, #4]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b086      	sub	sp, #24
 8002322:	af00      	add	r7, sp, #0
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	e009      	b.n	8002344 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	60ba      	str	r2, [r7, #8]
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	3301      	adds	r3, #1
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	429a      	cmp	r2, r3
 800234a:	dbf1      	blt.n	8002330 <_write+0x12>
	}
	return len;
 800234c:	687b      	ldr	r3, [r7, #4]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <_close>:

int _close(int file)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
	return -1;
 800235e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800237e:	605a      	str	r2, [r3, #4]
	return 0;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <_isatty>:

int _isatty(int file)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
	return 1;
 8002396:	2301      	movs	r3, #1
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
	return 0;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023c8:	4a14      	ldr	r2, [pc, #80]	; (800241c <_sbrk+0x5c>)
 80023ca:	4b15      	ldr	r3, [pc, #84]	; (8002420 <_sbrk+0x60>)
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023d4:	4b13      	ldr	r3, [pc, #76]	; (8002424 <_sbrk+0x64>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d102      	bne.n	80023e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <_sbrk+0x64>)
 80023de:	4a12      	ldr	r2, [pc, #72]	; (8002428 <_sbrk+0x68>)
 80023e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <_sbrk+0x64>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d207      	bcs.n	8002400 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023f0:	f006 ffdc 	bl	80093ac <__errno>
 80023f4:	4603      	mov	r3, r0
 80023f6:	220c      	movs	r2, #12
 80023f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295
 80023fe:	e009      	b.n	8002414 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002400:	4b08      	ldr	r3, [pc, #32]	; (8002424 <_sbrk+0x64>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <_sbrk+0x64>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	4a05      	ldr	r2, [pc, #20]	; (8002424 <_sbrk+0x64>)
 8002410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002412:	68fb      	ldr	r3, [r7, #12]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20080000 	.word	0x20080000
 8002420:	00000400 	.word	0x00000400
 8002424:	20000290 	.word	0x20000290
 8002428:	20004cb0 	.word	0x20004cb0

0800242c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <SystemInit+0x20>)
 8002432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002436:	4a05      	ldr	r2, [pc, #20]	; (800244c <SystemInit+0x20>)
 8002438:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800243c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002450:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002488 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002454:	480d      	ldr	r0, [pc, #52]	; (800248c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002456:	490e      	ldr	r1, [pc, #56]	; (8002490 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002458:	4a0e      	ldr	r2, [pc, #56]	; (8002494 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800245a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800245c:	e002      	b.n	8002464 <LoopCopyDataInit>

0800245e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800245e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002462:	3304      	adds	r3, #4

08002464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002468:	d3f9      	bcc.n	800245e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800246a:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800246c:	4c0b      	ldr	r4, [pc, #44]	; (800249c <LoopFillZerobss+0x26>)
  movs r3, #0
 800246e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002470:	e001      	b.n	8002476 <LoopFillZerobss>

08002472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002474:	3204      	adds	r2, #4

08002476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002478:	d3fb      	bcc.n	8002472 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800247a:	f7ff ffd7 	bl	800242c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800247e:	f007 f891 	bl	80095a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002482:	f7ff fb33 	bl	8001aec <main>
  bx  lr    
 8002486:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002488:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800248c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002490:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002494:	0800a64c 	.word	0x0800a64c
  ldr r2, =_sbss
 8002498:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800249c:	20004cb0 	.word	0x20004cb0

080024a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024a0:	e7fe      	b.n	80024a0 <ADC_IRQHandler>

080024a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a6:	2003      	movs	r0, #3
 80024a8:	f000 f8d5 	bl	8002656 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ac:	200f      	movs	r0, #15
 80024ae:	f7ff fe8d 	bl	80021cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024b2:	f7ff fd89 	bl	8001fc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_IncTick+0x20>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	461a      	mov	r2, r3
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <HAL_IncTick+0x24>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4413      	add	r3, r2
 80024cc:	4a04      	ldr	r2, [pc, #16]	; (80024e0 <HAL_IncTick+0x24>)
 80024ce:	6013      	str	r3, [r2, #0]
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	20000008 	.word	0x20000008
 80024e0:	20000294 	.word	0x20000294

080024e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  return uwTick;
 80024e8:	4b03      	ldr	r3, [pc, #12]	; (80024f8 <HAL_GetTick+0x14>)
 80024ea:	681b      	ldr	r3, [r3, #0]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	20000294 	.word	0x20000294

080024fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800250c:	4b0b      	ldr	r3, [pc, #44]	; (800253c <__NVIC_SetPriorityGrouping+0x40>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002518:	4013      	ands	r3, r2
 800251a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002524:	4b06      	ldr	r3, [pc, #24]	; (8002540 <__NVIC_SetPriorityGrouping+0x44>)
 8002526:	4313      	orrs	r3, r2
 8002528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800252a:	4a04      	ldr	r2, [pc, #16]	; (800253c <__NVIC_SetPriorityGrouping+0x40>)
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	60d3      	str	r3, [r2, #12]
}
 8002530:	bf00      	nop
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	e000ed00 	.word	0xe000ed00
 8002540:	05fa0000 	.word	0x05fa0000

08002544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002548:	4b04      	ldr	r3, [pc, #16]	; (800255c <__NVIC_GetPriorityGrouping+0x18>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	0a1b      	lsrs	r3, r3, #8
 800254e:	f003 0307 	and.w	r3, r3, #7
}
 8002552:	4618      	mov	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	2b00      	cmp	r3, #0
 8002570:	db0b      	blt.n	800258a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	f003 021f 	and.w	r2, r3, #31
 8002578:	4907      	ldr	r1, [pc, #28]	; (8002598 <__NVIC_EnableIRQ+0x38>)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	2001      	movs	r0, #1
 8002582:	fa00 f202 	lsl.w	r2, r0, r2
 8002586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	e000e100 	.word	0xe000e100

0800259c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	6039      	str	r1, [r7, #0]
 80025a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	db0a      	blt.n	80025c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	490c      	ldr	r1, [pc, #48]	; (80025e8 <__NVIC_SetPriority+0x4c>)
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	0112      	lsls	r2, r2, #4
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	440b      	add	r3, r1
 80025c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c4:	e00a      	b.n	80025dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	4908      	ldr	r1, [pc, #32]	; (80025ec <__NVIC_SetPriority+0x50>)
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	3b04      	subs	r3, #4
 80025d4:	0112      	lsls	r2, r2, #4
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	440b      	add	r3, r1
 80025da:	761a      	strb	r2, [r3, #24]
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	e000e100 	.word	0xe000e100
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b089      	sub	sp, #36	; 0x24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f1c3 0307 	rsb	r3, r3, #7
 800260a:	2b04      	cmp	r3, #4
 800260c:	bf28      	it	cs
 800260e:	2304      	movcs	r3, #4
 8002610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3304      	adds	r3, #4
 8002616:	2b06      	cmp	r3, #6
 8002618:	d902      	bls.n	8002620 <NVIC_EncodePriority+0x30>
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3b03      	subs	r3, #3
 800261e:	e000      	b.n	8002622 <NVIC_EncodePriority+0x32>
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002624:	f04f 32ff 	mov.w	r2, #4294967295
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43da      	mvns	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	401a      	ands	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002638:	f04f 31ff 	mov.w	r1, #4294967295
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	fa01 f303 	lsl.w	r3, r1, r3
 8002642:	43d9      	mvns	r1, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	4313      	orrs	r3, r2
         );
}
 800264a:	4618      	mov	r0, r3
 800264c:	3724      	adds	r7, #36	; 0x24
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff ff4c 	bl	80024fc <__NVIC_SetPriorityGrouping>
}
 8002664:	bf00      	nop
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
 8002678:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800267e:	f7ff ff61 	bl	8002544 <__NVIC_GetPriorityGrouping>
 8002682:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	68b9      	ldr	r1, [r7, #8]
 8002688:	6978      	ldr	r0, [r7, #20]
 800268a:	f7ff ffb1 	bl	80025f0 <NVIC_EncodePriority>
 800268e:	4602      	mov	r2, r0
 8002690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff ff80 	bl	800259c <__NVIC_SetPriority>
}
 800269c:	bf00      	nop
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff ff54 	bl	8002560 <__NVIC_EnableIRQ>
}
 80026b8:	bf00      	nop
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026ce:	f7ff ff09 	bl	80024e4 <HAL_GetTick>
 80026d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d008      	beq.n	80026f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2280      	movs	r2, #128	; 0x80
 80026e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e052      	b.n	8002798 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0216 	bic.w	r2, r2, #22
 8002700:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695a      	ldr	r2, [r3, #20]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002710:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	d103      	bne.n	8002722 <HAL_DMA_Abort+0x62>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800271e:	2b00      	cmp	r3, #0
 8002720:	d007      	beq.n	8002732 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0208 	bic.w	r2, r2, #8
 8002730:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0201 	bic.w	r2, r2, #1
 8002740:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002742:	e013      	b.n	800276c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002744:	f7ff fece 	bl	80024e4 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b05      	cmp	r3, #5
 8002750:	d90c      	bls.n	800276c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2220      	movs	r2, #32
 8002756:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2203      	movs	r2, #3
 800275c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e015      	b.n	8002798 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1e4      	bne.n	8002744 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277e:	223f      	movs	r2, #63	; 0x3f
 8002780:	409a      	lsls	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d004      	beq.n	80027be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2280      	movs	r2, #128	; 0x80
 80027b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e00c      	b.n	80027d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2205      	movs	r2, #5
 80027c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0201 	bic.w	r2, r2, #1
 80027d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b089      	sub	sp, #36	; 0x24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
 8002802:	e175      	b.n	8002af0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002804:	2201      	movs	r2, #1
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	4013      	ands	r3, r2
 8002816:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	429a      	cmp	r2, r3
 800281e:	f040 8164 	bne.w	8002aea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	2b01      	cmp	r3, #1
 800282c:	d005      	beq.n	800283a <HAL_GPIO_Init+0x56>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d130      	bne.n	800289c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	2203      	movs	r2, #3
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4013      	ands	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4313      	orrs	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002870:	2201      	movs	r2, #1
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	f003 0201 	and.w	r2, r3, #1
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	d017      	beq.n	80028d8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	2203      	movs	r2, #3
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 0303 	and.w	r3, r3, #3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d123      	bne.n	800292c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	08da      	lsrs	r2, r3, #3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3208      	adds	r2, #8
 80028ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	220f      	movs	r2, #15
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	08da      	lsrs	r2, r3, #3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3208      	adds	r2, #8
 8002926:	69b9      	ldr	r1, [r7, #24]
 8002928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	2203      	movs	r2, #3
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4013      	ands	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 0203 	and.w	r2, r3, #3
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 80be 	beq.w	8002aea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296e:	4b66      	ldr	r3, [pc, #408]	; (8002b08 <HAL_GPIO_Init+0x324>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002972:	4a65      	ldr	r2, [pc, #404]	; (8002b08 <HAL_GPIO_Init+0x324>)
 8002974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002978:	6453      	str	r3, [r2, #68]	; 0x44
 800297a:	4b63      	ldr	r3, [pc, #396]	; (8002b08 <HAL_GPIO_Init+0x324>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002986:	4a61      	ldr	r2, [pc, #388]	; (8002b0c <HAL_GPIO_Init+0x328>)
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	089b      	lsrs	r3, r3, #2
 800298c:	3302      	adds	r3, #2
 800298e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002992:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	220f      	movs	r2, #15
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a58      	ldr	r2, [pc, #352]	; (8002b10 <HAL_GPIO_Init+0x32c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d037      	beq.n	8002a22 <HAL_GPIO_Init+0x23e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a57      	ldr	r2, [pc, #348]	; (8002b14 <HAL_GPIO_Init+0x330>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d031      	beq.n	8002a1e <HAL_GPIO_Init+0x23a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a56      	ldr	r2, [pc, #344]	; (8002b18 <HAL_GPIO_Init+0x334>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d02b      	beq.n	8002a1a <HAL_GPIO_Init+0x236>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a55      	ldr	r2, [pc, #340]	; (8002b1c <HAL_GPIO_Init+0x338>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d025      	beq.n	8002a16 <HAL_GPIO_Init+0x232>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a54      	ldr	r2, [pc, #336]	; (8002b20 <HAL_GPIO_Init+0x33c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d01f      	beq.n	8002a12 <HAL_GPIO_Init+0x22e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a53      	ldr	r2, [pc, #332]	; (8002b24 <HAL_GPIO_Init+0x340>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d019      	beq.n	8002a0e <HAL_GPIO_Init+0x22a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a52      	ldr	r2, [pc, #328]	; (8002b28 <HAL_GPIO_Init+0x344>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d013      	beq.n	8002a0a <HAL_GPIO_Init+0x226>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a51      	ldr	r2, [pc, #324]	; (8002b2c <HAL_GPIO_Init+0x348>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00d      	beq.n	8002a06 <HAL_GPIO_Init+0x222>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a50      	ldr	r2, [pc, #320]	; (8002b30 <HAL_GPIO_Init+0x34c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d007      	beq.n	8002a02 <HAL_GPIO_Init+0x21e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a4f      	ldr	r2, [pc, #316]	; (8002b34 <HAL_GPIO_Init+0x350>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d101      	bne.n	80029fe <HAL_GPIO_Init+0x21a>
 80029fa:	2309      	movs	r3, #9
 80029fc:	e012      	b.n	8002a24 <HAL_GPIO_Init+0x240>
 80029fe:	230a      	movs	r3, #10
 8002a00:	e010      	b.n	8002a24 <HAL_GPIO_Init+0x240>
 8002a02:	2308      	movs	r3, #8
 8002a04:	e00e      	b.n	8002a24 <HAL_GPIO_Init+0x240>
 8002a06:	2307      	movs	r3, #7
 8002a08:	e00c      	b.n	8002a24 <HAL_GPIO_Init+0x240>
 8002a0a:	2306      	movs	r3, #6
 8002a0c:	e00a      	b.n	8002a24 <HAL_GPIO_Init+0x240>
 8002a0e:	2305      	movs	r3, #5
 8002a10:	e008      	b.n	8002a24 <HAL_GPIO_Init+0x240>
 8002a12:	2304      	movs	r3, #4
 8002a14:	e006      	b.n	8002a24 <HAL_GPIO_Init+0x240>
 8002a16:	2303      	movs	r3, #3
 8002a18:	e004      	b.n	8002a24 <HAL_GPIO_Init+0x240>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e002      	b.n	8002a24 <HAL_GPIO_Init+0x240>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <HAL_GPIO_Init+0x240>
 8002a22:	2300      	movs	r3, #0
 8002a24:	69fa      	ldr	r2, [r7, #28]
 8002a26:	f002 0203 	and.w	r2, r2, #3
 8002a2a:	0092      	lsls	r2, r2, #2
 8002a2c:	4093      	lsls	r3, r2
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a34:	4935      	ldr	r1, [pc, #212]	; (8002b0c <HAL_GPIO_Init+0x328>)
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	089b      	lsrs	r3, r3, #2
 8002a3a:	3302      	adds	r3, #2
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a42:	4b3d      	ldr	r3, [pc, #244]	; (8002b38 <HAL_GPIO_Init+0x354>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a66:	4a34      	ldr	r2, [pc, #208]	; (8002b38 <HAL_GPIO_Init+0x354>)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a6c:	4b32      	ldr	r3, [pc, #200]	; (8002b38 <HAL_GPIO_Init+0x354>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a90:	4a29      	ldr	r2, [pc, #164]	; (8002b38 <HAL_GPIO_Init+0x354>)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a96:	4b28      	ldr	r3, [pc, #160]	; (8002b38 <HAL_GPIO_Init+0x354>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aba:	4a1f      	ldr	r2, [pc, #124]	; (8002b38 <HAL_GPIO_Init+0x354>)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ac0:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <HAL_GPIO_Init+0x354>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ae4:	4a14      	ldr	r2, [pc, #80]	; (8002b38 <HAL_GPIO_Init+0x354>)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	3301      	adds	r3, #1
 8002aee:	61fb      	str	r3, [r7, #28]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	2b0f      	cmp	r3, #15
 8002af4:	f67f ae86 	bls.w	8002804 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002af8:	bf00      	nop
 8002afa:	bf00      	nop
 8002afc:	3724      	adds	r7, #36	; 0x24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40013800 	.word	0x40013800
 8002b10:	40020000 	.word	0x40020000
 8002b14:	40020400 	.word	0x40020400
 8002b18:	40020800 	.word	0x40020800
 8002b1c:	40020c00 	.word	0x40020c00
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40021400 	.word	0x40021400
 8002b28:	40021800 	.word	0x40021800
 8002b2c:	40021c00 	.word	0x40021c00
 8002b30:	40022000 	.word	0x40022000
 8002b34:	40022400 	.word	0x40022400
 8002b38:	40013c00 	.word	0x40013c00

08002b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	807b      	strh	r3, [r7, #2]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b4c:	787b      	ldrb	r3, [r7, #1]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b52:	887a      	ldrh	r2, [r7, #2]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b58:	e003      	b.n	8002b62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b5a:	887b      	ldrh	r3, [r7, #2]
 8002b5c:	041a      	lsls	r2, r3, #16
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	619a      	str	r2, [r3, #24]
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
	...

08002b70 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a04      	ldr	r2, [pc, #16]	; (8002b8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b7e:	6013      	str	r3, [r2, #0]
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40007000 	.word	0x40007000

08002b90 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b9a:	4b23      	ldr	r3, [pc, #140]	; (8002c28 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	4a22      	ldr	r2, [pc, #136]	; (8002c28 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba6:	4b20      	ldr	r3, [pc, #128]	; (8002c28 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bae:	603b      	str	r3, [r7, #0]
 8002bb0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002bb2:	4b1e      	ldr	r3, [pc, #120]	; (8002c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a1d      	ldr	r2, [pc, #116]	; (8002c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bbc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bbe:	f7ff fc91 	bl	80024e4 <HAL_GetTick>
 8002bc2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bc4:	e009      	b.n	8002bda <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bc6:	f7ff fc8d 	bl	80024e4 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bd4:	d901      	bls.n	8002bda <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e022      	b.n	8002c20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bda:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be6:	d1ee      	bne.n	8002bc6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002be8:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a0f      	ldr	r2, [pc, #60]	; (8002c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bf2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bf4:	f7ff fc76 	bl	80024e4 <HAL_GetTick>
 8002bf8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bfa:	e009      	b.n	8002c10 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bfc:	f7ff fc72 	bl	80024e4 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c0a:	d901      	bls.n	8002c10 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e007      	b.n	8002c20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c10:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c1c:	d1ee      	bne.n	8002bfc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40007000 	.word	0x40007000

08002c30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e29b      	b.n	800317e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 8087 	beq.w	8002d62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c54:	4b96      	ldr	r3, [pc, #600]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 030c 	and.w	r3, r3, #12
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d00c      	beq.n	8002c7a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c60:	4b93      	ldr	r3, [pc, #588]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 030c 	and.w	r3, r3, #12
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d112      	bne.n	8002c92 <HAL_RCC_OscConfig+0x62>
 8002c6c:	4b90      	ldr	r3, [pc, #576]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c78:	d10b      	bne.n	8002c92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7a:	4b8d      	ldr	r3, [pc, #564]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d06c      	beq.n	8002d60 <HAL_RCC_OscConfig+0x130>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d168      	bne.n	8002d60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e275      	b.n	800317e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c9a:	d106      	bne.n	8002caa <HAL_RCC_OscConfig+0x7a>
 8002c9c:	4b84      	ldr	r3, [pc, #528]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a83      	ldr	r2, [pc, #524]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	e02e      	b.n	8002d08 <HAL_RCC_OscConfig+0xd8>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10c      	bne.n	8002ccc <HAL_RCC_OscConfig+0x9c>
 8002cb2:	4b7f      	ldr	r3, [pc, #508]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a7e      	ldr	r2, [pc, #504]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	4b7c      	ldr	r3, [pc, #496]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a7b      	ldr	r2, [pc, #492]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002cc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	e01d      	b.n	8002d08 <HAL_RCC_OscConfig+0xd8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cd4:	d10c      	bne.n	8002cf0 <HAL_RCC_OscConfig+0xc0>
 8002cd6:	4b76      	ldr	r3, [pc, #472]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a75      	ldr	r2, [pc, #468]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	4b73      	ldr	r3, [pc, #460]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a72      	ldr	r2, [pc, #456]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	e00b      	b.n	8002d08 <HAL_RCC_OscConfig+0xd8>
 8002cf0:	4b6f      	ldr	r3, [pc, #444]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a6e      	ldr	r2, [pc, #440]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	4b6c      	ldr	r3, [pc, #432]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a6b      	ldr	r2, [pc, #428]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d013      	beq.n	8002d38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d10:	f7ff fbe8 	bl	80024e4 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d18:	f7ff fbe4 	bl	80024e4 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b64      	cmp	r3, #100	; 0x64
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e229      	b.n	800317e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2a:	4b61      	ldr	r3, [pc, #388]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0xe8>
 8002d36:	e014      	b.n	8002d62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7ff fbd4 	bl	80024e4 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d40:	f7ff fbd0 	bl	80024e4 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	; 0x64
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e215      	b.n	800317e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d52:	4b57      	ldr	r3, [pc, #348]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x110>
 8002d5e:	e000      	b.n	8002d62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d069      	beq.n	8002e42 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d6e:	4b50      	ldr	r3, [pc, #320]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d7a:	4b4d      	ldr	r3, [pc, #308]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d11c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x190>
 8002d86:	4b4a      	ldr	r3, [pc, #296]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d116      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d92:	4b47      	ldr	r3, [pc, #284]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d005      	beq.n	8002daa <HAL_RCC_OscConfig+0x17a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d001      	beq.n	8002daa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e1e9      	b.n	800317e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002daa:	4b41      	ldr	r3, [pc, #260]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	493d      	ldr	r1, [pc, #244]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dbe:	e040      	b.n	8002e42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d023      	beq.n	8002e10 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dc8:	4b39      	ldr	r3, [pc, #228]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a38      	ldr	r2, [pc, #224]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd4:	f7ff fb86 	bl	80024e4 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ddc:	f7ff fb82 	bl	80024e4 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e1c7      	b.n	800317e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dee:	4b30      	ldr	r3, [pc, #192]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfa:	4b2d      	ldr	r3, [pc, #180]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4929      	ldr	r1, [pc, #164]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]
 8002e0e:	e018      	b.n	8002e42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e10:	4b27      	ldr	r3, [pc, #156]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a26      	ldr	r2, [pc, #152]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002e16:	f023 0301 	bic.w	r3, r3, #1
 8002e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1c:	f7ff fb62 	bl	80024e4 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e24:	f7ff fb5e 	bl	80024e4 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e1a3      	b.n	800317e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e36:	4b1e      	ldr	r3, [pc, #120]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f0      	bne.n	8002e24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d038      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d019      	beq.n	8002e8a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e56:	4b16      	ldr	r3, [pc, #88]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e5a:	4a15      	ldr	r2, [pc, #84]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e62:	f7ff fb3f 	bl	80024e4 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e6a:	f7ff fb3b 	bl	80024e4 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e180      	b.n	800317e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0x23a>
 8002e88:	e01a      	b.n	8002ec0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e8a:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e8e:	4a08      	ldr	r2, [pc, #32]	; (8002eb0 <HAL_RCC_OscConfig+0x280>)
 8002e90:	f023 0301 	bic.w	r3, r3, #1
 8002e94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e96:	f7ff fb25 	bl	80024e4 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e9c:	e00a      	b.n	8002eb4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e9e:	f7ff fb21 	bl	80024e4 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d903      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e166      	b.n	800317e <HAL_RCC_OscConfig+0x54e>
 8002eb0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb4:	4b92      	ldr	r3, [pc, #584]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 8002eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1ee      	bne.n	8002e9e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 80a4 	beq.w	8003016 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ece:	4b8c      	ldr	r3, [pc, #560]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10d      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eda:	4b89      	ldr	r3, [pc, #548]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	4a88      	ldr	r2, [pc, #544]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 8002ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee6:	4b86      	ldr	r3, [pc, #536]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ef6:	4b83      	ldr	r3, [pc, #524]	; (8003104 <HAL_RCC_OscConfig+0x4d4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d118      	bne.n	8002f34 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002f02:	4b80      	ldr	r3, [pc, #512]	; (8003104 <HAL_RCC_OscConfig+0x4d4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a7f      	ldr	r2, [pc, #508]	; (8003104 <HAL_RCC_OscConfig+0x4d4>)
 8002f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f0e:	f7ff fae9 	bl	80024e4 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f16:	f7ff fae5 	bl	80024e4 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b64      	cmp	r3, #100	; 0x64
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e12a      	b.n	800317e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f28:	4b76      	ldr	r3, [pc, #472]	; (8003104 <HAL_RCC_OscConfig+0x4d4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0f0      	beq.n	8002f16 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d106      	bne.n	8002f4a <HAL_RCC_OscConfig+0x31a>
 8002f3c:	4b70      	ldr	r3, [pc, #448]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f40:	4a6f      	ldr	r2, [pc, #444]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	6713      	str	r3, [r2, #112]	; 0x70
 8002f48:	e02d      	b.n	8002fa6 <HAL_RCC_OscConfig+0x376>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10c      	bne.n	8002f6c <HAL_RCC_OscConfig+0x33c>
 8002f52:	4b6b      	ldr	r3, [pc, #428]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 8002f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f56:	4a6a      	ldr	r2, [pc, #424]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 8002f58:	f023 0301 	bic.w	r3, r3, #1
 8002f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5e:	4b68      	ldr	r3, [pc, #416]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 8002f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f62:	4a67      	ldr	r2, [pc, #412]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 8002f64:	f023 0304 	bic.w	r3, r3, #4
 8002f68:	6713      	str	r3, [r2, #112]	; 0x70
 8002f6a:	e01c      	b.n	8002fa6 <HAL_RCC_OscConfig+0x376>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2b05      	cmp	r3, #5
 8002f72:	d10c      	bne.n	8002f8e <HAL_RCC_OscConfig+0x35e>
 8002f74:	4b62      	ldr	r3, [pc, #392]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 8002f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f78:	4a61      	ldr	r2, [pc, #388]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 8002f7a:	f043 0304 	orr.w	r3, r3, #4
 8002f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f80:	4b5f      	ldr	r3, [pc, #380]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 8002f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f84:	4a5e      	ldr	r2, [pc, #376]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f8c:	e00b      	b.n	8002fa6 <HAL_RCC_OscConfig+0x376>
 8002f8e:	4b5c      	ldr	r3, [pc, #368]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f92:	4a5b      	ldr	r2, [pc, #364]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 8002f94:	f023 0301 	bic.w	r3, r3, #1
 8002f98:	6713      	str	r3, [r2, #112]	; 0x70
 8002f9a:	4b59      	ldr	r3, [pc, #356]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9e:	4a58      	ldr	r2, [pc, #352]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 8002fa0:	f023 0304 	bic.w	r3, r3, #4
 8002fa4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d015      	beq.n	8002fda <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fae:	f7ff fa99 	bl	80024e4 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb4:	e00a      	b.n	8002fcc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb6:	f7ff fa95 	bl	80024e4 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e0d8      	b.n	800317e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fcc:	4b4c      	ldr	r3, [pc, #304]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0ee      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x386>
 8002fd8:	e014      	b.n	8003004 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fda:	f7ff fa83 	bl	80024e4 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe0:	e00a      	b.n	8002ff8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe2:	f7ff fa7f 	bl	80024e4 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e0c2      	b.n	800317e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff8:	4b41      	ldr	r3, [pc, #260]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 8002ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1ee      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003004:	7dfb      	ldrb	r3, [r7, #23]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d105      	bne.n	8003016 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800300a:	4b3d      	ldr	r3, [pc, #244]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	4a3c      	ldr	r2, [pc, #240]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 8003010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003014:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 80ae 	beq.w	800317c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003020:	4b37      	ldr	r3, [pc, #220]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 030c 	and.w	r3, r3, #12
 8003028:	2b08      	cmp	r3, #8
 800302a:	d06d      	beq.n	8003108 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	2b02      	cmp	r3, #2
 8003032:	d14b      	bne.n	80030cc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003034:	4b32      	ldr	r3, [pc, #200]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a31      	ldr	r2, [pc, #196]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 800303a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800303e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003040:	f7ff fa50 	bl	80024e4 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003048:	f7ff fa4c 	bl	80024e4 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e091      	b.n	800317e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305a:	4b29      	ldr	r3, [pc, #164]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f0      	bne.n	8003048 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69da      	ldr	r2, [r3, #28]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	019b      	lsls	r3, r3, #6
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	085b      	lsrs	r3, r3, #1
 800307e:	3b01      	subs	r3, #1
 8003080:	041b      	lsls	r3, r3, #16
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003088:	061b      	lsls	r3, r3, #24
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003090:	071b      	lsls	r3, r3, #28
 8003092:	491b      	ldr	r1, [pc, #108]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 8003094:	4313      	orrs	r3, r2
 8003096:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003098:	4b19      	ldr	r3, [pc, #100]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a18      	ldr	r2, [pc, #96]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 800309e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a4:	f7ff fa1e 	bl	80024e4 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ac:	f7ff fa1a 	bl	80024e4 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e05f      	b.n	800317e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030be:	4b10      	ldr	r3, [pc, #64]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCC_OscConfig+0x47c>
 80030ca:	e057      	b.n	800317c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a0b      	ldr	r2, [pc, #44]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 80030d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d8:	f7ff fa04 	bl	80024e4 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e0:	f7ff fa00 	bl	80024e4 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e045      	b.n	800317e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f2:	4b03      	ldr	r3, [pc, #12]	; (8003100 <HAL_RCC_OscConfig+0x4d0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0x4b0>
 80030fe:	e03d      	b.n	800317c <HAL_RCC_OscConfig+0x54c>
 8003100:	40023800 	.word	0x40023800
 8003104:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003108:	4b1f      	ldr	r3, [pc, #124]	; (8003188 <HAL_RCC_OscConfig+0x558>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d030      	beq.n	8003178 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003120:	429a      	cmp	r2, r3
 8003122:	d129      	bne.n	8003178 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312e:	429a      	cmp	r2, r3
 8003130:	d122      	bne.n	8003178 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003138:	4013      	ands	r3, r2
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800313e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003140:	4293      	cmp	r3, r2
 8003142:	d119      	bne.n	8003178 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314e:	085b      	lsrs	r3, r3, #1
 8003150:	3b01      	subs	r3, #1
 8003152:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003154:	429a      	cmp	r2, r3
 8003156:	d10f      	bne.n	8003178 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003162:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003164:	429a      	cmp	r2, r3
 8003166:	d107      	bne.n	8003178 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003174:	429a      	cmp	r2, r3
 8003176:	d001      	beq.n	800317c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40023800 	.word	0x40023800

0800318c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e0d0      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031a4:	4b6a      	ldr	r3, [pc, #424]	; (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d910      	bls.n	80031d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	4b67      	ldr	r3, [pc, #412]	; (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 020f 	bic.w	r2, r3, #15
 80031ba:	4965      	ldr	r1, [pc, #404]	; (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	4313      	orrs	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c2:	4b63      	ldr	r3, [pc, #396]	; (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e0b8      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d020      	beq.n	8003222 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031ec:	4b59      	ldr	r3, [pc, #356]	; (8003354 <HAL_RCC_ClockConfig+0x1c8>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	4a58      	ldr	r2, [pc, #352]	; (8003354 <HAL_RCC_ClockConfig+0x1c8>)
 80031f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0308 	and.w	r3, r3, #8
 8003200:	2b00      	cmp	r3, #0
 8003202:	d005      	beq.n	8003210 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003204:	4b53      	ldr	r3, [pc, #332]	; (8003354 <HAL_RCC_ClockConfig+0x1c8>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	4a52      	ldr	r2, [pc, #328]	; (8003354 <HAL_RCC_ClockConfig+0x1c8>)
 800320a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800320e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003210:	4b50      	ldr	r3, [pc, #320]	; (8003354 <HAL_RCC_ClockConfig+0x1c8>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	494d      	ldr	r1, [pc, #308]	; (8003354 <HAL_RCC_ClockConfig+0x1c8>)
 800321e:	4313      	orrs	r3, r2
 8003220:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d040      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d107      	bne.n	8003246 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003236:	4b47      	ldr	r3, [pc, #284]	; (8003354 <HAL_RCC_ClockConfig+0x1c8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d115      	bne.n	800326e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e07f      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d107      	bne.n	800325e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324e:	4b41      	ldr	r3, [pc, #260]	; (8003354 <HAL_RCC_ClockConfig+0x1c8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e073      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325e:	4b3d      	ldr	r3, [pc, #244]	; (8003354 <HAL_RCC_ClockConfig+0x1c8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e06b      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800326e:	4b39      	ldr	r3, [pc, #228]	; (8003354 <HAL_RCC_ClockConfig+0x1c8>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f023 0203 	bic.w	r2, r3, #3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	4936      	ldr	r1, [pc, #216]	; (8003354 <HAL_RCC_ClockConfig+0x1c8>)
 800327c:	4313      	orrs	r3, r2
 800327e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003280:	f7ff f930 	bl	80024e4 <HAL_GetTick>
 8003284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003286:	e00a      	b.n	800329e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003288:	f7ff f92c 	bl	80024e4 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	f241 3288 	movw	r2, #5000	; 0x1388
 8003296:	4293      	cmp	r3, r2
 8003298:	d901      	bls.n	800329e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e053      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329e:	4b2d      	ldr	r3, [pc, #180]	; (8003354 <HAL_RCC_ClockConfig+0x1c8>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 020c 	and.w	r2, r3, #12
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d1eb      	bne.n	8003288 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032b0:	4b27      	ldr	r3, [pc, #156]	; (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 030f 	and.w	r3, r3, #15
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d210      	bcs.n	80032e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032be:	4b24      	ldr	r3, [pc, #144]	; (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f023 020f 	bic.w	r2, r3, #15
 80032c6:	4922      	ldr	r1, [pc, #136]	; (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ce:	4b20      	ldr	r3, [pc, #128]	; (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d001      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e032      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ec:	4b19      	ldr	r3, [pc, #100]	; (8003354 <HAL_RCC_ClockConfig+0x1c8>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	4916      	ldr	r1, [pc, #88]	; (8003354 <HAL_RCC_ClockConfig+0x1c8>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d009      	beq.n	800331e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800330a:	4b12      	ldr	r3, [pc, #72]	; (8003354 <HAL_RCC_ClockConfig+0x1c8>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	490e      	ldr	r1, [pc, #56]	; (8003354 <HAL_RCC_ClockConfig+0x1c8>)
 800331a:	4313      	orrs	r3, r2
 800331c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800331e:	f000 f821 	bl	8003364 <HAL_RCC_GetSysClockFreq>
 8003322:	4602      	mov	r2, r0
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_RCC_ClockConfig+0x1c8>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	091b      	lsrs	r3, r3, #4
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	490a      	ldr	r1, [pc, #40]	; (8003358 <HAL_RCC_ClockConfig+0x1cc>)
 8003330:	5ccb      	ldrb	r3, [r1, r3]
 8003332:	fa22 f303 	lsr.w	r3, r2, r3
 8003336:	4a09      	ldr	r2, [pc, #36]	; (800335c <HAL_RCC_ClockConfig+0x1d0>)
 8003338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800333a:	4b09      	ldr	r3, [pc, #36]	; (8003360 <HAL_RCC_ClockConfig+0x1d4>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7fe ff44 	bl	80021cc <HAL_InitTick>

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40023c00 	.word	0x40023c00
 8003354:	40023800 	.word	0x40023800
 8003358:	0800a58c 	.word	0x0800a58c
 800335c:	20000000 	.word	0x20000000
 8003360:	20000004 	.word	0x20000004

08003364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003368:	b094      	sub	sp, #80	; 0x50
 800336a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	647b      	str	r3, [r7, #68]	; 0x44
 8003370:	2300      	movs	r3, #0
 8003372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003374:	2300      	movs	r3, #0
 8003376:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003378:	2300      	movs	r3, #0
 800337a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800337c:	4b79      	ldr	r3, [pc, #484]	; (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 030c 	and.w	r3, r3, #12
 8003384:	2b08      	cmp	r3, #8
 8003386:	d00d      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003388:	2b08      	cmp	r3, #8
 800338a:	f200 80e1 	bhi.w	8003550 <HAL_RCC_GetSysClockFreq+0x1ec>
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <HAL_RCC_GetSysClockFreq+0x34>
 8003392:	2b04      	cmp	r3, #4
 8003394:	d003      	beq.n	800339e <HAL_RCC_GetSysClockFreq+0x3a>
 8003396:	e0db      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003398:	4b73      	ldr	r3, [pc, #460]	; (8003568 <HAL_RCC_GetSysClockFreq+0x204>)
 800339a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800339c:	e0db      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800339e:	4b73      	ldr	r3, [pc, #460]	; (800356c <HAL_RCC_GetSysClockFreq+0x208>)
 80033a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033a2:	e0d8      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033a4:	4b6f      	ldr	r3, [pc, #444]	; (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033ac:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80033ae:	4b6d      	ldr	r3, [pc, #436]	; (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d063      	beq.n	8003482 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ba:	4b6a      	ldr	r3, [pc, #424]	; (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	099b      	lsrs	r3, r3, #6
 80033c0:	2200      	movs	r2, #0
 80033c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80033c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033cc:	633b      	str	r3, [r7, #48]	; 0x30
 80033ce:	2300      	movs	r3, #0
 80033d0:	637b      	str	r3, [r7, #52]	; 0x34
 80033d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033d6:	4622      	mov	r2, r4
 80033d8:	462b      	mov	r3, r5
 80033da:	f04f 0000 	mov.w	r0, #0
 80033de:	f04f 0100 	mov.w	r1, #0
 80033e2:	0159      	lsls	r1, r3, #5
 80033e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033e8:	0150      	lsls	r0, r2, #5
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	4621      	mov	r1, r4
 80033f0:	1a51      	subs	r1, r2, r1
 80033f2:	6139      	str	r1, [r7, #16]
 80033f4:	4629      	mov	r1, r5
 80033f6:	eb63 0301 	sbc.w	r3, r3, r1
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003408:	4659      	mov	r1, fp
 800340a:	018b      	lsls	r3, r1, #6
 800340c:	4651      	mov	r1, sl
 800340e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003412:	4651      	mov	r1, sl
 8003414:	018a      	lsls	r2, r1, #6
 8003416:	4651      	mov	r1, sl
 8003418:	ebb2 0801 	subs.w	r8, r2, r1
 800341c:	4659      	mov	r1, fp
 800341e:	eb63 0901 	sbc.w	r9, r3, r1
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800342e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003432:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003436:	4690      	mov	r8, r2
 8003438:	4699      	mov	r9, r3
 800343a:	4623      	mov	r3, r4
 800343c:	eb18 0303 	adds.w	r3, r8, r3
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	462b      	mov	r3, r5
 8003444:	eb49 0303 	adc.w	r3, r9, r3
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003456:	4629      	mov	r1, r5
 8003458:	024b      	lsls	r3, r1, #9
 800345a:	4621      	mov	r1, r4
 800345c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003460:	4621      	mov	r1, r4
 8003462:	024a      	lsls	r2, r1, #9
 8003464:	4610      	mov	r0, r2
 8003466:	4619      	mov	r1, r3
 8003468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800346a:	2200      	movs	r2, #0
 800346c:	62bb      	str	r3, [r7, #40]	; 0x28
 800346e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003470:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003474:	f7fc ff34 	bl	80002e0 <__aeabi_uldivmod>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4613      	mov	r3, r2
 800347e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003480:	e058      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003482:	4b38      	ldr	r3, [pc, #224]	; (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	099b      	lsrs	r3, r3, #6
 8003488:	2200      	movs	r2, #0
 800348a:	4618      	mov	r0, r3
 800348c:	4611      	mov	r1, r2
 800348e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003492:	623b      	str	r3, [r7, #32]
 8003494:	2300      	movs	r3, #0
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
 8003498:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800349c:	4642      	mov	r2, r8
 800349e:	464b      	mov	r3, r9
 80034a0:	f04f 0000 	mov.w	r0, #0
 80034a4:	f04f 0100 	mov.w	r1, #0
 80034a8:	0159      	lsls	r1, r3, #5
 80034aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ae:	0150      	lsls	r0, r2, #5
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4641      	mov	r1, r8
 80034b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80034ba:	4649      	mov	r1, r9
 80034bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034d4:	ebb2 040a 	subs.w	r4, r2, sl
 80034d8:	eb63 050b 	sbc.w	r5, r3, fp
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	00eb      	lsls	r3, r5, #3
 80034e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034ea:	00e2      	lsls	r2, r4, #3
 80034ec:	4614      	mov	r4, r2
 80034ee:	461d      	mov	r5, r3
 80034f0:	4643      	mov	r3, r8
 80034f2:	18e3      	adds	r3, r4, r3
 80034f4:	603b      	str	r3, [r7, #0]
 80034f6:	464b      	mov	r3, r9
 80034f8:	eb45 0303 	adc.w	r3, r5, r3
 80034fc:	607b      	str	r3, [r7, #4]
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	e9d7 4500 	ldrd	r4, r5, [r7]
 800350a:	4629      	mov	r1, r5
 800350c:	028b      	lsls	r3, r1, #10
 800350e:	4621      	mov	r1, r4
 8003510:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003514:	4621      	mov	r1, r4
 8003516:	028a      	lsls	r2, r1, #10
 8003518:	4610      	mov	r0, r2
 800351a:	4619      	mov	r1, r3
 800351c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800351e:	2200      	movs	r2, #0
 8003520:	61bb      	str	r3, [r7, #24]
 8003522:	61fa      	str	r2, [r7, #28]
 8003524:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003528:	f7fc feda 	bl	80002e0 <__aeabi_uldivmod>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4613      	mov	r3, r2
 8003532:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003534:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	0c1b      	lsrs	r3, r3, #16
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	3301      	adds	r3, #1
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003544:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003548:	fbb2 f3f3 	udiv	r3, r2, r3
 800354c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800354e:	e002      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003550:	4b05      	ldr	r3, [pc, #20]	; (8003568 <HAL_RCC_GetSysClockFreq+0x204>)
 8003552:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003558:	4618      	mov	r0, r3
 800355a:	3750      	adds	r7, #80	; 0x50
 800355c:	46bd      	mov	sp, r7
 800355e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003562:	bf00      	nop
 8003564:	40023800 	.word	0x40023800
 8003568:	00f42400 	.word	0x00f42400
 800356c:	007a1200 	.word	0x007a1200

08003570 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003574:	4b03      	ldr	r3, [pc, #12]	; (8003584 <HAL_RCC_GetHCLKFreq+0x14>)
 8003576:	681b      	ldr	r3, [r3, #0]
}
 8003578:	4618      	mov	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	20000000 	.word	0x20000000

08003588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800358c:	f7ff fff0 	bl	8003570 <HAL_RCC_GetHCLKFreq>
 8003590:	4602      	mov	r2, r0
 8003592:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	0a9b      	lsrs	r3, r3, #10
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	4903      	ldr	r1, [pc, #12]	; (80035ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800359e:	5ccb      	ldrb	r3, [r1, r3]
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40023800 	.word	0x40023800
 80035ac:	0800a59c 	.word	0x0800a59c

080035b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035b4:	f7ff ffdc 	bl	8003570 <HAL_RCC_GetHCLKFreq>
 80035b8:	4602      	mov	r2, r0
 80035ba:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	0b5b      	lsrs	r3, r3, #13
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	4903      	ldr	r1, [pc, #12]	; (80035d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035c6:	5ccb      	ldrb	r3, [r1, r3]
 80035c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40023800 	.word	0x40023800
 80035d4:	0800a59c 	.word	0x0800a59c

080035d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	220f      	movs	r2, #15
 80035e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035e8:	4b12      	ldr	r3, [pc, #72]	; (8003634 <HAL_RCC_GetClockConfig+0x5c>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 0203 	and.w	r2, r3, #3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80035f4:	4b0f      	ldr	r3, [pc, #60]	; (8003634 <HAL_RCC_GetClockConfig+0x5c>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003600:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <HAL_RCC_GetClockConfig+0x5c>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800360c:	4b09      	ldr	r3, [pc, #36]	; (8003634 <HAL_RCC_GetClockConfig+0x5c>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	08db      	lsrs	r3, r3, #3
 8003612:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800361a:	4b07      	ldr	r3, [pc, #28]	; (8003638 <HAL_RCC_GetClockConfig+0x60>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 020f 	and.w	r2, r3, #15
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	601a      	str	r2, [r3, #0]
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40023800 	.word	0x40023800
 8003638:	40023c00 	.word	0x40023c00

0800363c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003644:	2300      	movs	r3, #0
 8003646:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003650:	2300      	movs	r3, #0
 8003652:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003654:	2300      	movs	r3, #0
 8003656:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d012      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003664:	4b69      	ldr	r3, [pc, #420]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	4a68      	ldr	r2, [pc, #416]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800366e:	6093      	str	r3, [r2, #8]
 8003670:	4b66      	ldr	r3, [pc, #408]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003678:	4964      	ldr	r1, [pc, #400]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800367a:	4313      	orrs	r3, r2
 800367c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003686:	2301      	movs	r3, #1
 8003688:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d017      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003696:	4b5d      	ldr	r3, [pc, #372]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800369c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a4:	4959      	ldr	r1, [pc, #356]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036b4:	d101      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80036b6:	2301      	movs	r3, #1
 80036b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80036c2:	2301      	movs	r3, #1
 80036c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d017      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036d2:	4b4e      	ldr	r3, [pc, #312]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	494a      	ldr	r1, [pc, #296]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036f0:	d101      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80036f2:	2301      	movs	r3, #1
 80036f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80036fe:	2301      	movs	r3, #1
 8003700:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800370e:	2301      	movs	r3, #1
 8003710:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 808b 	beq.w	8003836 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003720:	4b3a      	ldr	r3, [pc, #232]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	4a39      	ldr	r2, [pc, #228]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800372a:	6413      	str	r3, [r2, #64]	; 0x40
 800372c:	4b37      	ldr	r3, [pc, #220]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003734:	60bb      	str	r3, [r7, #8]
 8003736:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003738:	4b35      	ldr	r3, [pc, #212]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a34      	ldr	r2, [pc, #208]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800373e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003742:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003744:	f7fe fece 	bl	80024e4 <HAL_GetTick>
 8003748:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800374a:	e008      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800374c:	f7fe feca 	bl	80024e4 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b64      	cmp	r3, #100	; 0x64
 8003758:	d901      	bls.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e38f      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800375e:	4b2c      	ldr	r3, [pc, #176]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0f0      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800376a:	4b28      	ldr	r3, [pc, #160]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003772:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d035      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	429a      	cmp	r2, r3
 8003786:	d02e      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003788:	4b20      	ldr	r3, [pc, #128]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800378a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003790:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003792:	4b1e      	ldr	r3, [pc, #120]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003796:	4a1d      	ldr	r2, [pc, #116]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800379c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800379e:	4b1b      	ldr	r3, [pc, #108]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a2:	4a1a      	ldr	r2, [pc, #104]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80037aa:	4a18      	ldr	r2, [pc, #96]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037b0:	4b16      	ldr	r3, [pc, #88]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d114      	bne.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037bc:	f7fe fe92 	bl	80024e4 <HAL_GetTick>
 80037c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c2:	e00a      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037c4:	f7fe fe8e 	bl	80024e4 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d901      	bls.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e351      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037da:	4b0c      	ldr	r3, [pc, #48]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0ee      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037f2:	d111      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80037f4:	4b05      	ldr	r3, [pc, #20]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003800:	4b04      	ldr	r3, [pc, #16]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003802:	400b      	ands	r3, r1
 8003804:	4901      	ldr	r1, [pc, #4]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003806:	4313      	orrs	r3, r2
 8003808:	608b      	str	r3, [r1, #8]
 800380a:	e00b      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800380c:	40023800 	.word	0x40023800
 8003810:	40007000 	.word	0x40007000
 8003814:	0ffffcff 	.word	0x0ffffcff
 8003818:	4bac      	ldr	r3, [pc, #688]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	4aab      	ldr	r2, [pc, #684]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800381e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003822:	6093      	str	r3, [r2, #8]
 8003824:	4ba9      	ldr	r3, [pc, #676]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003826:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003830:	49a6      	ldr	r1, [pc, #664]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003832:	4313      	orrs	r3, r2
 8003834:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0310 	and.w	r3, r3, #16
 800383e:	2b00      	cmp	r3, #0
 8003840:	d010      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003842:	4ba2      	ldr	r3, [pc, #648]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003848:	4aa0      	ldr	r2, [pc, #640]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800384a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800384e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003852:	4b9e      	ldr	r3, [pc, #632]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003854:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	499b      	ldr	r1, [pc, #620]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003870:	4b96      	ldr	r3, [pc, #600]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003876:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800387e:	4993      	ldr	r1, [pc, #588]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003892:	4b8e      	ldr	r3, [pc, #568]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003898:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038a0:	498a      	ldr	r1, [pc, #552]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038b4:	4b85      	ldr	r3, [pc, #532]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c2:	4982      	ldr	r1, [pc, #520]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00a      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038d6:	4b7d      	ldr	r3, [pc, #500]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e4:	4979      	ldr	r1, [pc, #484]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038f8:	4b74      	ldr	r3, [pc, #464]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fe:	f023 0203 	bic.w	r2, r3, #3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	4971      	ldr	r1, [pc, #452]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800391a:	4b6c      	ldr	r3, [pc, #432]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800391c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003920:	f023 020c 	bic.w	r2, r3, #12
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003928:	4968      	ldr	r1, [pc, #416]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800393c:	4b63      	ldr	r3, [pc, #396]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800393e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003942:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394a:	4960      	ldr	r1, [pc, #384]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800394c:	4313      	orrs	r3, r2
 800394e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800395e:	4b5b      	ldr	r3, [pc, #364]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003964:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800396c:	4957      	ldr	r1, [pc, #348]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00a      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003980:	4b52      	ldr	r3, [pc, #328]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003986:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398e:	494f      	ldr	r1, [pc, #316]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80039a2:	4b4a      	ldr	r3, [pc, #296]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b0:	4946      	ldr	r1, [pc, #280]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00a      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80039c4:	4b41      	ldr	r3, [pc, #260]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d2:	493e      	ldr	r1, [pc, #248]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80039e6:	4b39      	ldr	r3, [pc, #228]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f4:	4935      	ldr	r1, [pc, #212]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a08:	4b30      	ldr	r3, [pc, #192]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a16:	492d      	ldr	r1, [pc, #180]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d011      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a2a:	4b28      	ldr	r3, [pc, #160]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a30:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a38:	4924      	ldr	r1, [pc, #144]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a48:	d101      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00a      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a6a:	4b18      	ldr	r3, [pc, #96]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a70:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a78:	4914      	ldr	r1, [pc, #80]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00b      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a9c:	490b      	ldr	r1, [pc, #44]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00f      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003ab0:	4b06      	ldr	r3, [pc, #24]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac0:	4902      	ldr	r1, [pc, #8]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ac8:	e002      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003aca:	bf00      	nop
 8003acc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00b      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003adc:	4b8a      	ldr	r3, [pc, #552]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ade:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ae2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aec:	4986      	ldr	r1, [pc, #536]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00b      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b00:	4b81      	ldr	r3, [pc, #516]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b06:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b10:	497d      	ldr	r1, [pc, #500]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d006      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 80d6 	beq.w	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b2c:	4b76      	ldr	r3, [pc, #472]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a75      	ldr	r2, [pc, #468]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b38:	f7fe fcd4 	bl	80024e4 <HAL_GetTick>
 8003b3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b40:	f7fe fcd0 	bl	80024e4 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b64      	cmp	r3, #100	; 0x64
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e195      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b52:	4b6d      	ldr	r3, [pc, #436]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f0      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d021      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d11d      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b72:	4b65      	ldr	r3, [pc, #404]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b78:	0c1b      	lsrs	r3, r3, #16
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b80:	4b61      	ldr	r3, [pc, #388]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b86:	0e1b      	lsrs	r3, r3, #24
 8003b88:	f003 030f 	and.w	r3, r3, #15
 8003b8c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	019a      	lsls	r2, r3, #6
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	041b      	lsls	r3, r3, #16
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	061b      	lsls	r3, r3, #24
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	071b      	lsls	r3, r3, #28
 8003ba6:	4958      	ldr	r1, [pc, #352]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d004      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bc2:	d00a      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d02e      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd8:	d129      	bne.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003bda:	4b4b      	ldr	r3, [pc, #300]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003be0:	0c1b      	lsrs	r3, r3, #16
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003be8:	4b47      	ldr	r3, [pc, #284]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bee:	0f1b      	lsrs	r3, r3, #28
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	019a      	lsls	r2, r3, #6
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	041b      	lsls	r3, r3, #16
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	061b      	lsls	r3, r3, #24
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	071b      	lsls	r3, r3, #28
 8003c0e:	493e      	ldr	r1, [pc, #248]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c16:	4b3c      	ldr	r3, [pc, #240]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c1c:	f023 021f 	bic.w	r2, r3, #31
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	3b01      	subs	r3, #1
 8003c26:	4938      	ldr	r1, [pc, #224]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d01d      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c3a:	4b33      	ldr	r3, [pc, #204]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c40:	0e1b      	lsrs	r3, r3, #24
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c48:	4b2f      	ldr	r3, [pc, #188]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c4e:	0f1b      	lsrs	r3, r3, #28
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	019a      	lsls	r2, r3, #6
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	041b      	lsls	r3, r3, #16
 8003c62:	431a      	orrs	r2, r3
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	061b      	lsls	r3, r3, #24
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	071b      	lsls	r3, r3, #28
 8003c6e:	4926      	ldr	r1, [pc, #152]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d011      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	019a      	lsls	r2, r3, #6
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	041b      	lsls	r3, r3, #16
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	061b      	lsls	r3, r3, #24
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	071b      	lsls	r3, r3, #28
 8003c9e:	491a      	ldr	r1, [pc, #104]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ca6:	4b18      	ldr	r3, [pc, #96]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a17      	ldr	r2, [pc, #92]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cb2:	f7fe fc17 	bl	80024e4 <HAL_GetTick>
 8003cb6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003cba:	f7fe fc13 	bl	80024e4 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b64      	cmp	r3, #100	; 0x64
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e0d8      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ccc:	4b0e      	ldr	r3, [pc, #56]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0f0      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	f040 80ce 	bne.w	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ce0:	4b09      	ldr	r3, [pc, #36]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a08      	ldr	r2, [pc, #32]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ce6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cec:	f7fe fbfa 	bl	80024e4 <HAL_GetTick>
 8003cf0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cf2:	e00b      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cf4:	f7fe fbf6 	bl	80024e4 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b64      	cmp	r3, #100	; 0x64
 8003d00:	d904      	bls.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e0bb      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003d06:	bf00      	nop
 8003d08:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d0c:	4b5e      	ldr	r3, [pc, #376]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d18:	d0ec      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d009      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d02e      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d12a      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d42:	4b51      	ldr	r3, [pc, #324]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d48:	0c1b      	lsrs	r3, r3, #16
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d50:	4b4d      	ldr	r3, [pc, #308]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d56:	0f1b      	lsrs	r3, r3, #28
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	019a      	lsls	r2, r3, #6
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	041b      	lsls	r3, r3, #16
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	061b      	lsls	r3, r3, #24
 8003d70:	431a      	orrs	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	071b      	lsls	r3, r3, #28
 8003d76:	4944      	ldr	r1, [pc, #272]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d7e:	4b42      	ldr	r3, [pc, #264]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d84:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	021b      	lsls	r3, r3, #8
 8003d90:	493d      	ldr	r1, [pc, #244]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d022      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003da8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dac:	d11d      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003dae:	4b36      	ldr	r3, [pc, #216]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db4:	0e1b      	lsrs	r3, r3, #24
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003dbc:	4b32      	ldr	r3, [pc, #200]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc2:	0f1b      	lsrs	r3, r3, #28
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	019a      	lsls	r2, r3, #6
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	041b      	lsls	r3, r3, #16
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	061b      	lsls	r3, r3, #24
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	071b      	lsls	r3, r3, #28
 8003de2:	4929      	ldr	r1, [pc, #164]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d028      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003df6:	4b24      	ldr	r3, [pc, #144]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfc:	0e1b      	lsrs	r3, r3, #24
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e04:	4b20      	ldr	r3, [pc, #128]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0a:	0c1b      	lsrs	r3, r3, #16
 8003e0c:	f003 0303 	and.w	r3, r3, #3
 8003e10:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	019a      	lsls	r2, r3, #6
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	041b      	lsls	r3, r3, #16
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	061b      	lsls	r3, r3, #24
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	071b      	lsls	r3, r3, #28
 8003e2a:	4917      	ldr	r1, [pc, #92]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e32:	4b15      	ldr	r3, [pc, #84]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e40:	4911      	ldr	r1, [pc, #68]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e48:	4b0f      	ldr	r3, [pc, #60]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a0e      	ldr	r2, [pc, #56]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e54:	f7fe fb46 	bl	80024e4 <HAL_GetTick>
 8003e58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e5c:	f7fe fb42 	bl	80024e4 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b64      	cmp	r3, #100	; 0x64
 8003e68:	d901      	bls.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e007      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e6e:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e7a:	d1ef      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3720      	adds	r7, #32
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40023800 	.word	0x40023800

08003e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e049      	b.n	8003f32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d106      	bne.n	8003eb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f841 	bl	8003f3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4610      	mov	r0, r2
 8003ecc:	f000 fa00 	bl	80042d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
	...

08003f50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d001      	beq.n	8003f68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e054      	b.n	8004012 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0201 	orr.w	r2, r2, #1
 8003f7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a26      	ldr	r2, [pc, #152]	; (8004020 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d022      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x80>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f92:	d01d      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x80>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a22      	ldr	r2, [pc, #136]	; (8004024 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d018      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x80>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a21      	ldr	r2, [pc, #132]	; (8004028 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d013      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x80>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a1f      	ldr	r2, [pc, #124]	; (800402c <HAL_TIM_Base_Start_IT+0xdc>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00e      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x80>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a1e      	ldr	r2, [pc, #120]	; (8004030 <HAL_TIM_Base_Start_IT+0xe0>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d009      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x80>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a1c      	ldr	r2, [pc, #112]	; (8004034 <HAL_TIM_Base_Start_IT+0xe4>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d004      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x80>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a1b      	ldr	r2, [pc, #108]	; (8004038 <HAL_TIM_Base_Start_IT+0xe8>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d115      	bne.n	8003ffc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	4b19      	ldr	r3, [pc, #100]	; (800403c <HAL_TIM_Base_Start_IT+0xec>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b06      	cmp	r3, #6
 8003fe0:	d015      	beq.n	800400e <HAL_TIM_Base_Start_IT+0xbe>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe8:	d011      	beq.n	800400e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0201 	orr.w	r2, r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ffa:	e008      	b.n	800400e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	e000      	b.n	8004010 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40010000 	.word	0x40010000
 8004024:	40000400 	.word	0x40000400
 8004028:	40000800 	.word	0x40000800
 800402c:	40000c00 	.word	0x40000c00
 8004030:	40010400 	.word	0x40010400
 8004034:	40014000 	.word	0x40014000
 8004038:	40001800 	.word	0x40001800
 800403c:	00010007 	.word	0x00010007

08004040 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b02      	cmp	r3, #2
 8004054:	d122      	bne.n	800409c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b02      	cmp	r3, #2
 8004062:	d11b      	bne.n	800409c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f06f 0202 	mvn.w	r2, #2
 800406c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f905 	bl	8004292 <HAL_TIM_IC_CaptureCallback>
 8004088:	e005      	b.n	8004096 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f8f7 	bl	800427e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f908 	bl	80042a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d122      	bne.n	80040f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d11b      	bne.n	80040f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0204 	mvn.w	r2, #4
 80040c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2202      	movs	r2, #2
 80040c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f8db 	bl	8004292 <HAL_TIM_IC_CaptureCallback>
 80040dc:	e005      	b.n	80040ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f8cd 	bl	800427e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f8de 	bl	80042a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d122      	bne.n	8004144 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b08      	cmp	r3, #8
 800410a:	d11b      	bne.n	8004144 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f06f 0208 	mvn.w	r2, #8
 8004114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2204      	movs	r2, #4
 800411a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f8b1 	bl	8004292 <HAL_TIM_IC_CaptureCallback>
 8004130:	e005      	b.n	800413e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f8a3 	bl	800427e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f8b4 	bl	80042a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f003 0310 	and.w	r3, r3, #16
 800414e:	2b10      	cmp	r3, #16
 8004150:	d122      	bne.n	8004198 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	2b10      	cmp	r3, #16
 800415e:	d11b      	bne.n	8004198 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f06f 0210 	mvn.w	r2, #16
 8004168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2208      	movs	r2, #8
 800416e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f887 	bl	8004292 <HAL_TIM_IC_CaptureCallback>
 8004184:	e005      	b.n	8004192 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f879 	bl	800427e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f88a 	bl	80042a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d10e      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d107      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0201 	mvn.w	r2, #1
 80041bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fd feee 	bl	8001fa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ce:	2b80      	cmp	r3, #128	; 0x80
 80041d0:	d10e      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041dc:	2b80      	cmp	r3, #128	; 0x80
 80041de:	d107      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f91a 	bl	8004424 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041fe:	d10e      	bne.n	800421e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420a:	2b80      	cmp	r3, #128	; 0x80
 800420c:	d107      	bne.n	800421e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f90d 	bl	8004438 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004228:	2b40      	cmp	r3, #64	; 0x40
 800422a:	d10e      	bne.n	800424a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004236:	2b40      	cmp	r3, #64	; 0x40
 8004238:	d107      	bne.n	800424a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f838 	bl	80042ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	f003 0320 	and.w	r3, r3, #32
 8004254:	2b20      	cmp	r3, #32
 8004256:	d10e      	bne.n	8004276 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b20      	cmp	r3, #32
 8004264:	d107      	bne.n	8004276 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f06f 0220 	mvn.w	r2, #32
 800426e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f8cd 	bl	8004410 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
	...

080042d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a40      	ldr	r2, [pc, #256]	; (80043e4 <TIM_Base_SetConfig+0x114>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d013      	beq.n	8004310 <TIM_Base_SetConfig+0x40>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ee:	d00f      	beq.n	8004310 <TIM_Base_SetConfig+0x40>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a3d      	ldr	r2, [pc, #244]	; (80043e8 <TIM_Base_SetConfig+0x118>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d00b      	beq.n	8004310 <TIM_Base_SetConfig+0x40>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a3c      	ldr	r2, [pc, #240]	; (80043ec <TIM_Base_SetConfig+0x11c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d007      	beq.n	8004310 <TIM_Base_SetConfig+0x40>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a3b      	ldr	r2, [pc, #236]	; (80043f0 <TIM_Base_SetConfig+0x120>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d003      	beq.n	8004310 <TIM_Base_SetConfig+0x40>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a3a      	ldr	r2, [pc, #232]	; (80043f4 <TIM_Base_SetConfig+0x124>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d108      	bne.n	8004322 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004316:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a2f      	ldr	r2, [pc, #188]	; (80043e4 <TIM_Base_SetConfig+0x114>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d02b      	beq.n	8004382 <TIM_Base_SetConfig+0xb2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004330:	d027      	beq.n	8004382 <TIM_Base_SetConfig+0xb2>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a2c      	ldr	r2, [pc, #176]	; (80043e8 <TIM_Base_SetConfig+0x118>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d023      	beq.n	8004382 <TIM_Base_SetConfig+0xb2>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a2b      	ldr	r2, [pc, #172]	; (80043ec <TIM_Base_SetConfig+0x11c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d01f      	beq.n	8004382 <TIM_Base_SetConfig+0xb2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a2a      	ldr	r2, [pc, #168]	; (80043f0 <TIM_Base_SetConfig+0x120>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d01b      	beq.n	8004382 <TIM_Base_SetConfig+0xb2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a29      	ldr	r2, [pc, #164]	; (80043f4 <TIM_Base_SetConfig+0x124>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d017      	beq.n	8004382 <TIM_Base_SetConfig+0xb2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a28      	ldr	r2, [pc, #160]	; (80043f8 <TIM_Base_SetConfig+0x128>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d013      	beq.n	8004382 <TIM_Base_SetConfig+0xb2>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a27      	ldr	r2, [pc, #156]	; (80043fc <TIM_Base_SetConfig+0x12c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d00f      	beq.n	8004382 <TIM_Base_SetConfig+0xb2>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a26      	ldr	r2, [pc, #152]	; (8004400 <TIM_Base_SetConfig+0x130>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d00b      	beq.n	8004382 <TIM_Base_SetConfig+0xb2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a25      	ldr	r2, [pc, #148]	; (8004404 <TIM_Base_SetConfig+0x134>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d007      	beq.n	8004382 <TIM_Base_SetConfig+0xb2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a24      	ldr	r2, [pc, #144]	; (8004408 <TIM_Base_SetConfig+0x138>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d003      	beq.n	8004382 <TIM_Base_SetConfig+0xb2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a23      	ldr	r2, [pc, #140]	; (800440c <TIM_Base_SetConfig+0x13c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d108      	bne.n	8004394 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004388:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	4313      	orrs	r3, r2
 8004392:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	4313      	orrs	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a0a      	ldr	r2, [pc, #40]	; (80043e4 <TIM_Base_SetConfig+0x114>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d003      	beq.n	80043c8 <TIM_Base_SetConfig+0xf8>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a0c      	ldr	r2, [pc, #48]	; (80043f4 <TIM_Base_SetConfig+0x124>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d103      	bne.n	80043d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	615a      	str	r2, [r3, #20]
}
 80043d6:	bf00      	nop
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40010000 	.word	0x40010000
 80043e8:	40000400 	.word	0x40000400
 80043ec:	40000800 	.word	0x40000800
 80043f0:	40000c00 	.word	0x40000c00
 80043f4:	40010400 	.word	0x40010400
 80043f8:	40014000 	.word	0x40014000
 80043fc:	40014400 	.word	0x40014400
 8004400:	40014800 	.word	0x40014800
 8004404:	40001800 	.word	0x40001800
 8004408:	40001c00 	.word	0x40001c00
 800440c:	40002000 	.word	0x40002000

08004410 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e040      	b.n	80044e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fd fdd2 	bl	8002018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2224      	movs	r2, #36	; 0x24
 8004478:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0201 	bic.w	r2, r2, #1
 8004488:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fc06 	bl	8004c9c <UART_SetConfig>
 8004490:	4603      	mov	r3, r0
 8004492:	2b01      	cmp	r3, #1
 8004494:	d101      	bne.n	800449a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e022      	b.n	80044e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d002      	beq.n	80044a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fe5e 	bl	8005164 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f042 0201 	orr.w	r2, r2, #1
 80044d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 fee5 	bl	80052a8 <UART_CheckIdleState>
 80044de:	4603      	mov	r3, r0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b08b      	sub	sp, #44	; 0x2c
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	4613      	mov	r3, r2
 80044f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044fa:	2b20      	cmp	r3, #32
 80044fc:	d156      	bne.n	80045ac <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <HAL_UART_Transmit_IT+0x22>
 8004504:	88fb      	ldrh	r3, [r7, #6]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e04f      	b.n	80045ae <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_UART_Transmit_IT+0x34>
 8004518:	2302      	movs	r3, #2
 800451a:	e048      	b.n	80045ae <HAL_UART_Transmit_IT+0xc6>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	88fa      	ldrh	r2, [r7, #6]
 800452e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	88fa      	ldrh	r2, [r7, #6]
 8004536:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2221      	movs	r2, #33	; 0x21
 800454c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004556:	d107      	bne.n	8004568 <HAL_UART_Transmit_IT+0x80>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d103      	bne.n	8004568 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4a16      	ldr	r2, [pc, #88]	; (80045bc <HAL_UART_Transmit_IT+0xd4>)
 8004564:	669a      	str	r2, [r3, #104]	; 0x68
 8004566:	e002      	b.n	800456e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4a15      	ldr	r2, [pc, #84]	; (80045c0 <HAL_UART_Transmit_IT+0xd8>)
 800456c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	e853 3f00 	ldrex	r3, [r3]
 8004582:	613b      	str	r3, [r7, #16]
   return(result);
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	461a      	mov	r2, r3
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	623b      	str	r3, [r7, #32]
 8004596:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004598:	69f9      	ldr	r1, [r7, #28]
 800459a:	6a3a      	ldr	r2, [r7, #32]
 800459c:	e841 2300 	strex	r3, r2, [r1]
 80045a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1e6      	bne.n	8004576 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 80045a8:	2300      	movs	r3, #0
 80045aa:	e000      	b.n	80045ae <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80045ac:	2302      	movs	r3, #2
  }
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	372c      	adds	r7, #44	; 0x2c
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	08005801 	.word	0x08005801
 80045c0:	0800574b 	.word	0x0800574b

080045c4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08a      	sub	sp, #40	; 0x28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	4613      	mov	r3, r2
 80045d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045d6:	2b20      	cmp	r3, #32
 80045d8:	d13d      	bne.n	8004656 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d002      	beq.n	80045e6 <HAL_UART_Receive_IT+0x22>
 80045e0:	88fb      	ldrh	r3, [r7, #6]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e036      	b.n	8004658 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_UART_Receive_IT+0x34>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e02f      	b.n	8004658 <HAL_UART_Receive_IT+0x94>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d018      	beq.n	8004646 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	e853 3f00 	ldrex	r3, [r3]
 8004620:	613b      	str	r3, [r7, #16]
   return(result);
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	623b      	str	r3, [r7, #32]
 8004634:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004636:	69f9      	ldr	r1, [r7, #28]
 8004638:	6a3a      	ldr	r2, [r7, #32]
 800463a:	e841 2300 	strex	r3, r2, [r1]
 800463e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1e6      	bne.n	8004614 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004646:	88fb      	ldrh	r3, [r7, #6]
 8004648:	461a      	mov	r2, r3
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 ff39 	bl	80054c4 <UART_Start_Receive_IT>
 8004652:	4603      	mov	r3, r0
 8004654:	e000      	b.n	8004658 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004656:	2302      	movs	r3, #2
  }
}
 8004658:	4618      	mov	r0, r3
 800465a:	3728      	adds	r7, #40	; 0x28
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b0ba      	sub	sp, #232	; 0xe8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004686:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800468a:	f640 030f 	movw	r3, #2063	; 0x80f
 800468e:	4013      	ands	r3, r2
 8004690:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004694:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004698:	2b00      	cmp	r3, #0
 800469a:	d115      	bne.n	80046c8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800469c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a0:	f003 0320 	and.w	r3, r3, #32
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00f      	beq.n	80046c8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ac:	f003 0320 	and.w	r3, r3, #32
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d009      	beq.n	80046c8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 82a4 	beq.w	8004c06 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	4798      	blx	r3
      }
      return;
 80046c6:	e29e      	b.n	8004c06 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80046c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 8117 	beq.w	8004900 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80046d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d106      	bne.n	80046ec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80046de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80046e2:	4b85      	ldr	r3, [pc, #532]	; (80048f8 <HAL_UART_IRQHandler+0x298>)
 80046e4:	4013      	ands	r3, r2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 810a 	beq.w	8004900 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d011      	beq.n	800471c <HAL_UART_IRQHandler+0xbc>
 80046f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00b      	beq.n	800471c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2201      	movs	r2, #1
 800470a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004712:	f043 0201 	orr.w	r2, r3, #1
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800471c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d011      	beq.n	800474c <HAL_UART_IRQHandler+0xec>
 8004728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00b      	beq.n	800474c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2202      	movs	r2, #2
 800473a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004742:	f043 0204 	orr.w	r2, r3, #4
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800474c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b00      	cmp	r3, #0
 8004756:	d011      	beq.n	800477c <HAL_UART_IRQHandler+0x11c>
 8004758:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00b      	beq.n	800477c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2204      	movs	r2, #4
 800476a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004772:	f043 0202 	orr.w	r2, r3, #2
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800477c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004780:	f003 0308 	and.w	r3, r3, #8
 8004784:	2b00      	cmp	r3, #0
 8004786:	d017      	beq.n	80047b8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800478c:	f003 0320 	and.w	r3, r3, #32
 8004790:	2b00      	cmp	r3, #0
 8004792:	d105      	bne.n	80047a0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004798:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00b      	beq.n	80047b8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2208      	movs	r2, #8
 80047a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047ae:	f043 0208 	orr.w	r2, r3, #8
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80047b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d012      	beq.n	80047ea <HAL_UART_IRQHandler+0x18a>
 80047c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00c      	beq.n	80047ea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047e0:	f043 0220 	orr.w	r2, r3, #32
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 820a 	beq.w	8004c0a <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80047f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00d      	beq.n	800481e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004806:	f003 0320 	and.w	r3, r3, #32
 800480a:	2b00      	cmp	r3, #0
 800480c:	d007      	beq.n	800481e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004824:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004832:	2b40      	cmp	r3, #64	; 0x40
 8004834:	d005      	beq.n	8004842 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004836:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800483a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800483e:	2b00      	cmp	r3, #0
 8004840:	d04f      	beq.n	80048e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 ff08 	bl	8005658 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004852:	2b40      	cmp	r3, #64	; 0x40
 8004854:	d141      	bne.n	80048da <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3308      	adds	r3, #8
 800485c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004860:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004864:	e853 3f00 	ldrex	r3, [r3]
 8004868:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800486c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004874:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3308      	adds	r3, #8
 800487e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004882:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004886:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800488e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004892:	e841 2300 	strex	r3, r2, [r1]
 8004896:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800489a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1d9      	bne.n	8004856 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d013      	beq.n	80048d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ae:	4a13      	ldr	r2, [pc, #76]	; (80048fc <HAL_UART_IRQHandler+0x29c>)
 80048b0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fd ff72 	bl	80027a0 <HAL_DMA_Abort_IT>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d017      	beq.n	80048f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80048cc:	4610      	mov	r0, r2
 80048ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d0:	e00f      	b.n	80048f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f9ae 	bl	8004c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d8:	e00b      	b.n	80048f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f9aa 	bl	8004c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e0:	e007      	b.n	80048f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f9a6 	bl	8004c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80048f0:	e18b      	b.n	8004c0a <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f2:	bf00      	nop
    return;
 80048f4:	e189      	b.n	8004c0a <HAL_UART_IRQHandler+0x5aa>
 80048f6:	bf00      	nop
 80048f8:	04000120 	.word	0x04000120
 80048fc:	0800571f 	.word	0x0800571f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004904:	2b01      	cmp	r3, #1
 8004906:	f040 8144 	bne.w	8004b92 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800490a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800490e:	f003 0310 	and.w	r3, r3, #16
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 813d 	beq.w	8004b92 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800491c:	f003 0310 	and.w	r3, r3, #16
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 8136 	beq.w	8004b92 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2210      	movs	r2, #16
 800492c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004938:	2b40      	cmp	r3, #64	; 0x40
 800493a:	f040 80b2 	bne.w	8004aa2 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800494a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800494e:	2b00      	cmp	r3, #0
 8004950:	f000 815d 	beq.w	8004c0e <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800495a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800495e:	429a      	cmp	r2, r3
 8004960:	f080 8155 	bcs.w	8004c0e <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800496a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004978:	f000 8085 	beq.w	8004a86 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004984:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004990:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004998:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	461a      	mov	r2, r3
 80049a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80049a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80049aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80049b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049b6:	e841 2300 	strex	r3, r2, [r1]
 80049ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80049be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1da      	bne.n	800497c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	3308      	adds	r3, #8
 80049cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049d0:	e853 3f00 	ldrex	r3, [r3]
 80049d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80049d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049d8:	f023 0301 	bic.w	r3, r3, #1
 80049dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3308      	adds	r3, #8
 80049e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80049ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049f6:	e841 2300 	strex	r3, r2, [r1]
 80049fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80049fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1e1      	bne.n	80049c6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3308      	adds	r3, #8
 8004a08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a0c:	e853 3f00 	ldrex	r3, [r3]
 8004a10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3308      	adds	r3, #8
 8004a22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a2e:	e841 2300 	strex	r3, r2, [r1]
 8004a32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1e3      	bne.n	8004a02 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a4e:	e853 3f00 	ldrex	r3, [r3]
 8004a52:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a56:	f023 0310 	bic.w	r3, r3, #16
 8004a5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a68:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a6a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a70:	e841 2300 	strex	r3, r2, [r1]
 8004a74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1e4      	bne.n	8004a46 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fd fe1d 	bl	80026c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	4619      	mov	r1, r3
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f8d4 	bl	8004c48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004aa0:	e0b5      	b.n	8004c0e <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 80a7 	beq.w	8004c12 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8004ac4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 80a2 	beq.w	8004c12 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad6:	e853 3f00 	ldrex	r3, [r3]
 8004ada:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ade:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ae2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	461a      	mov	r2, r3
 8004aec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004af0:	647b      	str	r3, [r7, #68]	; 0x44
 8004af2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004af6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004af8:	e841 2300 	strex	r3, r2, [r1]
 8004afc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1e4      	bne.n	8004ace <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3308      	adds	r3, #8
 8004b0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	e853 3f00 	ldrex	r3, [r3]
 8004b12:	623b      	str	r3, [r7, #32]
   return(result);
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	f023 0301 	bic.w	r3, r3, #1
 8004b1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3308      	adds	r3, #8
 8004b24:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b28:	633a      	str	r2, [r7, #48]	; 0x30
 8004b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b30:	e841 2300 	strex	r3, r2, [r1]
 8004b34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1e3      	bne.n	8004b04 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	e853 3f00 	ldrex	r3, [r3]
 8004b5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 0310 	bic.w	r3, r3, #16
 8004b62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b70:	61fb      	str	r3, [r7, #28]
 8004b72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b74:	69b9      	ldr	r1, [r7, #24]
 8004b76:	69fa      	ldr	r2, [r7, #28]
 8004b78:	e841 2300 	strex	r3, r2, [r1]
 8004b7c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1e4      	bne.n	8004b4e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b88:	4619      	mov	r1, r3
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f85c 	bl	8004c48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b90:	e03f      	b.n	8004c12 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00e      	beq.n	8004bbc <HAL_UART_IRQHandler+0x55c>
 8004b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d008      	beq.n	8004bbc <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004bb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f853 	bl	8004c60 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bba:	e02d      	b.n	8004c18 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00e      	beq.n	8004be6 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d008      	beq.n	8004be6 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d01c      	beq.n	8004c16 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	4798      	blx	r3
    }
    return;
 8004be4:	e017      	b.n	8004c16 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d012      	beq.n	8004c18 <HAL_UART_IRQHandler+0x5b8>
 8004bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00c      	beq.n	8004c18 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fe5e 	bl	80058c0 <UART_EndTransmit_IT>
    return;
 8004c04:	e008      	b.n	8004c18 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004c06:	bf00      	nop
 8004c08:	e006      	b.n	8004c18 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004c0a:	bf00      	nop
 8004c0c:	e004      	b.n	8004c18 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004c0e:	bf00      	nop
 8004c10:	e002      	b.n	8004c18 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004c12:	bf00      	nop
 8004c14:	e000      	b.n	8004c18 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004c16:	bf00      	nop
  }

}
 8004c18:	37e8      	adds	r7, #232	; 0xe8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop

08004c20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	460b      	mov	r3, r1
 8004c52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c80:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c86:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	4313      	orrs	r3, r2
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
	...

08004c9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b088      	sub	sp, #32
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689a      	ldr	r2, [r3, #8]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	69db      	ldr	r3, [r3, #28]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	4ba6      	ldr	r3, [pc, #664]	; (8004f60 <UART_SetConfig+0x2c4>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6812      	ldr	r2, [r2, #0]
 8004cce:	6979      	ldr	r1, [r7, #20]
 8004cd0:	430b      	orrs	r3, r1
 8004cd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a94      	ldr	r2, [pc, #592]	; (8004f64 <UART_SetConfig+0x2c8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d120      	bne.n	8004d5a <UART_SetConfig+0xbe>
 8004d18:	4b93      	ldr	r3, [pc, #588]	; (8004f68 <UART_SetConfig+0x2cc>)
 8004d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d816      	bhi.n	8004d54 <UART_SetConfig+0xb8>
 8004d26:	a201      	add	r2, pc, #4	; (adr r2, 8004d2c <UART_SetConfig+0x90>)
 8004d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2c:	08004d3d 	.word	0x08004d3d
 8004d30:	08004d49 	.word	0x08004d49
 8004d34:	08004d43 	.word	0x08004d43
 8004d38:	08004d4f 	.word	0x08004d4f
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	77fb      	strb	r3, [r7, #31]
 8004d40:	e150      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004d42:	2302      	movs	r3, #2
 8004d44:	77fb      	strb	r3, [r7, #31]
 8004d46:	e14d      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004d48:	2304      	movs	r3, #4
 8004d4a:	77fb      	strb	r3, [r7, #31]
 8004d4c:	e14a      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004d4e:	2308      	movs	r3, #8
 8004d50:	77fb      	strb	r3, [r7, #31]
 8004d52:	e147      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004d54:	2310      	movs	r3, #16
 8004d56:	77fb      	strb	r3, [r7, #31]
 8004d58:	e144      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a83      	ldr	r2, [pc, #524]	; (8004f6c <UART_SetConfig+0x2d0>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d132      	bne.n	8004dca <UART_SetConfig+0x12e>
 8004d64:	4b80      	ldr	r3, [pc, #512]	; (8004f68 <UART_SetConfig+0x2cc>)
 8004d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6a:	f003 030c 	and.w	r3, r3, #12
 8004d6e:	2b0c      	cmp	r3, #12
 8004d70:	d828      	bhi.n	8004dc4 <UART_SetConfig+0x128>
 8004d72:	a201      	add	r2, pc, #4	; (adr r2, 8004d78 <UART_SetConfig+0xdc>)
 8004d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d78:	08004dad 	.word	0x08004dad
 8004d7c:	08004dc5 	.word	0x08004dc5
 8004d80:	08004dc5 	.word	0x08004dc5
 8004d84:	08004dc5 	.word	0x08004dc5
 8004d88:	08004db9 	.word	0x08004db9
 8004d8c:	08004dc5 	.word	0x08004dc5
 8004d90:	08004dc5 	.word	0x08004dc5
 8004d94:	08004dc5 	.word	0x08004dc5
 8004d98:	08004db3 	.word	0x08004db3
 8004d9c:	08004dc5 	.word	0x08004dc5
 8004da0:	08004dc5 	.word	0x08004dc5
 8004da4:	08004dc5 	.word	0x08004dc5
 8004da8:	08004dbf 	.word	0x08004dbf
 8004dac:	2300      	movs	r3, #0
 8004dae:	77fb      	strb	r3, [r7, #31]
 8004db0:	e118      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004db2:	2302      	movs	r3, #2
 8004db4:	77fb      	strb	r3, [r7, #31]
 8004db6:	e115      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004db8:	2304      	movs	r3, #4
 8004dba:	77fb      	strb	r3, [r7, #31]
 8004dbc:	e112      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004dbe:	2308      	movs	r3, #8
 8004dc0:	77fb      	strb	r3, [r7, #31]
 8004dc2:	e10f      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004dc4:	2310      	movs	r3, #16
 8004dc6:	77fb      	strb	r3, [r7, #31]
 8004dc8:	e10c      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a68      	ldr	r2, [pc, #416]	; (8004f70 <UART_SetConfig+0x2d4>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d120      	bne.n	8004e16 <UART_SetConfig+0x17a>
 8004dd4:	4b64      	ldr	r3, [pc, #400]	; (8004f68 <UART_SetConfig+0x2cc>)
 8004dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dda:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004dde:	2b30      	cmp	r3, #48	; 0x30
 8004de0:	d013      	beq.n	8004e0a <UART_SetConfig+0x16e>
 8004de2:	2b30      	cmp	r3, #48	; 0x30
 8004de4:	d814      	bhi.n	8004e10 <UART_SetConfig+0x174>
 8004de6:	2b20      	cmp	r3, #32
 8004de8:	d009      	beq.n	8004dfe <UART_SetConfig+0x162>
 8004dea:	2b20      	cmp	r3, #32
 8004dec:	d810      	bhi.n	8004e10 <UART_SetConfig+0x174>
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <UART_SetConfig+0x15c>
 8004df2:	2b10      	cmp	r3, #16
 8004df4:	d006      	beq.n	8004e04 <UART_SetConfig+0x168>
 8004df6:	e00b      	b.n	8004e10 <UART_SetConfig+0x174>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	77fb      	strb	r3, [r7, #31]
 8004dfc:	e0f2      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004dfe:	2302      	movs	r3, #2
 8004e00:	77fb      	strb	r3, [r7, #31]
 8004e02:	e0ef      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004e04:	2304      	movs	r3, #4
 8004e06:	77fb      	strb	r3, [r7, #31]
 8004e08:	e0ec      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004e0a:	2308      	movs	r3, #8
 8004e0c:	77fb      	strb	r3, [r7, #31]
 8004e0e:	e0e9      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004e10:	2310      	movs	r3, #16
 8004e12:	77fb      	strb	r3, [r7, #31]
 8004e14:	e0e6      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a56      	ldr	r2, [pc, #344]	; (8004f74 <UART_SetConfig+0x2d8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d120      	bne.n	8004e62 <UART_SetConfig+0x1c6>
 8004e20:	4b51      	ldr	r3, [pc, #324]	; (8004f68 <UART_SetConfig+0x2cc>)
 8004e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e2a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e2c:	d013      	beq.n	8004e56 <UART_SetConfig+0x1ba>
 8004e2e:	2bc0      	cmp	r3, #192	; 0xc0
 8004e30:	d814      	bhi.n	8004e5c <UART_SetConfig+0x1c0>
 8004e32:	2b80      	cmp	r3, #128	; 0x80
 8004e34:	d009      	beq.n	8004e4a <UART_SetConfig+0x1ae>
 8004e36:	2b80      	cmp	r3, #128	; 0x80
 8004e38:	d810      	bhi.n	8004e5c <UART_SetConfig+0x1c0>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d002      	beq.n	8004e44 <UART_SetConfig+0x1a8>
 8004e3e:	2b40      	cmp	r3, #64	; 0x40
 8004e40:	d006      	beq.n	8004e50 <UART_SetConfig+0x1b4>
 8004e42:	e00b      	b.n	8004e5c <UART_SetConfig+0x1c0>
 8004e44:	2300      	movs	r3, #0
 8004e46:	77fb      	strb	r3, [r7, #31]
 8004e48:	e0cc      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	77fb      	strb	r3, [r7, #31]
 8004e4e:	e0c9      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004e50:	2304      	movs	r3, #4
 8004e52:	77fb      	strb	r3, [r7, #31]
 8004e54:	e0c6      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004e56:	2308      	movs	r3, #8
 8004e58:	77fb      	strb	r3, [r7, #31]
 8004e5a:	e0c3      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004e5c:	2310      	movs	r3, #16
 8004e5e:	77fb      	strb	r3, [r7, #31]
 8004e60:	e0c0      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a44      	ldr	r2, [pc, #272]	; (8004f78 <UART_SetConfig+0x2dc>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d125      	bne.n	8004eb8 <UART_SetConfig+0x21c>
 8004e6c:	4b3e      	ldr	r3, [pc, #248]	; (8004f68 <UART_SetConfig+0x2cc>)
 8004e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e7a:	d017      	beq.n	8004eac <UART_SetConfig+0x210>
 8004e7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e80:	d817      	bhi.n	8004eb2 <UART_SetConfig+0x216>
 8004e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e86:	d00b      	beq.n	8004ea0 <UART_SetConfig+0x204>
 8004e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e8c:	d811      	bhi.n	8004eb2 <UART_SetConfig+0x216>
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <UART_SetConfig+0x1fe>
 8004e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e96:	d006      	beq.n	8004ea6 <UART_SetConfig+0x20a>
 8004e98:	e00b      	b.n	8004eb2 <UART_SetConfig+0x216>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	77fb      	strb	r3, [r7, #31]
 8004e9e:	e0a1      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	77fb      	strb	r3, [r7, #31]
 8004ea4:	e09e      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004ea6:	2304      	movs	r3, #4
 8004ea8:	77fb      	strb	r3, [r7, #31]
 8004eaa:	e09b      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004eac:	2308      	movs	r3, #8
 8004eae:	77fb      	strb	r3, [r7, #31]
 8004eb0:	e098      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004eb2:	2310      	movs	r3, #16
 8004eb4:	77fb      	strb	r3, [r7, #31]
 8004eb6:	e095      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a2f      	ldr	r2, [pc, #188]	; (8004f7c <UART_SetConfig+0x2e0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d125      	bne.n	8004f0e <UART_SetConfig+0x272>
 8004ec2:	4b29      	ldr	r3, [pc, #164]	; (8004f68 <UART_SetConfig+0x2cc>)
 8004ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ecc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ed0:	d017      	beq.n	8004f02 <UART_SetConfig+0x266>
 8004ed2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ed6:	d817      	bhi.n	8004f08 <UART_SetConfig+0x26c>
 8004ed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004edc:	d00b      	beq.n	8004ef6 <UART_SetConfig+0x25a>
 8004ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ee2:	d811      	bhi.n	8004f08 <UART_SetConfig+0x26c>
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <UART_SetConfig+0x254>
 8004ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eec:	d006      	beq.n	8004efc <UART_SetConfig+0x260>
 8004eee:	e00b      	b.n	8004f08 <UART_SetConfig+0x26c>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	77fb      	strb	r3, [r7, #31]
 8004ef4:	e076      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	77fb      	strb	r3, [r7, #31]
 8004efa:	e073      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004efc:	2304      	movs	r3, #4
 8004efe:	77fb      	strb	r3, [r7, #31]
 8004f00:	e070      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004f02:	2308      	movs	r3, #8
 8004f04:	77fb      	strb	r3, [r7, #31]
 8004f06:	e06d      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004f08:	2310      	movs	r3, #16
 8004f0a:	77fb      	strb	r3, [r7, #31]
 8004f0c:	e06a      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a1b      	ldr	r2, [pc, #108]	; (8004f80 <UART_SetConfig+0x2e4>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d138      	bne.n	8004f8a <UART_SetConfig+0x2ee>
 8004f18:	4b13      	ldr	r3, [pc, #76]	; (8004f68 <UART_SetConfig+0x2cc>)
 8004f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004f22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f26:	d017      	beq.n	8004f58 <UART_SetConfig+0x2bc>
 8004f28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f2c:	d82a      	bhi.n	8004f84 <UART_SetConfig+0x2e8>
 8004f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f32:	d00b      	beq.n	8004f4c <UART_SetConfig+0x2b0>
 8004f34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f38:	d824      	bhi.n	8004f84 <UART_SetConfig+0x2e8>
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <UART_SetConfig+0x2aa>
 8004f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f42:	d006      	beq.n	8004f52 <UART_SetConfig+0x2b6>
 8004f44:	e01e      	b.n	8004f84 <UART_SetConfig+0x2e8>
 8004f46:	2300      	movs	r3, #0
 8004f48:	77fb      	strb	r3, [r7, #31]
 8004f4a:	e04b      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	77fb      	strb	r3, [r7, #31]
 8004f50:	e048      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004f52:	2304      	movs	r3, #4
 8004f54:	77fb      	strb	r3, [r7, #31]
 8004f56:	e045      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004f58:	2308      	movs	r3, #8
 8004f5a:	77fb      	strb	r3, [r7, #31]
 8004f5c:	e042      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004f5e:	bf00      	nop
 8004f60:	efff69f3 	.word	0xefff69f3
 8004f64:	40011000 	.word	0x40011000
 8004f68:	40023800 	.word	0x40023800
 8004f6c:	40004400 	.word	0x40004400
 8004f70:	40004800 	.word	0x40004800
 8004f74:	40004c00 	.word	0x40004c00
 8004f78:	40005000 	.word	0x40005000
 8004f7c:	40011400 	.word	0x40011400
 8004f80:	40007800 	.word	0x40007800
 8004f84:	2310      	movs	r3, #16
 8004f86:	77fb      	strb	r3, [r7, #31]
 8004f88:	e02c      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a72      	ldr	r2, [pc, #456]	; (8005158 <UART_SetConfig+0x4bc>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d125      	bne.n	8004fe0 <UART_SetConfig+0x344>
 8004f94:	4b71      	ldr	r3, [pc, #452]	; (800515c <UART_SetConfig+0x4c0>)
 8004f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f9e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004fa2:	d017      	beq.n	8004fd4 <UART_SetConfig+0x338>
 8004fa4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004fa8:	d817      	bhi.n	8004fda <UART_SetConfig+0x33e>
 8004faa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fae:	d00b      	beq.n	8004fc8 <UART_SetConfig+0x32c>
 8004fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fb4:	d811      	bhi.n	8004fda <UART_SetConfig+0x33e>
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <UART_SetConfig+0x326>
 8004fba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fbe:	d006      	beq.n	8004fce <UART_SetConfig+0x332>
 8004fc0:	e00b      	b.n	8004fda <UART_SetConfig+0x33e>
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	77fb      	strb	r3, [r7, #31]
 8004fc6:	e00d      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	77fb      	strb	r3, [r7, #31]
 8004fcc:	e00a      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004fce:	2304      	movs	r3, #4
 8004fd0:	77fb      	strb	r3, [r7, #31]
 8004fd2:	e007      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004fd4:	2308      	movs	r3, #8
 8004fd6:	77fb      	strb	r3, [r7, #31]
 8004fd8:	e004      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004fda:	2310      	movs	r3, #16
 8004fdc:	77fb      	strb	r3, [r7, #31]
 8004fde:	e001      	b.n	8004fe4 <UART_SetConfig+0x348>
 8004fe0:	2310      	movs	r3, #16
 8004fe2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fec:	d15b      	bne.n	80050a6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004fee:	7ffb      	ldrb	r3, [r7, #31]
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	d828      	bhi.n	8005046 <UART_SetConfig+0x3aa>
 8004ff4:	a201      	add	r2, pc, #4	; (adr r2, 8004ffc <UART_SetConfig+0x360>)
 8004ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffa:	bf00      	nop
 8004ffc:	08005021 	.word	0x08005021
 8005000:	08005029 	.word	0x08005029
 8005004:	08005031 	.word	0x08005031
 8005008:	08005047 	.word	0x08005047
 800500c:	08005037 	.word	0x08005037
 8005010:	08005047 	.word	0x08005047
 8005014:	08005047 	.word	0x08005047
 8005018:	08005047 	.word	0x08005047
 800501c:	0800503f 	.word	0x0800503f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005020:	f7fe fab2 	bl	8003588 <HAL_RCC_GetPCLK1Freq>
 8005024:	61b8      	str	r0, [r7, #24]
        break;
 8005026:	e013      	b.n	8005050 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005028:	f7fe fac2 	bl	80035b0 <HAL_RCC_GetPCLK2Freq>
 800502c:	61b8      	str	r0, [r7, #24]
        break;
 800502e:	e00f      	b.n	8005050 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005030:	4b4b      	ldr	r3, [pc, #300]	; (8005160 <UART_SetConfig+0x4c4>)
 8005032:	61bb      	str	r3, [r7, #24]
        break;
 8005034:	e00c      	b.n	8005050 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005036:	f7fe f995 	bl	8003364 <HAL_RCC_GetSysClockFreq>
 800503a:	61b8      	str	r0, [r7, #24]
        break;
 800503c:	e008      	b.n	8005050 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800503e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005042:	61bb      	str	r3, [r7, #24]
        break;
 8005044:	e004      	b.n	8005050 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005046:	2300      	movs	r3, #0
 8005048:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	77bb      	strb	r3, [r7, #30]
        break;
 800504e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d074      	beq.n	8005140 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	005a      	lsls	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	085b      	lsrs	r3, r3, #1
 8005060:	441a      	add	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	fbb2 f3f3 	udiv	r3, r2, r3
 800506a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	2b0f      	cmp	r3, #15
 8005070:	d916      	bls.n	80050a0 <UART_SetConfig+0x404>
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005078:	d212      	bcs.n	80050a0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	b29b      	uxth	r3, r3
 800507e:	f023 030f 	bic.w	r3, r3, #15
 8005082:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	085b      	lsrs	r3, r3, #1
 8005088:	b29b      	uxth	r3, r3
 800508a:	f003 0307 	and.w	r3, r3, #7
 800508e:	b29a      	uxth	r2, r3
 8005090:	89fb      	ldrh	r3, [r7, #14]
 8005092:	4313      	orrs	r3, r2
 8005094:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	89fa      	ldrh	r2, [r7, #14]
 800509c:	60da      	str	r2, [r3, #12]
 800509e:	e04f      	b.n	8005140 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	77bb      	strb	r3, [r7, #30]
 80050a4:	e04c      	b.n	8005140 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050a6:	7ffb      	ldrb	r3, [r7, #31]
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d828      	bhi.n	80050fe <UART_SetConfig+0x462>
 80050ac:	a201      	add	r2, pc, #4	; (adr r2, 80050b4 <UART_SetConfig+0x418>)
 80050ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b2:	bf00      	nop
 80050b4:	080050d9 	.word	0x080050d9
 80050b8:	080050e1 	.word	0x080050e1
 80050bc:	080050e9 	.word	0x080050e9
 80050c0:	080050ff 	.word	0x080050ff
 80050c4:	080050ef 	.word	0x080050ef
 80050c8:	080050ff 	.word	0x080050ff
 80050cc:	080050ff 	.word	0x080050ff
 80050d0:	080050ff 	.word	0x080050ff
 80050d4:	080050f7 	.word	0x080050f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050d8:	f7fe fa56 	bl	8003588 <HAL_RCC_GetPCLK1Freq>
 80050dc:	61b8      	str	r0, [r7, #24]
        break;
 80050de:	e013      	b.n	8005108 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050e0:	f7fe fa66 	bl	80035b0 <HAL_RCC_GetPCLK2Freq>
 80050e4:	61b8      	str	r0, [r7, #24]
        break;
 80050e6:	e00f      	b.n	8005108 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050e8:	4b1d      	ldr	r3, [pc, #116]	; (8005160 <UART_SetConfig+0x4c4>)
 80050ea:	61bb      	str	r3, [r7, #24]
        break;
 80050ec:	e00c      	b.n	8005108 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ee:	f7fe f939 	bl	8003364 <HAL_RCC_GetSysClockFreq>
 80050f2:	61b8      	str	r0, [r7, #24]
        break;
 80050f4:	e008      	b.n	8005108 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050fa:	61bb      	str	r3, [r7, #24]
        break;
 80050fc:	e004      	b.n	8005108 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80050fe:	2300      	movs	r3, #0
 8005100:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	77bb      	strb	r3, [r7, #30]
        break;
 8005106:	bf00      	nop
    }

    if (pclk != 0U)
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d018      	beq.n	8005140 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	085a      	lsrs	r2, r3, #1
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	441a      	add	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005120:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	2b0f      	cmp	r3, #15
 8005126:	d909      	bls.n	800513c <UART_SetConfig+0x4a0>
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800512e:	d205      	bcs.n	800513c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	b29a      	uxth	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	60da      	str	r2, [r3, #12]
 800513a:	e001      	b.n	8005140 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800514c:	7fbb      	ldrb	r3, [r7, #30]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3720      	adds	r7, #32
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	40007c00 	.word	0x40007c00
 800515c:	40023800 	.word	0x40023800
 8005160:	00f42400 	.word	0x00f42400

08005164 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00a      	beq.n	800518e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b4:	f003 0304 	and.w	r3, r3, #4
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00a      	beq.n	80051d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	f003 0308 	and.w	r3, r3, #8
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	f003 0310 	and.w	r3, r3, #16
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00a      	beq.n	8005216 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	f003 0320 	and.w	r3, r3, #32
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005240:	2b00      	cmp	r3, #0
 8005242:	d01a      	beq.n	800527a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005262:	d10a      	bne.n	800527a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	605a      	str	r2, [r3, #4]
  }
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af02      	add	r7, sp, #8
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052b8:	f7fd f914 	bl	80024e4 <HAL_GetTick>
 80052bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0308 	and.w	r3, r3, #8
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d10e      	bne.n	80052ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f82d 	bl	800533a <UART_WaitOnFlagUntilTimeout>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e023      	b.n	8005332 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	d10e      	bne.n	8005316 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f817 	bl	800533a <UART_WaitOnFlagUntilTimeout>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e00d      	b.n	8005332 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2220      	movs	r2, #32
 800531a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2220      	movs	r2, #32
 8005320:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b09c      	sub	sp, #112	; 0x70
 800533e:	af00      	add	r7, sp, #0
 8005340:	60f8      	str	r0, [r7, #12]
 8005342:	60b9      	str	r1, [r7, #8]
 8005344:	603b      	str	r3, [r7, #0]
 8005346:	4613      	mov	r3, r2
 8005348:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800534a:	e0a5      	b.n	8005498 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800534c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800534e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005352:	f000 80a1 	beq.w	8005498 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005356:	f7fd f8c5 	bl	80024e4 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005362:	429a      	cmp	r2, r3
 8005364:	d302      	bcc.n	800536c <UART_WaitOnFlagUntilTimeout+0x32>
 8005366:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005368:	2b00      	cmp	r3, #0
 800536a:	d13e      	bne.n	80053ea <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005374:	e853 3f00 	ldrex	r3, [r3]
 8005378:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800537a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800537c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005380:	667b      	str	r3, [r7, #100]	; 0x64
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	461a      	mov	r2, r3
 8005388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800538a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800538c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005390:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005392:	e841 2300 	strex	r3, r2, [r1]
 8005396:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1e6      	bne.n	800536c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3308      	adds	r3, #8
 80053a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053a8:	e853 3f00 	ldrex	r3, [r3]
 80053ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b0:	f023 0301 	bic.w	r3, r3, #1
 80053b4:	663b      	str	r3, [r7, #96]	; 0x60
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	3308      	adds	r3, #8
 80053bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053be:	64ba      	str	r2, [r7, #72]	; 0x48
 80053c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053c6:	e841 2300 	strex	r3, r2, [r1]
 80053ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1e5      	bne.n	800539e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2220      	movs	r2, #32
 80053d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2220      	movs	r2, #32
 80053dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e067      	b.n	80054ba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d04f      	beq.n	8005498 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	69db      	ldr	r3, [r3, #28]
 80053fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005406:	d147      	bne.n	8005498 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005410:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541a:	e853 3f00 	ldrex	r3, [r3]
 800541e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005426:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	461a      	mov	r2, r3
 800542e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005430:	637b      	str	r3, [r7, #52]	; 0x34
 8005432:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005434:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005438:	e841 2300 	strex	r3, r2, [r1]
 800543c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800543e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1e6      	bne.n	8005412 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	3308      	adds	r3, #8
 800544a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	e853 3f00 	ldrex	r3, [r3]
 8005452:	613b      	str	r3, [r7, #16]
   return(result);
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	f023 0301 	bic.w	r3, r3, #1
 800545a:	66bb      	str	r3, [r7, #104]	; 0x68
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3308      	adds	r3, #8
 8005462:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005464:	623a      	str	r2, [r7, #32]
 8005466:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005468:	69f9      	ldr	r1, [r7, #28]
 800546a:	6a3a      	ldr	r2, [r7, #32]
 800546c:	e841 2300 	strex	r3, r2, [r1]
 8005470:	61bb      	str	r3, [r7, #24]
   return(result);
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1e5      	bne.n	8005444 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2220      	movs	r2, #32
 800547c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2220      	movs	r2, #32
 8005482:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2220      	movs	r2, #32
 8005488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e010      	b.n	80054ba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	69da      	ldr	r2, [r3, #28]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	4013      	ands	r3, r2
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	bf0c      	ite	eq
 80054a8:	2301      	moveq	r3, #1
 80054aa:	2300      	movne	r3, #0
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	461a      	mov	r2, r3
 80054b0:	79fb      	ldrb	r3, [r7, #7]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	f43f af4a 	beq.w	800534c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3770      	adds	r7, #112	; 0x70
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
	...

080054c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b097      	sub	sp, #92	; 0x5c
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	4613      	mov	r3, r2
 80054d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	88fa      	ldrh	r2, [r7, #6]
 80054dc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	88fa      	ldrh	r2, [r7, #6]
 80054e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f6:	d10e      	bne.n	8005516 <UART_Start_Receive_IT+0x52>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d105      	bne.n	800550c <UART_Start_Receive_IT+0x48>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005506:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800550a:	e02d      	b.n	8005568 <UART_Start_Receive_IT+0xa4>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	22ff      	movs	r2, #255	; 0xff
 8005510:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005514:	e028      	b.n	8005568 <UART_Start_Receive_IT+0xa4>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10d      	bne.n	800553a <UART_Start_Receive_IT+0x76>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d104      	bne.n	8005530 <UART_Start_Receive_IT+0x6c>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	22ff      	movs	r2, #255	; 0xff
 800552a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800552e:	e01b      	b.n	8005568 <UART_Start_Receive_IT+0xa4>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	227f      	movs	r2, #127	; 0x7f
 8005534:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005538:	e016      	b.n	8005568 <UART_Start_Receive_IT+0xa4>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005542:	d10d      	bne.n	8005560 <UART_Start_Receive_IT+0x9c>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d104      	bne.n	8005556 <UART_Start_Receive_IT+0x92>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	227f      	movs	r2, #127	; 0x7f
 8005550:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005554:	e008      	b.n	8005568 <UART_Start_Receive_IT+0xa4>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	223f      	movs	r2, #63	; 0x3f
 800555a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800555e:	e003      	b.n	8005568 <UART_Start_Receive_IT+0xa4>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2222      	movs	r2, #34	; 0x22
 8005574:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	3308      	adds	r3, #8
 800557c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005580:	e853 3f00 	ldrex	r3, [r3]
 8005584:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005588:	f043 0301 	orr.w	r3, r3, #1
 800558c:	657b      	str	r3, [r7, #84]	; 0x54
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3308      	adds	r3, #8
 8005594:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005596:	64ba      	str	r2, [r7, #72]	; 0x48
 8005598:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800559c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800559e:	e841 2300 	strex	r3, r2, [r1]
 80055a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80055a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1e5      	bne.n	8005576 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b2:	d107      	bne.n	80055c4 <UART_Start_Receive_IT+0x100>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d103      	bne.n	80055c4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4a24      	ldr	r2, [pc, #144]	; (8005650 <UART_Start_Receive_IT+0x18c>)
 80055c0:	665a      	str	r2, [r3, #100]	; 0x64
 80055c2:	e002      	b.n	80055ca <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4a23      	ldr	r2, [pc, #140]	; (8005654 <UART_Start_Receive_IT+0x190>)
 80055c8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d019      	beq.n	800560e <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e2:	e853 3f00 	ldrex	r3, [r3]
 80055e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80055ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	461a      	mov	r2, r3
 80055f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055f8:	637b      	str	r3, [r7, #52]	; 0x34
 80055fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005600:	e841 2300 	strex	r3, r2, [r1]
 8005604:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e6      	bne.n	80055da <UART_Start_Receive_IT+0x116>
 800560c:	e018      	b.n	8005640 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	e853 3f00 	ldrex	r3, [r3]
 800561a:	613b      	str	r3, [r7, #16]
   return(result);
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	f043 0320 	orr.w	r3, r3, #32
 8005622:	653b      	str	r3, [r7, #80]	; 0x50
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	461a      	mov	r2, r3
 800562a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800562c:	623b      	str	r3, [r7, #32]
 800562e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005630:	69f9      	ldr	r1, [r7, #28]
 8005632:	6a3a      	ldr	r2, [r7, #32]
 8005634:	e841 2300 	strex	r3, r2, [r1]
 8005638:	61bb      	str	r3, [r7, #24]
   return(result);
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1e6      	bne.n	800560e <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	375c      	adds	r7, #92	; 0x5c
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	08005a71 	.word	0x08005a71
 8005654:	08005915 	.word	0x08005915

08005658 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005658:	b480      	push	{r7}
 800565a:	b095      	sub	sp, #84	; 0x54
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005668:	e853 3f00 	ldrex	r3, [r3]
 800566c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800566e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005670:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005674:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	461a      	mov	r2, r3
 800567c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800567e:	643b      	str	r3, [r7, #64]	; 0x40
 8005680:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005682:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005684:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005686:	e841 2300 	strex	r3, r2, [r1]
 800568a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800568c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1e6      	bne.n	8005660 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	3308      	adds	r3, #8
 8005698:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	e853 3f00 	ldrex	r3, [r3]
 80056a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	f023 0301 	bic.w	r3, r3, #1
 80056a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3308      	adds	r3, #8
 80056b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056ba:	e841 2300 	strex	r3, r2, [r1]
 80056be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1e5      	bne.n	8005692 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d118      	bne.n	8005700 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	e853 3f00 	ldrex	r3, [r3]
 80056da:	60bb      	str	r3, [r7, #8]
   return(result);
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f023 0310 	bic.w	r3, r3, #16
 80056e2:	647b      	str	r3, [r7, #68]	; 0x44
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	461a      	mov	r2, r3
 80056ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ec:	61bb      	str	r3, [r7, #24]
 80056ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f0:	6979      	ldr	r1, [r7, #20]
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	e841 2300 	strex	r3, r2, [r1]
 80056f8:	613b      	str	r3, [r7, #16]
   return(result);
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1e6      	bne.n	80056ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2220      	movs	r2, #32
 8005704:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005712:	bf00      	nop
 8005714:	3754      	adds	r7, #84	; 0x54
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b084      	sub	sp, #16
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f7ff fa79 	bl	8004c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005742:	bf00      	nop
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800574a:	b480      	push	{r7}
 800574c:	b08f      	sub	sp, #60	; 0x3c
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005756:	2b21      	cmp	r3, #33	; 0x21
 8005758:	d14c      	bne.n	80057f4 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005760:	b29b      	uxth	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d132      	bne.n	80057cc <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	e853 3f00 	ldrex	r3, [r3]
 8005772:	61fb      	str	r3, [r7, #28]
   return(result);
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800577a:	637b      	str	r3, [r7, #52]	; 0x34
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	461a      	mov	r2, r3
 8005782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005786:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005788:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800578a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800578c:	e841 2300 	strex	r3, r2, [r1]
 8005790:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1e6      	bne.n	8005766 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	e853 3f00 	ldrex	r3, [r3]
 80057a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057ac:	633b      	str	r3, [r7, #48]	; 0x30
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	461a      	mov	r2, r3
 80057b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b6:	61bb      	str	r3, [r7, #24]
 80057b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	6979      	ldr	r1, [r7, #20]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	e841 2300 	strex	r3, r2, [r1]
 80057c2:	613b      	str	r3, [r7, #16]
   return(result);
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1e6      	bne.n	8005798 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80057ca:	e013      	b.n	80057f4 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d0:	781a      	ldrb	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3b01      	subs	r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80057f4:	bf00      	nop
 80057f6:	373c      	adds	r7, #60	; 0x3c
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005800:	b480      	push	{r7}
 8005802:	b091      	sub	sp, #68	; 0x44
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800580c:	2b21      	cmp	r3, #33	; 0x21
 800580e:	d151      	bne.n	80058b4 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005816:	b29b      	uxth	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	d132      	bne.n	8005882 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	e853 3f00 	ldrex	r3, [r3]
 8005828:	623b      	str	r3, [r7, #32]
   return(result);
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005830:	63bb      	str	r3, [r7, #56]	; 0x38
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	461a      	mov	r2, r3
 8005838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583a:	633b      	str	r3, [r7, #48]	; 0x30
 800583c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1e6      	bne.n	800581c <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	e853 3f00 	ldrex	r3, [r3]
 800585a:	60fb      	str	r3, [r7, #12]
   return(result);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005862:	637b      	str	r3, [r7, #52]	; 0x34
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	461a      	mov	r2, r3
 800586a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586c:	61fb      	str	r3, [r7, #28]
 800586e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005870:	69b9      	ldr	r1, [r7, #24]
 8005872:	69fa      	ldr	r2, [r7, #28]
 8005874:	e841 2300 	strex	r3, r2, [r1]
 8005878:	617b      	str	r3, [r7, #20]
   return(result);
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1e6      	bne.n	800584e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005880:	e018      	b.n	80058b4 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005886:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800588a:	881b      	ldrh	r3, [r3, #0]
 800588c:	461a      	mov	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005896:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800589c:	1c9a      	adds	r2, r3, #2
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	3b01      	subs	r3, #1
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80058b4:	bf00      	nop
 80058b6:	3744      	adds	r7, #68	; 0x44
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	e853 3f00 	ldrex	r3, [r3]
 80058d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058dc:	61fb      	str	r3, [r7, #28]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	461a      	mov	r2, r3
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	61bb      	str	r3, [r7, #24]
 80058e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ea:	6979      	ldr	r1, [r7, #20]
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	e841 2300 	strex	r3, r2, [r1]
 80058f2:	613b      	str	r3, [r7, #16]
   return(result);
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1e6      	bne.n	80058c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2220      	movs	r2, #32
 80058fe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7ff f98a 	bl	8004c20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800590c:	bf00      	nop
 800590e:	3720      	adds	r7, #32
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b096      	sub	sp, #88	; 0x58
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005922:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800592a:	2b22      	cmp	r3, #34	; 0x22
 800592c:	f040 8094 	bne.w	8005a58 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800593a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800593e:	b2d9      	uxtb	r1, r3
 8005940:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005944:	b2da      	uxtb	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594a:	400a      	ands	r2, r1
 800594c:	b2d2      	uxtb	r2, r2
 800594e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005954:	1c5a      	adds	r2, r3, #1
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005960:	b29b      	uxth	r3, r3
 8005962:	3b01      	subs	r3, #1
 8005964:	b29a      	uxth	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005972:	b29b      	uxth	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	d177      	bne.n	8005a68 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005980:	e853 3f00 	ldrex	r3, [r3]
 8005984:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005988:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800598c:	653b      	str	r3, [r7, #80]	; 0x50
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005996:	647b      	str	r3, [r7, #68]	; 0x44
 8005998:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800599c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800599e:	e841 2300 	strex	r3, r2, [r1]
 80059a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1e6      	bne.n	8005978 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	3308      	adds	r3, #8
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	e853 3f00 	ldrex	r3, [r3]
 80059b8:	623b      	str	r3, [r7, #32]
   return(result);
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	f023 0301 	bic.w	r3, r3, #1
 80059c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3308      	adds	r3, #8
 80059c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059ca:	633a      	str	r2, [r7, #48]	; 0x30
 80059cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059d2:	e841 2300 	strex	r3, r2, [r1]
 80059d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1e5      	bne.n	80059aa <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2220      	movs	r2, #32
 80059e2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d12e      	bne.n	8005a50 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	e853 3f00 	ldrex	r3, [r3]
 8005a04:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f023 0310 	bic.w	r3, r3, #16
 8005a0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	461a      	mov	r2, r3
 8005a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a16:	61fb      	str	r3, [r7, #28]
 8005a18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1a:	69b9      	ldr	r1, [r7, #24]
 8005a1c:	69fa      	ldr	r2, [r7, #28]
 8005a1e:	e841 2300 	strex	r3, r2, [r1]
 8005a22:	617b      	str	r3, [r7, #20]
   return(result);
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1e6      	bne.n	80059f8 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69db      	ldr	r3, [r3, #28]
 8005a30:	f003 0310 	and.w	r3, r3, #16
 8005a34:	2b10      	cmp	r3, #16
 8005a36:	d103      	bne.n	8005a40 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2210      	movs	r2, #16
 8005a3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a46:	4619      	mov	r1, r3
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f7ff f8fd 	bl	8004c48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a4e:	e00b      	b.n	8005a68 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f7fb fb65 	bl	8001120 <HAL_UART_RxCpltCallback>
}
 8005a56:	e007      	b.n	8005a68 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	699a      	ldr	r2, [r3, #24]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0208 	orr.w	r2, r2, #8
 8005a66:	619a      	str	r2, [r3, #24]
}
 8005a68:	bf00      	nop
 8005a6a:	3758      	adds	r7, #88	; 0x58
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b096      	sub	sp, #88	; 0x58
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a7e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a86:	2b22      	cmp	r3, #34	; 0x22
 8005a88:	f040 8094 	bne.w	8005bb4 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005a9c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005aa0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aaa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab0:	1c9a      	adds	r2, r3, #2
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d177      	bne.n	8005bc4 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005adc:	e853 3f00 	ldrex	r3, [r3]
 8005ae0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	461a      	mov	r2, r3
 8005af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af2:	643b      	str	r3, [r7, #64]	; 0x40
 8005af4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005af8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005afa:	e841 2300 	strex	r3, r2, [r1]
 8005afe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1e6      	bne.n	8005ad4 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	3308      	adds	r3, #8
 8005b0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	e853 3f00 	ldrex	r3, [r3]
 8005b14:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	f023 0301 	bic.w	r3, r3, #1
 8005b1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3308      	adds	r3, #8
 8005b24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b2e:	e841 2300 	strex	r3, r2, [r1]
 8005b32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1e5      	bne.n	8005b06 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d12e      	bne.n	8005bac <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	e853 3f00 	ldrex	r3, [r3]
 8005b60:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f023 0310 	bic.w	r3, r3, #16
 8005b68:	647b      	str	r3, [r7, #68]	; 0x44
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b72:	61bb      	str	r3, [r7, #24]
 8005b74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b76:	6979      	ldr	r1, [r7, #20]
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	613b      	str	r3, [r7, #16]
   return(result);
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e6      	bne.n	8005b54 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69db      	ldr	r3, [r3, #28]
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	2b10      	cmp	r3, #16
 8005b92:	d103      	bne.n	8005b9c <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2210      	movs	r2, #16
 8005b9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7ff f84f 	bl	8004c48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005baa:	e00b      	b.n	8005bc4 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7fb fab7 	bl	8001120 <HAL_UART_RxCpltCallback>
}
 8005bb2:	e007      	b.n	8005bc4 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699a      	ldr	r2, [r3, #24]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 0208 	orr.w	r2, r2, #8
 8005bc2:	619a      	str	r2, [r3, #24]
}
 8005bc4:	bf00      	nop
 8005bc6:	3758      	adds	r7, #88	; 0x58
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005bcc:	b480      	push	{r7}
 8005bce:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005bd0:	bf00      	nop
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
	...

08005bdc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005be2:	f3ef 8305 	mrs	r3, IPSR
 8005be6:	60bb      	str	r3, [r7, #8]
  return(result);
 8005be8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10f      	bne.n	8005c0e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bee:	f3ef 8310 	mrs	r3, PRIMASK
 8005bf2:	607b      	str	r3, [r7, #4]
  return(result);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d105      	bne.n	8005c06 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005bfa:	f3ef 8311 	mrs	r3, BASEPRI
 8005bfe:	603b      	str	r3, [r7, #0]
  return(result);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d007      	beq.n	8005c16 <osKernelInitialize+0x3a>
 8005c06:	4b0e      	ldr	r3, [pc, #56]	; (8005c40 <osKernelInitialize+0x64>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d103      	bne.n	8005c16 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005c0e:	f06f 0305 	mvn.w	r3, #5
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	e00c      	b.n	8005c30 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005c16:	4b0a      	ldr	r3, [pc, #40]	; (8005c40 <osKernelInitialize+0x64>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d105      	bne.n	8005c2a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005c1e:	4b08      	ldr	r3, [pc, #32]	; (8005c40 <osKernelInitialize+0x64>)
 8005c20:	2201      	movs	r2, #1
 8005c22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	60fb      	str	r3, [r7, #12]
 8005c28:	e002      	b.n	8005c30 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c2e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005c30:	68fb      	ldr	r3, [r7, #12]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	20000298 	.word	0x20000298

08005c44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c4a:	f3ef 8305 	mrs	r3, IPSR
 8005c4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c50:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10f      	bne.n	8005c76 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c56:	f3ef 8310 	mrs	r3, PRIMASK
 8005c5a:	607b      	str	r3, [r7, #4]
  return(result);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d105      	bne.n	8005c6e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c62:	f3ef 8311 	mrs	r3, BASEPRI
 8005c66:	603b      	str	r3, [r7, #0]
  return(result);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d007      	beq.n	8005c7e <osKernelStart+0x3a>
 8005c6e:	4b0f      	ldr	r3, [pc, #60]	; (8005cac <osKernelStart+0x68>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d103      	bne.n	8005c7e <osKernelStart+0x3a>
    stat = osErrorISR;
 8005c76:	f06f 0305 	mvn.w	r3, #5
 8005c7a:	60fb      	str	r3, [r7, #12]
 8005c7c:	e010      	b.n	8005ca0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005c7e:	4b0b      	ldr	r3, [pc, #44]	; (8005cac <osKernelStart+0x68>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d109      	bne.n	8005c9a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005c86:	f7ff ffa1 	bl	8005bcc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005c8a:	4b08      	ldr	r3, [pc, #32]	; (8005cac <osKernelStart+0x68>)
 8005c8c:	2202      	movs	r2, #2
 8005c8e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005c90:	f001 fc3c 	bl	800750c <vTaskStartScheduler>
      stat = osOK;
 8005c94:	2300      	movs	r3, #0
 8005c96:	60fb      	str	r3, [r7, #12]
 8005c98:	e002      	b.n	8005ca0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c9e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	20000298 	.word	0x20000298

08005cb0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b090      	sub	sp, #64	; 0x40
 8005cb4:	af04      	add	r7, sp, #16
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cc0:	f3ef 8305 	mrs	r3, IPSR
 8005cc4:	61fb      	str	r3, [r7, #28]
  return(result);
 8005cc6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f040 808f 	bne.w	8005dec <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cce:	f3ef 8310 	mrs	r3, PRIMASK
 8005cd2:	61bb      	str	r3, [r7, #24]
  return(result);
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d105      	bne.n	8005ce6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005cda:	f3ef 8311 	mrs	r3, BASEPRI
 8005cde:	617b      	str	r3, [r7, #20]
  return(result);
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <osThreadNew+0x3e>
 8005ce6:	4b44      	ldr	r3, [pc, #272]	; (8005df8 <osThreadNew+0x148>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d07e      	beq.n	8005dec <osThreadNew+0x13c>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d07b      	beq.n	8005dec <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005cf4:	2380      	movs	r3, #128	; 0x80
 8005cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005cf8:	2318      	movs	r3, #24
 8005cfa:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005d00:	f04f 33ff 	mov.w	r3, #4294967295
 8005d04:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d045      	beq.n	8005d98 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d002      	beq.n	8005d1a <osThreadNew+0x6a>
        name = attr->name;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d002      	beq.n	8005d28 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d008      	beq.n	8005d40 <osThreadNew+0x90>
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	2b38      	cmp	r3, #56	; 0x38
 8005d32:	d805      	bhi.n	8005d40 <osThreadNew+0x90>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <osThreadNew+0x94>
        return (NULL);
 8005d40:	2300      	movs	r3, #0
 8005d42:	e054      	b.n	8005dee <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d003      	beq.n	8005d54 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	089b      	lsrs	r3, r3, #2
 8005d52:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00e      	beq.n	8005d7a <osThreadNew+0xca>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	2bbb      	cmp	r3, #187	; 0xbb
 8005d62:	d90a      	bls.n	8005d7a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d006      	beq.n	8005d7a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d002      	beq.n	8005d7a <osThreadNew+0xca>
        mem = 1;
 8005d74:	2301      	movs	r3, #1
 8005d76:	623b      	str	r3, [r7, #32]
 8005d78:	e010      	b.n	8005d9c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10c      	bne.n	8005d9c <osThreadNew+0xec>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d108      	bne.n	8005d9c <osThreadNew+0xec>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d104      	bne.n	8005d9c <osThreadNew+0xec>
          mem = 0;
 8005d92:	2300      	movs	r3, #0
 8005d94:	623b      	str	r3, [r7, #32]
 8005d96:	e001      	b.n	8005d9c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d110      	bne.n	8005dc4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005daa:	9202      	str	r2, [sp, #8]
 8005dac:	9301      	str	r3, [sp, #4]
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005db6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f001 f9b1 	bl	8007120 <xTaskCreateStatic>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	613b      	str	r3, [r7, #16]
 8005dc2:	e013      	b.n	8005dec <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d110      	bne.n	8005dec <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	f107 0310 	add.w	r3, r7, #16
 8005dd2:	9301      	str	r3, [sp, #4]
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f001 fa02 	bl	80071e6 <xTaskCreate>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d001      	beq.n	8005dec <osThreadNew+0x13c>
          hTask = NULL;
 8005de8:	2300      	movs	r3, #0
 8005dea:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005dec:	693b      	ldr	r3, [r7, #16]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3730      	adds	r7, #48	; 0x30
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	20000298 	.word	0x20000298

08005dfc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e04:	f3ef 8305 	mrs	r3, IPSR
 8005e08:	613b      	str	r3, [r7, #16]
  return(result);
 8005e0a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10f      	bne.n	8005e30 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e10:	f3ef 8310 	mrs	r3, PRIMASK
 8005e14:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d105      	bne.n	8005e28 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e1c:	f3ef 8311 	mrs	r3, BASEPRI
 8005e20:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d007      	beq.n	8005e38 <osDelay+0x3c>
 8005e28:	4b0a      	ldr	r3, [pc, #40]	; (8005e54 <osDelay+0x58>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d103      	bne.n	8005e38 <osDelay+0x3c>
    stat = osErrorISR;
 8005e30:	f06f 0305 	mvn.w	r3, #5
 8005e34:	617b      	str	r3, [r7, #20]
 8005e36:	e007      	b.n	8005e48 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d002      	beq.n	8005e48 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f001 fb2c 	bl	80074a0 <vTaskDelay>
    }
  }

  return (stat);
 8005e48:	697b      	ldr	r3, [r7, #20]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	20000298 	.word	0x20000298

08005e58 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08c      	sub	sp, #48	; 0x30
 8005e5c:	af02      	add	r7, sp, #8
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005e64:	2300      	movs	r3, #0
 8005e66:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e68:	f3ef 8305 	mrs	r3, IPSR
 8005e6c:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e6e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f040 8086 	bne.w	8005f82 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e76:	f3ef 8310 	mrs	r3, PRIMASK
 8005e7a:	617b      	str	r3, [r7, #20]
  return(result);
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d105      	bne.n	8005e8e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e82:	f3ef 8311 	mrs	r3, BASEPRI
 8005e86:	613b      	str	r3, [r7, #16]
  return(result);
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <osSemaphoreNew+0x3e>
 8005e8e:	4b3f      	ldr	r3, [pc, #252]	; (8005f8c <osSemaphoreNew+0x134>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d075      	beq.n	8005f82 <osSemaphoreNew+0x12a>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d072      	beq.n	8005f82 <osSemaphoreNew+0x12a>
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d86e      	bhi.n	8005f82 <osSemaphoreNew+0x12a>
    mem = -1;
 8005ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ea8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d015      	beq.n	8005edc <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d006      	beq.n	8005ec6 <osSemaphoreNew+0x6e>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	2b4f      	cmp	r3, #79	; 0x4f
 8005ebe:	d902      	bls.n	8005ec6 <osSemaphoreNew+0x6e>
        mem = 1;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	623b      	str	r3, [r7, #32]
 8005ec4:	e00c      	b.n	8005ee0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d108      	bne.n	8005ee0 <osSemaphoreNew+0x88>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d104      	bne.n	8005ee0 <osSemaphoreNew+0x88>
          mem = 0;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	623b      	str	r3, [r7, #32]
 8005eda:	e001      	b.n	8005ee0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8005edc:	2300      	movs	r3, #0
 8005ede:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee6:	d04c      	beq.n	8005f82 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d128      	bne.n	8005f40 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d10a      	bne.n	8005f0a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	2203      	movs	r2, #3
 8005efa:	9200      	str	r2, [sp, #0]
 8005efc:	2200      	movs	r2, #0
 8005efe:	2100      	movs	r1, #0
 8005f00:	2001      	movs	r0, #1
 8005f02:	f000 fa1d 	bl	8006340 <xQueueGenericCreateStatic>
 8005f06:	6278      	str	r0, [r7, #36]	; 0x24
 8005f08:	e005      	b.n	8005f16 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8005f0a:	2203      	movs	r2, #3
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	2001      	movs	r0, #1
 8005f10:	f000 fa98 	bl	8006444 <xQueueGenericCreate>
 8005f14:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d022      	beq.n	8005f62 <osSemaphoreNew+0x10a>
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d01f      	beq.n	8005f62 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005f22:	2300      	movs	r3, #0
 8005f24:	2200      	movs	r2, #0
 8005f26:	2100      	movs	r1, #0
 8005f28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f2a:	f000 fb63 	bl	80065f4 <xQueueGenericSend>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d016      	beq.n	8005f62 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8005f34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f36:	f000 ff1d 	bl	8006d74 <vQueueDelete>
            hSemaphore = NULL;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f3e:	e010      	b.n	8005f62 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d108      	bne.n	8005f58 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	68b9      	ldr	r1, [r7, #8]
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f000 fadd 	bl	800650e <xQueueCreateCountingSemaphoreStatic>
 8005f54:	6278      	str	r0, [r7, #36]	; 0x24
 8005f56:	e004      	b.n	8005f62 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005f58:	68b9      	ldr	r1, [r7, #8]
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 fb12 	bl	8006584 <xQueueCreateCountingSemaphore>
 8005f60:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00c      	beq.n	8005f82 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <osSemaphoreNew+0x11e>
          name = attr->name;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	61fb      	str	r3, [r7, #28]
 8005f74:	e001      	b.n	8005f7a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005f7a:	69f9      	ldr	r1, [r7, #28]
 8005f7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f7e:	f001 f847 	bl	8007010 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3728      	adds	r7, #40	; 0x28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	20000298 	.word	0x20000298

08005f90 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b08c      	sub	sp, #48	; 0x30
 8005f94:	af02      	add	r7, sp, #8
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fa0:	f3ef 8305 	mrs	r3, IPSR
 8005fa4:	61bb      	str	r3, [r7, #24]
  return(result);
 8005fa6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d16f      	bne.n	800608c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fac:	f3ef 8310 	mrs	r3, PRIMASK
 8005fb0:	617b      	str	r3, [r7, #20]
  return(result);
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d105      	bne.n	8005fc4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005fb8:	f3ef 8311 	mrs	r3, BASEPRI
 8005fbc:	613b      	str	r3, [r7, #16]
  return(result);
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d003      	beq.n	8005fcc <osMessageQueueNew+0x3c>
 8005fc4:	4b34      	ldr	r3, [pc, #208]	; (8006098 <osMessageQueueNew+0x108>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d05f      	beq.n	800608c <osMessageQueueNew+0xfc>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d05c      	beq.n	800608c <osMessageQueueNew+0xfc>
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d059      	beq.n	800608c <osMessageQueueNew+0xfc>
    mem = -1;
 8005fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fdc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d029      	beq.n	8006038 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d012      	beq.n	8006012 <osMessageQueueNew+0x82>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	2b4f      	cmp	r3, #79	; 0x4f
 8005ff2:	d90e      	bls.n	8006012 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00a      	beq.n	8006012 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	695a      	ldr	r2, [r3, #20]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	68b9      	ldr	r1, [r7, #8]
 8006004:	fb01 f303 	mul.w	r3, r1, r3
 8006008:	429a      	cmp	r2, r3
 800600a:	d302      	bcc.n	8006012 <osMessageQueueNew+0x82>
        mem = 1;
 800600c:	2301      	movs	r3, #1
 800600e:	623b      	str	r3, [r7, #32]
 8006010:	e014      	b.n	800603c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d110      	bne.n	800603c <osMessageQueueNew+0xac>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10c      	bne.n	800603c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006026:	2b00      	cmp	r3, #0
 8006028:	d108      	bne.n	800603c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d104      	bne.n	800603c <osMessageQueueNew+0xac>
          mem = 0;
 8006032:	2300      	movs	r3, #0
 8006034:	623b      	str	r3, [r7, #32]
 8006036:	e001      	b.n	800603c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006038:	2300      	movs	r3, #0
 800603a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d10b      	bne.n	800605a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691a      	ldr	r2, [r3, #16]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	2100      	movs	r1, #0
 800604c:	9100      	str	r1, [sp, #0]
 800604e:	68b9      	ldr	r1, [r7, #8]
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 f975 	bl	8006340 <xQueueGenericCreateStatic>
 8006056:	6278      	str	r0, [r7, #36]	; 0x24
 8006058:	e008      	b.n	800606c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d105      	bne.n	800606c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006060:	2200      	movs	r2, #0
 8006062:	68b9      	ldr	r1, [r7, #8]
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 f9ed 	bl	8006444 <xQueueGenericCreate>
 800606a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00c      	beq.n	800608c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <osMessageQueueNew+0xf0>
        name = attr->name;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	61fb      	str	r3, [r7, #28]
 800607e:	e001      	b.n	8006084 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006080:	2300      	movs	r3, #0
 8006082:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006084:	69f9      	ldr	r1, [r7, #28]
 8006086:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006088:	f000 ffc2 	bl	8007010 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800608e:	4618      	mov	r0, r3
 8006090:	3728      	adds	r7, #40	; 0x28
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20000298 	.word	0x20000298

0800609c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4a07      	ldr	r2, [pc, #28]	; (80060c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80060ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	4a06      	ldr	r2, [pc, #24]	; (80060cc <vApplicationGetIdleTaskMemory+0x30>)
 80060b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2280      	movs	r2, #128	; 0x80
 80060b8:	601a      	str	r2, [r3, #0]
}
 80060ba:	bf00      	nop
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	2000029c 	.word	0x2000029c
 80060cc:	20000358 	.word	0x20000358

080060d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4a07      	ldr	r2, [pc, #28]	; (80060fc <vApplicationGetTimerTaskMemory+0x2c>)
 80060e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	4a06      	ldr	r2, [pc, #24]	; (8006100 <vApplicationGetTimerTaskMemory+0x30>)
 80060e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060ee:	601a      	str	r2, [r3, #0]
}
 80060f0:	bf00      	nop
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr
 80060fc:	20000558 	.word	0x20000558
 8006100:	20000614 	.word	0x20000614

08006104 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f103 0208 	add.w	r2, r3, #8
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f04f 32ff 	mov.w	r2, #4294967295
 800611c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f103 0208 	add.w	r2, r3, #8
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f103 0208 	add.w	r2, r3, #8
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006152:	bf00      	nop
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800615e:	b480      	push	{r7}
 8006160:	b085      	sub	sp, #20
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	689a      	ldr	r2, [r3, #8]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	1c5a      	adds	r2, r3, #1
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	601a      	str	r2, [r3, #0]
}
 800619a:	bf00      	nop
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061a6:	b480      	push	{r7}
 80061a8:	b085      	sub	sp, #20
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061bc:	d103      	bne.n	80061c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	e00c      	b.n	80061e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	3308      	adds	r3, #8
 80061ca:	60fb      	str	r3, [r7, #12]
 80061cc:	e002      	b.n	80061d4 <vListInsert+0x2e>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	60fb      	str	r3, [r7, #12]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d2f6      	bcs.n	80061ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	601a      	str	r2, [r3, #0]
}
 800620c:	bf00      	nop
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	6892      	ldr	r2, [r2, #8]
 800622e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	6852      	ldr	r2, [r2, #4]
 8006238:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	429a      	cmp	r2, r3
 8006242:	d103      	bne.n	800624c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689a      	ldr	r2, [r3, #8]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	1e5a      	subs	r2, r3, #1
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10c      	bne.n	800629a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006284:	b672      	cpsid	i
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	b662      	cpsie	i
 8006294:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006296:	bf00      	nop
 8006298:	e7fe      	b.n	8006298 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800629a:	f002 fd77 	bl	8008d8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062a6:	68f9      	ldr	r1, [r7, #12]
 80062a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80062aa:	fb01 f303 	mul.w	r3, r1, r3
 80062ae:	441a      	add	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ca:	3b01      	subs	r3, #1
 80062cc:	68f9      	ldr	r1, [r7, #12]
 80062ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80062d0:	fb01 f303 	mul.w	r3, r1, r3
 80062d4:	441a      	add	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	22ff      	movs	r2, #255	; 0xff
 80062de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	22ff      	movs	r2, #255	; 0xff
 80062e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d114      	bne.n	800631a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d01a      	beq.n	800632e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	3310      	adds	r3, #16
 80062fc:	4618      	mov	r0, r3
 80062fe:	f001 fbbf 	bl	8007a80 <xTaskRemoveFromEventList>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d012      	beq.n	800632e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006308:	4b0c      	ldr	r3, [pc, #48]	; (800633c <xQueueGenericReset+0xd0>)
 800630a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800630e:	601a      	str	r2, [r3, #0]
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	e009      	b.n	800632e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	3310      	adds	r3, #16
 800631e:	4618      	mov	r0, r3
 8006320:	f7ff fef0 	bl	8006104 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	3324      	adds	r3, #36	; 0x24
 8006328:	4618      	mov	r0, r3
 800632a:	f7ff feeb 	bl	8006104 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800632e:	f002 fd61 	bl	8008df4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006332:	2301      	movs	r3, #1
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	e000ed04 	.word	0xe000ed04

08006340 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006340:	b580      	push	{r7, lr}
 8006342:	b08e      	sub	sp, #56	; 0x38
 8006344:	af02      	add	r7, sp, #8
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
 800634c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10c      	bne.n	800636e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006358:	b672      	cpsid	i
 800635a:	f383 8811 	msr	BASEPRI, r3
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f3bf 8f4f 	dsb	sy
 8006366:	b662      	cpsie	i
 8006368:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800636a:	bf00      	nop
 800636c:	e7fe      	b.n	800636c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10c      	bne.n	800638e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006378:	b672      	cpsid	i
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	b662      	cpsie	i
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
}
 800638a:	bf00      	nop
 800638c:	e7fe      	b.n	800638c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d002      	beq.n	800639a <xQueueGenericCreateStatic+0x5a>
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <xQueueGenericCreateStatic+0x5e>
 800639a:	2301      	movs	r3, #1
 800639c:	e000      	b.n	80063a0 <xQueueGenericCreateStatic+0x60>
 800639e:	2300      	movs	r3, #0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10c      	bne.n	80063be <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a8:	b672      	cpsid	i
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	b662      	cpsie	i
 80063b8:	623b      	str	r3, [r7, #32]
}
 80063ba:	bf00      	nop
 80063bc:	e7fe      	b.n	80063bc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d102      	bne.n	80063ca <xQueueGenericCreateStatic+0x8a>
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <xQueueGenericCreateStatic+0x8e>
 80063ca:	2301      	movs	r3, #1
 80063cc:	e000      	b.n	80063d0 <xQueueGenericCreateStatic+0x90>
 80063ce:	2300      	movs	r3, #0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10c      	bne.n	80063ee <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80063d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d8:	b672      	cpsid	i
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	b662      	cpsie	i
 80063e8:	61fb      	str	r3, [r7, #28]
}
 80063ea:	bf00      	nop
 80063ec:	e7fe      	b.n	80063ec <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80063ee:	2350      	movs	r3, #80	; 0x50
 80063f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	2b50      	cmp	r3, #80	; 0x50
 80063f6:	d00c      	beq.n	8006412 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80063f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fc:	b672      	cpsid	i
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	b662      	cpsie	i
 800640c:	61bb      	str	r3, [r7, #24]
}
 800640e:	bf00      	nop
 8006410:	e7fe      	b.n	8006410 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006412:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00d      	beq.n	800643a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800641e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006426:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800642a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	4613      	mov	r3, r2
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	68b9      	ldr	r1, [r7, #8]
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f000 f847 	bl	80064c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800643a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800643c:	4618      	mov	r0, r3
 800643e:	3730      	adds	r7, #48	; 0x30
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006444:	b580      	push	{r7, lr}
 8006446:	b08a      	sub	sp, #40	; 0x28
 8006448:	af02      	add	r7, sp, #8
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	4613      	mov	r3, r2
 8006450:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10c      	bne.n	8006472 <xQueueGenericCreate+0x2e>
	__asm volatile
 8006458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645c:	b672      	cpsid	i
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	b662      	cpsie	i
 800646c:	613b      	str	r3, [r7, #16]
}
 800646e:	bf00      	nop
 8006470:	e7fe      	b.n	8006470 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d102      	bne.n	800647e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006478:	2300      	movs	r3, #0
 800647a:	61fb      	str	r3, [r7, #28]
 800647c:	e004      	b.n	8006488 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	fb02 f303 	mul.w	r3, r2, r3
 8006486:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	3350      	adds	r3, #80	; 0x50
 800648c:	4618      	mov	r0, r3
 800648e:	f002 fda9 	bl	8008fe4 <pvPortMalloc>
 8006492:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d011      	beq.n	80064be <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	3350      	adds	r3, #80	; 0x50
 80064a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064ac:	79fa      	ldrb	r2, [r7, #7]
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	4613      	mov	r3, r2
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	68b9      	ldr	r1, [r7, #8]
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 f805 	bl	80064c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80064be:	69bb      	ldr	r3, [r7, #24]
	}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3720      	adds	r7, #32
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
 80064d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d103      	bne.n	80064e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	69ba      	ldr	r2, [r7, #24]
 80064e0:	601a      	str	r2, [r3, #0]
 80064e2:	e002      	b.n	80064ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80064f6:	2101      	movs	r1, #1
 80064f8:	69b8      	ldr	r0, [r7, #24]
 80064fa:	f7ff feb7 	bl	800626c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	78fa      	ldrb	r2, [r7, #3]
 8006502:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006506:	bf00      	nop
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800650e:	b580      	push	{r7, lr}
 8006510:	b08a      	sub	sp, #40	; 0x28
 8006512:	af02      	add	r7, sp, #8
 8006514:	60f8      	str	r0, [r7, #12]
 8006516:	60b9      	str	r1, [r7, #8]
 8006518:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10c      	bne.n	800653a <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8006520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006524:	b672      	cpsid	i
 8006526:	f383 8811 	msr	BASEPRI, r3
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	b662      	cpsie	i
 8006534:	61bb      	str	r3, [r7, #24]
}
 8006536:	bf00      	nop
 8006538:	e7fe      	b.n	8006538 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	429a      	cmp	r2, r3
 8006540:	d90c      	bls.n	800655c <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8006542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006546:	b672      	cpsid	i
 8006548:	f383 8811 	msr	BASEPRI, r3
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	b662      	cpsie	i
 8006556:	617b      	str	r3, [r7, #20]
}
 8006558:	bf00      	nop
 800655a:	e7fe      	b.n	800655a <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800655c:	2302      	movs	r3, #2
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	2100      	movs	r1, #0
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f7ff feea 	bl	8006340 <xQueueGenericCreateStatic>
 800656c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d002      	beq.n	800657a <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800657a:	69fb      	ldr	r3, [r7, #28]
	}
 800657c:	4618      	mov	r0, r3
 800657e:	3720      	adds	r7, #32
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10c      	bne.n	80065ae <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8006594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006598:	b672      	cpsid	i
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	b662      	cpsie	i
 80065a8:	613b      	str	r3, [r7, #16]
}
 80065aa:	bf00      	nop
 80065ac:	e7fe      	b.n	80065ac <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d90c      	bls.n	80065d0 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 80065b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ba:	b672      	cpsid	i
 80065bc:	f383 8811 	msr	BASEPRI, r3
 80065c0:	f3bf 8f6f 	isb	sy
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	b662      	cpsie	i
 80065ca:	60fb      	str	r3, [r7, #12]
}
 80065cc:	bf00      	nop
 80065ce:	e7fe      	b.n	80065ce <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80065d0:	2202      	movs	r2, #2
 80065d2:	2100      	movs	r1, #0
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f7ff ff35 	bl	8006444 <xQueueGenericCreate>
 80065da:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80065e8:	697b      	ldr	r3, [r7, #20]
	}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3718      	adds	r7, #24
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
	...

080065f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b08e      	sub	sp, #56	; 0x38
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
 8006600:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006602:	2300      	movs	r3, #0
 8006604:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800660a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10c      	bne.n	800662a <xQueueGenericSend+0x36>
	__asm volatile
 8006610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006614:	b672      	cpsid	i
 8006616:	f383 8811 	msr	BASEPRI, r3
 800661a:	f3bf 8f6f 	isb	sy
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	b662      	cpsie	i
 8006624:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006626:	bf00      	nop
 8006628:	e7fe      	b.n	8006628 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d103      	bne.n	8006638 <xQueueGenericSend+0x44>
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006634:	2b00      	cmp	r3, #0
 8006636:	d101      	bne.n	800663c <xQueueGenericSend+0x48>
 8006638:	2301      	movs	r3, #1
 800663a:	e000      	b.n	800663e <xQueueGenericSend+0x4a>
 800663c:	2300      	movs	r3, #0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10c      	bne.n	800665c <xQueueGenericSend+0x68>
	__asm volatile
 8006642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006646:	b672      	cpsid	i
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	b662      	cpsie	i
 8006656:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006658:	bf00      	nop
 800665a:	e7fe      	b.n	800665a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	2b02      	cmp	r3, #2
 8006660:	d103      	bne.n	800666a <xQueueGenericSend+0x76>
 8006662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006666:	2b01      	cmp	r3, #1
 8006668:	d101      	bne.n	800666e <xQueueGenericSend+0x7a>
 800666a:	2301      	movs	r3, #1
 800666c:	e000      	b.n	8006670 <xQueueGenericSend+0x7c>
 800666e:	2300      	movs	r3, #0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10c      	bne.n	800668e <xQueueGenericSend+0x9a>
	__asm volatile
 8006674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006678:	b672      	cpsid	i
 800667a:	f383 8811 	msr	BASEPRI, r3
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	b662      	cpsie	i
 8006688:	623b      	str	r3, [r7, #32]
}
 800668a:	bf00      	nop
 800668c:	e7fe      	b.n	800668c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800668e:	f001 fbc1 	bl	8007e14 <xTaskGetSchedulerState>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d102      	bne.n	800669e <xQueueGenericSend+0xaa>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <xQueueGenericSend+0xae>
 800669e:	2301      	movs	r3, #1
 80066a0:	e000      	b.n	80066a4 <xQueueGenericSend+0xb0>
 80066a2:	2300      	movs	r3, #0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10c      	bne.n	80066c2 <xQueueGenericSend+0xce>
	__asm volatile
 80066a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ac:	b672      	cpsid	i
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	b662      	cpsie	i
 80066bc:	61fb      	str	r3, [r7, #28]
}
 80066be:	bf00      	nop
 80066c0:	e7fe      	b.n	80066c0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066c2:	f002 fb63 	bl	8008d8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80066c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d302      	bcc.n	80066d8 <xQueueGenericSend+0xe4>
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d129      	bne.n	800672c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	68b9      	ldr	r1, [r7, #8]
 80066dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066de:	f000 fb86 	bl	8006dee <prvCopyDataToQueue>
 80066e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d010      	beq.n	800670e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ee:	3324      	adds	r3, #36	; 0x24
 80066f0:	4618      	mov	r0, r3
 80066f2:	f001 f9c5 	bl	8007a80 <xTaskRemoveFromEventList>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d013      	beq.n	8006724 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80066fc:	4b3f      	ldr	r3, [pc, #252]	; (80067fc <xQueueGenericSend+0x208>)
 80066fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	f3bf 8f4f 	dsb	sy
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	e00a      	b.n	8006724 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800670e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006710:	2b00      	cmp	r3, #0
 8006712:	d007      	beq.n	8006724 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006714:	4b39      	ldr	r3, [pc, #228]	; (80067fc <xQueueGenericSend+0x208>)
 8006716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006724:	f002 fb66 	bl	8008df4 <vPortExitCritical>
				return pdPASS;
 8006728:	2301      	movs	r3, #1
 800672a:	e063      	b.n	80067f4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d103      	bne.n	800673a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006732:	f002 fb5f 	bl	8008df4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006736:	2300      	movs	r3, #0
 8006738:	e05c      	b.n	80067f4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800673a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800673c:	2b00      	cmp	r3, #0
 800673e:	d106      	bne.n	800674e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006740:	f107 0314 	add.w	r3, r7, #20
 8006744:	4618      	mov	r0, r3
 8006746:	f001 fa01 	bl	8007b4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800674a:	2301      	movs	r3, #1
 800674c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800674e:	f002 fb51 	bl	8008df4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006752:	f000 ff4f 	bl	80075f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006756:	f002 fb19 	bl	8008d8c <vPortEnterCritical>
 800675a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006760:	b25b      	sxtb	r3, r3
 8006762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006766:	d103      	bne.n	8006770 <xQueueGenericSend+0x17c>
 8006768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676a:	2200      	movs	r2, #0
 800676c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006772:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006776:	b25b      	sxtb	r3, r3
 8006778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677c:	d103      	bne.n	8006786 <xQueueGenericSend+0x192>
 800677e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006786:	f002 fb35 	bl	8008df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800678a:	1d3a      	adds	r2, r7, #4
 800678c:	f107 0314 	add.w	r3, r7, #20
 8006790:	4611      	mov	r1, r2
 8006792:	4618      	mov	r0, r3
 8006794:	f001 f9f0 	bl	8007b78 <xTaskCheckForTimeOut>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d124      	bne.n	80067e8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800679e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067a0:	f000 fc1d 	bl	8006fde <prvIsQueueFull>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d018      	beq.n	80067dc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80067aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ac:	3310      	adds	r3, #16
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	4611      	mov	r1, r2
 80067b2:	4618      	mov	r0, r3
 80067b4:	f001 f910 	bl	80079d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80067b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067ba:	f000 fba8 	bl	8006f0e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80067be:	f000 ff27 	bl	8007610 <xTaskResumeAll>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f47f af7c 	bne.w	80066c2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80067ca:	4b0c      	ldr	r3, [pc, #48]	; (80067fc <xQueueGenericSend+0x208>)
 80067cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067d0:	601a      	str	r2, [r3, #0]
 80067d2:	f3bf 8f4f 	dsb	sy
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	e772      	b.n	80066c2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80067dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067de:	f000 fb96 	bl	8006f0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067e2:	f000 ff15 	bl	8007610 <xTaskResumeAll>
 80067e6:	e76c      	b.n	80066c2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80067e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067ea:	f000 fb90 	bl	8006f0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067ee:	f000 ff0f 	bl	8007610 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80067f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3738      	adds	r7, #56	; 0x38
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	e000ed04 	.word	0xe000ed04

08006800 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b08e      	sub	sp, #56	; 0x38
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
 800680c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10c      	bne.n	8006832 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681c:	b672      	cpsid	i
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	b662      	cpsie	i
 800682c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800682e:	bf00      	nop
 8006830:	e7fe      	b.n	8006830 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d103      	bne.n	8006840 <xQueueGenericSendFromISR+0x40>
 8006838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <xQueueGenericSendFromISR+0x44>
 8006840:	2301      	movs	r3, #1
 8006842:	e000      	b.n	8006846 <xQueueGenericSendFromISR+0x46>
 8006844:	2300      	movs	r3, #0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10c      	bne.n	8006864 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800684a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684e:	b672      	cpsid	i
 8006850:	f383 8811 	msr	BASEPRI, r3
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	b662      	cpsie	i
 800685e:	623b      	str	r3, [r7, #32]
}
 8006860:	bf00      	nop
 8006862:	e7fe      	b.n	8006862 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	2b02      	cmp	r3, #2
 8006868:	d103      	bne.n	8006872 <xQueueGenericSendFromISR+0x72>
 800686a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800686e:	2b01      	cmp	r3, #1
 8006870:	d101      	bne.n	8006876 <xQueueGenericSendFromISR+0x76>
 8006872:	2301      	movs	r3, #1
 8006874:	e000      	b.n	8006878 <xQueueGenericSendFromISR+0x78>
 8006876:	2300      	movs	r3, #0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10c      	bne.n	8006896 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006880:	b672      	cpsid	i
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	b662      	cpsie	i
 8006890:	61fb      	str	r3, [r7, #28]
}
 8006892:	bf00      	nop
 8006894:	e7fe      	b.n	8006894 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006896:	f002 fb61 	bl	8008f5c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800689a:	f3ef 8211 	mrs	r2, BASEPRI
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	b672      	cpsid	i
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	b662      	cpsie	i
 80068b2:	61ba      	str	r2, [r7, #24]
 80068b4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80068b6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d302      	bcc.n	80068cc <xQueueGenericSendFromISR+0xcc>
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d12c      	bne.n	8006926 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80068cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	68b9      	ldr	r1, [r7, #8]
 80068da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068dc:	f000 fa87 	bl	8006dee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80068e0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80068e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e8:	d112      	bne.n	8006910 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d016      	beq.n	8006920 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f4:	3324      	adds	r3, #36	; 0x24
 80068f6:	4618      	mov	r0, r3
 80068f8:	f001 f8c2 	bl	8007a80 <xTaskRemoveFromEventList>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00e      	beq.n	8006920 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00b      	beq.n	8006920 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	e007      	b.n	8006920 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006910:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006914:	3301      	adds	r3, #1
 8006916:	b2db      	uxtb	r3, r3
 8006918:	b25a      	sxtb	r2, r3
 800691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006920:	2301      	movs	r3, #1
 8006922:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006924:	e001      	b.n	800692a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006926:	2300      	movs	r3, #0
 8006928:	637b      	str	r3, [r7, #52]	; 0x34
 800692a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006934:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006938:	4618      	mov	r0, r3
 800693a:	3738      	adds	r7, #56	; 0x38
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b08c      	sub	sp, #48	; 0x30
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800694c:	2300      	movs	r3, #0
 800694e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10c      	bne.n	8006974 <xQueueReceive+0x34>
	__asm volatile
 800695a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695e:	b672      	cpsid	i
 8006960:	f383 8811 	msr	BASEPRI, r3
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	b662      	cpsie	i
 800696e:	623b      	str	r3, [r7, #32]
}
 8006970:	bf00      	nop
 8006972:	e7fe      	b.n	8006972 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d103      	bne.n	8006982 <xQueueReceive+0x42>
 800697a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <xQueueReceive+0x46>
 8006982:	2301      	movs	r3, #1
 8006984:	e000      	b.n	8006988 <xQueueReceive+0x48>
 8006986:	2300      	movs	r3, #0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10c      	bne.n	80069a6 <xQueueReceive+0x66>
	__asm volatile
 800698c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006990:	b672      	cpsid	i
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	b662      	cpsie	i
 80069a0:	61fb      	str	r3, [r7, #28]
}
 80069a2:	bf00      	nop
 80069a4:	e7fe      	b.n	80069a4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069a6:	f001 fa35 	bl	8007e14 <xTaskGetSchedulerState>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d102      	bne.n	80069b6 <xQueueReceive+0x76>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d101      	bne.n	80069ba <xQueueReceive+0x7a>
 80069b6:	2301      	movs	r3, #1
 80069b8:	e000      	b.n	80069bc <xQueueReceive+0x7c>
 80069ba:	2300      	movs	r3, #0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d10c      	bne.n	80069da <xQueueReceive+0x9a>
	__asm volatile
 80069c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c4:	b672      	cpsid	i
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	b662      	cpsie	i
 80069d4:	61bb      	str	r3, [r7, #24]
}
 80069d6:	bf00      	nop
 80069d8:	e7fe      	b.n	80069d8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069da:	f002 f9d7 	bl	8008d8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d01f      	beq.n	8006a2a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069ea:	68b9      	ldr	r1, [r7, #8]
 80069ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069ee:	f000 fa68 	bl	8006ec2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f4:	1e5a      	subs	r2, r3, #1
 80069f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00f      	beq.n	8006a22 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a04:	3310      	adds	r3, #16
 8006a06:	4618      	mov	r0, r3
 8006a08:	f001 f83a 	bl	8007a80 <xTaskRemoveFromEventList>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d007      	beq.n	8006a22 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a12:	4b3d      	ldr	r3, [pc, #244]	; (8006b08 <xQueueReceive+0x1c8>)
 8006a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a22:	f002 f9e7 	bl	8008df4 <vPortExitCritical>
				return pdPASS;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e069      	b.n	8006afe <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d103      	bne.n	8006a38 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a30:	f002 f9e0 	bl	8008df4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a34:	2300      	movs	r3, #0
 8006a36:	e062      	b.n	8006afe <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d106      	bne.n	8006a4c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a3e:	f107 0310 	add.w	r3, r7, #16
 8006a42:	4618      	mov	r0, r3
 8006a44:	f001 f882 	bl	8007b4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a4c:	f002 f9d2 	bl	8008df4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a50:	f000 fdd0 	bl	80075f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a54:	f002 f99a 	bl	8008d8c <vPortEnterCritical>
 8006a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a5e:	b25b      	sxtb	r3, r3
 8006a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a64:	d103      	bne.n	8006a6e <xQueueReceive+0x12e>
 8006a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a74:	b25b      	sxtb	r3, r3
 8006a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7a:	d103      	bne.n	8006a84 <xQueueReceive+0x144>
 8006a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a84:	f002 f9b6 	bl	8008df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a88:	1d3a      	adds	r2, r7, #4
 8006a8a:	f107 0310 	add.w	r3, r7, #16
 8006a8e:	4611      	mov	r1, r2
 8006a90:	4618      	mov	r0, r3
 8006a92:	f001 f871 	bl	8007b78 <xTaskCheckForTimeOut>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d123      	bne.n	8006ae4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a9e:	f000 fa88 	bl	8006fb2 <prvIsQueueEmpty>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d017      	beq.n	8006ad8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aaa:	3324      	adds	r3, #36	; 0x24
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	4611      	mov	r1, r2
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f000 ff91 	bl	80079d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ab8:	f000 fa29 	bl	8006f0e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006abc:	f000 fda8 	bl	8007610 <xTaskResumeAll>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d189      	bne.n	80069da <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8006ac6:	4b10      	ldr	r3, [pc, #64]	; (8006b08 <xQueueReceive+0x1c8>)
 8006ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	e780      	b.n	80069da <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ada:	f000 fa18 	bl	8006f0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ade:	f000 fd97 	bl	8007610 <xTaskResumeAll>
 8006ae2:	e77a      	b.n	80069da <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ae4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ae6:	f000 fa12 	bl	8006f0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006aea:	f000 fd91 	bl	8007610 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006aee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006af0:	f000 fa5f 	bl	8006fb2 <prvIsQueueEmpty>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f43f af6f 	beq.w	80069da <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006afc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3730      	adds	r7, #48	; 0x30
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	e000ed04 	.word	0xe000ed04

08006b0c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b08e      	sub	sp, #56	; 0x38
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b16:	2300      	movs	r3, #0
 8006b18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10c      	bne.n	8006b42 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8006b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2c:	b672      	cpsid	i
 8006b2e:	f383 8811 	msr	BASEPRI, r3
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	b662      	cpsie	i
 8006b3c:	623b      	str	r3, [r7, #32]
}
 8006b3e:	bf00      	nop
 8006b40:	e7fe      	b.n	8006b40 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00c      	beq.n	8006b64 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8006b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4e:	b672      	cpsid	i
 8006b50:	f383 8811 	msr	BASEPRI, r3
 8006b54:	f3bf 8f6f 	isb	sy
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	b662      	cpsie	i
 8006b5e:	61fb      	str	r3, [r7, #28]
}
 8006b60:	bf00      	nop
 8006b62:	e7fe      	b.n	8006b62 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b64:	f001 f956 	bl	8007e14 <xTaskGetSchedulerState>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d102      	bne.n	8006b74 <xQueueSemaphoreTake+0x68>
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d101      	bne.n	8006b78 <xQueueSemaphoreTake+0x6c>
 8006b74:	2301      	movs	r3, #1
 8006b76:	e000      	b.n	8006b7a <xQueueSemaphoreTake+0x6e>
 8006b78:	2300      	movs	r3, #0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10c      	bne.n	8006b98 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	b672      	cpsid	i
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	b662      	cpsie	i
 8006b92:	61bb      	str	r3, [r7, #24]
}
 8006b94:	bf00      	nop
 8006b96:	e7fe      	b.n	8006b96 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b98:	f002 f8f8 	bl	8008d8c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d024      	beq.n	8006bf2 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006baa:	1e5a      	subs	r2, r3, #1
 8006bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d104      	bne.n	8006bc2 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006bb8:	f001 faaa 	bl	8008110 <pvTaskIncrementMutexHeldCount>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00f      	beq.n	8006bea <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bcc:	3310      	adds	r3, #16
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 ff56 	bl	8007a80 <xTaskRemoveFromEventList>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d007      	beq.n	8006bea <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006bda:	4b55      	ldr	r3, [pc, #340]	; (8006d30 <xQueueSemaphoreTake+0x224>)
 8006bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006bea:	f002 f903 	bl	8008df4 <vPortExitCritical>
				return pdPASS;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e099      	b.n	8006d26 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d113      	bne.n	8006c20 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00c      	beq.n	8006c18 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8006bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c02:	b672      	cpsid	i
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	b662      	cpsie	i
 8006c12:	617b      	str	r3, [r7, #20]
}
 8006c14:	bf00      	nop
 8006c16:	e7fe      	b.n	8006c16 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006c18:	f002 f8ec 	bl	8008df4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	e082      	b.n	8006d26 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d106      	bne.n	8006c34 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c26:	f107 030c 	add.w	r3, r7, #12
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f000 ff8e 	bl	8007b4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c30:	2301      	movs	r3, #1
 8006c32:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c34:	f002 f8de 	bl	8008df4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c38:	f000 fcdc 	bl	80075f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c3c:	f002 f8a6 	bl	8008d8c <vPortEnterCritical>
 8006c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c46:	b25b      	sxtb	r3, r3
 8006c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4c:	d103      	bne.n	8006c56 <xQueueSemaphoreTake+0x14a>
 8006c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c5c:	b25b      	sxtb	r3, r3
 8006c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c62:	d103      	bne.n	8006c6c <xQueueSemaphoreTake+0x160>
 8006c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c6c:	f002 f8c2 	bl	8008df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c70:	463a      	mov	r2, r7
 8006c72:	f107 030c 	add.w	r3, r7, #12
 8006c76:	4611      	mov	r1, r2
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 ff7d 	bl	8007b78 <xTaskCheckForTimeOut>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d132      	bne.n	8006cea <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c86:	f000 f994 	bl	8006fb2 <prvIsQueueEmpty>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d026      	beq.n	8006cde <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d109      	bne.n	8006cac <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8006c98:	f002 f878 	bl	8008d8c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f001 f8d5 	bl	8007e50 <xTaskPriorityInherit>
 8006ca6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006ca8:	f002 f8a4 	bl	8008df4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cae:	3324      	adds	r3, #36	; 0x24
 8006cb0:	683a      	ldr	r2, [r7, #0]
 8006cb2:	4611      	mov	r1, r2
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 fe8f 	bl	80079d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cbc:	f000 f927 	bl	8006f0e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cc0:	f000 fca6 	bl	8007610 <xTaskResumeAll>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f47f af66 	bne.w	8006b98 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8006ccc:	4b18      	ldr	r3, [pc, #96]	; (8006d30 <xQueueSemaphoreTake+0x224>)
 8006cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	f3bf 8f4f 	dsb	sy
 8006cd8:	f3bf 8f6f 	isb	sy
 8006cdc:	e75c      	b.n	8006b98 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006cde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ce0:	f000 f915 	bl	8006f0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ce4:	f000 fc94 	bl	8007610 <xTaskResumeAll>
 8006ce8:	e756      	b.n	8006b98 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006cea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cec:	f000 f90f 	bl	8006f0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cf0:	f000 fc8e 	bl	8007610 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cf6:	f000 f95c 	bl	8006fb2 <prvIsQueueEmpty>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f43f af4b 	beq.w	8006b98 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00d      	beq.n	8006d24 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8006d08:	f002 f840 	bl	8008d8c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006d0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d0e:	f000 f856 	bl	8006dbe <prvGetDisinheritPriorityAfterTimeout>
 8006d12:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f001 f972 	bl	8008004 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006d20:	f002 f868 	bl	8008df4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3738      	adds	r7, #56	; 0x38
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	e000ed04 	.word	0xe000ed04

08006d34 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10c      	bne.n	8006d5c <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8006d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d46:	b672      	cpsid	i
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	b662      	cpsie	i
 8006d56:	60bb      	str	r3, [r7, #8]
}
 8006d58:	bf00      	nop
 8006d5a:	e7fe      	b.n	8006d5a <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8006d5c:	f002 f816 	bl	8008d8c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d64:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006d66:	f002 f845 	bl	8008df4 <vPortExitCritical>

	return uxReturn;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10c      	bne.n	8006da0 <vQueueDelete+0x2c>
	__asm volatile
 8006d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8a:	b672      	cpsid	i
 8006d8c:	f383 8811 	msr	BASEPRI, r3
 8006d90:	f3bf 8f6f 	isb	sy
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	b662      	cpsie	i
 8006d9a:	60bb      	str	r3, [r7, #8]
}
 8006d9c:	bf00      	nop
 8006d9e:	e7fe      	b.n	8006d9e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f000 f95f 	bl	8007064 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d102      	bne.n	8006db6 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f002 f9e1 	bl	8009178 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006db6:	bf00      	nop
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b085      	sub	sp, #20
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d006      	beq.n	8006ddc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006dd8:	60fb      	str	r3, [r7, #12]
 8006dda:	e001      	b.n	8006de0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006de0:	68fb      	ldr	r3, [r7, #12]
	}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3714      	adds	r7, #20
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr

08006dee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b086      	sub	sp, #24
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	60f8      	str	r0, [r7, #12]
 8006df6:	60b9      	str	r1, [r7, #8]
 8006df8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e02:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10d      	bne.n	8006e28 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d14d      	bne.n	8006eb0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f001 f881 	bl	8007f20 <xTaskPriorityDisinherit>
 8006e1e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	609a      	str	r2, [r3, #8]
 8006e26:	e043      	b.n	8006eb0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d119      	bne.n	8006e62 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6858      	ldr	r0, [r3, #4]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e36:	461a      	mov	r2, r3
 8006e38:	68b9      	ldr	r1, [r7, #8]
 8006e3a:	f002 fbda 	bl	80095f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e46:	441a      	add	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d32b      	bcc.n	8006eb0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	605a      	str	r2, [r3, #4]
 8006e60:	e026      	b.n	8006eb0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	68d8      	ldr	r0, [r3, #12]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	68b9      	ldr	r1, [r7, #8]
 8006e6e:	f002 fbc0 	bl	80095f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	68da      	ldr	r2, [r3, #12]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7a:	425b      	negs	r3, r3
 8006e7c:	441a      	add	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	68da      	ldr	r2, [r3, #12]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d207      	bcs.n	8006e9e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	689a      	ldr	r2, [r3, #8]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e96:	425b      	negs	r3, r3
 8006e98:	441a      	add	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d105      	bne.n	8006eb0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d002      	beq.n	8006eb0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	3b01      	subs	r3, #1
 8006eae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006eb8:	697b      	ldr	r3, [r7, #20]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3718      	adds	r7, #24
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b082      	sub	sp, #8
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d018      	beq.n	8006f06 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68da      	ldr	r2, [r3, #12]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006edc:	441a      	add	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68da      	ldr	r2, [r3, #12]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d303      	bcc.n	8006ef6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68d9      	ldr	r1, [r3, #12]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efe:	461a      	mov	r2, r3
 8006f00:	6838      	ldr	r0, [r7, #0]
 8006f02:	f002 fb76 	bl	80095f2 <memcpy>
	}
}
 8006f06:	bf00      	nop
 8006f08:	3708      	adds	r7, #8
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b084      	sub	sp, #16
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006f16:	f001 ff39 	bl	8008d8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f20:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f22:	e011      	b.n	8006f48 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d012      	beq.n	8006f52 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	3324      	adds	r3, #36	; 0x24
 8006f30:	4618      	mov	r0, r3
 8006f32:	f000 fda5 	bl	8007a80 <xTaskRemoveFromEventList>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006f3c:	f000 fe82 	bl	8007c44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	dce9      	bgt.n	8006f24 <prvUnlockQueue+0x16>
 8006f50:	e000      	b.n	8006f54 <prvUnlockQueue+0x46>
					break;
 8006f52:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	22ff      	movs	r2, #255	; 0xff
 8006f58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006f5c:	f001 ff4a 	bl	8008df4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006f60:	f001 ff14 	bl	8008d8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f6a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f6c:	e011      	b.n	8006f92 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d012      	beq.n	8006f9c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	3310      	adds	r3, #16
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 fd80 	bl	8007a80 <xTaskRemoveFromEventList>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f86:	f000 fe5d 	bl	8007c44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f8a:	7bbb      	ldrb	r3, [r7, #14]
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	dce9      	bgt.n	8006f6e <prvUnlockQueue+0x60>
 8006f9a:	e000      	b.n	8006f9e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006f9c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	22ff      	movs	r2, #255	; 0xff
 8006fa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006fa6:	f001 ff25 	bl	8008df4 <vPortExitCritical>
}
 8006faa:	bf00      	nop
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b084      	sub	sp, #16
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fba:	f001 fee7 	bl	8008d8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d102      	bne.n	8006fcc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	60fb      	str	r3, [r7, #12]
 8006fca:	e001      	b.n	8006fd0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006fd0:	f001 ff10 	bl	8008df4 <vPortExitCritical>

	return xReturn;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b084      	sub	sp, #16
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fe6:	f001 fed1 	bl	8008d8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d102      	bne.n	8006ffc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	e001      	b.n	8007000 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007000:	f001 fef8 	bl	8008df4 <vPortExitCritical>

	return xReturn;
 8007004:	68fb      	ldr	r3, [r7, #12]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
	...

08007010 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800701a:	2300      	movs	r3, #0
 800701c:	60fb      	str	r3, [r7, #12]
 800701e:	e014      	b.n	800704a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007020:	4a0f      	ldr	r2, [pc, #60]	; (8007060 <vQueueAddToRegistry+0x50>)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10b      	bne.n	8007044 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800702c:	490c      	ldr	r1, [pc, #48]	; (8007060 <vQueueAddToRegistry+0x50>)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007036:	4a0a      	ldr	r2, [pc, #40]	; (8007060 <vQueueAddToRegistry+0x50>)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	00db      	lsls	r3, r3, #3
 800703c:	4413      	add	r3, r2
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007042:	e006      	b.n	8007052 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	3301      	adds	r3, #1
 8007048:	60fb      	str	r3, [r7, #12]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2b07      	cmp	r3, #7
 800704e:	d9e7      	bls.n	8007020 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007050:	bf00      	nop
 8007052:	bf00      	nop
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	20000a14 	.word	0x20000a14

08007064 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800706c:	2300      	movs	r3, #0
 800706e:	60fb      	str	r3, [r7, #12]
 8007070:	e016      	b.n	80070a0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007072:	4a10      	ldr	r2, [pc, #64]	; (80070b4 <vQueueUnregisterQueue+0x50>)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	00db      	lsls	r3, r3, #3
 8007078:	4413      	add	r3, r2
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	429a      	cmp	r2, r3
 8007080:	d10b      	bne.n	800709a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007082:	4a0c      	ldr	r2, [pc, #48]	; (80070b4 <vQueueUnregisterQueue+0x50>)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2100      	movs	r1, #0
 8007088:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800708c:	4a09      	ldr	r2, [pc, #36]	; (80070b4 <vQueueUnregisterQueue+0x50>)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	00db      	lsls	r3, r3, #3
 8007092:	4413      	add	r3, r2
 8007094:	2200      	movs	r2, #0
 8007096:	605a      	str	r2, [r3, #4]
				break;
 8007098:	e006      	b.n	80070a8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	3301      	adds	r3, #1
 800709e:	60fb      	str	r3, [r7, #12]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2b07      	cmp	r3, #7
 80070a4:	d9e5      	bls.n	8007072 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80070a6:	bf00      	nop
 80070a8:	bf00      	nop
 80070aa:	3714      	adds	r7, #20
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr
 80070b4:	20000a14 	.word	0x20000a14

080070b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80070c8:	f001 fe60 	bl	8008d8c <vPortEnterCritical>
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070d2:	b25b      	sxtb	r3, r3
 80070d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d8:	d103      	bne.n	80070e2 <vQueueWaitForMessageRestricted+0x2a>
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070e8:	b25b      	sxtb	r3, r3
 80070ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ee:	d103      	bne.n	80070f8 <vQueueWaitForMessageRestricted+0x40>
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070f8:	f001 fe7c 	bl	8008df4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007100:	2b00      	cmp	r3, #0
 8007102:	d106      	bne.n	8007112 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	3324      	adds	r3, #36	; 0x24
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	68b9      	ldr	r1, [r7, #8]
 800710c:	4618      	mov	r0, r3
 800710e:	f000 fc89 	bl	8007a24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007112:	6978      	ldr	r0, [r7, #20]
 8007114:	f7ff fefb 	bl	8006f0e <prvUnlockQueue>
	}
 8007118:	bf00      	nop
 800711a:	3718      	adds	r7, #24
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007120:	b580      	push	{r7, lr}
 8007122:	b08e      	sub	sp, #56	; 0x38
 8007124:	af04      	add	r7, sp, #16
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
 800712c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800712e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10c      	bne.n	800714e <xTaskCreateStatic+0x2e>
	__asm volatile
 8007134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007138:	b672      	cpsid	i
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	b662      	cpsie	i
 8007148:	623b      	str	r3, [r7, #32]
}
 800714a:	bf00      	nop
 800714c:	e7fe      	b.n	800714c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800714e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10c      	bne.n	800716e <xTaskCreateStatic+0x4e>
	__asm volatile
 8007154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007158:	b672      	cpsid	i
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	b662      	cpsie	i
 8007168:	61fb      	str	r3, [r7, #28]
}
 800716a:	bf00      	nop
 800716c:	e7fe      	b.n	800716c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800716e:	23bc      	movs	r3, #188	; 0xbc
 8007170:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	2bbc      	cmp	r3, #188	; 0xbc
 8007176:	d00c      	beq.n	8007192 <xTaskCreateStatic+0x72>
	__asm volatile
 8007178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717c:	b672      	cpsid	i
 800717e:	f383 8811 	msr	BASEPRI, r3
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	f3bf 8f4f 	dsb	sy
 800718a:	b662      	cpsie	i
 800718c:	61bb      	str	r3, [r7, #24]
}
 800718e:	bf00      	nop
 8007190:	e7fe      	b.n	8007190 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007192:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007196:	2b00      	cmp	r3, #0
 8007198:	d01e      	beq.n	80071d8 <xTaskCreateStatic+0xb8>
 800719a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719c:	2b00      	cmp	r3, #0
 800719e:	d01b      	beq.n	80071d8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80071a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	2202      	movs	r2, #2
 80071ae:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80071b2:	2300      	movs	r3, #0
 80071b4:	9303      	str	r3, [sp, #12]
 80071b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b8:	9302      	str	r3, [sp, #8]
 80071ba:	f107 0314 	add.w	r3, r7, #20
 80071be:	9301      	str	r3, [sp, #4]
 80071c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	68b9      	ldr	r1, [r7, #8]
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f000 f850 	bl	8007270 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071d2:	f000 f8f5 	bl	80073c0 <prvAddNewTaskToReadyList>
 80071d6:	e001      	b.n	80071dc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80071d8:	2300      	movs	r3, #0
 80071da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80071dc:	697b      	ldr	r3, [r7, #20]
	}
 80071de:	4618      	mov	r0, r3
 80071e0:	3728      	adds	r7, #40	; 0x28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b08c      	sub	sp, #48	; 0x30
 80071ea:	af04      	add	r7, sp, #16
 80071ec:	60f8      	str	r0, [r7, #12]
 80071ee:	60b9      	str	r1, [r7, #8]
 80071f0:	603b      	str	r3, [r7, #0]
 80071f2:	4613      	mov	r3, r2
 80071f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80071f6:	88fb      	ldrh	r3, [r7, #6]
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	4618      	mov	r0, r3
 80071fc:	f001 fef2 	bl	8008fe4 <pvPortMalloc>
 8007200:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00e      	beq.n	8007226 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007208:	20bc      	movs	r0, #188	; 0xbc
 800720a:	f001 feeb 	bl	8008fe4 <pvPortMalloc>
 800720e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	631a      	str	r2, [r3, #48]	; 0x30
 800721c:	e005      	b.n	800722a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800721e:	6978      	ldr	r0, [r7, #20]
 8007220:	f001 ffaa 	bl	8009178 <vPortFree>
 8007224:	e001      	b.n	800722a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007226:	2300      	movs	r3, #0
 8007228:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d017      	beq.n	8007260 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007238:	88fa      	ldrh	r2, [r7, #6]
 800723a:	2300      	movs	r3, #0
 800723c:	9303      	str	r3, [sp, #12]
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	9302      	str	r3, [sp, #8]
 8007242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007244:	9301      	str	r3, [sp, #4]
 8007246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	68b9      	ldr	r1, [r7, #8]
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 f80e 	bl	8007270 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007254:	69f8      	ldr	r0, [r7, #28]
 8007256:	f000 f8b3 	bl	80073c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800725a:	2301      	movs	r3, #1
 800725c:	61bb      	str	r3, [r7, #24]
 800725e:	e002      	b.n	8007266 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007260:	f04f 33ff 	mov.w	r3, #4294967295
 8007264:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007266:	69bb      	ldr	r3, [r7, #24]
	}
 8007268:	4618      	mov	r0, r3
 800726a:	3720      	adds	r7, #32
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b088      	sub	sp, #32
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
 800727c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007280:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	461a      	mov	r2, r3
 8007288:	21a5      	movs	r1, #165	; 0xa5
 800728a:	f002 f9c0 	bl	800960e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800728e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007292:	6879      	ldr	r1, [r7, #4]
 8007294:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007298:	440b      	add	r3, r1
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	f023 0307 	bic.w	r3, r3, #7
 80072a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	f003 0307 	and.w	r3, r3, #7
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00c      	beq.n	80072cc <prvInitialiseNewTask+0x5c>
	__asm volatile
 80072b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b6:	b672      	cpsid	i
 80072b8:	f383 8811 	msr	BASEPRI, r3
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	b662      	cpsie	i
 80072c6:	617b      	str	r3, [r7, #20]
}
 80072c8:	bf00      	nop
 80072ca:	e7fe      	b.n	80072ca <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d01f      	beq.n	8007312 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072d2:	2300      	movs	r3, #0
 80072d4:	61fb      	str	r3, [r7, #28]
 80072d6:	e012      	b.n	80072fe <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	4413      	add	r3, r2
 80072de:	7819      	ldrb	r1, [r3, #0]
 80072e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	4413      	add	r3, r2
 80072e6:	3334      	adds	r3, #52	; 0x34
 80072e8:	460a      	mov	r2, r1
 80072ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	4413      	add	r3, r2
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d006      	beq.n	8007306 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	3301      	adds	r3, #1
 80072fc:	61fb      	str	r3, [r7, #28]
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	2b0f      	cmp	r3, #15
 8007302:	d9e9      	bls.n	80072d8 <prvInitialiseNewTask+0x68>
 8007304:	e000      	b.n	8007308 <prvInitialiseNewTask+0x98>
			{
				break;
 8007306:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730a:	2200      	movs	r2, #0
 800730c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007310:	e003      	b.n	800731a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800731a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731c:	2b37      	cmp	r3, #55	; 0x37
 800731e:	d901      	bls.n	8007324 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007320:	2337      	movs	r3, #55	; 0x37
 8007322:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007328:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800732e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007332:	2200      	movs	r2, #0
 8007334:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007338:	3304      	adds	r3, #4
 800733a:	4618      	mov	r0, r3
 800733c:	f7fe ff02 	bl	8006144 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007342:	3318      	adds	r3, #24
 8007344:	4618      	mov	r0, r3
 8007346:	f7fe fefd 	bl	8006144 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800734a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800734e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007352:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007358:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800735a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800735e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007362:	2200      	movs	r2, #0
 8007364:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736a:	2200      	movs	r2, #0
 800736c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007372:	3354      	adds	r3, #84	; 0x54
 8007374:	2260      	movs	r2, #96	; 0x60
 8007376:	2100      	movs	r1, #0
 8007378:	4618      	mov	r0, r3
 800737a:	f002 f948 	bl	800960e <memset>
 800737e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007380:	4a0c      	ldr	r2, [pc, #48]	; (80073b4 <prvInitialiseNewTask+0x144>)
 8007382:	659a      	str	r2, [r3, #88]	; 0x58
 8007384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007386:	4a0c      	ldr	r2, [pc, #48]	; (80073b8 <prvInitialiseNewTask+0x148>)
 8007388:	65da      	str	r2, [r3, #92]	; 0x5c
 800738a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738c:	4a0b      	ldr	r2, [pc, #44]	; (80073bc <prvInitialiseNewTask+0x14c>)
 800738e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	68f9      	ldr	r1, [r7, #12]
 8007394:	69b8      	ldr	r0, [r7, #24]
 8007396:	f001 fbed 	bl	8008b74 <pxPortInitialiseStack>
 800739a:	4602      	mov	r2, r0
 800739c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80073a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d002      	beq.n	80073ac <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80073a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073ac:	bf00      	nop
 80073ae:	3720      	adds	r7, #32
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	0800a5c4 	.word	0x0800a5c4
 80073b8:	0800a5e4 	.word	0x0800a5e4
 80073bc:	0800a5a4 	.word	0x0800a5a4

080073c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80073c8:	f001 fce0 	bl	8008d8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80073cc:	4b2d      	ldr	r3, [pc, #180]	; (8007484 <prvAddNewTaskToReadyList+0xc4>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	3301      	adds	r3, #1
 80073d2:	4a2c      	ldr	r2, [pc, #176]	; (8007484 <prvAddNewTaskToReadyList+0xc4>)
 80073d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80073d6:	4b2c      	ldr	r3, [pc, #176]	; (8007488 <prvAddNewTaskToReadyList+0xc8>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d109      	bne.n	80073f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80073de:	4a2a      	ldr	r2, [pc, #168]	; (8007488 <prvAddNewTaskToReadyList+0xc8>)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80073e4:	4b27      	ldr	r3, [pc, #156]	; (8007484 <prvAddNewTaskToReadyList+0xc4>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d110      	bne.n	800740e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80073ec:	f000 fc4e 	bl	8007c8c <prvInitialiseTaskLists>
 80073f0:	e00d      	b.n	800740e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80073f2:	4b26      	ldr	r3, [pc, #152]	; (800748c <prvAddNewTaskToReadyList+0xcc>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d109      	bne.n	800740e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80073fa:	4b23      	ldr	r3, [pc, #140]	; (8007488 <prvAddNewTaskToReadyList+0xc8>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007404:	429a      	cmp	r2, r3
 8007406:	d802      	bhi.n	800740e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007408:	4a1f      	ldr	r2, [pc, #124]	; (8007488 <prvAddNewTaskToReadyList+0xc8>)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800740e:	4b20      	ldr	r3, [pc, #128]	; (8007490 <prvAddNewTaskToReadyList+0xd0>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3301      	adds	r3, #1
 8007414:	4a1e      	ldr	r2, [pc, #120]	; (8007490 <prvAddNewTaskToReadyList+0xd0>)
 8007416:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007418:	4b1d      	ldr	r3, [pc, #116]	; (8007490 <prvAddNewTaskToReadyList+0xd0>)
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007424:	4b1b      	ldr	r3, [pc, #108]	; (8007494 <prvAddNewTaskToReadyList+0xd4>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	429a      	cmp	r2, r3
 800742a:	d903      	bls.n	8007434 <prvAddNewTaskToReadyList+0x74>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007430:	4a18      	ldr	r2, [pc, #96]	; (8007494 <prvAddNewTaskToReadyList+0xd4>)
 8007432:	6013      	str	r3, [r2, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007438:	4613      	mov	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4a15      	ldr	r2, [pc, #84]	; (8007498 <prvAddNewTaskToReadyList+0xd8>)
 8007442:	441a      	add	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	3304      	adds	r3, #4
 8007448:	4619      	mov	r1, r3
 800744a:	4610      	mov	r0, r2
 800744c:	f7fe fe87 	bl	800615e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007450:	f001 fcd0 	bl	8008df4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007454:	4b0d      	ldr	r3, [pc, #52]	; (800748c <prvAddNewTaskToReadyList+0xcc>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00e      	beq.n	800747a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800745c:	4b0a      	ldr	r3, [pc, #40]	; (8007488 <prvAddNewTaskToReadyList+0xc8>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007466:	429a      	cmp	r2, r3
 8007468:	d207      	bcs.n	800747a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800746a:	4b0c      	ldr	r3, [pc, #48]	; (800749c <prvAddNewTaskToReadyList+0xdc>)
 800746c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800747a:	bf00      	nop
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	20000f28 	.word	0x20000f28
 8007488:	20000a54 	.word	0x20000a54
 800748c:	20000f34 	.word	0x20000f34
 8007490:	20000f44 	.word	0x20000f44
 8007494:	20000f30 	.word	0x20000f30
 8007498:	20000a58 	.word	0x20000a58
 800749c:	e000ed04 	.word	0xe000ed04

080074a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80074a8:	2300      	movs	r3, #0
 80074aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d019      	beq.n	80074e6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80074b2:	4b14      	ldr	r3, [pc, #80]	; (8007504 <vTaskDelay+0x64>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00c      	beq.n	80074d4 <vTaskDelay+0x34>
	__asm volatile
 80074ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074be:	b672      	cpsid	i
 80074c0:	f383 8811 	msr	BASEPRI, r3
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	b662      	cpsie	i
 80074ce:	60bb      	str	r3, [r7, #8]
}
 80074d0:	bf00      	nop
 80074d2:	e7fe      	b.n	80074d2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80074d4:	f000 f88e 	bl	80075f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80074d8:	2100      	movs	r1, #0
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 ff3c 	bl	8008358 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80074e0:	f000 f896 	bl	8007610 <xTaskResumeAll>
 80074e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d107      	bne.n	80074fc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80074ec:	4b06      	ldr	r3, [pc, #24]	; (8007508 <vTaskDelay+0x68>)
 80074ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	f3bf 8f4f 	dsb	sy
 80074f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074fc:	bf00      	nop
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	20000f50 	.word	0x20000f50
 8007508:	e000ed04 	.word	0xe000ed04

0800750c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b08a      	sub	sp, #40	; 0x28
 8007510:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007512:	2300      	movs	r3, #0
 8007514:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007516:	2300      	movs	r3, #0
 8007518:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800751a:	463a      	mov	r2, r7
 800751c:	1d39      	adds	r1, r7, #4
 800751e:	f107 0308 	add.w	r3, r7, #8
 8007522:	4618      	mov	r0, r3
 8007524:	f7fe fdba 	bl	800609c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007528:	6839      	ldr	r1, [r7, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	9202      	str	r2, [sp, #8]
 8007530:	9301      	str	r3, [sp, #4]
 8007532:	2300      	movs	r3, #0
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	2300      	movs	r3, #0
 8007538:	460a      	mov	r2, r1
 800753a:	4926      	ldr	r1, [pc, #152]	; (80075d4 <vTaskStartScheduler+0xc8>)
 800753c:	4826      	ldr	r0, [pc, #152]	; (80075d8 <vTaskStartScheduler+0xcc>)
 800753e:	f7ff fdef 	bl	8007120 <xTaskCreateStatic>
 8007542:	4603      	mov	r3, r0
 8007544:	4a25      	ldr	r2, [pc, #148]	; (80075dc <vTaskStartScheduler+0xd0>)
 8007546:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007548:	4b24      	ldr	r3, [pc, #144]	; (80075dc <vTaskStartScheduler+0xd0>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d002      	beq.n	8007556 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007550:	2301      	movs	r3, #1
 8007552:	617b      	str	r3, [r7, #20]
 8007554:	e001      	b.n	800755a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007556:	2300      	movs	r3, #0
 8007558:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d102      	bne.n	8007566 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007560:	f000 ff4e 	bl	8008400 <xTimerCreateTimerTask>
 8007564:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d11d      	bne.n	80075a8 <vTaskStartScheduler+0x9c>
	__asm volatile
 800756c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007570:	b672      	cpsid	i
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	b662      	cpsie	i
 8007580:	613b      	str	r3, [r7, #16]
}
 8007582:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007584:	4b16      	ldr	r3, [pc, #88]	; (80075e0 <vTaskStartScheduler+0xd4>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	3354      	adds	r3, #84	; 0x54
 800758a:	4a16      	ldr	r2, [pc, #88]	; (80075e4 <vTaskStartScheduler+0xd8>)
 800758c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800758e:	4b16      	ldr	r3, [pc, #88]	; (80075e8 <vTaskStartScheduler+0xdc>)
 8007590:	f04f 32ff 	mov.w	r2, #4294967295
 8007594:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007596:	4b15      	ldr	r3, [pc, #84]	; (80075ec <vTaskStartScheduler+0xe0>)
 8007598:	2201      	movs	r2, #1
 800759a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800759c:	4b14      	ldr	r3, [pc, #80]	; (80075f0 <vTaskStartScheduler+0xe4>)
 800759e:	2200      	movs	r2, #0
 80075a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80075a2:	f001 fb75 	bl	8008c90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80075a6:	e010      	b.n	80075ca <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ae:	d10c      	bne.n	80075ca <vTaskStartScheduler+0xbe>
	__asm volatile
 80075b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b4:	b672      	cpsid	i
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	b662      	cpsie	i
 80075c4:	60fb      	str	r3, [r7, #12]
}
 80075c6:	bf00      	nop
 80075c8:	e7fe      	b.n	80075c8 <vTaskStartScheduler+0xbc>
}
 80075ca:	bf00      	nop
 80075cc:	3718      	adds	r7, #24
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	0800a4c0 	.word	0x0800a4c0
 80075d8:	08007c5d 	.word	0x08007c5d
 80075dc:	20000f4c 	.word	0x20000f4c
 80075e0:	20000a54 	.word	0x20000a54
 80075e4:	20000010 	.word	0x20000010
 80075e8:	20000f48 	.word	0x20000f48
 80075ec:	20000f34 	.word	0x20000f34
 80075f0:	20000f2c 	.word	0x20000f2c

080075f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80075f4:	b480      	push	{r7}
 80075f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80075f8:	4b04      	ldr	r3, [pc, #16]	; (800760c <vTaskSuspendAll+0x18>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3301      	adds	r3, #1
 80075fe:	4a03      	ldr	r2, [pc, #12]	; (800760c <vTaskSuspendAll+0x18>)
 8007600:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007602:	bf00      	nop
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	20000f50 	.word	0x20000f50

08007610 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007616:	2300      	movs	r3, #0
 8007618:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800761a:	2300      	movs	r3, #0
 800761c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800761e:	4b43      	ldr	r3, [pc, #268]	; (800772c <xTaskResumeAll+0x11c>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10c      	bne.n	8007640 <xTaskResumeAll+0x30>
	__asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762a:	b672      	cpsid	i
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	b662      	cpsie	i
 800763a:	603b      	str	r3, [r7, #0]
}
 800763c:	bf00      	nop
 800763e:	e7fe      	b.n	800763e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007640:	f001 fba4 	bl	8008d8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007644:	4b39      	ldr	r3, [pc, #228]	; (800772c <xTaskResumeAll+0x11c>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3b01      	subs	r3, #1
 800764a:	4a38      	ldr	r2, [pc, #224]	; (800772c <xTaskResumeAll+0x11c>)
 800764c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800764e:	4b37      	ldr	r3, [pc, #220]	; (800772c <xTaskResumeAll+0x11c>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d162      	bne.n	800771c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007656:	4b36      	ldr	r3, [pc, #216]	; (8007730 <xTaskResumeAll+0x120>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d05e      	beq.n	800771c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800765e:	e02f      	b.n	80076c0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007660:	4b34      	ldr	r3, [pc, #208]	; (8007734 <xTaskResumeAll+0x124>)
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3318      	adds	r3, #24
 800766c:	4618      	mov	r0, r3
 800766e:	f7fe fdd3 	bl	8006218 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	3304      	adds	r3, #4
 8007676:	4618      	mov	r0, r3
 8007678:	f7fe fdce 	bl	8006218 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007680:	4b2d      	ldr	r3, [pc, #180]	; (8007738 <xTaskResumeAll+0x128>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	429a      	cmp	r2, r3
 8007686:	d903      	bls.n	8007690 <xTaskResumeAll+0x80>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768c:	4a2a      	ldr	r2, [pc, #168]	; (8007738 <xTaskResumeAll+0x128>)
 800768e:	6013      	str	r3, [r2, #0]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007694:	4613      	mov	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4413      	add	r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	4a27      	ldr	r2, [pc, #156]	; (800773c <xTaskResumeAll+0x12c>)
 800769e:	441a      	add	r2, r3
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	3304      	adds	r3, #4
 80076a4:	4619      	mov	r1, r3
 80076a6:	4610      	mov	r0, r2
 80076a8:	f7fe fd59 	bl	800615e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b0:	4b23      	ldr	r3, [pc, #140]	; (8007740 <xTaskResumeAll+0x130>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d302      	bcc.n	80076c0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80076ba:	4b22      	ldr	r3, [pc, #136]	; (8007744 <xTaskResumeAll+0x134>)
 80076bc:	2201      	movs	r2, #1
 80076be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076c0:	4b1c      	ldr	r3, [pc, #112]	; (8007734 <xTaskResumeAll+0x124>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1cb      	bne.n	8007660 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d001      	beq.n	80076d2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80076ce:	f000 fb81 	bl	8007dd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80076d2:	4b1d      	ldr	r3, [pc, #116]	; (8007748 <xTaskResumeAll+0x138>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d010      	beq.n	8007700 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80076de:	f000 f859 	bl	8007794 <xTaskIncrementTick>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d002      	beq.n	80076ee <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80076e8:	4b16      	ldr	r3, [pc, #88]	; (8007744 <xTaskResumeAll+0x134>)
 80076ea:	2201      	movs	r2, #1
 80076ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	3b01      	subs	r3, #1
 80076f2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1f1      	bne.n	80076de <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80076fa:	4b13      	ldr	r3, [pc, #76]	; (8007748 <xTaskResumeAll+0x138>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007700:	4b10      	ldr	r3, [pc, #64]	; (8007744 <xTaskResumeAll+0x134>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d009      	beq.n	800771c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007708:	2301      	movs	r3, #1
 800770a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800770c:	4b0f      	ldr	r3, [pc, #60]	; (800774c <xTaskResumeAll+0x13c>)
 800770e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007712:	601a      	str	r2, [r3, #0]
 8007714:	f3bf 8f4f 	dsb	sy
 8007718:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800771c:	f001 fb6a 	bl	8008df4 <vPortExitCritical>

	return xAlreadyYielded;
 8007720:	68bb      	ldr	r3, [r7, #8]
}
 8007722:	4618      	mov	r0, r3
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	20000f50 	.word	0x20000f50
 8007730:	20000f28 	.word	0x20000f28
 8007734:	20000ee8 	.word	0x20000ee8
 8007738:	20000f30 	.word	0x20000f30
 800773c:	20000a58 	.word	0x20000a58
 8007740:	20000a54 	.word	0x20000a54
 8007744:	20000f3c 	.word	0x20000f3c
 8007748:	20000f38 	.word	0x20000f38
 800774c:	e000ed04 	.word	0xe000ed04

08007750 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007756:	4b05      	ldr	r3, [pc, #20]	; (800776c <xTaskGetTickCount+0x1c>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800775c:	687b      	ldr	r3, [r7, #4]
}
 800775e:	4618      	mov	r0, r3
 8007760:	370c      	adds	r7, #12
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	20000f2c 	.word	0x20000f2c

08007770 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007776:	f001 fbf1 	bl	8008f5c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800777a:	2300      	movs	r3, #0
 800777c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800777e:	4b04      	ldr	r3, [pc, #16]	; (8007790 <xTaskGetTickCountFromISR+0x20>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007784:	683b      	ldr	r3, [r7, #0]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3708      	adds	r7, #8
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	20000f2c 	.word	0x20000f2c

08007794 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800779a:	2300      	movs	r3, #0
 800779c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800779e:	4b50      	ldr	r3, [pc, #320]	; (80078e0 <xTaskIncrementTick+0x14c>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f040 808b 	bne.w	80078be <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80077a8:	4b4e      	ldr	r3, [pc, #312]	; (80078e4 <xTaskIncrementTick+0x150>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	3301      	adds	r3, #1
 80077ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80077b0:	4a4c      	ldr	r2, [pc, #304]	; (80078e4 <xTaskIncrementTick+0x150>)
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d122      	bne.n	8007802 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80077bc:	4b4a      	ldr	r3, [pc, #296]	; (80078e8 <xTaskIncrementTick+0x154>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00c      	beq.n	80077e0 <xTaskIncrementTick+0x4c>
	__asm volatile
 80077c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ca:	b672      	cpsid	i
 80077cc:	f383 8811 	msr	BASEPRI, r3
 80077d0:	f3bf 8f6f 	isb	sy
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	b662      	cpsie	i
 80077da:	603b      	str	r3, [r7, #0]
}
 80077dc:	bf00      	nop
 80077de:	e7fe      	b.n	80077de <xTaskIncrementTick+0x4a>
 80077e0:	4b41      	ldr	r3, [pc, #260]	; (80078e8 <xTaskIncrementTick+0x154>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	60fb      	str	r3, [r7, #12]
 80077e6:	4b41      	ldr	r3, [pc, #260]	; (80078ec <xTaskIncrementTick+0x158>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a3f      	ldr	r2, [pc, #252]	; (80078e8 <xTaskIncrementTick+0x154>)
 80077ec:	6013      	str	r3, [r2, #0]
 80077ee:	4a3f      	ldr	r2, [pc, #252]	; (80078ec <xTaskIncrementTick+0x158>)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6013      	str	r3, [r2, #0]
 80077f4:	4b3e      	ldr	r3, [pc, #248]	; (80078f0 <xTaskIncrementTick+0x15c>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3301      	adds	r3, #1
 80077fa:	4a3d      	ldr	r2, [pc, #244]	; (80078f0 <xTaskIncrementTick+0x15c>)
 80077fc:	6013      	str	r3, [r2, #0]
 80077fe:	f000 fae9 	bl	8007dd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007802:	4b3c      	ldr	r3, [pc, #240]	; (80078f4 <xTaskIncrementTick+0x160>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	693a      	ldr	r2, [r7, #16]
 8007808:	429a      	cmp	r2, r3
 800780a:	d349      	bcc.n	80078a0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800780c:	4b36      	ldr	r3, [pc, #216]	; (80078e8 <xTaskIncrementTick+0x154>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d104      	bne.n	8007820 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007816:	4b37      	ldr	r3, [pc, #220]	; (80078f4 <xTaskIncrementTick+0x160>)
 8007818:	f04f 32ff 	mov.w	r2, #4294967295
 800781c:	601a      	str	r2, [r3, #0]
					break;
 800781e:	e03f      	b.n	80078a0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007820:	4b31      	ldr	r3, [pc, #196]	; (80078e8 <xTaskIncrementTick+0x154>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	429a      	cmp	r2, r3
 8007836:	d203      	bcs.n	8007840 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007838:	4a2e      	ldr	r2, [pc, #184]	; (80078f4 <xTaskIncrementTick+0x160>)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800783e:	e02f      	b.n	80078a0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	3304      	adds	r3, #4
 8007844:	4618      	mov	r0, r3
 8007846:	f7fe fce7 	bl	8006218 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784e:	2b00      	cmp	r3, #0
 8007850:	d004      	beq.n	800785c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	3318      	adds	r3, #24
 8007856:	4618      	mov	r0, r3
 8007858:	f7fe fcde 	bl	8006218 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007860:	4b25      	ldr	r3, [pc, #148]	; (80078f8 <xTaskIncrementTick+0x164>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	429a      	cmp	r2, r3
 8007866:	d903      	bls.n	8007870 <xTaskIncrementTick+0xdc>
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786c:	4a22      	ldr	r2, [pc, #136]	; (80078f8 <xTaskIncrementTick+0x164>)
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007874:	4613      	mov	r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	4413      	add	r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4a1f      	ldr	r2, [pc, #124]	; (80078fc <xTaskIncrementTick+0x168>)
 800787e:	441a      	add	r2, r3
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	3304      	adds	r3, #4
 8007884:	4619      	mov	r1, r3
 8007886:	4610      	mov	r0, r2
 8007888:	f7fe fc69 	bl	800615e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007890:	4b1b      	ldr	r3, [pc, #108]	; (8007900 <xTaskIncrementTick+0x16c>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007896:	429a      	cmp	r2, r3
 8007898:	d3b8      	bcc.n	800780c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800789a:	2301      	movs	r3, #1
 800789c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800789e:	e7b5      	b.n	800780c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80078a0:	4b17      	ldr	r3, [pc, #92]	; (8007900 <xTaskIncrementTick+0x16c>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a6:	4915      	ldr	r1, [pc, #84]	; (80078fc <xTaskIncrementTick+0x168>)
 80078a8:	4613      	mov	r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	440b      	add	r3, r1
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d907      	bls.n	80078c8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80078b8:	2301      	movs	r3, #1
 80078ba:	617b      	str	r3, [r7, #20]
 80078bc:	e004      	b.n	80078c8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80078be:	4b11      	ldr	r3, [pc, #68]	; (8007904 <xTaskIncrementTick+0x170>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	3301      	adds	r3, #1
 80078c4:	4a0f      	ldr	r2, [pc, #60]	; (8007904 <xTaskIncrementTick+0x170>)
 80078c6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80078c8:	4b0f      	ldr	r3, [pc, #60]	; (8007908 <xTaskIncrementTick+0x174>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80078d0:	2301      	movs	r3, #1
 80078d2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80078d4:	697b      	ldr	r3, [r7, #20]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3718      	adds	r7, #24
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	20000f50 	.word	0x20000f50
 80078e4:	20000f2c 	.word	0x20000f2c
 80078e8:	20000ee0 	.word	0x20000ee0
 80078ec:	20000ee4 	.word	0x20000ee4
 80078f0:	20000f40 	.word	0x20000f40
 80078f4:	20000f48 	.word	0x20000f48
 80078f8:	20000f30 	.word	0x20000f30
 80078fc:	20000a58 	.word	0x20000a58
 8007900:	20000a54 	.word	0x20000a54
 8007904:	20000f38 	.word	0x20000f38
 8007908:	20000f3c 	.word	0x20000f3c

0800790c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007912:	4b2b      	ldr	r3, [pc, #172]	; (80079c0 <vTaskSwitchContext+0xb4>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d003      	beq.n	8007922 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800791a:	4b2a      	ldr	r3, [pc, #168]	; (80079c4 <vTaskSwitchContext+0xb8>)
 800791c:	2201      	movs	r2, #1
 800791e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007920:	e048      	b.n	80079b4 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8007922:	4b28      	ldr	r3, [pc, #160]	; (80079c4 <vTaskSwitchContext+0xb8>)
 8007924:	2200      	movs	r2, #0
 8007926:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007928:	4b27      	ldr	r3, [pc, #156]	; (80079c8 <vTaskSwitchContext+0xbc>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	60fb      	str	r3, [r7, #12]
 800792e:	e012      	b.n	8007956 <vTaskSwitchContext+0x4a>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10c      	bne.n	8007950 <vTaskSwitchContext+0x44>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793a:	b672      	cpsid	i
 800793c:	f383 8811 	msr	BASEPRI, r3
 8007940:	f3bf 8f6f 	isb	sy
 8007944:	f3bf 8f4f 	dsb	sy
 8007948:	b662      	cpsie	i
 800794a:	607b      	str	r3, [r7, #4]
}
 800794c:	bf00      	nop
 800794e:	e7fe      	b.n	800794e <vTaskSwitchContext+0x42>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	3b01      	subs	r3, #1
 8007954:	60fb      	str	r3, [r7, #12]
 8007956:	491d      	ldr	r1, [pc, #116]	; (80079cc <vTaskSwitchContext+0xc0>)
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	4613      	mov	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	440b      	add	r3, r1
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d0e2      	beq.n	8007930 <vTaskSwitchContext+0x24>
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	4613      	mov	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4413      	add	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	4a15      	ldr	r2, [pc, #84]	; (80079cc <vTaskSwitchContext+0xc0>)
 8007976:	4413      	add	r3, r2
 8007978:	60bb      	str	r3, [r7, #8]
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	605a      	str	r2, [r3, #4]
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	3308      	adds	r3, #8
 800798c:	429a      	cmp	r2, r3
 800798e:	d104      	bne.n	800799a <vTaskSwitchContext+0x8e>
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	685a      	ldr	r2, [r3, #4]
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	605a      	str	r2, [r3, #4]
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	4a0b      	ldr	r2, [pc, #44]	; (80079d0 <vTaskSwitchContext+0xc4>)
 80079a2:	6013      	str	r3, [r2, #0]
 80079a4:	4a08      	ldr	r2, [pc, #32]	; (80079c8 <vTaskSwitchContext+0xbc>)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80079aa:	4b09      	ldr	r3, [pc, #36]	; (80079d0 <vTaskSwitchContext+0xc4>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	3354      	adds	r3, #84	; 0x54
 80079b0:	4a08      	ldr	r2, [pc, #32]	; (80079d4 <vTaskSwitchContext+0xc8>)
 80079b2:	6013      	str	r3, [r2, #0]
}
 80079b4:	bf00      	nop
 80079b6:	3714      	adds	r7, #20
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	20000f50 	.word	0x20000f50
 80079c4:	20000f3c 	.word	0x20000f3c
 80079c8:	20000f30 	.word	0x20000f30
 80079cc:	20000a58 	.word	0x20000a58
 80079d0:	20000a54 	.word	0x20000a54
 80079d4:	20000010 	.word	0x20000010

080079d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10c      	bne.n	8007a02 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80079e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ec:	b672      	cpsid	i
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	b662      	cpsie	i
 80079fc:	60fb      	str	r3, [r7, #12]
}
 80079fe:	bf00      	nop
 8007a00:	e7fe      	b.n	8007a00 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a02:	4b07      	ldr	r3, [pc, #28]	; (8007a20 <vTaskPlaceOnEventList+0x48>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3318      	adds	r3, #24
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7fe fbcb 	bl	80061a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007a10:	2101      	movs	r1, #1
 8007a12:	6838      	ldr	r0, [r7, #0]
 8007a14:	f000 fca0 	bl	8008358 <prvAddCurrentTaskToDelayedList>
}
 8007a18:	bf00      	nop
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	20000a54 	.word	0x20000a54

08007a24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10c      	bne.n	8007a50 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8007a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3a:	b672      	cpsid	i
 8007a3c:	f383 8811 	msr	BASEPRI, r3
 8007a40:	f3bf 8f6f 	isb	sy
 8007a44:	f3bf 8f4f 	dsb	sy
 8007a48:	b662      	cpsie	i
 8007a4a:	617b      	str	r3, [r7, #20]
}
 8007a4c:	bf00      	nop
 8007a4e:	e7fe      	b.n	8007a4e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a50:	4b0a      	ldr	r3, [pc, #40]	; (8007a7c <vTaskPlaceOnEventListRestricted+0x58>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	3318      	adds	r3, #24
 8007a56:	4619      	mov	r1, r3
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f7fe fb80 	bl	800615e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8007a64:	f04f 33ff 	mov.w	r3, #4294967295
 8007a68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007a6a:	6879      	ldr	r1, [r7, #4]
 8007a6c:	68b8      	ldr	r0, [r7, #8]
 8007a6e:	f000 fc73 	bl	8008358 <prvAddCurrentTaskToDelayedList>
	}
 8007a72:	bf00      	nop
 8007a74:	3718      	adds	r7, #24
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	20000a54 	.word	0x20000a54

08007a80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10c      	bne.n	8007ab0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8007a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9a:	b672      	cpsid	i
 8007a9c:	f383 8811 	msr	BASEPRI, r3
 8007aa0:	f3bf 8f6f 	isb	sy
 8007aa4:	f3bf 8f4f 	dsb	sy
 8007aa8:	b662      	cpsie	i
 8007aaa:	60fb      	str	r3, [r7, #12]
}
 8007aac:	bf00      	nop
 8007aae:	e7fe      	b.n	8007aae <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	3318      	adds	r3, #24
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7fe fbaf 	bl	8006218 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aba:	4b1e      	ldr	r3, [pc, #120]	; (8007b34 <xTaskRemoveFromEventList+0xb4>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d11d      	bne.n	8007afe <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fe fba6 	bl	8006218 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad0:	4b19      	ldr	r3, [pc, #100]	; (8007b38 <xTaskRemoveFromEventList+0xb8>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d903      	bls.n	8007ae0 <xTaskRemoveFromEventList+0x60>
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007adc:	4a16      	ldr	r2, [pc, #88]	; (8007b38 <xTaskRemoveFromEventList+0xb8>)
 8007ade:	6013      	str	r3, [r2, #0]
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	4413      	add	r3, r2
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	4a13      	ldr	r2, [pc, #76]	; (8007b3c <xTaskRemoveFromEventList+0xbc>)
 8007aee:	441a      	add	r2, r3
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	3304      	adds	r3, #4
 8007af4:	4619      	mov	r1, r3
 8007af6:	4610      	mov	r0, r2
 8007af8:	f7fe fb31 	bl	800615e <vListInsertEnd>
 8007afc:	e005      	b.n	8007b0a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	3318      	adds	r3, #24
 8007b02:	4619      	mov	r1, r3
 8007b04:	480e      	ldr	r0, [pc, #56]	; (8007b40 <xTaskRemoveFromEventList+0xc0>)
 8007b06:	f7fe fb2a 	bl	800615e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b0e:	4b0d      	ldr	r3, [pc, #52]	; (8007b44 <xTaskRemoveFromEventList+0xc4>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d905      	bls.n	8007b24 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007b1c:	4b0a      	ldr	r3, [pc, #40]	; (8007b48 <xTaskRemoveFromEventList+0xc8>)
 8007b1e:	2201      	movs	r2, #1
 8007b20:	601a      	str	r2, [r3, #0]
 8007b22:	e001      	b.n	8007b28 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8007b24:	2300      	movs	r3, #0
 8007b26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007b28:	697b      	ldr	r3, [r7, #20]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3718      	adds	r7, #24
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	20000f50 	.word	0x20000f50
 8007b38:	20000f30 	.word	0x20000f30
 8007b3c:	20000a58 	.word	0x20000a58
 8007b40:	20000ee8 	.word	0x20000ee8
 8007b44:	20000a54 	.word	0x20000a54
 8007b48:	20000f3c 	.word	0x20000f3c

08007b4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007b54:	4b06      	ldr	r3, [pc, #24]	; (8007b70 <vTaskInternalSetTimeOutState+0x24>)
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007b5c:	4b05      	ldr	r3, [pc, #20]	; (8007b74 <vTaskInternalSetTimeOutState+0x28>)
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	605a      	str	r2, [r3, #4]
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	20000f40 	.word	0x20000f40
 8007b74:	20000f2c 	.word	0x20000f2c

08007b78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b088      	sub	sp, #32
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10c      	bne.n	8007ba2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8c:	b672      	cpsid	i
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	b662      	cpsie	i
 8007b9c:	613b      	str	r3, [r7, #16]
}
 8007b9e:	bf00      	nop
 8007ba0:	e7fe      	b.n	8007ba0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10c      	bne.n	8007bc2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bac:	b672      	cpsid	i
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	b662      	cpsie	i
 8007bbc:	60fb      	str	r3, [r7, #12]
}
 8007bbe:	bf00      	nop
 8007bc0:	e7fe      	b.n	8007bc0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007bc2:	f001 f8e3 	bl	8008d8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007bc6:	4b1d      	ldr	r3, [pc, #116]	; (8007c3c <xTaskCheckForTimeOut+0xc4>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	69ba      	ldr	r2, [r7, #24]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bde:	d102      	bne.n	8007be6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007be0:	2300      	movs	r3, #0
 8007be2:	61fb      	str	r3, [r7, #28]
 8007be4:	e023      	b.n	8007c2e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	4b15      	ldr	r3, [pc, #84]	; (8007c40 <xTaskCheckForTimeOut+0xc8>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d007      	beq.n	8007c02 <xTaskCheckForTimeOut+0x8a>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	69ba      	ldr	r2, [r7, #24]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d302      	bcc.n	8007c02 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	61fb      	str	r3, [r7, #28]
 8007c00:	e015      	b.n	8007c2e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d20b      	bcs.n	8007c24 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	1ad2      	subs	r2, r2, r3
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f7ff ff97 	bl	8007b4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	61fb      	str	r3, [r7, #28]
 8007c22:	e004      	b.n	8007c2e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	2200      	movs	r2, #0
 8007c28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007c2e:	f001 f8e1 	bl	8008df4 <vPortExitCritical>

	return xReturn;
 8007c32:	69fb      	ldr	r3, [r7, #28]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3720      	adds	r7, #32
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	20000f2c 	.word	0x20000f2c
 8007c40:	20000f40 	.word	0x20000f40

08007c44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007c44:	b480      	push	{r7}
 8007c46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007c48:	4b03      	ldr	r3, [pc, #12]	; (8007c58 <vTaskMissedYield+0x14>)
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	601a      	str	r2, [r3, #0]
}
 8007c4e:	bf00      	nop
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr
 8007c58:	20000f3c 	.word	0x20000f3c

08007c5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007c64:	f000 f852 	bl	8007d0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c68:	4b06      	ldr	r3, [pc, #24]	; (8007c84 <prvIdleTask+0x28>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d9f9      	bls.n	8007c64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007c70:	4b05      	ldr	r3, [pc, #20]	; (8007c88 <prvIdleTask+0x2c>)
 8007c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c76:	601a      	str	r2, [r3, #0]
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007c80:	e7f0      	b.n	8007c64 <prvIdleTask+0x8>
 8007c82:	bf00      	nop
 8007c84:	20000a58 	.word	0x20000a58
 8007c88:	e000ed04 	.word	0xe000ed04

08007c8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c92:	2300      	movs	r3, #0
 8007c94:	607b      	str	r3, [r7, #4]
 8007c96:	e00c      	b.n	8007cb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4413      	add	r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	4a12      	ldr	r2, [pc, #72]	; (8007cec <prvInitialiseTaskLists+0x60>)
 8007ca4:	4413      	add	r3, r2
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fe fa2c 	bl	8006104 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	607b      	str	r3, [r7, #4]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2b37      	cmp	r3, #55	; 0x37
 8007cb6:	d9ef      	bls.n	8007c98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007cb8:	480d      	ldr	r0, [pc, #52]	; (8007cf0 <prvInitialiseTaskLists+0x64>)
 8007cba:	f7fe fa23 	bl	8006104 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007cbe:	480d      	ldr	r0, [pc, #52]	; (8007cf4 <prvInitialiseTaskLists+0x68>)
 8007cc0:	f7fe fa20 	bl	8006104 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007cc4:	480c      	ldr	r0, [pc, #48]	; (8007cf8 <prvInitialiseTaskLists+0x6c>)
 8007cc6:	f7fe fa1d 	bl	8006104 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007cca:	480c      	ldr	r0, [pc, #48]	; (8007cfc <prvInitialiseTaskLists+0x70>)
 8007ccc:	f7fe fa1a 	bl	8006104 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007cd0:	480b      	ldr	r0, [pc, #44]	; (8007d00 <prvInitialiseTaskLists+0x74>)
 8007cd2:	f7fe fa17 	bl	8006104 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007cd6:	4b0b      	ldr	r3, [pc, #44]	; (8007d04 <prvInitialiseTaskLists+0x78>)
 8007cd8:	4a05      	ldr	r2, [pc, #20]	; (8007cf0 <prvInitialiseTaskLists+0x64>)
 8007cda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007cdc:	4b0a      	ldr	r3, [pc, #40]	; (8007d08 <prvInitialiseTaskLists+0x7c>)
 8007cde:	4a05      	ldr	r2, [pc, #20]	; (8007cf4 <prvInitialiseTaskLists+0x68>)
 8007ce0:	601a      	str	r2, [r3, #0]
}
 8007ce2:	bf00      	nop
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	20000a58 	.word	0x20000a58
 8007cf0:	20000eb8 	.word	0x20000eb8
 8007cf4:	20000ecc 	.word	0x20000ecc
 8007cf8:	20000ee8 	.word	0x20000ee8
 8007cfc:	20000efc 	.word	0x20000efc
 8007d00:	20000f14 	.word	0x20000f14
 8007d04:	20000ee0 	.word	0x20000ee0
 8007d08:	20000ee4 	.word	0x20000ee4

08007d0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d12:	e019      	b.n	8007d48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007d14:	f001 f83a 	bl	8008d8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d18:	4b10      	ldr	r3, [pc, #64]	; (8007d5c <prvCheckTasksWaitingTermination+0x50>)
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3304      	adds	r3, #4
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7fe fa77 	bl	8006218 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d2a:	4b0d      	ldr	r3, [pc, #52]	; (8007d60 <prvCheckTasksWaitingTermination+0x54>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	4a0b      	ldr	r2, [pc, #44]	; (8007d60 <prvCheckTasksWaitingTermination+0x54>)
 8007d32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d34:	4b0b      	ldr	r3, [pc, #44]	; (8007d64 <prvCheckTasksWaitingTermination+0x58>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	4a0a      	ldr	r2, [pc, #40]	; (8007d64 <prvCheckTasksWaitingTermination+0x58>)
 8007d3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d3e:	f001 f859 	bl	8008df4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f810 	bl	8007d68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d48:	4b06      	ldr	r3, [pc, #24]	; (8007d64 <prvCheckTasksWaitingTermination+0x58>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d1e1      	bne.n	8007d14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007d50:	bf00      	nop
 8007d52:	bf00      	nop
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	20000efc 	.word	0x20000efc
 8007d60:	20000f28 	.word	0x20000f28
 8007d64:	20000f10 	.word	0x20000f10

08007d68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	3354      	adds	r3, #84	; 0x54
 8007d74:	4618      	mov	r0, r3
 8007d76:	f001 fd0d 	bl	8009794 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d108      	bne.n	8007d96 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f001 f9f5 	bl	8009178 <vPortFree>
				vPortFree( pxTCB );
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f001 f9f2 	bl	8009178 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d94:	e01a      	b.n	8007dcc <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d103      	bne.n	8007da8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f001 f9e9 	bl	8009178 <vPortFree>
	}
 8007da6:	e011      	b.n	8007dcc <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d00c      	beq.n	8007dcc <prvDeleteTCB+0x64>
	__asm volatile
 8007db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db6:	b672      	cpsid	i
 8007db8:	f383 8811 	msr	BASEPRI, r3
 8007dbc:	f3bf 8f6f 	isb	sy
 8007dc0:	f3bf 8f4f 	dsb	sy
 8007dc4:	b662      	cpsie	i
 8007dc6:	60fb      	str	r3, [r7, #12]
}
 8007dc8:	bf00      	nop
 8007dca:	e7fe      	b.n	8007dca <prvDeleteTCB+0x62>
	}
 8007dcc:	bf00      	nop
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007dda:	4b0c      	ldr	r3, [pc, #48]	; (8007e0c <prvResetNextTaskUnblockTime+0x38>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d104      	bne.n	8007dee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007de4:	4b0a      	ldr	r3, [pc, #40]	; (8007e10 <prvResetNextTaskUnblockTime+0x3c>)
 8007de6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007dec:	e008      	b.n	8007e00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dee:	4b07      	ldr	r3, [pc, #28]	; (8007e0c <prvResetNextTaskUnblockTime+0x38>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	4a04      	ldr	r2, [pc, #16]	; (8007e10 <prvResetNextTaskUnblockTime+0x3c>)
 8007dfe:	6013      	str	r3, [r2, #0]
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr
 8007e0c:	20000ee0 	.word	0x20000ee0
 8007e10:	20000f48 	.word	0x20000f48

08007e14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007e1a:	4b0b      	ldr	r3, [pc, #44]	; (8007e48 <xTaskGetSchedulerState+0x34>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d102      	bne.n	8007e28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007e22:	2301      	movs	r3, #1
 8007e24:	607b      	str	r3, [r7, #4]
 8007e26:	e008      	b.n	8007e3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e28:	4b08      	ldr	r3, [pc, #32]	; (8007e4c <xTaskGetSchedulerState+0x38>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d102      	bne.n	8007e36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007e30:	2302      	movs	r3, #2
 8007e32:	607b      	str	r3, [r7, #4]
 8007e34:	e001      	b.n	8007e3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007e36:	2300      	movs	r3, #0
 8007e38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007e3a:	687b      	ldr	r3, [r7, #4]
	}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr
 8007e48:	20000f34 	.word	0x20000f34
 8007e4c:	20000f50 	.word	0x20000f50

08007e50 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d051      	beq.n	8007f0a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e6a:	4b2a      	ldr	r3, [pc, #168]	; (8007f14 <xTaskPriorityInherit+0xc4>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d241      	bcs.n	8007ef8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	699b      	ldr	r3, [r3, #24]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	db06      	blt.n	8007e8a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e7c:	4b25      	ldr	r3, [pc, #148]	; (8007f14 <xTaskPriorityInherit+0xc4>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	6959      	ldr	r1, [r3, #20]
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e92:	4613      	mov	r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	4413      	add	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	4a1f      	ldr	r2, [pc, #124]	; (8007f18 <xTaskPriorityInherit+0xc8>)
 8007e9c:	4413      	add	r3, r2
 8007e9e:	4299      	cmp	r1, r3
 8007ea0:	d122      	bne.n	8007ee8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	3304      	adds	r3, #4
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7fe f9b6 	bl	8006218 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007eac:	4b19      	ldr	r3, [pc, #100]	; (8007f14 <xTaskPriorityInherit+0xc4>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eba:	4b18      	ldr	r3, [pc, #96]	; (8007f1c <xTaskPriorityInherit+0xcc>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d903      	bls.n	8007eca <xTaskPriorityInherit+0x7a>
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec6:	4a15      	ldr	r2, [pc, #84]	; (8007f1c <xTaskPriorityInherit+0xcc>)
 8007ec8:	6013      	str	r3, [r2, #0]
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ece:	4613      	mov	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4413      	add	r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	4a10      	ldr	r2, [pc, #64]	; (8007f18 <xTaskPriorityInherit+0xc8>)
 8007ed8:	441a      	add	r2, r3
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	3304      	adds	r3, #4
 8007ede:	4619      	mov	r1, r3
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	f7fe f93c 	bl	800615e <vListInsertEnd>
 8007ee6:	e004      	b.n	8007ef2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007ee8:	4b0a      	ldr	r3, [pc, #40]	; (8007f14 <xTaskPriorityInherit+0xc4>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	60fb      	str	r3, [r7, #12]
 8007ef6:	e008      	b.n	8007f0a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007efc:	4b05      	ldr	r3, [pc, #20]	; (8007f14 <xTaskPriorityInherit+0xc4>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d201      	bcs.n	8007f0a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007f06:	2301      	movs	r3, #1
 8007f08:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
	}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	20000a54 	.word	0x20000a54
 8007f18:	20000a58 	.word	0x20000a58
 8007f1c:	20000f30 	.word	0x20000f30

08007f20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d05a      	beq.n	8007fec <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007f36:	4b30      	ldr	r3, [pc, #192]	; (8007ff8 <xTaskPriorityDisinherit+0xd8>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d00c      	beq.n	8007f5a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f44:	b672      	cpsid	i
 8007f46:	f383 8811 	msr	BASEPRI, r3
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	b662      	cpsie	i
 8007f54:	60fb      	str	r3, [r7, #12]
}
 8007f56:	bf00      	nop
 8007f58:	e7fe      	b.n	8007f58 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10c      	bne.n	8007f7c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f66:	b672      	cpsid	i
 8007f68:	f383 8811 	msr	BASEPRI, r3
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	b662      	cpsie	i
 8007f76:	60bb      	str	r3, [r7, #8]
}
 8007f78:	bf00      	nop
 8007f7a:	e7fe      	b.n	8007f7a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f80:	1e5a      	subs	r2, r3, #1
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d02c      	beq.n	8007fec <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d128      	bne.n	8007fec <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	3304      	adds	r3, #4
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fe f93a 	bl	8006218 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fbc:	4b0f      	ldr	r3, [pc, #60]	; (8007ffc <xTaskPriorityDisinherit+0xdc>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d903      	bls.n	8007fcc <xTaskPriorityDisinherit+0xac>
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc8:	4a0c      	ldr	r2, [pc, #48]	; (8007ffc <xTaskPriorityDisinherit+0xdc>)
 8007fca:	6013      	str	r3, [r2, #0]
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	4413      	add	r3, r2
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	4a09      	ldr	r2, [pc, #36]	; (8008000 <xTaskPriorityDisinherit+0xe0>)
 8007fda:	441a      	add	r2, r3
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	3304      	adds	r3, #4
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	4610      	mov	r0, r2
 8007fe4:	f7fe f8bb 	bl	800615e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007fec:	697b      	ldr	r3, [r7, #20]
	}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3718      	adds	r7, #24
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	20000a54 	.word	0x20000a54
 8007ffc:	20000f30 	.word	0x20000f30
 8008000:	20000a58 	.word	0x20000a58

08008004 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008004:	b580      	push	{r7, lr}
 8008006:	b088      	sub	sp, #32
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008012:	2301      	movs	r3, #1
 8008014:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d06e      	beq.n	80080fa <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10c      	bne.n	800803e <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8008024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008028:	b672      	cpsid	i
 800802a:	f383 8811 	msr	BASEPRI, r3
 800802e:	f3bf 8f6f 	isb	sy
 8008032:	f3bf 8f4f 	dsb	sy
 8008036:	b662      	cpsie	i
 8008038:	60fb      	str	r3, [r7, #12]
}
 800803a:	bf00      	nop
 800803c:	e7fe      	b.n	800803c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008042:	683a      	ldr	r2, [r7, #0]
 8008044:	429a      	cmp	r2, r3
 8008046:	d902      	bls.n	800804e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	61fb      	str	r3, [r7, #28]
 800804c:	e002      	b.n	8008054 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008052:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008058:	69fa      	ldr	r2, [r7, #28]
 800805a:	429a      	cmp	r2, r3
 800805c:	d04d      	beq.n	80080fa <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	429a      	cmp	r2, r3
 8008066:	d148      	bne.n	80080fa <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008068:	4b26      	ldr	r3, [pc, #152]	; (8008104 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	69ba      	ldr	r2, [r7, #24]
 800806e:	429a      	cmp	r2, r3
 8008070:	d10c      	bne.n	800808c <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8008072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008076:	b672      	cpsid	i
 8008078:	f383 8811 	msr	BASEPRI, r3
 800807c:	f3bf 8f6f 	isb	sy
 8008080:	f3bf 8f4f 	dsb	sy
 8008084:	b662      	cpsie	i
 8008086:	60bb      	str	r3, [r7, #8]
}
 8008088:	bf00      	nop
 800808a:	e7fe      	b.n	800808a <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008090:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	69fa      	ldr	r2, [r7, #28]
 8008096:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	2b00      	cmp	r3, #0
 800809e:	db04      	blt.n	80080aa <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	6959      	ldr	r1, [r3, #20]
 80080ae:	693a      	ldr	r2, [r7, #16]
 80080b0:	4613      	mov	r3, r2
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4413      	add	r3, r2
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	4a13      	ldr	r2, [pc, #76]	; (8008108 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80080ba:	4413      	add	r3, r2
 80080bc:	4299      	cmp	r1, r3
 80080be:	d11c      	bne.n	80080fa <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	3304      	adds	r3, #4
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7fe f8a7 	bl	8006218 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ce:	4b0f      	ldr	r3, [pc, #60]	; (800810c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d903      	bls.n	80080de <vTaskPriorityDisinheritAfterTimeout+0xda>
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080da:	4a0c      	ldr	r2, [pc, #48]	; (800810c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80080dc:	6013      	str	r3, [r2, #0]
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e2:	4613      	mov	r3, r2
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4413      	add	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4a07      	ldr	r2, [pc, #28]	; (8008108 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80080ec:	441a      	add	r2, r3
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	3304      	adds	r3, #4
 80080f2:	4619      	mov	r1, r3
 80080f4:	4610      	mov	r0, r2
 80080f6:	f7fe f832 	bl	800615e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80080fa:	bf00      	nop
 80080fc:	3720      	adds	r7, #32
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	20000a54 	.word	0x20000a54
 8008108:	20000a58 	.word	0x20000a58
 800810c:	20000f30 	.word	0x20000f30

08008110 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008110:	b480      	push	{r7}
 8008112:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008114:	4b07      	ldr	r3, [pc, #28]	; (8008134 <pvTaskIncrementMutexHeldCount+0x24>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d004      	beq.n	8008126 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800811c:	4b05      	ldr	r3, [pc, #20]	; (8008134 <pvTaskIncrementMutexHeldCount+0x24>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008122:	3201      	adds	r2, #1
 8008124:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008126:	4b03      	ldr	r3, [pc, #12]	; (8008134 <pvTaskIncrementMutexHeldCount+0x24>)
 8008128:	681b      	ldr	r3, [r3, #0]
	}
 800812a:	4618      	mov	r0, r3
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr
 8008134:	20000a54 	.word	0x20000a54

08008138 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8008142:	f000 fe23 	bl	8008d8c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8008146:	4b20      	ldr	r3, [pc, #128]	; (80081c8 <ulTaskNotifyTake+0x90>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800814e:	2b00      	cmp	r3, #0
 8008150:	d113      	bne.n	800817a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008152:	4b1d      	ldr	r3, [pc, #116]	; (80081c8 <ulTaskNotifyTake+0x90>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00b      	beq.n	800817a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008162:	2101      	movs	r1, #1
 8008164:	6838      	ldr	r0, [r7, #0]
 8008166:	f000 f8f7 	bl	8008358 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800816a:	4b18      	ldr	r3, [pc, #96]	; (80081cc <ulTaskNotifyTake+0x94>)
 800816c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008170:	601a      	str	r2, [r3, #0]
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800817a:	f000 fe3b 	bl	8008df4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800817e:	f000 fe05 	bl	8008d8c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8008182:	4b11      	ldr	r3, [pc, #68]	; (80081c8 <ulTaskNotifyTake+0x90>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800818a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00e      	beq.n	80081b0 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d005      	beq.n	80081a4 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8008198:	4b0b      	ldr	r3, [pc, #44]	; (80081c8 <ulTaskNotifyTake+0x90>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2200      	movs	r2, #0
 800819e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80081a2:	e005      	b.n	80081b0 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80081a4:	4b08      	ldr	r3, [pc, #32]	; (80081c8 <ulTaskNotifyTake+0x90>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	3a01      	subs	r2, #1
 80081ac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80081b0:	4b05      	ldr	r3, [pc, #20]	; (80081c8 <ulTaskNotifyTake+0x90>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 80081ba:	f000 fe1b 	bl	8008df4 <vPortExitCritical>

		return ulReturn;
 80081be:	68fb      	ldr	r3, [r7, #12]
	}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	20000a54 	.word	0x20000a54
 80081cc:	e000ed04 	.word	0xe000ed04

080081d0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b08a      	sub	sp, #40	; 0x28
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	603b      	str	r3, [r7, #0]
 80081dc:	4613      	mov	r3, r2
 80081de:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80081e0:	2301      	movs	r3, #1
 80081e2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10c      	bne.n	8008204 <xTaskGenericNotify+0x34>
	__asm volatile
 80081ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ee:	b672      	cpsid	i
 80081f0:	f383 8811 	msr	BASEPRI, r3
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	b662      	cpsie	i
 80081fe:	61bb      	str	r3, [r7, #24]
}
 8008200:	bf00      	nop
 8008202:	e7fe      	b.n	8008202 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8008208:	f000 fdc0 	bl	8008d8c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d004      	beq.n	800821c <xTaskGenericNotify+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008212:	6a3b      	ldr	r3, [r7, #32]
 8008214:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800821c:	6a3b      	ldr	r3, [r7, #32]
 800821e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8008222:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008224:	6a3b      	ldr	r3, [r7, #32]
 8008226:	2202      	movs	r2, #2
 8008228:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800822c:	79fb      	ldrb	r3, [r7, #7]
 800822e:	2b04      	cmp	r3, #4
 8008230:	d82d      	bhi.n	800828e <xTaskGenericNotify+0xbe>
 8008232:	a201      	add	r2, pc, #4	; (adr r2, 8008238 <xTaskGenericNotify+0x68>)
 8008234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008238:	080082b5 	.word	0x080082b5
 800823c:	0800824d 	.word	0x0800824d
 8008240:	0800825f 	.word	0x0800825f
 8008244:	0800826f 	.word	0x0800826f
 8008248:	08008279 	.word	0x08008279
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800824c:	6a3b      	ldr	r3, [r7, #32]
 800824e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	431a      	orrs	r2, r3
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800825c:	e02d      	b.n	80082ba <xTaskGenericNotify+0xea>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800825e:	6a3b      	ldr	r3, [r7, #32]
 8008260:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008264:	1c5a      	adds	r2, r3, #1
 8008266:	6a3b      	ldr	r3, [r7, #32]
 8008268:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800826c:	e025      	b.n	80082ba <xTaskGenericNotify+0xea>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800826e:	6a3b      	ldr	r3, [r7, #32]
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8008276:	e020      	b.n	80082ba <xTaskGenericNotify+0xea>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008278:	7ffb      	ldrb	r3, [r7, #31]
 800827a:	2b02      	cmp	r3, #2
 800827c:	d004      	beq.n	8008288 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800827e:	6a3b      	ldr	r3, [r7, #32]
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008286:	e018      	b.n	80082ba <xTaskGenericNotify+0xea>
						xReturn = pdFAIL;
 8008288:	2300      	movs	r3, #0
 800828a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800828c:	e015      	b.n	80082ba <xTaskGenericNotify+0xea>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800828e:	6a3b      	ldr	r3, [r7, #32]
 8008290:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008298:	d00e      	beq.n	80082b8 <xTaskGenericNotify+0xe8>
	__asm volatile
 800829a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829e:	b672      	cpsid	i
 80082a0:	f383 8811 	msr	BASEPRI, r3
 80082a4:	f3bf 8f6f 	isb	sy
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	b662      	cpsie	i
 80082ae:	617b      	str	r3, [r7, #20]
}
 80082b0:	bf00      	nop
 80082b2:	e7fe      	b.n	80082b2 <xTaskGenericNotify+0xe2>
					break;
 80082b4:	bf00      	nop
 80082b6:	e000      	b.n	80082ba <xTaskGenericNotify+0xea>

					break;
 80082b8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80082ba:	7ffb      	ldrb	r3, [r7, #31]
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d13c      	bne.n	800833a <xTaskGenericNotify+0x16a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082c0:	6a3b      	ldr	r3, [r7, #32]
 80082c2:	3304      	adds	r3, #4
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fd ffa7 	bl	8006218 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80082ca:	6a3b      	ldr	r3, [r7, #32]
 80082cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ce:	4b1e      	ldr	r3, [pc, #120]	; (8008348 <xTaskGenericNotify+0x178>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d903      	bls.n	80082de <xTaskGenericNotify+0x10e>
 80082d6:	6a3b      	ldr	r3, [r7, #32]
 80082d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082da:	4a1b      	ldr	r2, [pc, #108]	; (8008348 <xTaskGenericNotify+0x178>)
 80082dc:	6013      	str	r3, [r2, #0]
 80082de:	6a3b      	ldr	r3, [r7, #32]
 80082e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e2:	4613      	mov	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	4413      	add	r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	4a18      	ldr	r2, [pc, #96]	; (800834c <xTaskGenericNotify+0x17c>)
 80082ec:	441a      	add	r2, r3
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	3304      	adds	r3, #4
 80082f2:	4619      	mov	r1, r3
 80082f4:	4610      	mov	r0, r2
 80082f6:	f7fd ff32 	bl	800615e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00c      	beq.n	800831c <xTaskGenericNotify+0x14c>
	__asm volatile
 8008302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008306:	b672      	cpsid	i
 8008308:	f383 8811 	msr	BASEPRI, r3
 800830c:	f3bf 8f6f 	isb	sy
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	b662      	cpsie	i
 8008316:	613b      	str	r3, [r7, #16]
}
 8008318:	bf00      	nop
 800831a:	e7fe      	b.n	800831a <xTaskGenericNotify+0x14a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800831c:	6a3b      	ldr	r3, [r7, #32]
 800831e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008320:	4b0b      	ldr	r3, [pc, #44]	; (8008350 <xTaskGenericNotify+0x180>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008326:	429a      	cmp	r2, r3
 8008328:	d907      	bls.n	800833a <xTaskGenericNotify+0x16a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800832a:	4b0a      	ldr	r3, [pc, #40]	; (8008354 <xTaskGenericNotify+0x184>)
 800832c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008330:	601a      	str	r2, [r3, #0]
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800833a:	f000 fd5b 	bl	8008df4 <vPortExitCritical>

		return xReturn;
 800833e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008340:	4618      	mov	r0, r3
 8008342:	3728      	adds	r7, #40	; 0x28
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	20000f30 	.word	0x20000f30
 800834c:	20000a58 	.word	0x20000a58
 8008350:	20000a54 	.word	0x20000a54
 8008354:	e000ed04 	.word	0xe000ed04

08008358 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008362:	4b21      	ldr	r3, [pc, #132]	; (80083e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008368:	4b20      	ldr	r3, [pc, #128]	; (80083ec <prvAddCurrentTaskToDelayedList+0x94>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3304      	adds	r3, #4
 800836e:	4618      	mov	r0, r3
 8008370:	f7fd ff52 	bl	8006218 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800837a:	d10a      	bne.n	8008392 <prvAddCurrentTaskToDelayedList+0x3a>
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d007      	beq.n	8008392 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008382:	4b1a      	ldr	r3, [pc, #104]	; (80083ec <prvAddCurrentTaskToDelayedList+0x94>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3304      	adds	r3, #4
 8008388:	4619      	mov	r1, r3
 800838a:	4819      	ldr	r0, [pc, #100]	; (80083f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800838c:	f7fd fee7 	bl	800615e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008390:	e026      	b.n	80083e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	4413      	add	r3, r2
 8008398:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800839a:	4b14      	ldr	r3, [pc, #80]	; (80083ec <prvAddCurrentTaskToDelayedList+0x94>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d209      	bcs.n	80083be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083aa:	4b12      	ldr	r3, [pc, #72]	; (80083f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	4b0f      	ldr	r3, [pc, #60]	; (80083ec <prvAddCurrentTaskToDelayedList+0x94>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	3304      	adds	r3, #4
 80083b4:	4619      	mov	r1, r3
 80083b6:	4610      	mov	r0, r2
 80083b8:	f7fd fef5 	bl	80061a6 <vListInsert>
}
 80083bc:	e010      	b.n	80083e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083be:	4b0e      	ldr	r3, [pc, #56]	; (80083f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	4b0a      	ldr	r3, [pc, #40]	; (80083ec <prvAddCurrentTaskToDelayedList+0x94>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	3304      	adds	r3, #4
 80083c8:	4619      	mov	r1, r3
 80083ca:	4610      	mov	r0, r2
 80083cc:	f7fd feeb 	bl	80061a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80083d0:	4b0a      	ldr	r3, [pc, #40]	; (80083fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d202      	bcs.n	80083e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80083da:	4a08      	ldr	r2, [pc, #32]	; (80083fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	6013      	str	r3, [r2, #0]
}
 80083e0:	bf00      	nop
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	20000f2c 	.word	0x20000f2c
 80083ec:	20000a54 	.word	0x20000a54
 80083f0:	20000f14 	.word	0x20000f14
 80083f4:	20000ee4 	.word	0x20000ee4
 80083f8:	20000ee0 	.word	0x20000ee0
 80083fc:	20000f48 	.word	0x20000f48

08008400 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b08a      	sub	sp, #40	; 0x28
 8008404:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008406:	2300      	movs	r3, #0
 8008408:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800840a:	f000 fb73 	bl	8008af4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800840e:	4b1d      	ldr	r3, [pc, #116]	; (8008484 <xTimerCreateTimerTask+0x84>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d021      	beq.n	800845a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008416:	2300      	movs	r3, #0
 8008418:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800841a:	2300      	movs	r3, #0
 800841c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800841e:	1d3a      	adds	r2, r7, #4
 8008420:	f107 0108 	add.w	r1, r7, #8
 8008424:	f107 030c 	add.w	r3, r7, #12
 8008428:	4618      	mov	r0, r3
 800842a:	f7fd fe51 	bl	80060d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800842e:	6879      	ldr	r1, [r7, #4]
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	9202      	str	r2, [sp, #8]
 8008436:	9301      	str	r3, [sp, #4]
 8008438:	2302      	movs	r3, #2
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	2300      	movs	r3, #0
 800843e:	460a      	mov	r2, r1
 8008440:	4911      	ldr	r1, [pc, #68]	; (8008488 <xTimerCreateTimerTask+0x88>)
 8008442:	4812      	ldr	r0, [pc, #72]	; (800848c <xTimerCreateTimerTask+0x8c>)
 8008444:	f7fe fe6c 	bl	8007120 <xTaskCreateStatic>
 8008448:	4603      	mov	r3, r0
 800844a:	4a11      	ldr	r2, [pc, #68]	; (8008490 <xTimerCreateTimerTask+0x90>)
 800844c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800844e:	4b10      	ldr	r3, [pc, #64]	; (8008490 <xTimerCreateTimerTask+0x90>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d001      	beq.n	800845a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008456:	2301      	movs	r3, #1
 8008458:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d10c      	bne.n	800847a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8008460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008464:	b672      	cpsid	i
 8008466:	f383 8811 	msr	BASEPRI, r3
 800846a:	f3bf 8f6f 	isb	sy
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	b662      	cpsie	i
 8008474:	613b      	str	r3, [r7, #16]
}
 8008476:	bf00      	nop
 8008478:	e7fe      	b.n	8008478 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800847a:	697b      	ldr	r3, [r7, #20]
}
 800847c:	4618      	mov	r0, r3
 800847e:	3718      	adds	r7, #24
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	20000f84 	.word	0x20000f84
 8008488:	0800a4c8 	.word	0x0800a4c8
 800848c:	0800868d 	.word	0x0800868d
 8008490:	20000f88 	.word	0x20000f88

08008494 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008494:	b580      	push	{r7, lr}
 8008496:	b088      	sub	sp, #32
 8008498:	af02      	add	r7, sp, #8
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
 80084a0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80084a2:	202c      	movs	r0, #44	; 0x2c
 80084a4:	f000 fd9e 	bl	8008fe4 <pvPortMalloc>
 80084a8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00d      	beq.n	80084cc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	9301      	str	r3, [sp, #4]
 80084bc:	6a3b      	ldr	r3, [r7, #32]
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	68b9      	ldr	r1, [r7, #8]
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f000 f805 	bl	80084d6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80084cc:	697b      	ldr	r3, [r7, #20]
	}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3718      	adds	r7, #24
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b086      	sub	sp, #24
 80084da:	af00      	add	r7, sp, #0
 80084dc:	60f8      	str	r0, [r7, #12]
 80084de:	60b9      	str	r1, [r7, #8]
 80084e0:	607a      	str	r2, [r7, #4]
 80084e2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d10c      	bne.n	8008504 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 80084ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ee:	b672      	cpsid	i
 80084f0:	f383 8811 	msr	BASEPRI, r3
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	b662      	cpsie	i
 80084fe:	617b      	str	r3, [r7, #20]
}
 8008500:	bf00      	nop
 8008502:	e7fe      	b.n	8008502 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	2b00      	cmp	r3, #0
 8008508:	d01e      	beq.n	8008548 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800850a:	f000 faf3 	bl	8008af4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800850e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800851a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851c:	683a      	ldr	r2, [r7, #0]
 800851e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008522:	6a3a      	ldr	r2, [r7, #32]
 8008524:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	3304      	adds	r3, #4
 800852a:	4618      	mov	r0, r3
 800852c:	f7fd fe0a 	bl	8006144 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d008      	beq.n	8008548 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008538:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800853c:	f043 0304 	orr.w	r3, r3, #4
 8008540:	b2da      	uxtb	r2, r3
 8008542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008544:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008548:	bf00      	nop
 800854a:	3718      	adds	r7, #24
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b08a      	sub	sp, #40	; 0x28
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
 800855c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800855e:	2300      	movs	r3, #0
 8008560:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d10c      	bne.n	8008582 <xTimerGenericCommand+0x32>
	__asm volatile
 8008568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856c:	b672      	cpsid	i
 800856e:	f383 8811 	msr	BASEPRI, r3
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	b662      	cpsie	i
 800857c:	623b      	str	r3, [r7, #32]
}
 800857e:	bf00      	nop
 8008580:	e7fe      	b.n	8008580 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008582:	4b1a      	ldr	r3, [pc, #104]	; (80085ec <xTimerGenericCommand+0x9c>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d02a      	beq.n	80085e0 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	2b05      	cmp	r3, #5
 800859a:	dc18      	bgt.n	80085ce <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800859c:	f7ff fc3a 	bl	8007e14 <xTaskGetSchedulerState>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d109      	bne.n	80085ba <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80085a6:	4b11      	ldr	r3, [pc, #68]	; (80085ec <xTimerGenericCommand+0x9c>)
 80085a8:	6818      	ldr	r0, [r3, #0]
 80085aa:	f107 0110 	add.w	r1, r7, #16
 80085ae:	2300      	movs	r3, #0
 80085b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085b2:	f7fe f81f 	bl	80065f4 <xQueueGenericSend>
 80085b6:	6278      	str	r0, [r7, #36]	; 0x24
 80085b8:	e012      	b.n	80085e0 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80085ba:	4b0c      	ldr	r3, [pc, #48]	; (80085ec <xTimerGenericCommand+0x9c>)
 80085bc:	6818      	ldr	r0, [r3, #0]
 80085be:	f107 0110 	add.w	r1, r7, #16
 80085c2:	2300      	movs	r3, #0
 80085c4:	2200      	movs	r2, #0
 80085c6:	f7fe f815 	bl	80065f4 <xQueueGenericSend>
 80085ca:	6278      	str	r0, [r7, #36]	; 0x24
 80085cc:	e008      	b.n	80085e0 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80085ce:	4b07      	ldr	r3, [pc, #28]	; (80085ec <xTimerGenericCommand+0x9c>)
 80085d0:	6818      	ldr	r0, [r3, #0]
 80085d2:	f107 0110 	add.w	r1, r7, #16
 80085d6:	2300      	movs	r3, #0
 80085d8:	683a      	ldr	r2, [r7, #0]
 80085da:	f7fe f911 	bl	8006800 <xQueueGenericSendFromISR>
 80085de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80085e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3728      	adds	r7, #40	; 0x28
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	20000f84 	.word	0x20000f84

080085f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b088      	sub	sp, #32
 80085f4:	af02      	add	r7, sp, #8
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085fa:	4b23      	ldr	r3, [pc, #140]	; (8008688 <prvProcessExpiredTimer+0x98>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	3304      	adds	r3, #4
 8008608:	4618      	mov	r0, r3
 800860a:	f7fd fe05 	bl	8006218 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008614:	f003 0304 	and.w	r3, r3, #4
 8008618:	2b00      	cmp	r3, #0
 800861a:	d024      	beq.n	8008666 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	699a      	ldr	r2, [r3, #24]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	18d1      	adds	r1, r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	683a      	ldr	r2, [r7, #0]
 8008628:	6978      	ldr	r0, [r7, #20]
 800862a:	f000 f8d3 	bl	80087d4 <prvInsertTimerInActiveList>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d021      	beq.n	8008678 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008634:	2300      	movs	r3, #0
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	2300      	movs	r3, #0
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	2100      	movs	r1, #0
 800863e:	6978      	ldr	r0, [r7, #20]
 8008640:	f7ff ff86 	bl	8008550 <xTimerGenericCommand>
 8008644:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d115      	bne.n	8008678 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800864c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008650:	b672      	cpsid	i
 8008652:	f383 8811 	msr	BASEPRI, r3
 8008656:	f3bf 8f6f 	isb	sy
 800865a:	f3bf 8f4f 	dsb	sy
 800865e:	b662      	cpsie	i
 8008660:	60fb      	str	r3, [r7, #12]
}
 8008662:	bf00      	nop
 8008664:	e7fe      	b.n	8008664 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800866c:	f023 0301 	bic.w	r3, r3, #1
 8008670:	b2da      	uxtb	r2, r3
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	6a1b      	ldr	r3, [r3, #32]
 800867c:	6978      	ldr	r0, [r7, #20]
 800867e:	4798      	blx	r3
}
 8008680:	bf00      	nop
 8008682:	3718      	adds	r7, #24
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	20000f7c 	.word	0x20000f7c

0800868c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008694:	f107 0308 	add.w	r3, r7, #8
 8008698:	4618      	mov	r0, r3
 800869a:	f000 f857 	bl	800874c <prvGetNextExpireTime>
 800869e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	4619      	mov	r1, r3
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f000 f803 	bl	80086b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80086aa:	f000 f8d5 	bl	8008858 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80086ae:	e7f1      	b.n	8008694 <prvTimerTask+0x8>

080086b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80086ba:	f7fe ff9b 	bl	80075f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086be:	f107 0308 	add.w	r3, r7, #8
 80086c2:	4618      	mov	r0, r3
 80086c4:	f000 f866 	bl	8008794 <prvSampleTimeNow>
 80086c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d130      	bne.n	8008732 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10a      	bne.n	80086ec <prvProcessTimerOrBlockTask+0x3c>
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d806      	bhi.n	80086ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80086de:	f7fe ff97 	bl	8007610 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80086e2:	68f9      	ldr	r1, [r7, #12]
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f7ff ff83 	bl	80085f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80086ea:	e024      	b.n	8008736 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d008      	beq.n	8008704 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80086f2:	4b13      	ldr	r3, [pc, #76]	; (8008740 <prvProcessTimerOrBlockTask+0x90>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d101      	bne.n	8008700 <prvProcessTimerOrBlockTask+0x50>
 80086fc:	2301      	movs	r3, #1
 80086fe:	e000      	b.n	8008702 <prvProcessTimerOrBlockTask+0x52>
 8008700:	2300      	movs	r3, #0
 8008702:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008704:	4b0f      	ldr	r3, [pc, #60]	; (8008744 <prvProcessTimerOrBlockTask+0x94>)
 8008706:	6818      	ldr	r0, [r3, #0]
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	4619      	mov	r1, r3
 8008712:	f7fe fcd1 	bl	80070b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008716:	f7fe ff7b 	bl	8007610 <xTaskResumeAll>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10a      	bne.n	8008736 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008720:	4b09      	ldr	r3, [pc, #36]	; (8008748 <prvProcessTimerOrBlockTask+0x98>)
 8008722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008726:	601a      	str	r2, [r3, #0]
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	f3bf 8f6f 	isb	sy
}
 8008730:	e001      	b.n	8008736 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008732:	f7fe ff6d 	bl	8007610 <xTaskResumeAll>
}
 8008736:	bf00      	nop
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	20000f80 	.word	0x20000f80
 8008744:	20000f84 	.word	0x20000f84
 8008748:	e000ed04 	.word	0xe000ed04

0800874c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008754:	4b0e      	ldr	r3, [pc, #56]	; (8008790 <prvGetNextExpireTime+0x44>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d101      	bne.n	8008762 <prvGetNextExpireTime+0x16>
 800875e:	2201      	movs	r2, #1
 8008760:	e000      	b.n	8008764 <prvGetNextExpireTime+0x18>
 8008762:	2200      	movs	r2, #0
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d105      	bne.n	800877c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008770:	4b07      	ldr	r3, [pc, #28]	; (8008790 <prvGetNextExpireTime+0x44>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	60fb      	str	r3, [r7, #12]
 800877a:	e001      	b.n	8008780 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800877c:	2300      	movs	r3, #0
 800877e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008780:	68fb      	ldr	r3, [r7, #12]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3714      	adds	r7, #20
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	20000f7c 	.word	0x20000f7c

08008794 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800879c:	f7fe ffd8 	bl	8007750 <xTaskGetTickCount>
 80087a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80087a2:	4b0b      	ldr	r3, [pc, #44]	; (80087d0 <prvSampleTimeNow+0x3c>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d205      	bcs.n	80087b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80087ac:	f000 f93c 	bl	8008a28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	601a      	str	r2, [r3, #0]
 80087b6:	e002      	b.n	80087be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80087be:	4a04      	ldr	r2, [pc, #16]	; (80087d0 <prvSampleTimeNow+0x3c>)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80087c4:	68fb      	ldr	r3, [r7, #12]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	20000f8c 	.word	0x20000f8c

080087d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b086      	sub	sp, #24
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
 80087e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80087e2:	2300      	movs	r3, #0
 80087e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d812      	bhi.n	8008820 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	1ad2      	subs	r2, r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	699b      	ldr	r3, [r3, #24]
 8008804:	429a      	cmp	r2, r3
 8008806:	d302      	bcc.n	800880e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008808:	2301      	movs	r3, #1
 800880a:	617b      	str	r3, [r7, #20]
 800880c:	e01b      	b.n	8008846 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800880e:	4b10      	ldr	r3, [pc, #64]	; (8008850 <prvInsertTimerInActiveList+0x7c>)
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	3304      	adds	r3, #4
 8008816:	4619      	mov	r1, r3
 8008818:	4610      	mov	r0, r2
 800881a:	f7fd fcc4 	bl	80061a6 <vListInsert>
 800881e:	e012      	b.n	8008846 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	429a      	cmp	r2, r3
 8008826:	d206      	bcs.n	8008836 <prvInsertTimerInActiveList+0x62>
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	429a      	cmp	r2, r3
 800882e:	d302      	bcc.n	8008836 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008830:	2301      	movs	r3, #1
 8008832:	617b      	str	r3, [r7, #20]
 8008834:	e007      	b.n	8008846 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008836:	4b07      	ldr	r3, [pc, #28]	; (8008854 <prvInsertTimerInActiveList+0x80>)
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3304      	adds	r3, #4
 800883e:	4619      	mov	r1, r3
 8008840:	4610      	mov	r0, r2
 8008842:	f7fd fcb0 	bl	80061a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008846:	697b      	ldr	r3, [r7, #20]
}
 8008848:	4618      	mov	r0, r3
 800884a:	3718      	adds	r7, #24
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	20000f80 	.word	0x20000f80
 8008854:	20000f7c 	.word	0x20000f7c

08008858 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b08e      	sub	sp, #56	; 0x38
 800885c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800885e:	e0d0      	b.n	8008a02 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	da1a      	bge.n	800889c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008866:	1d3b      	adds	r3, r7, #4
 8008868:	3304      	adds	r3, #4
 800886a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800886c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886e:	2b00      	cmp	r3, #0
 8008870:	d10c      	bne.n	800888c <prvProcessReceivedCommands+0x34>
	__asm volatile
 8008872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008876:	b672      	cpsid	i
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	b662      	cpsie	i
 8008886:	61fb      	str	r3, [r7, #28]
}
 8008888:	bf00      	nop
 800888a:	e7fe      	b.n	800888a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800888c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008892:	6850      	ldr	r0, [r2, #4]
 8008894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008896:	6892      	ldr	r2, [r2, #8]
 8008898:	4611      	mov	r1, r2
 800889a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f2c0 80ae 	blt.w	8008a00 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80088a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088aa:	695b      	ldr	r3, [r3, #20]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d004      	beq.n	80088ba <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b2:	3304      	adds	r3, #4
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fd fcaf 	bl	8006218 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80088ba:	463b      	mov	r3, r7
 80088bc:	4618      	mov	r0, r3
 80088be:	f7ff ff69 	bl	8008794 <prvSampleTimeNow>
 80088c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2b09      	cmp	r3, #9
 80088c8:	f200 809b 	bhi.w	8008a02 <prvProcessReceivedCommands+0x1aa>
 80088cc:	a201      	add	r2, pc, #4	; (adr r2, 80088d4 <prvProcessReceivedCommands+0x7c>)
 80088ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d2:	bf00      	nop
 80088d4:	080088fd 	.word	0x080088fd
 80088d8:	080088fd 	.word	0x080088fd
 80088dc:	080088fd 	.word	0x080088fd
 80088e0:	08008975 	.word	0x08008975
 80088e4:	08008989 	.word	0x08008989
 80088e8:	080089d7 	.word	0x080089d7
 80088ec:	080088fd 	.word	0x080088fd
 80088f0:	080088fd 	.word	0x080088fd
 80088f4:	08008975 	.word	0x08008975
 80088f8:	08008989 	.word	0x08008989
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80088fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008902:	f043 0301 	orr.w	r3, r3, #1
 8008906:	b2da      	uxtb	r2, r3
 8008908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800890e:	68ba      	ldr	r2, [r7, #8]
 8008910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008912:	699b      	ldr	r3, [r3, #24]
 8008914:	18d1      	adds	r1, r2, r3
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800891a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800891c:	f7ff ff5a 	bl	80087d4 <prvInsertTimerInActiveList>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d06d      	beq.n	8008a02 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008928:	6a1b      	ldr	r3, [r3, #32]
 800892a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800892c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800892e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008930:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008934:	f003 0304 	and.w	r3, r3, #4
 8008938:	2b00      	cmp	r3, #0
 800893a:	d062      	beq.n	8008a02 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	441a      	add	r2, r3
 8008944:	2300      	movs	r3, #0
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	2300      	movs	r3, #0
 800894a:	2100      	movs	r1, #0
 800894c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800894e:	f7ff fdff 	bl	8008550 <xTimerGenericCommand>
 8008952:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d153      	bne.n	8008a02 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800895a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895e:	b672      	cpsid	i
 8008960:	f383 8811 	msr	BASEPRI, r3
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	b662      	cpsie	i
 800896e:	61bb      	str	r3, [r7, #24]
}
 8008970:	bf00      	nop
 8008972:	e7fe      	b.n	8008972 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008976:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800897a:	f023 0301 	bic.w	r3, r3, #1
 800897e:	b2da      	uxtb	r2, r3
 8008980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008982:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008986:	e03c      	b.n	8008a02 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800898e:	f043 0301 	orr.w	r3, r3, #1
 8008992:	b2da      	uxtb	r2, r3
 8008994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008996:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80089a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d10c      	bne.n	80089c2 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80089a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ac:	b672      	cpsid	i
 80089ae:	f383 8811 	msr	BASEPRI, r3
 80089b2:	f3bf 8f6f 	isb	sy
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	b662      	cpsie	i
 80089bc:	617b      	str	r3, [r7, #20]
}
 80089be:	bf00      	nop
 80089c0:	e7fe      	b.n	80089c0 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80089c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c4:	699a      	ldr	r2, [r3, #24]
 80089c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c8:	18d1      	adds	r1, r2, r3
 80089ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089d0:	f7ff ff00 	bl	80087d4 <prvInsertTimerInActiveList>
					break;
 80089d4:	e015      	b.n	8008a02 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80089d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089dc:	f003 0302 	and.w	r3, r3, #2
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d103      	bne.n	80089ec <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80089e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089e6:	f000 fbc7 	bl	8009178 <vPortFree>
 80089ea:	e00a      	b.n	8008a02 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089f2:	f023 0301 	bic.w	r3, r3, #1
 80089f6:	b2da      	uxtb	r2, r3
 80089f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80089fe:	e000      	b.n	8008a02 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008a00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a02:	4b08      	ldr	r3, [pc, #32]	; (8008a24 <prvProcessReceivedCommands+0x1cc>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	1d39      	adds	r1, r7, #4
 8008a08:	2200      	movs	r2, #0
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fd ff98 	bl	8006940 <xQueueReceive>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f47f af24 	bne.w	8008860 <prvProcessReceivedCommands+0x8>
	}
}
 8008a18:	bf00      	nop
 8008a1a:	bf00      	nop
 8008a1c:	3730      	adds	r7, #48	; 0x30
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	20000f84 	.word	0x20000f84

08008a28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b088      	sub	sp, #32
 8008a2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a2e:	e04a      	b.n	8008ac6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a30:	4b2e      	ldr	r3, [pc, #184]	; (8008aec <prvSwitchTimerLists+0xc4>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a3a:	4b2c      	ldr	r3, [pc, #176]	; (8008aec <prvSwitchTimerLists+0xc4>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	3304      	adds	r3, #4
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7fd fbe5 	bl	8006218 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6a1b      	ldr	r3, [r3, #32]
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a5c:	f003 0304 	and.w	r3, r3, #4
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d030      	beq.n	8008ac6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	699b      	ldr	r3, [r3, #24]
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d90e      	bls.n	8008a94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	68ba      	ldr	r2, [r7, #8]
 8008a7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a82:	4b1a      	ldr	r3, [pc, #104]	; (8008aec <prvSwitchTimerLists+0xc4>)
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	3304      	adds	r3, #4
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	4610      	mov	r0, r2
 8008a8e:	f7fd fb8a 	bl	80061a6 <vListInsert>
 8008a92:	e018      	b.n	8008ac6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a94:	2300      	movs	r3, #0
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	2300      	movs	r3, #0
 8008a9a:	693a      	ldr	r2, [r7, #16]
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f7ff fd56 	bl	8008550 <xTimerGenericCommand>
 8008aa4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d10c      	bne.n	8008ac6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8008aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab0:	b672      	cpsid	i
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	b662      	cpsie	i
 8008ac0:	603b      	str	r3, [r7, #0]
}
 8008ac2:	bf00      	nop
 8008ac4:	e7fe      	b.n	8008ac4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ac6:	4b09      	ldr	r3, [pc, #36]	; (8008aec <prvSwitchTimerLists+0xc4>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d1af      	bne.n	8008a30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008ad0:	4b06      	ldr	r3, [pc, #24]	; (8008aec <prvSwitchTimerLists+0xc4>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008ad6:	4b06      	ldr	r3, [pc, #24]	; (8008af0 <prvSwitchTimerLists+0xc8>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a04      	ldr	r2, [pc, #16]	; (8008aec <prvSwitchTimerLists+0xc4>)
 8008adc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008ade:	4a04      	ldr	r2, [pc, #16]	; (8008af0 <prvSwitchTimerLists+0xc8>)
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	6013      	str	r3, [r2, #0]
}
 8008ae4:	bf00      	nop
 8008ae6:	3718      	adds	r7, #24
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	20000f7c 	.word	0x20000f7c
 8008af0:	20000f80 	.word	0x20000f80

08008af4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008afa:	f000 f947 	bl	8008d8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008afe:	4b15      	ldr	r3, [pc, #84]	; (8008b54 <prvCheckForValidListAndQueue+0x60>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d120      	bne.n	8008b48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008b06:	4814      	ldr	r0, [pc, #80]	; (8008b58 <prvCheckForValidListAndQueue+0x64>)
 8008b08:	f7fd fafc 	bl	8006104 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008b0c:	4813      	ldr	r0, [pc, #76]	; (8008b5c <prvCheckForValidListAndQueue+0x68>)
 8008b0e:	f7fd faf9 	bl	8006104 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008b12:	4b13      	ldr	r3, [pc, #76]	; (8008b60 <prvCheckForValidListAndQueue+0x6c>)
 8008b14:	4a10      	ldr	r2, [pc, #64]	; (8008b58 <prvCheckForValidListAndQueue+0x64>)
 8008b16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008b18:	4b12      	ldr	r3, [pc, #72]	; (8008b64 <prvCheckForValidListAndQueue+0x70>)
 8008b1a:	4a10      	ldr	r2, [pc, #64]	; (8008b5c <prvCheckForValidListAndQueue+0x68>)
 8008b1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008b1e:	2300      	movs	r3, #0
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	4b11      	ldr	r3, [pc, #68]	; (8008b68 <prvCheckForValidListAndQueue+0x74>)
 8008b24:	4a11      	ldr	r2, [pc, #68]	; (8008b6c <prvCheckForValidListAndQueue+0x78>)
 8008b26:	2110      	movs	r1, #16
 8008b28:	200a      	movs	r0, #10
 8008b2a:	f7fd fc09 	bl	8006340 <xQueueGenericCreateStatic>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	4a08      	ldr	r2, [pc, #32]	; (8008b54 <prvCheckForValidListAndQueue+0x60>)
 8008b32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008b34:	4b07      	ldr	r3, [pc, #28]	; (8008b54 <prvCheckForValidListAndQueue+0x60>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d005      	beq.n	8008b48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b3c:	4b05      	ldr	r3, [pc, #20]	; (8008b54 <prvCheckForValidListAndQueue+0x60>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	490b      	ldr	r1, [pc, #44]	; (8008b70 <prvCheckForValidListAndQueue+0x7c>)
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fe fa64 	bl	8007010 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b48:	f000 f954 	bl	8008df4 <vPortExitCritical>
}
 8008b4c:	bf00      	nop
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	20000f84 	.word	0x20000f84
 8008b58:	20000f54 	.word	0x20000f54
 8008b5c:	20000f68 	.word	0x20000f68
 8008b60:	20000f7c 	.word	0x20000f7c
 8008b64:	20000f80 	.word	0x20000f80
 8008b68:	20001030 	.word	0x20001030
 8008b6c:	20000f90 	.word	0x20000f90
 8008b70:	0800a4d0 	.word	0x0800a4d0

08008b74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b74:	b480      	push	{r7}
 8008b76:	b085      	sub	sp, #20
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	3b04      	subs	r3, #4
 8008b84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008b8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	3b04      	subs	r3, #4
 8008b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	f023 0201 	bic.w	r2, r3, #1
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	3b04      	subs	r3, #4
 8008ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ba4:	4a0c      	ldr	r2, [pc, #48]	; (8008bd8 <pxPortInitialiseStack+0x64>)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	3b14      	subs	r3, #20
 8008bae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	3b04      	subs	r3, #4
 8008bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f06f 0202 	mvn.w	r2, #2
 8008bc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	3b20      	subs	r3, #32
 8008bc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008bca:	68fb      	ldr	r3, [r7, #12]
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3714      	adds	r7, #20
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr
 8008bd8:	08008bdd 	.word	0x08008bdd

08008bdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008be2:	2300      	movs	r3, #0
 8008be4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008be6:	4b14      	ldr	r3, [pc, #80]	; (8008c38 <prvTaskExitError+0x5c>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bee:	d00c      	beq.n	8008c0a <prvTaskExitError+0x2e>
	__asm volatile
 8008bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf4:	b672      	cpsid	i
 8008bf6:	f383 8811 	msr	BASEPRI, r3
 8008bfa:	f3bf 8f6f 	isb	sy
 8008bfe:	f3bf 8f4f 	dsb	sy
 8008c02:	b662      	cpsie	i
 8008c04:	60fb      	str	r3, [r7, #12]
}
 8008c06:	bf00      	nop
 8008c08:	e7fe      	b.n	8008c08 <prvTaskExitError+0x2c>
	__asm volatile
 8008c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0e:	b672      	cpsid	i
 8008c10:	f383 8811 	msr	BASEPRI, r3
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	b662      	cpsie	i
 8008c1e:	60bb      	str	r3, [r7, #8]
}
 8008c20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c22:	bf00      	nop
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d0fc      	beq.n	8008c24 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c2a:	bf00      	nop
 8008c2c:	bf00      	nop
 8008c2e:	3714      	adds	r7, #20
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr
 8008c38:	2000000c 	.word	0x2000000c
 8008c3c:	00000000 	.word	0x00000000

08008c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c40:	4b07      	ldr	r3, [pc, #28]	; (8008c60 <pxCurrentTCBConst2>)
 8008c42:	6819      	ldr	r1, [r3, #0]
 8008c44:	6808      	ldr	r0, [r1, #0]
 8008c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c4a:	f380 8809 	msr	PSP, r0
 8008c4e:	f3bf 8f6f 	isb	sy
 8008c52:	f04f 0000 	mov.w	r0, #0
 8008c56:	f380 8811 	msr	BASEPRI, r0
 8008c5a:	4770      	bx	lr
 8008c5c:	f3af 8000 	nop.w

08008c60 <pxCurrentTCBConst2>:
 8008c60:	20000a54 	.word	0x20000a54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c64:	bf00      	nop
 8008c66:	bf00      	nop

08008c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008c68:	4808      	ldr	r0, [pc, #32]	; (8008c8c <prvPortStartFirstTask+0x24>)
 8008c6a:	6800      	ldr	r0, [r0, #0]
 8008c6c:	6800      	ldr	r0, [r0, #0]
 8008c6e:	f380 8808 	msr	MSP, r0
 8008c72:	f04f 0000 	mov.w	r0, #0
 8008c76:	f380 8814 	msr	CONTROL, r0
 8008c7a:	b662      	cpsie	i
 8008c7c:	b661      	cpsie	f
 8008c7e:	f3bf 8f4f 	dsb	sy
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	df00      	svc	0
 8008c88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c8a:	bf00      	nop
 8008c8c:	e000ed08 	.word	0xe000ed08

08008c90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c96:	4b37      	ldr	r3, [pc, #220]	; (8008d74 <xPortStartScheduler+0xe4>)
 8008c98:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	22ff      	movs	r2, #255	; 0xff
 8008ca6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008cb0:	78fb      	ldrb	r3, [r7, #3]
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008cb8:	b2da      	uxtb	r2, r3
 8008cba:	4b2f      	ldr	r3, [pc, #188]	; (8008d78 <xPortStartScheduler+0xe8>)
 8008cbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008cbe:	4b2f      	ldr	r3, [pc, #188]	; (8008d7c <xPortStartScheduler+0xec>)
 8008cc0:	2207      	movs	r2, #7
 8008cc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cc4:	e009      	b.n	8008cda <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008cc6:	4b2d      	ldr	r3, [pc, #180]	; (8008d7c <xPortStartScheduler+0xec>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	4a2b      	ldr	r2, [pc, #172]	; (8008d7c <xPortStartScheduler+0xec>)
 8008cce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008cd0:	78fb      	ldrb	r3, [r7, #3]
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	005b      	lsls	r3, r3, #1
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cda:	78fb      	ldrb	r3, [r7, #3]
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ce2:	2b80      	cmp	r3, #128	; 0x80
 8008ce4:	d0ef      	beq.n	8008cc6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ce6:	4b25      	ldr	r3, [pc, #148]	; (8008d7c <xPortStartScheduler+0xec>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f1c3 0307 	rsb	r3, r3, #7
 8008cee:	2b04      	cmp	r3, #4
 8008cf0:	d00c      	beq.n	8008d0c <xPortStartScheduler+0x7c>
	__asm volatile
 8008cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf6:	b672      	cpsid	i
 8008cf8:	f383 8811 	msr	BASEPRI, r3
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	b662      	cpsie	i
 8008d06:	60bb      	str	r3, [r7, #8]
}
 8008d08:	bf00      	nop
 8008d0a:	e7fe      	b.n	8008d0a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d0c:	4b1b      	ldr	r3, [pc, #108]	; (8008d7c <xPortStartScheduler+0xec>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	021b      	lsls	r3, r3, #8
 8008d12:	4a1a      	ldr	r2, [pc, #104]	; (8008d7c <xPortStartScheduler+0xec>)
 8008d14:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d16:	4b19      	ldr	r3, [pc, #100]	; (8008d7c <xPortStartScheduler+0xec>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d1e:	4a17      	ldr	r2, [pc, #92]	; (8008d7c <xPortStartScheduler+0xec>)
 8008d20:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d2a:	4b15      	ldr	r3, [pc, #84]	; (8008d80 <xPortStartScheduler+0xf0>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a14      	ldr	r2, [pc, #80]	; (8008d80 <xPortStartScheduler+0xf0>)
 8008d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d34:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d36:	4b12      	ldr	r3, [pc, #72]	; (8008d80 <xPortStartScheduler+0xf0>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a11      	ldr	r2, [pc, #68]	; (8008d80 <xPortStartScheduler+0xf0>)
 8008d3c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008d40:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008d42:	f000 f8dd 	bl	8008f00 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d46:	4b0f      	ldr	r3, [pc, #60]	; (8008d84 <xPortStartScheduler+0xf4>)
 8008d48:	2200      	movs	r2, #0
 8008d4a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008d4c:	f000 f8fc 	bl	8008f48 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d50:	4b0d      	ldr	r3, [pc, #52]	; (8008d88 <xPortStartScheduler+0xf8>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a0c      	ldr	r2, [pc, #48]	; (8008d88 <xPortStartScheduler+0xf8>)
 8008d56:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008d5a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d5c:	f7ff ff84 	bl	8008c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d60:	f7fe fdd4 	bl	800790c <vTaskSwitchContext>
	prvTaskExitError();
 8008d64:	f7ff ff3a 	bl	8008bdc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	e000e400 	.word	0xe000e400
 8008d78:	20001080 	.word	0x20001080
 8008d7c:	20001084 	.word	0x20001084
 8008d80:	e000ed20 	.word	0xe000ed20
 8008d84:	2000000c 	.word	0x2000000c
 8008d88:	e000ef34 	.word	0xe000ef34

08008d8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
	__asm volatile
 8008d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d96:	b672      	cpsid	i
 8008d98:	f383 8811 	msr	BASEPRI, r3
 8008d9c:	f3bf 8f6f 	isb	sy
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	b662      	cpsie	i
 8008da6:	607b      	str	r3, [r7, #4]
}
 8008da8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008daa:	4b10      	ldr	r3, [pc, #64]	; (8008dec <vPortEnterCritical+0x60>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	3301      	adds	r3, #1
 8008db0:	4a0e      	ldr	r2, [pc, #56]	; (8008dec <vPortEnterCritical+0x60>)
 8008db2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008db4:	4b0d      	ldr	r3, [pc, #52]	; (8008dec <vPortEnterCritical+0x60>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d111      	bne.n	8008de0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008dbc:	4b0c      	ldr	r3, [pc, #48]	; (8008df0 <vPortEnterCritical+0x64>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00c      	beq.n	8008de0 <vPortEnterCritical+0x54>
	__asm volatile
 8008dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dca:	b672      	cpsid	i
 8008dcc:	f383 8811 	msr	BASEPRI, r3
 8008dd0:	f3bf 8f6f 	isb	sy
 8008dd4:	f3bf 8f4f 	dsb	sy
 8008dd8:	b662      	cpsie	i
 8008dda:	603b      	str	r3, [r7, #0]
}
 8008ddc:	bf00      	nop
 8008dde:	e7fe      	b.n	8008dde <vPortEnterCritical+0x52>
	}
}
 8008de0:	bf00      	nop
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr
 8008dec:	2000000c 	.word	0x2000000c
 8008df0:	e000ed04 	.word	0xe000ed04

08008df4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008dfa:	4b13      	ldr	r3, [pc, #76]	; (8008e48 <vPortExitCritical+0x54>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d10c      	bne.n	8008e1c <vPortExitCritical+0x28>
	__asm volatile
 8008e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e06:	b672      	cpsid	i
 8008e08:	f383 8811 	msr	BASEPRI, r3
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	b662      	cpsie	i
 8008e16:	607b      	str	r3, [r7, #4]
}
 8008e18:	bf00      	nop
 8008e1a:	e7fe      	b.n	8008e1a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008e1c:	4b0a      	ldr	r3, [pc, #40]	; (8008e48 <vPortExitCritical+0x54>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	3b01      	subs	r3, #1
 8008e22:	4a09      	ldr	r2, [pc, #36]	; (8008e48 <vPortExitCritical+0x54>)
 8008e24:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e26:	4b08      	ldr	r3, [pc, #32]	; (8008e48 <vPortExitCritical+0x54>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d105      	bne.n	8008e3a <vPortExitCritical+0x46>
 8008e2e:	2300      	movs	r3, #0
 8008e30:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	f383 8811 	msr	BASEPRI, r3
}
 8008e38:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008e3a:	bf00      	nop
 8008e3c:	370c      	adds	r7, #12
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	2000000c 	.word	0x2000000c
 8008e4c:	00000000 	.word	0x00000000

08008e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e50:	f3ef 8009 	mrs	r0, PSP
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	4b15      	ldr	r3, [pc, #84]	; (8008eb0 <pxCurrentTCBConst>)
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	f01e 0f10 	tst.w	lr, #16
 8008e60:	bf08      	it	eq
 8008e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e6a:	6010      	str	r0, [r2, #0]
 8008e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008e74:	b672      	cpsid	i
 8008e76:	f380 8811 	msr	BASEPRI, r0
 8008e7a:	f3bf 8f4f 	dsb	sy
 8008e7e:	f3bf 8f6f 	isb	sy
 8008e82:	b662      	cpsie	i
 8008e84:	f7fe fd42 	bl	800790c <vTaskSwitchContext>
 8008e88:	f04f 0000 	mov.w	r0, #0
 8008e8c:	f380 8811 	msr	BASEPRI, r0
 8008e90:	bc09      	pop	{r0, r3}
 8008e92:	6819      	ldr	r1, [r3, #0]
 8008e94:	6808      	ldr	r0, [r1, #0]
 8008e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e9a:	f01e 0f10 	tst.w	lr, #16
 8008e9e:	bf08      	it	eq
 8008ea0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ea4:	f380 8809 	msr	PSP, r0
 8008ea8:	f3bf 8f6f 	isb	sy
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop

08008eb0 <pxCurrentTCBConst>:
 8008eb0:	20000a54 	.word	0x20000a54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008eb4:	bf00      	nop
 8008eb6:	bf00      	nop

08008eb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8008ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec2:	b672      	cpsid	i
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	b662      	cpsie	i
 8008ed2:	607b      	str	r3, [r7, #4]
}
 8008ed4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ed6:	f7fe fc5d 	bl	8007794 <xTaskIncrementTick>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d003      	beq.n	8008ee8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008ee0:	4b06      	ldr	r3, [pc, #24]	; (8008efc <SysTick_Handler+0x44>)
 8008ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ee6:	601a      	str	r2, [r3, #0]
 8008ee8:	2300      	movs	r3, #0
 8008eea:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	f383 8811 	msr	BASEPRI, r3
}
 8008ef2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ef4:	bf00      	nop
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	e000ed04 	.word	0xe000ed04

08008f00 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008f00:	b480      	push	{r7}
 8008f02:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f04:	4b0b      	ldr	r3, [pc, #44]	; (8008f34 <vPortSetupTimerInterrupt+0x34>)
 8008f06:	2200      	movs	r2, #0
 8008f08:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f0a:	4b0b      	ldr	r3, [pc, #44]	; (8008f38 <vPortSetupTimerInterrupt+0x38>)
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f10:	4b0a      	ldr	r3, [pc, #40]	; (8008f3c <vPortSetupTimerInterrupt+0x3c>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a0a      	ldr	r2, [pc, #40]	; (8008f40 <vPortSetupTimerInterrupt+0x40>)
 8008f16:	fba2 2303 	umull	r2, r3, r2, r3
 8008f1a:	099b      	lsrs	r3, r3, #6
 8008f1c:	4a09      	ldr	r2, [pc, #36]	; (8008f44 <vPortSetupTimerInterrupt+0x44>)
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f22:	4b04      	ldr	r3, [pc, #16]	; (8008f34 <vPortSetupTimerInterrupt+0x34>)
 8008f24:	2207      	movs	r2, #7
 8008f26:	601a      	str	r2, [r3, #0]
}
 8008f28:	bf00      	nop
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	e000e010 	.word	0xe000e010
 8008f38:	e000e018 	.word	0xe000e018
 8008f3c:	20000000 	.word	0x20000000
 8008f40:	10624dd3 	.word	0x10624dd3
 8008f44:	e000e014 	.word	0xe000e014

08008f48 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008f48:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008f58 <vPortEnableVFP+0x10>
 8008f4c:	6801      	ldr	r1, [r0, #0]
 8008f4e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008f52:	6001      	str	r1, [r0, #0]
 8008f54:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008f56:	bf00      	nop
 8008f58:	e000ed88 	.word	0xe000ed88

08008f5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b085      	sub	sp, #20
 8008f60:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f62:	f3ef 8305 	mrs	r3, IPSR
 8008f66:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2b0f      	cmp	r3, #15
 8008f6c:	d916      	bls.n	8008f9c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f6e:	4a19      	ldr	r2, [pc, #100]	; (8008fd4 <vPortValidateInterruptPriority+0x78>)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	4413      	add	r3, r2
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f78:	4b17      	ldr	r3, [pc, #92]	; (8008fd8 <vPortValidateInterruptPriority+0x7c>)
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	7afa      	ldrb	r2, [r7, #11]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d20c      	bcs.n	8008f9c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f86:	b672      	cpsid	i
 8008f88:	f383 8811 	msr	BASEPRI, r3
 8008f8c:	f3bf 8f6f 	isb	sy
 8008f90:	f3bf 8f4f 	dsb	sy
 8008f94:	b662      	cpsie	i
 8008f96:	607b      	str	r3, [r7, #4]
}
 8008f98:	bf00      	nop
 8008f9a:	e7fe      	b.n	8008f9a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f9c:	4b0f      	ldr	r3, [pc, #60]	; (8008fdc <vPortValidateInterruptPriority+0x80>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008fa4:	4b0e      	ldr	r3, [pc, #56]	; (8008fe0 <vPortValidateInterruptPriority+0x84>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d90c      	bls.n	8008fc6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8008fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb0:	b672      	cpsid	i
 8008fb2:	f383 8811 	msr	BASEPRI, r3
 8008fb6:	f3bf 8f6f 	isb	sy
 8008fba:	f3bf 8f4f 	dsb	sy
 8008fbe:	b662      	cpsie	i
 8008fc0:	603b      	str	r3, [r7, #0]
}
 8008fc2:	bf00      	nop
 8008fc4:	e7fe      	b.n	8008fc4 <vPortValidateInterruptPriority+0x68>
	}
 8008fc6:	bf00      	nop
 8008fc8:	3714      	adds	r7, #20
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr
 8008fd2:	bf00      	nop
 8008fd4:	e000e3f0 	.word	0xe000e3f0
 8008fd8:	20001080 	.word	0x20001080
 8008fdc:	e000ed0c 	.word	0xe000ed0c
 8008fe0:	20001084 	.word	0x20001084

08008fe4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b08a      	sub	sp, #40	; 0x28
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008fec:	2300      	movs	r3, #0
 8008fee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ff0:	f7fe fb00 	bl	80075f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ff4:	4b5b      	ldr	r3, [pc, #364]	; (8009164 <pvPortMalloc+0x180>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d101      	bne.n	8009000 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ffc:	f000 f91a 	bl	8009234 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009000:	4b59      	ldr	r3, [pc, #356]	; (8009168 <pvPortMalloc+0x184>)
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4013      	ands	r3, r2
 8009008:	2b00      	cmp	r3, #0
 800900a:	f040 8092 	bne.w	8009132 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d01f      	beq.n	8009054 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009014:	2208      	movs	r2, #8
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	4413      	add	r3, r2
 800901a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f003 0307 	and.w	r3, r3, #7
 8009022:	2b00      	cmp	r3, #0
 8009024:	d016      	beq.n	8009054 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f023 0307 	bic.w	r3, r3, #7
 800902c:	3308      	adds	r3, #8
 800902e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f003 0307 	and.w	r3, r3, #7
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00c      	beq.n	8009054 <pvPortMalloc+0x70>
	__asm volatile
 800903a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903e:	b672      	cpsid	i
 8009040:	f383 8811 	msr	BASEPRI, r3
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	b662      	cpsie	i
 800904e:	617b      	str	r3, [r7, #20]
}
 8009050:	bf00      	nop
 8009052:	e7fe      	b.n	8009052 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d06b      	beq.n	8009132 <pvPortMalloc+0x14e>
 800905a:	4b44      	ldr	r3, [pc, #272]	; (800916c <pvPortMalloc+0x188>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	429a      	cmp	r2, r3
 8009062:	d866      	bhi.n	8009132 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009064:	4b42      	ldr	r3, [pc, #264]	; (8009170 <pvPortMalloc+0x18c>)
 8009066:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009068:	4b41      	ldr	r3, [pc, #260]	; (8009170 <pvPortMalloc+0x18c>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800906e:	e004      	b.n	800907a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009072:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800907a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	429a      	cmp	r2, r3
 8009082:	d903      	bls.n	800908c <pvPortMalloc+0xa8>
 8009084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1f1      	bne.n	8009070 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800908c:	4b35      	ldr	r3, [pc, #212]	; (8009164 <pvPortMalloc+0x180>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009092:	429a      	cmp	r2, r3
 8009094:	d04d      	beq.n	8009132 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009096:	6a3b      	ldr	r3, [r7, #32]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2208      	movs	r2, #8
 800909c:	4413      	add	r3, r2
 800909e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80090a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	6a3b      	ldr	r3, [r7, #32]
 80090a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80090a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090aa:	685a      	ldr	r2, [r3, #4]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	1ad2      	subs	r2, r2, r3
 80090b0:	2308      	movs	r3, #8
 80090b2:	005b      	lsls	r3, r3, #1
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d921      	bls.n	80090fc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80090b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4413      	add	r3, r2
 80090be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	f003 0307 	and.w	r3, r3, #7
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00c      	beq.n	80090e4 <pvPortMalloc+0x100>
	__asm volatile
 80090ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ce:	b672      	cpsid	i
 80090d0:	f383 8811 	msr	BASEPRI, r3
 80090d4:	f3bf 8f6f 	isb	sy
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	b662      	cpsie	i
 80090de:	613b      	str	r3, [r7, #16]
}
 80090e0:	bf00      	nop
 80090e2:	e7fe      	b.n	80090e2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80090e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e6:	685a      	ldr	r2, [r3, #4]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	1ad2      	subs	r2, r2, r3
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80090f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80090f6:	69b8      	ldr	r0, [r7, #24]
 80090f8:	f000 f8fe 	bl	80092f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80090fc:	4b1b      	ldr	r3, [pc, #108]	; (800916c <pvPortMalloc+0x188>)
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	1ad3      	subs	r3, r2, r3
 8009106:	4a19      	ldr	r2, [pc, #100]	; (800916c <pvPortMalloc+0x188>)
 8009108:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800910a:	4b18      	ldr	r3, [pc, #96]	; (800916c <pvPortMalloc+0x188>)
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	4b19      	ldr	r3, [pc, #100]	; (8009174 <pvPortMalloc+0x190>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	429a      	cmp	r2, r3
 8009114:	d203      	bcs.n	800911e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009116:	4b15      	ldr	r3, [pc, #84]	; (800916c <pvPortMalloc+0x188>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a16      	ldr	r2, [pc, #88]	; (8009174 <pvPortMalloc+0x190>)
 800911c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800911e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009120:	685a      	ldr	r2, [r3, #4]
 8009122:	4b11      	ldr	r3, [pc, #68]	; (8009168 <pvPortMalloc+0x184>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	431a      	orrs	r2, r3
 8009128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800912c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912e:	2200      	movs	r2, #0
 8009130:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009132:	f7fe fa6d 	bl	8007610 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	f003 0307 	and.w	r3, r3, #7
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00c      	beq.n	800915a <pvPortMalloc+0x176>
	__asm volatile
 8009140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009144:	b672      	cpsid	i
 8009146:	f383 8811 	msr	BASEPRI, r3
 800914a:	f3bf 8f6f 	isb	sy
 800914e:	f3bf 8f4f 	dsb	sy
 8009152:	b662      	cpsie	i
 8009154:	60fb      	str	r3, [r7, #12]
}
 8009156:	bf00      	nop
 8009158:	e7fe      	b.n	8009158 <pvPortMalloc+0x174>
	return pvReturn;
 800915a:	69fb      	ldr	r3, [r7, #28]
}
 800915c:	4618      	mov	r0, r3
 800915e:	3728      	adds	r7, #40	; 0x28
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	20004c90 	.word	0x20004c90
 8009168:	20004c9c 	.word	0x20004c9c
 800916c:	20004c94 	.word	0x20004c94
 8009170:	20004c88 	.word	0x20004c88
 8009174:	20004c98 	.word	0x20004c98

08009178 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b086      	sub	sp, #24
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d04c      	beq.n	8009224 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800918a:	2308      	movs	r3, #8
 800918c:	425b      	negs	r3, r3
 800918e:	697a      	ldr	r2, [r7, #20]
 8009190:	4413      	add	r3, r2
 8009192:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	685a      	ldr	r2, [r3, #4]
 800919c:	4b23      	ldr	r3, [pc, #140]	; (800922c <vPortFree+0xb4>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4013      	ands	r3, r2
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d10c      	bne.n	80091c0 <vPortFree+0x48>
	__asm volatile
 80091a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091aa:	b672      	cpsid	i
 80091ac:	f383 8811 	msr	BASEPRI, r3
 80091b0:	f3bf 8f6f 	isb	sy
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	b662      	cpsie	i
 80091ba:	60fb      	str	r3, [r7, #12]
}
 80091bc:	bf00      	nop
 80091be:	e7fe      	b.n	80091be <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00c      	beq.n	80091e2 <vPortFree+0x6a>
	__asm volatile
 80091c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091cc:	b672      	cpsid	i
 80091ce:	f383 8811 	msr	BASEPRI, r3
 80091d2:	f3bf 8f6f 	isb	sy
 80091d6:	f3bf 8f4f 	dsb	sy
 80091da:	b662      	cpsie	i
 80091dc:	60bb      	str	r3, [r7, #8]
}
 80091de:	bf00      	nop
 80091e0:	e7fe      	b.n	80091e0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	685a      	ldr	r2, [r3, #4]
 80091e6:	4b11      	ldr	r3, [pc, #68]	; (800922c <vPortFree+0xb4>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4013      	ands	r3, r2
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d019      	beq.n	8009224 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d115      	bne.n	8009224 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	685a      	ldr	r2, [r3, #4]
 80091fc:	4b0b      	ldr	r3, [pc, #44]	; (800922c <vPortFree+0xb4>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	43db      	mvns	r3, r3
 8009202:	401a      	ands	r2, r3
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009208:	f7fe f9f4 	bl	80075f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	685a      	ldr	r2, [r3, #4]
 8009210:	4b07      	ldr	r3, [pc, #28]	; (8009230 <vPortFree+0xb8>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4413      	add	r3, r2
 8009216:	4a06      	ldr	r2, [pc, #24]	; (8009230 <vPortFree+0xb8>)
 8009218:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800921a:	6938      	ldr	r0, [r7, #16]
 800921c:	f000 f86c 	bl	80092f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009220:	f7fe f9f6 	bl	8007610 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009224:	bf00      	nop
 8009226:	3718      	adds	r7, #24
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}
 800922c:	20004c9c 	.word	0x20004c9c
 8009230:	20004c94 	.word	0x20004c94

08009234 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800923a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800923e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009240:	4b27      	ldr	r3, [pc, #156]	; (80092e0 <prvHeapInit+0xac>)
 8009242:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f003 0307 	and.w	r3, r3, #7
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00c      	beq.n	8009268 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	3307      	adds	r3, #7
 8009252:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f023 0307 	bic.w	r3, r3, #7
 800925a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800925c:	68ba      	ldr	r2, [r7, #8]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	4a1f      	ldr	r2, [pc, #124]	; (80092e0 <prvHeapInit+0xac>)
 8009264:	4413      	add	r3, r2
 8009266:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800926c:	4a1d      	ldr	r2, [pc, #116]	; (80092e4 <prvHeapInit+0xb0>)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009272:	4b1c      	ldr	r3, [pc, #112]	; (80092e4 <prvHeapInit+0xb0>)
 8009274:	2200      	movs	r2, #0
 8009276:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	4413      	add	r3, r2
 800927e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009280:	2208      	movs	r2, #8
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	1a9b      	subs	r3, r3, r2
 8009286:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f023 0307 	bic.w	r3, r3, #7
 800928e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	4a15      	ldr	r2, [pc, #84]	; (80092e8 <prvHeapInit+0xb4>)
 8009294:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009296:	4b14      	ldr	r3, [pc, #80]	; (80092e8 <prvHeapInit+0xb4>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2200      	movs	r2, #0
 800929c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800929e:	4b12      	ldr	r3, [pc, #72]	; (80092e8 <prvHeapInit+0xb4>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2200      	movs	r2, #0
 80092a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	68fa      	ldr	r2, [r7, #12]
 80092ae:	1ad2      	subs	r2, r2, r3
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80092b4:	4b0c      	ldr	r3, [pc, #48]	; (80092e8 <prvHeapInit+0xb4>)
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	4a0a      	ldr	r2, [pc, #40]	; (80092ec <prvHeapInit+0xb8>)
 80092c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	4a09      	ldr	r2, [pc, #36]	; (80092f0 <prvHeapInit+0xbc>)
 80092ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80092cc:	4b09      	ldr	r3, [pc, #36]	; (80092f4 <prvHeapInit+0xc0>)
 80092ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80092d2:	601a      	str	r2, [r3, #0]
}
 80092d4:	bf00      	nop
 80092d6:	3714      	adds	r7, #20
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr
 80092e0:	20001088 	.word	0x20001088
 80092e4:	20004c88 	.word	0x20004c88
 80092e8:	20004c90 	.word	0x20004c90
 80092ec:	20004c98 	.word	0x20004c98
 80092f0:	20004c94 	.word	0x20004c94
 80092f4:	20004c9c 	.word	0x20004c9c

080092f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80092f8:	b480      	push	{r7}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009300:	4b28      	ldr	r3, [pc, #160]	; (80093a4 <prvInsertBlockIntoFreeList+0xac>)
 8009302:	60fb      	str	r3, [r7, #12]
 8009304:	e002      	b.n	800930c <prvInsertBlockIntoFreeList+0x14>
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	60fb      	str	r3, [r7, #12]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	429a      	cmp	r2, r3
 8009314:	d8f7      	bhi.n	8009306 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	4413      	add	r3, r2
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	429a      	cmp	r2, r3
 8009326:	d108      	bne.n	800933a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	685a      	ldr	r2, [r3, #4]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	441a      	add	r2, r3
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	441a      	add	r2, r3
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	429a      	cmp	r2, r3
 800934c:	d118      	bne.n	8009380 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	4b15      	ldr	r3, [pc, #84]	; (80093a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	429a      	cmp	r2, r3
 8009358:	d00d      	beq.n	8009376 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	685a      	ldr	r2, [r3, #4]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	441a      	add	r2, r3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	601a      	str	r2, [r3, #0]
 8009374:	e008      	b.n	8009388 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009376:	4b0c      	ldr	r3, [pc, #48]	; (80093a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	601a      	str	r2, [r3, #0]
 800937e:	e003      	b.n	8009388 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	429a      	cmp	r2, r3
 800938e:	d002      	beq.n	8009396 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009396:	bf00      	nop
 8009398:	3714      	adds	r7, #20
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	20004c88 	.word	0x20004c88
 80093a8:	20004c90 	.word	0x20004c90

080093ac <__errno>:
 80093ac:	4b01      	ldr	r3, [pc, #4]	; (80093b4 <__errno+0x8>)
 80093ae:	6818      	ldr	r0, [r3, #0]
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	20000010 	.word	0x20000010

080093b8 <std>:
 80093b8:	2300      	movs	r3, #0
 80093ba:	b510      	push	{r4, lr}
 80093bc:	4604      	mov	r4, r0
 80093be:	e9c0 3300 	strd	r3, r3, [r0]
 80093c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093c6:	6083      	str	r3, [r0, #8]
 80093c8:	8181      	strh	r1, [r0, #12]
 80093ca:	6643      	str	r3, [r0, #100]	; 0x64
 80093cc:	81c2      	strh	r2, [r0, #14]
 80093ce:	6183      	str	r3, [r0, #24]
 80093d0:	4619      	mov	r1, r3
 80093d2:	2208      	movs	r2, #8
 80093d4:	305c      	adds	r0, #92	; 0x5c
 80093d6:	f000 f91a 	bl	800960e <memset>
 80093da:	4b05      	ldr	r3, [pc, #20]	; (80093f0 <std+0x38>)
 80093dc:	6263      	str	r3, [r4, #36]	; 0x24
 80093de:	4b05      	ldr	r3, [pc, #20]	; (80093f4 <std+0x3c>)
 80093e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80093e2:	4b05      	ldr	r3, [pc, #20]	; (80093f8 <std+0x40>)
 80093e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80093e6:	4b05      	ldr	r3, [pc, #20]	; (80093fc <std+0x44>)
 80093e8:	6224      	str	r4, [r4, #32]
 80093ea:	6323      	str	r3, [r4, #48]	; 0x30
 80093ec:	bd10      	pop	{r4, pc}
 80093ee:	bf00      	nop
 80093f0:	0800986d 	.word	0x0800986d
 80093f4:	0800988f 	.word	0x0800988f
 80093f8:	080098c7 	.word	0x080098c7
 80093fc:	080098eb 	.word	0x080098eb

08009400 <_cleanup_r>:
 8009400:	4901      	ldr	r1, [pc, #4]	; (8009408 <_cleanup_r+0x8>)
 8009402:	f000 b8af 	b.w	8009564 <_fwalk_reent>
 8009406:	bf00      	nop
 8009408:	08009a45 	.word	0x08009a45

0800940c <__sfmoreglue>:
 800940c:	b570      	push	{r4, r5, r6, lr}
 800940e:	2268      	movs	r2, #104	; 0x68
 8009410:	1e4d      	subs	r5, r1, #1
 8009412:	4355      	muls	r5, r2
 8009414:	460e      	mov	r6, r1
 8009416:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800941a:	f000 f921 	bl	8009660 <_malloc_r>
 800941e:	4604      	mov	r4, r0
 8009420:	b140      	cbz	r0, 8009434 <__sfmoreglue+0x28>
 8009422:	2100      	movs	r1, #0
 8009424:	e9c0 1600 	strd	r1, r6, [r0]
 8009428:	300c      	adds	r0, #12
 800942a:	60a0      	str	r0, [r4, #8]
 800942c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009430:	f000 f8ed 	bl	800960e <memset>
 8009434:	4620      	mov	r0, r4
 8009436:	bd70      	pop	{r4, r5, r6, pc}

08009438 <__sfp_lock_acquire>:
 8009438:	4801      	ldr	r0, [pc, #4]	; (8009440 <__sfp_lock_acquire+0x8>)
 800943a:	f000 b8d8 	b.w	80095ee <__retarget_lock_acquire_recursive>
 800943e:	bf00      	nop
 8009440:	20004ca1 	.word	0x20004ca1

08009444 <__sfp_lock_release>:
 8009444:	4801      	ldr	r0, [pc, #4]	; (800944c <__sfp_lock_release+0x8>)
 8009446:	f000 b8d3 	b.w	80095f0 <__retarget_lock_release_recursive>
 800944a:	bf00      	nop
 800944c:	20004ca1 	.word	0x20004ca1

08009450 <__sinit_lock_acquire>:
 8009450:	4801      	ldr	r0, [pc, #4]	; (8009458 <__sinit_lock_acquire+0x8>)
 8009452:	f000 b8cc 	b.w	80095ee <__retarget_lock_acquire_recursive>
 8009456:	bf00      	nop
 8009458:	20004ca2 	.word	0x20004ca2

0800945c <__sinit_lock_release>:
 800945c:	4801      	ldr	r0, [pc, #4]	; (8009464 <__sinit_lock_release+0x8>)
 800945e:	f000 b8c7 	b.w	80095f0 <__retarget_lock_release_recursive>
 8009462:	bf00      	nop
 8009464:	20004ca2 	.word	0x20004ca2

08009468 <__sinit>:
 8009468:	b510      	push	{r4, lr}
 800946a:	4604      	mov	r4, r0
 800946c:	f7ff fff0 	bl	8009450 <__sinit_lock_acquire>
 8009470:	69a3      	ldr	r3, [r4, #24]
 8009472:	b11b      	cbz	r3, 800947c <__sinit+0x14>
 8009474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009478:	f7ff bff0 	b.w	800945c <__sinit_lock_release>
 800947c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009480:	6523      	str	r3, [r4, #80]	; 0x50
 8009482:	4b13      	ldr	r3, [pc, #76]	; (80094d0 <__sinit+0x68>)
 8009484:	4a13      	ldr	r2, [pc, #76]	; (80094d4 <__sinit+0x6c>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	62a2      	str	r2, [r4, #40]	; 0x28
 800948a:	42a3      	cmp	r3, r4
 800948c:	bf04      	itt	eq
 800948e:	2301      	moveq	r3, #1
 8009490:	61a3      	streq	r3, [r4, #24]
 8009492:	4620      	mov	r0, r4
 8009494:	f000 f820 	bl	80094d8 <__sfp>
 8009498:	6060      	str	r0, [r4, #4]
 800949a:	4620      	mov	r0, r4
 800949c:	f000 f81c 	bl	80094d8 <__sfp>
 80094a0:	60a0      	str	r0, [r4, #8]
 80094a2:	4620      	mov	r0, r4
 80094a4:	f000 f818 	bl	80094d8 <__sfp>
 80094a8:	2200      	movs	r2, #0
 80094aa:	60e0      	str	r0, [r4, #12]
 80094ac:	2104      	movs	r1, #4
 80094ae:	6860      	ldr	r0, [r4, #4]
 80094b0:	f7ff ff82 	bl	80093b8 <std>
 80094b4:	68a0      	ldr	r0, [r4, #8]
 80094b6:	2201      	movs	r2, #1
 80094b8:	2109      	movs	r1, #9
 80094ba:	f7ff ff7d 	bl	80093b8 <std>
 80094be:	68e0      	ldr	r0, [r4, #12]
 80094c0:	2202      	movs	r2, #2
 80094c2:	2112      	movs	r1, #18
 80094c4:	f7ff ff78 	bl	80093b8 <std>
 80094c8:	2301      	movs	r3, #1
 80094ca:	61a3      	str	r3, [r4, #24]
 80094cc:	e7d2      	b.n	8009474 <__sinit+0xc>
 80094ce:	bf00      	nop
 80094d0:	0800a604 	.word	0x0800a604
 80094d4:	08009401 	.word	0x08009401

080094d8 <__sfp>:
 80094d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094da:	4607      	mov	r7, r0
 80094dc:	f7ff ffac 	bl	8009438 <__sfp_lock_acquire>
 80094e0:	4b1e      	ldr	r3, [pc, #120]	; (800955c <__sfp+0x84>)
 80094e2:	681e      	ldr	r6, [r3, #0]
 80094e4:	69b3      	ldr	r3, [r6, #24]
 80094e6:	b913      	cbnz	r3, 80094ee <__sfp+0x16>
 80094e8:	4630      	mov	r0, r6
 80094ea:	f7ff ffbd 	bl	8009468 <__sinit>
 80094ee:	3648      	adds	r6, #72	; 0x48
 80094f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80094f4:	3b01      	subs	r3, #1
 80094f6:	d503      	bpl.n	8009500 <__sfp+0x28>
 80094f8:	6833      	ldr	r3, [r6, #0]
 80094fa:	b30b      	cbz	r3, 8009540 <__sfp+0x68>
 80094fc:	6836      	ldr	r6, [r6, #0]
 80094fe:	e7f7      	b.n	80094f0 <__sfp+0x18>
 8009500:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009504:	b9d5      	cbnz	r5, 800953c <__sfp+0x64>
 8009506:	4b16      	ldr	r3, [pc, #88]	; (8009560 <__sfp+0x88>)
 8009508:	60e3      	str	r3, [r4, #12]
 800950a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800950e:	6665      	str	r5, [r4, #100]	; 0x64
 8009510:	f000 f86c 	bl	80095ec <__retarget_lock_init_recursive>
 8009514:	f7ff ff96 	bl	8009444 <__sfp_lock_release>
 8009518:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800951c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009520:	6025      	str	r5, [r4, #0]
 8009522:	61a5      	str	r5, [r4, #24]
 8009524:	2208      	movs	r2, #8
 8009526:	4629      	mov	r1, r5
 8009528:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800952c:	f000 f86f 	bl	800960e <memset>
 8009530:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009534:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009538:	4620      	mov	r0, r4
 800953a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800953c:	3468      	adds	r4, #104	; 0x68
 800953e:	e7d9      	b.n	80094f4 <__sfp+0x1c>
 8009540:	2104      	movs	r1, #4
 8009542:	4638      	mov	r0, r7
 8009544:	f7ff ff62 	bl	800940c <__sfmoreglue>
 8009548:	4604      	mov	r4, r0
 800954a:	6030      	str	r0, [r6, #0]
 800954c:	2800      	cmp	r0, #0
 800954e:	d1d5      	bne.n	80094fc <__sfp+0x24>
 8009550:	f7ff ff78 	bl	8009444 <__sfp_lock_release>
 8009554:	230c      	movs	r3, #12
 8009556:	603b      	str	r3, [r7, #0]
 8009558:	e7ee      	b.n	8009538 <__sfp+0x60>
 800955a:	bf00      	nop
 800955c:	0800a604 	.word	0x0800a604
 8009560:	ffff0001 	.word	0xffff0001

08009564 <_fwalk_reent>:
 8009564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009568:	4606      	mov	r6, r0
 800956a:	4688      	mov	r8, r1
 800956c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009570:	2700      	movs	r7, #0
 8009572:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009576:	f1b9 0901 	subs.w	r9, r9, #1
 800957a:	d505      	bpl.n	8009588 <_fwalk_reent+0x24>
 800957c:	6824      	ldr	r4, [r4, #0]
 800957e:	2c00      	cmp	r4, #0
 8009580:	d1f7      	bne.n	8009572 <_fwalk_reent+0xe>
 8009582:	4638      	mov	r0, r7
 8009584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009588:	89ab      	ldrh	r3, [r5, #12]
 800958a:	2b01      	cmp	r3, #1
 800958c:	d907      	bls.n	800959e <_fwalk_reent+0x3a>
 800958e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009592:	3301      	adds	r3, #1
 8009594:	d003      	beq.n	800959e <_fwalk_reent+0x3a>
 8009596:	4629      	mov	r1, r5
 8009598:	4630      	mov	r0, r6
 800959a:	47c0      	blx	r8
 800959c:	4307      	orrs	r7, r0
 800959e:	3568      	adds	r5, #104	; 0x68
 80095a0:	e7e9      	b.n	8009576 <_fwalk_reent+0x12>
	...

080095a4 <__libc_init_array>:
 80095a4:	b570      	push	{r4, r5, r6, lr}
 80095a6:	4d0d      	ldr	r5, [pc, #52]	; (80095dc <__libc_init_array+0x38>)
 80095a8:	4c0d      	ldr	r4, [pc, #52]	; (80095e0 <__libc_init_array+0x3c>)
 80095aa:	1b64      	subs	r4, r4, r5
 80095ac:	10a4      	asrs	r4, r4, #2
 80095ae:	2600      	movs	r6, #0
 80095b0:	42a6      	cmp	r6, r4
 80095b2:	d109      	bne.n	80095c8 <__libc_init_array+0x24>
 80095b4:	4d0b      	ldr	r5, [pc, #44]	; (80095e4 <__libc_init_array+0x40>)
 80095b6:	4c0c      	ldr	r4, [pc, #48]	; (80095e8 <__libc_init_array+0x44>)
 80095b8:	f000 ff32 	bl	800a420 <_init>
 80095bc:	1b64      	subs	r4, r4, r5
 80095be:	10a4      	asrs	r4, r4, #2
 80095c0:	2600      	movs	r6, #0
 80095c2:	42a6      	cmp	r6, r4
 80095c4:	d105      	bne.n	80095d2 <__libc_init_array+0x2e>
 80095c6:	bd70      	pop	{r4, r5, r6, pc}
 80095c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80095cc:	4798      	blx	r3
 80095ce:	3601      	adds	r6, #1
 80095d0:	e7ee      	b.n	80095b0 <__libc_init_array+0xc>
 80095d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80095d6:	4798      	blx	r3
 80095d8:	3601      	adds	r6, #1
 80095da:	e7f2      	b.n	80095c2 <__libc_init_array+0x1e>
 80095dc:	0800a644 	.word	0x0800a644
 80095e0:	0800a644 	.word	0x0800a644
 80095e4:	0800a644 	.word	0x0800a644
 80095e8:	0800a648 	.word	0x0800a648

080095ec <__retarget_lock_init_recursive>:
 80095ec:	4770      	bx	lr

080095ee <__retarget_lock_acquire_recursive>:
 80095ee:	4770      	bx	lr

080095f0 <__retarget_lock_release_recursive>:
 80095f0:	4770      	bx	lr

080095f2 <memcpy>:
 80095f2:	440a      	add	r2, r1
 80095f4:	4291      	cmp	r1, r2
 80095f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80095fa:	d100      	bne.n	80095fe <memcpy+0xc>
 80095fc:	4770      	bx	lr
 80095fe:	b510      	push	{r4, lr}
 8009600:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009604:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009608:	4291      	cmp	r1, r2
 800960a:	d1f9      	bne.n	8009600 <memcpy+0xe>
 800960c:	bd10      	pop	{r4, pc}

0800960e <memset>:
 800960e:	4402      	add	r2, r0
 8009610:	4603      	mov	r3, r0
 8009612:	4293      	cmp	r3, r2
 8009614:	d100      	bne.n	8009618 <memset+0xa>
 8009616:	4770      	bx	lr
 8009618:	f803 1b01 	strb.w	r1, [r3], #1
 800961c:	e7f9      	b.n	8009612 <memset+0x4>
	...

08009620 <sbrk_aligned>:
 8009620:	b570      	push	{r4, r5, r6, lr}
 8009622:	4e0e      	ldr	r6, [pc, #56]	; (800965c <sbrk_aligned+0x3c>)
 8009624:	460c      	mov	r4, r1
 8009626:	6831      	ldr	r1, [r6, #0]
 8009628:	4605      	mov	r5, r0
 800962a:	b911      	cbnz	r1, 8009632 <sbrk_aligned+0x12>
 800962c:	f000 f90e 	bl	800984c <_sbrk_r>
 8009630:	6030      	str	r0, [r6, #0]
 8009632:	4621      	mov	r1, r4
 8009634:	4628      	mov	r0, r5
 8009636:	f000 f909 	bl	800984c <_sbrk_r>
 800963a:	1c43      	adds	r3, r0, #1
 800963c:	d00a      	beq.n	8009654 <sbrk_aligned+0x34>
 800963e:	1cc4      	adds	r4, r0, #3
 8009640:	f024 0403 	bic.w	r4, r4, #3
 8009644:	42a0      	cmp	r0, r4
 8009646:	d007      	beq.n	8009658 <sbrk_aligned+0x38>
 8009648:	1a21      	subs	r1, r4, r0
 800964a:	4628      	mov	r0, r5
 800964c:	f000 f8fe 	bl	800984c <_sbrk_r>
 8009650:	3001      	adds	r0, #1
 8009652:	d101      	bne.n	8009658 <sbrk_aligned+0x38>
 8009654:	f04f 34ff 	mov.w	r4, #4294967295
 8009658:	4620      	mov	r0, r4
 800965a:	bd70      	pop	{r4, r5, r6, pc}
 800965c:	20004ca8 	.word	0x20004ca8

08009660 <_malloc_r>:
 8009660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009664:	1ccd      	adds	r5, r1, #3
 8009666:	f025 0503 	bic.w	r5, r5, #3
 800966a:	3508      	adds	r5, #8
 800966c:	2d0c      	cmp	r5, #12
 800966e:	bf38      	it	cc
 8009670:	250c      	movcc	r5, #12
 8009672:	2d00      	cmp	r5, #0
 8009674:	4607      	mov	r7, r0
 8009676:	db01      	blt.n	800967c <_malloc_r+0x1c>
 8009678:	42a9      	cmp	r1, r5
 800967a:	d905      	bls.n	8009688 <_malloc_r+0x28>
 800967c:	230c      	movs	r3, #12
 800967e:	603b      	str	r3, [r7, #0]
 8009680:	2600      	movs	r6, #0
 8009682:	4630      	mov	r0, r6
 8009684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009688:	4e2e      	ldr	r6, [pc, #184]	; (8009744 <_malloc_r+0xe4>)
 800968a:	f000 fa29 	bl	8009ae0 <__malloc_lock>
 800968e:	6833      	ldr	r3, [r6, #0]
 8009690:	461c      	mov	r4, r3
 8009692:	bb34      	cbnz	r4, 80096e2 <_malloc_r+0x82>
 8009694:	4629      	mov	r1, r5
 8009696:	4638      	mov	r0, r7
 8009698:	f7ff ffc2 	bl	8009620 <sbrk_aligned>
 800969c:	1c43      	adds	r3, r0, #1
 800969e:	4604      	mov	r4, r0
 80096a0:	d14d      	bne.n	800973e <_malloc_r+0xde>
 80096a2:	6834      	ldr	r4, [r6, #0]
 80096a4:	4626      	mov	r6, r4
 80096a6:	2e00      	cmp	r6, #0
 80096a8:	d140      	bne.n	800972c <_malloc_r+0xcc>
 80096aa:	6823      	ldr	r3, [r4, #0]
 80096ac:	4631      	mov	r1, r6
 80096ae:	4638      	mov	r0, r7
 80096b0:	eb04 0803 	add.w	r8, r4, r3
 80096b4:	f000 f8ca 	bl	800984c <_sbrk_r>
 80096b8:	4580      	cmp	r8, r0
 80096ba:	d13a      	bne.n	8009732 <_malloc_r+0xd2>
 80096bc:	6821      	ldr	r1, [r4, #0]
 80096be:	3503      	adds	r5, #3
 80096c0:	1a6d      	subs	r5, r5, r1
 80096c2:	f025 0503 	bic.w	r5, r5, #3
 80096c6:	3508      	adds	r5, #8
 80096c8:	2d0c      	cmp	r5, #12
 80096ca:	bf38      	it	cc
 80096cc:	250c      	movcc	r5, #12
 80096ce:	4629      	mov	r1, r5
 80096d0:	4638      	mov	r0, r7
 80096d2:	f7ff ffa5 	bl	8009620 <sbrk_aligned>
 80096d6:	3001      	adds	r0, #1
 80096d8:	d02b      	beq.n	8009732 <_malloc_r+0xd2>
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	442b      	add	r3, r5
 80096de:	6023      	str	r3, [r4, #0]
 80096e0:	e00e      	b.n	8009700 <_malloc_r+0xa0>
 80096e2:	6822      	ldr	r2, [r4, #0]
 80096e4:	1b52      	subs	r2, r2, r5
 80096e6:	d41e      	bmi.n	8009726 <_malloc_r+0xc6>
 80096e8:	2a0b      	cmp	r2, #11
 80096ea:	d916      	bls.n	800971a <_malloc_r+0xba>
 80096ec:	1961      	adds	r1, r4, r5
 80096ee:	42a3      	cmp	r3, r4
 80096f0:	6025      	str	r5, [r4, #0]
 80096f2:	bf18      	it	ne
 80096f4:	6059      	strne	r1, [r3, #4]
 80096f6:	6863      	ldr	r3, [r4, #4]
 80096f8:	bf08      	it	eq
 80096fa:	6031      	streq	r1, [r6, #0]
 80096fc:	5162      	str	r2, [r4, r5]
 80096fe:	604b      	str	r3, [r1, #4]
 8009700:	4638      	mov	r0, r7
 8009702:	f104 060b 	add.w	r6, r4, #11
 8009706:	f000 f9f1 	bl	8009aec <__malloc_unlock>
 800970a:	f026 0607 	bic.w	r6, r6, #7
 800970e:	1d23      	adds	r3, r4, #4
 8009710:	1af2      	subs	r2, r6, r3
 8009712:	d0b6      	beq.n	8009682 <_malloc_r+0x22>
 8009714:	1b9b      	subs	r3, r3, r6
 8009716:	50a3      	str	r3, [r4, r2]
 8009718:	e7b3      	b.n	8009682 <_malloc_r+0x22>
 800971a:	6862      	ldr	r2, [r4, #4]
 800971c:	42a3      	cmp	r3, r4
 800971e:	bf0c      	ite	eq
 8009720:	6032      	streq	r2, [r6, #0]
 8009722:	605a      	strne	r2, [r3, #4]
 8009724:	e7ec      	b.n	8009700 <_malloc_r+0xa0>
 8009726:	4623      	mov	r3, r4
 8009728:	6864      	ldr	r4, [r4, #4]
 800972a:	e7b2      	b.n	8009692 <_malloc_r+0x32>
 800972c:	4634      	mov	r4, r6
 800972e:	6876      	ldr	r6, [r6, #4]
 8009730:	e7b9      	b.n	80096a6 <_malloc_r+0x46>
 8009732:	230c      	movs	r3, #12
 8009734:	603b      	str	r3, [r7, #0]
 8009736:	4638      	mov	r0, r7
 8009738:	f000 f9d8 	bl	8009aec <__malloc_unlock>
 800973c:	e7a1      	b.n	8009682 <_malloc_r+0x22>
 800973e:	6025      	str	r5, [r4, #0]
 8009740:	e7de      	b.n	8009700 <_malloc_r+0xa0>
 8009742:	bf00      	nop
 8009744:	20004ca4 	.word	0x20004ca4

08009748 <iprintf>:
 8009748:	b40f      	push	{r0, r1, r2, r3}
 800974a:	4b0a      	ldr	r3, [pc, #40]	; (8009774 <iprintf+0x2c>)
 800974c:	b513      	push	{r0, r1, r4, lr}
 800974e:	681c      	ldr	r4, [r3, #0]
 8009750:	b124      	cbz	r4, 800975c <iprintf+0x14>
 8009752:	69a3      	ldr	r3, [r4, #24]
 8009754:	b913      	cbnz	r3, 800975c <iprintf+0x14>
 8009756:	4620      	mov	r0, r4
 8009758:	f7ff fe86 	bl	8009468 <__sinit>
 800975c:	ab05      	add	r3, sp, #20
 800975e:	9a04      	ldr	r2, [sp, #16]
 8009760:	68a1      	ldr	r1, [r4, #8]
 8009762:	9301      	str	r3, [sp, #4]
 8009764:	4620      	mov	r0, r4
 8009766:	f000 fa3d 	bl	8009be4 <_vfiprintf_r>
 800976a:	b002      	add	sp, #8
 800976c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009770:	b004      	add	sp, #16
 8009772:	4770      	bx	lr
 8009774:	20000010 	.word	0x20000010

08009778 <cleanup_glue>:
 8009778:	b538      	push	{r3, r4, r5, lr}
 800977a:	460c      	mov	r4, r1
 800977c:	6809      	ldr	r1, [r1, #0]
 800977e:	4605      	mov	r5, r0
 8009780:	b109      	cbz	r1, 8009786 <cleanup_glue+0xe>
 8009782:	f7ff fff9 	bl	8009778 <cleanup_glue>
 8009786:	4621      	mov	r1, r4
 8009788:	4628      	mov	r0, r5
 800978a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800978e:	f000 b9b3 	b.w	8009af8 <_free_r>
	...

08009794 <_reclaim_reent>:
 8009794:	4b2c      	ldr	r3, [pc, #176]	; (8009848 <_reclaim_reent+0xb4>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4283      	cmp	r3, r0
 800979a:	b570      	push	{r4, r5, r6, lr}
 800979c:	4604      	mov	r4, r0
 800979e:	d051      	beq.n	8009844 <_reclaim_reent+0xb0>
 80097a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80097a2:	b143      	cbz	r3, 80097b6 <_reclaim_reent+0x22>
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d14a      	bne.n	8009840 <_reclaim_reent+0xac>
 80097aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097ac:	6819      	ldr	r1, [r3, #0]
 80097ae:	b111      	cbz	r1, 80097b6 <_reclaim_reent+0x22>
 80097b0:	4620      	mov	r0, r4
 80097b2:	f000 f9a1 	bl	8009af8 <_free_r>
 80097b6:	6961      	ldr	r1, [r4, #20]
 80097b8:	b111      	cbz	r1, 80097c0 <_reclaim_reent+0x2c>
 80097ba:	4620      	mov	r0, r4
 80097bc:	f000 f99c 	bl	8009af8 <_free_r>
 80097c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80097c2:	b111      	cbz	r1, 80097ca <_reclaim_reent+0x36>
 80097c4:	4620      	mov	r0, r4
 80097c6:	f000 f997 	bl	8009af8 <_free_r>
 80097ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80097cc:	b111      	cbz	r1, 80097d4 <_reclaim_reent+0x40>
 80097ce:	4620      	mov	r0, r4
 80097d0:	f000 f992 	bl	8009af8 <_free_r>
 80097d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80097d6:	b111      	cbz	r1, 80097de <_reclaim_reent+0x4a>
 80097d8:	4620      	mov	r0, r4
 80097da:	f000 f98d 	bl	8009af8 <_free_r>
 80097de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80097e0:	b111      	cbz	r1, 80097e8 <_reclaim_reent+0x54>
 80097e2:	4620      	mov	r0, r4
 80097e4:	f000 f988 	bl	8009af8 <_free_r>
 80097e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80097ea:	b111      	cbz	r1, 80097f2 <_reclaim_reent+0x5e>
 80097ec:	4620      	mov	r0, r4
 80097ee:	f000 f983 	bl	8009af8 <_free_r>
 80097f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80097f4:	b111      	cbz	r1, 80097fc <_reclaim_reent+0x68>
 80097f6:	4620      	mov	r0, r4
 80097f8:	f000 f97e 	bl	8009af8 <_free_r>
 80097fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097fe:	b111      	cbz	r1, 8009806 <_reclaim_reent+0x72>
 8009800:	4620      	mov	r0, r4
 8009802:	f000 f979 	bl	8009af8 <_free_r>
 8009806:	69a3      	ldr	r3, [r4, #24]
 8009808:	b1e3      	cbz	r3, 8009844 <_reclaim_reent+0xb0>
 800980a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800980c:	4620      	mov	r0, r4
 800980e:	4798      	blx	r3
 8009810:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009812:	b1b9      	cbz	r1, 8009844 <_reclaim_reent+0xb0>
 8009814:	4620      	mov	r0, r4
 8009816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800981a:	f7ff bfad 	b.w	8009778 <cleanup_glue>
 800981e:	5949      	ldr	r1, [r1, r5]
 8009820:	b941      	cbnz	r1, 8009834 <_reclaim_reent+0xa0>
 8009822:	3504      	adds	r5, #4
 8009824:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009826:	2d80      	cmp	r5, #128	; 0x80
 8009828:	68d9      	ldr	r1, [r3, #12]
 800982a:	d1f8      	bne.n	800981e <_reclaim_reent+0x8a>
 800982c:	4620      	mov	r0, r4
 800982e:	f000 f963 	bl	8009af8 <_free_r>
 8009832:	e7ba      	b.n	80097aa <_reclaim_reent+0x16>
 8009834:	680e      	ldr	r6, [r1, #0]
 8009836:	4620      	mov	r0, r4
 8009838:	f000 f95e 	bl	8009af8 <_free_r>
 800983c:	4631      	mov	r1, r6
 800983e:	e7ef      	b.n	8009820 <_reclaim_reent+0x8c>
 8009840:	2500      	movs	r5, #0
 8009842:	e7ef      	b.n	8009824 <_reclaim_reent+0x90>
 8009844:	bd70      	pop	{r4, r5, r6, pc}
 8009846:	bf00      	nop
 8009848:	20000010 	.word	0x20000010

0800984c <_sbrk_r>:
 800984c:	b538      	push	{r3, r4, r5, lr}
 800984e:	4d06      	ldr	r5, [pc, #24]	; (8009868 <_sbrk_r+0x1c>)
 8009850:	2300      	movs	r3, #0
 8009852:	4604      	mov	r4, r0
 8009854:	4608      	mov	r0, r1
 8009856:	602b      	str	r3, [r5, #0]
 8009858:	f7f8 fdb2 	bl	80023c0 <_sbrk>
 800985c:	1c43      	adds	r3, r0, #1
 800985e:	d102      	bne.n	8009866 <_sbrk_r+0x1a>
 8009860:	682b      	ldr	r3, [r5, #0]
 8009862:	b103      	cbz	r3, 8009866 <_sbrk_r+0x1a>
 8009864:	6023      	str	r3, [r4, #0]
 8009866:	bd38      	pop	{r3, r4, r5, pc}
 8009868:	20004cac 	.word	0x20004cac

0800986c <__sread>:
 800986c:	b510      	push	{r4, lr}
 800986e:	460c      	mov	r4, r1
 8009870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009874:	f000 fc7a 	bl	800a16c <_read_r>
 8009878:	2800      	cmp	r0, #0
 800987a:	bfab      	itete	ge
 800987c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800987e:	89a3      	ldrhlt	r3, [r4, #12]
 8009880:	181b      	addge	r3, r3, r0
 8009882:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009886:	bfac      	ite	ge
 8009888:	6563      	strge	r3, [r4, #84]	; 0x54
 800988a:	81a3      	strhlt	r3, [r4, #12]
 800988c:	bd10      	pop	{r4, pc}

0800988e <__swrite>:
 800988e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009892:	461f      	mov	r7, r3
 8009894:	898b      	ldrh	r3, [r1, #12]
 8009896:	05db      	lsls	r3, r3, #23
 8009898:	4605      	mov	r5, r0
 800989a:	460c      	mov	r4, r1
 800989c:	4616      	mov	r6, r2
 800989e:	d505      	bpl.n	80098ac <__swrite+0x1e>
 80098a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a4:	2302      	movs	r3, #2
 80098a6:	2200      	movs	r2, #0
 80098a8:	f000 f908 	bl	8009abc <_lseek_r>
 80098ac:	89a3      	ldrh	r3, [r4, #12]
 80098ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098b6:	81a3      	strh	r3, [r4, #12]
 80098b8:	4632      	mov	r2, r6
 80098ba:	463b      	mov	r3, r7
 80098bc:	4628      	mov	r0, r5
 80098be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098c2:	f000 b817 	b.w	80098f4 <_write_r>

080098c6 <__sseek>:
 80098c6:	b510      	push	{r4, lr}
 80098c8:	460c      	mov	r4, r1
 80098ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ce:	f000 f8f5 	bl	8009abc <_lseek_r>
 80098d2:	1c43      	adds	r3, r0, #1
 80098d4:	89a3      	ldrh	r3, [r4, #12]
 80098d6:	bf15      	itete	ne
 80098d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80098da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098e2:	81a3      	strheq	r3, [r4, #12]
 80098e4:	bf18      	it	ne
 80098e6:	81a3      	strhne	r3, [r4, #12]
 80098e8:	bd10      	pop	{r4, pc}

080098ea <__sclose>:
 80098ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ee:	f000 b813 	b.w	8009918 <_close_r>
	...

080098f4 <_write_r>:
 80098f4:	b538      	push	{r3, r4, r5, lr}
 80098f6:	4d07      	ldr	r5, [pc, #28]	; (8009914 <_write_r+0x20>)
 80098f8:	4604      	mov	r4, r0
 80098fa:	4608      	mov	r0, r1
 80098fc:	4611      	mov	r1, r2
 80098fe:	2200      	movs	r2, #0
 8009900:	602a      	str	r2, [r5, #0]
 8009902:	461a      	mov	r2, r3
 8009904:	f7f8 fd0b 	bl	800231e <_write>
 8009908:	1c43      	adds	r3, r0, #1
 800990a:	d102      	bne.n	8009912 <_write_r+0x1e>
 800990c:	682b      	ldr	r3, [r5, #0]
 800990e:	b103      	cbz	r3, 8009912 <_write_r+0x1e>
 8009910:	6023      	str	r3, [r4, #0]
 8009912:	bd38      	pop	{r3, r4, r5, pc}
 8009914:	20004cac 	.word	0x20004cac

08009918 <_close_r>:
 8009918:	b538      	push	{r3, r4, r5, lr}
 800991a:	4d06      	ldr	r5, [pc, #24]	; (8009934 <_close_r+0x1c>)
 800991c:	2300      	movs	r3, #0
 800991e:	4604      	mov	r4, r0
 8009920:	4608      	mov	r0, r1
 8009922:	602b      	str	r3, [r5, #0]
 8009924:	f7f8 fd17 	bl	8002356 <_close>
 8009928:	1c43      	adds	r3, r0, #1
 800992a:	d102      	bne.n	8009932 <_close_r+0x1a>
 800992c:	682b      	ldr	r3, [r5, #0]
 800992e:	b103      	cbz	r3, 8009932 <_close_r+0x1a>
 8009930:	6023      	str	r3, [r4, #0]
 8009932:	bd38      	pop	{r3, r4, r5, pc}
 8009934:	20004cac 	.word	0x20004cac

08009938 <__sflush_r>:
 8009938:	898a      	ldrh	r2, [r1, #12]
 800993a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800993e:	4605      	mov	r5, r0
 8009940:	0710      	lsls	r0, r2, #28
 8009942:	460c      	mov	r4, r1
 8009944:	d458      	bmi.n	80099f8 <__sflush_r+0xc0>
 8009946:	684b      	ldr	r3, [r1, #4]
 8009948:	2b00      	cmp	r3, #0
 800994a:	dc05      	bgt.n	8009958 <__sflush_r+0x20>
 800994c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800994e:	2b00      	cmp	r3, #0
 8009950:	dc02      	bgt.n	8009958 <__sflush_r+0x20>
 8009952:	2000      	movs	r0, #0
 8009954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009958:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800995a:	2e00      	cmp	r6, #0
 800995c:	d0f9      	beq.n	8009952 <__sflush_r+0x1a>
 800995e:	2300      	movs	r3, #0
 8009960:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009964:	682f      	ldr	r7, [r5, #0]
 8009966:	602b      	str	r3, [r5, #0]
 8009968:	d032      	beq.n	80099d0 <__sflush_r+0x98>
 800996a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800996c:	89a3      	ldrh	r3, [r4, #12]
 800996e:	075a      	lsls	r2, r3, #29
 8009970:	d505      	bpl.n	800997e <__sflush_r+0x46>
 8009972:	6863      	ldr	r3, [r4, #4]
 8009974:	1ac0      	subs	r0, r0, r3
 8009976:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009978:	b10b      	cbz	r3, 800997e <__sflush_r+0x46>
 800997a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800997c:	1ac0      	subs	r0, r0, r3
 800997e:	2300      	movs	r3, #0
 8009980:	4602      	mov	r2, r0
 8009982:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009984:	6a21      	ldr	r1, [r4, #32]
 8009986:	4628      	mov	r0, r5
 8009988:	47b0      	blx	r6
 800998a:	1c43      	adds	r3, r0, #1
 800998c:	89a3      	ldrh	r3, [r4, #12]
 800998e:	d106      	bne.n	800999e <__sflush_r+0x66>
 8009990:	6829      	ldr	r1, [r5, #0]
 8009992:	291d      	cmp	r1, #29
 8009994:	d82c      	bhi.n	80099f0 <__sflush_r+0xb8>
 8009996:	4a2a      	ldr	r2, [pc, #168]	; (8009a40 <__sflush_r+0x108>)
 8009998:	40ca      	lsrs	r2, r1
 800999a:	07d6      	lsls	r6, r2, #31
 800999c:	d528      	bpl.n	80099f0 <__sflush_r+0xb8>
 800999e:	2200      	movs	r2, #0
 80099a0:	6062      	str	r2, [r4, #4]
 80099a2:	04d9      	lsls	r1, r3, #19
 80099a4:	6922      	ldr	r2, [r4, #16]
 80099a6:	6022      	str	r2, [r4, #0]
 80099a8:	d504      	bpl.n	80099b4 <__sflush_r+0x7c>
 80099aa:	1c42      	adds	r2, r0, #1
 80099ac:	d101      	bne.n	80099b2 <__sflush_r+0x7a>
 80099ae:	682b      	ldr	r3, [r5, #0]
 80099b0:	b903      	cbnz	r3, 80099b4 <__sflush_r+0x7c>
 80099b2:	6560      	str	r0, [r4, #84]	; 0x54
 80099b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099b6:	602f      	str	r7, [r5, #0]
 80099b8:	2900      	cmp	r1, #0
 80099ba:	d0ca      	beq.n	8009952 <__sflush_r+0x1a>
 80099bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099c0:	4299      	cmp	r1, r3
 80099c2:	d002      	beq.n	80099ca <__sflush_r+0x92>
 80099c4:	4628      	mov	r0, r5
 80099c6:	f000 f897 	bl	8009af8 <_free_r>
 80099ca:	2000      	movs	r0, #0
 80099cc:	6360      	str	r0, [r4, #52]	; 0x34
 80099ce:	e7c1      	b.n	8009954 <__sflush_r+0x1c>
 80099d0:	6a21      	ldr	r1, [r4, #32]
 80099d2:	2301      	movs	r3, #1
 80099d4:	4628      	mov	r0, r5
 80099d6:	47b0      	blx	r6
 80099d8:	1c41      	adds	r1, r0, #1
 80099da:	d1c7      	bne.n	800996c <__sflush_r+0x34>
 80099dc:	682b      	ldr	r3, [r5, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d0c4      	beq.n	800996c <__sflush_r+0x34>
 80099e2:	2b1d      	cmp	r3, #29
 80099e4:	d001      	beq.n	80099ea <__sflush_r+0xb2>
 80099e6:	2b16      	cmp	r3, #22
 80099e8:	d101      	bne.n	80099ee <__sflush_r+0xb6>
 80099ea:	602f      	str	r7, [r5, #0]
 80099ec:	e7b1      	b.n	8009952 <__sflush_r+0x1a>
 80099ee:	89a3      	ldrh	r3, [r4, #12]
 80099f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099f4:	81a3      	strh	r3, [r4, #12]
 80099f6:	e7ad      	b.n	8009954 <__sflush_r+0x1c>
 80099f8:	690f      	ldr	r7, [r1, #16]
 80099fa:	2f00      	cmp	r7, #0
 80099fc:	d0a9      	beq.n	8009952 <__sflush_r+0x1a>
 80099fe:	0793      	lsls	r3, r2, #30
 8009a00:	680e      	ldr	r6, [r1, #0]
 8009a02:	bf08      	it	eq
 8009a04:	694b      	ldreq	r3, [r1, #20]
 8009a06:	600f      	str	r7, [r1, #0]
 8009a08:	bf18      	it	ne
 8009a0a:	2300      	movne	r3, #0
 8009a0c:	eba6 0807 	sub.w	r8, r6, r7
 8009a10:	608b      	str	r3, [r1, #8]
 8009a12:	f1b8 0f00 	cmp.w	r8, #0
 8009a16:	dd9c      	ble.n	8009952 <__sflush_r+0x1a>
 8009a18:	6a21      	ldr	r1, [r4, #32]
 8009a1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a1c:	4643      	mov	r3, r8
 8009a1e:	463a      	mov	r2, r7
 8009a20:	4628      	mov	r0, r5
 8009a22:	47b0      	blx	r6
 8009a24:	2800      	cmp	r0, #0
 8009a26:	dc06      	bgt.n	8009a36 <__sflush_r+0xfe>
 8009a28:	89a3      	ldrh	r3, [r4, #12]
 8009a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a2e:	81a3      	strh	r3, [r4, #12]
 8009a30:	f04f 30ff 	mov.w	r0, #4294967295
 8009a34:	e78e      	b.n	8009954 <__sflush_r+0x1c>
 8009a36:	4407      	add	r7, r0
 8009a38:	eba8 0800 	sub.w	r8, r8, r0
 8009a3c:	e7e9      	b.n	8009a12 <__sflush_r+0xda>
 8009a3e:	bf00      	nop
 8009a40:	20400001 	.word	0x20400001

08009a44 <_fflush_r>:
 8009a44:	b538      	push	{r3, r4, r5, lr}
 8009a46:	690b      	ldr	r3, [r1, #16]
 8009a48:	4605      	mov	r5, r0
 8009a4a:	460c      	mov	r4, r1
 8009a4c:	b913      	cbnz	r3, 8009a54 <_fflush_r+0x10>
 8009a4e:	2500      	movs	r5, #0
 8009a50:	4628      	mov	r0, r5
 8009a52:	bd38      	pop	{r3, r4, r5, pc}
 8009a54:	b118      	cbz	r0, 8009a5e <_fflush_r+0x1a>
 8009a56:	6983      	ldr	r3, [r0, #24]
 8009a58:	b90b      	cbnz	r3, 8009a5e <_fflush_r+0x1a>
 8009a5a:	f7ff fd05 	bl	8009468 <__sinit>
 8009a5e:	4b14      	ldr	r3, [pc, #80]	; (8009ab0 <_fflush_r+0x6c>)
 8009a60:	429c      	cmp	r4, r3
 8009a62:	d11b      	bne.n	8009a9c <_fflush_r+0x58>
 8009a64:	686c      	ldr	r4, [r5, #4]
 8009a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d0ef      	beq.n	8009a4e <_fflush_r+0xa>
 8009a6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a70:	07d0      	lsls	r0, r2, #31
 8009a72:	d404      	bmi.n	8009a7e <_fflush_r+0x3a>
 8009a74:	0599      	lsls	r1, r3, #22
 8009a76:	d402      	bmi.n	8009a7e <_fflush_r+0x3a>
 8009a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a7a:	f7ff fdb8 	bl	80095ee <__retarget_lock_acquire_recursive>
 8009a7e:	4628      	mov	r0, r5
 8009a80:	4621      	mov	r1, r4
 8009a82:	f7ff ff59 	bl	8009938 <__sflush_r>
 8009a86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a88:	07da      	lsls	r2, r3, #31
 8009a8a:	4605      	mov	r5, r0
 8009a8c:	d4e0      	bmi.n	8009a50 <_fflush_r+0xc>
 8009a8e:	89a3      	ldrh	r3, [r4, #12]
 8009a90:	059b      	lsls	r3, r3, #22
 8009a92:	d4dd      	bmi.n	8009a50 <_fflush_r+0xc>
 8009a94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a96:	f7ff fdab 	bl	80095f0 <__retarget_lock_release_recursive>
 8009a9a:	e7d9      	b.n	8009a50 <_fflush_r+0xc>
 8009a9c:	4b05      	ldr	r3, [pc, #20]	; (8009ab4 <_fflush_r+0x70>)
 8009a9e:	429c      	cmp	r4, r3
 8009aa0:	d101      	bne.n	8009aa6 <_fflush_r+0x62>
 8009aa2:	68ac      	ldr	r4, [r5, #8]
 8009aa4:	e7df      	b.n	8009a66 <_fflush_r+0x22>
 8009aa6:	4b04      	ldr	r3, [pc, #16]	; (8009ab8 <_fflush_r+0x74>)
 8009aa8:	429c      	cmp	r4, r3
 8009aaa:	bf08      	it	eq
 8009aac:	68ec      	ldreq	r4, [r5, #12]
 8009aae:	e7da      	b.n	8009a66 <_fflush_r+0x22>
 8009ab0:	0800a5c4 	.word	0x0800a5c4
 8009ab4:	0800a5e4 	.word	0x0800a5e4
 8009ab8:	0800a5a4 	.word	0x0800a5a4

08009abc <_lseek_r>:
 8009abc:	b538      	push	{r3, r4, r5, lr}
 8009abe:	4d07      	ldr	r5, [pc, #28]	; (8009adc <_lseek_r+0x20>)
 8009ac0:	4604      	mov	r4, r0
 8009ac2:	4608      	mov	r0, r1
 8009ac4:	4611      	mov	r1, r2
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	602a      	str	r2, [r5, #0]
 8009aca:	461a      	mov	r2, r3
 8009acc:	f7f8 fc6a 	bl	80023a4 <_lseek>
 8009ad0:	1c43      	adds	r3, r0, #1
 8009ad2:	d102      	bne.n	8009ada <_lseek_r+0x1e>
 8009ad4:	682b      	ldr	r3, [r5, #0]
 8009ad6:	b103      	cbz	r3, 8009ada <_lseek_r+0x1e>
 8009ad8:	6023      	str	r3, [r4, #0]
 8009ada:	bd38      	pop	{r3, r4, r5, pc}
 8009adc:	20004cac 	.word	0x20004cac

08009ae0 <__malloc_lock>:
 8009ae0:	4801      	ldr	r0, [pc, #4]	; (8009ae8 <__malloc_lock+0x8>)
 8009ae2:	f7ff bd84 	b.w	80095ee <__retarget_lock_acquire_recursive>
 8009ae6:	bf00      	nop
 8009ae8:	20004ca0 	.word	0x20004ca0

08009aec <__malloc_unlock>:
 8009aec:	4801      	ldr	r0, [pc, #4]	; (8009af4 <__malloc_unlock+0x8>)
 8009aee:	f7ff bd7f 	b.w	80095f0 <__retarget_lock_release_recursive>
 8009af2:	bf00      	nop
 8009af4:	20004ca0 	.word	0x20004ca0

08009af8 <_free_r>:
 8009af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009afa:	2900      	cmp	r1, #0
 8009afc:	d044      	beq.n	8009b88 <_free_r+0x90>
 8009afe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b02:	9001      	str	r0, [sp, #4]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f1a1 0404 	sub.w	r4, r1, #4
 8009b0a:	bfb8      	it	lt
 8009b0c:	18e4      	addlt	r4, r4, r3
 8009b0e:	f7ff ffe7 	bl	8009ae0 <__malloc_lock>
 8009b12:	4a1e      	ldr	r2, [pc, #120]	; (8009b8c <_free_r+0x94>)
 8009b14:	9801      	ldr	r0, [sp, #4]
 8009b16:	6813      	ldr	r3, [r2, #0]
 8009b18:	b933      	cbnz	r3, 8009b28 <_free_r+0x30>
 8009b1a:	6063      	str	r3, [r4, #4]
 8009b1c:	6014      	str	r4, [r2, #0]
 8009b1e:	b003      	add	sp, #12
 8009b20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b24:	f7ff bfe2 	b.w	8009aec <__malloc_unlock>
 8009b28:	42a3      	cmp	r3, r4
 8009b2a:	d908      	bls.n	8009b3e <_free_r+0x46>
 8009b2c:	6825      	ldr	r5, [r4, #0]
 8009b2e:	1961      	adds	r1, r4, r5
 8009b30:	428b      	cmp	r3, r1
 8009b32:	bf01      	itttt	eq
 8009b34:	6819      	ldreq	r1, [r3, #0]
 8009b36:	685b      	ldreq	r3, [r3, #4]
 8009b38:	1949      	addeq	r1, r1, r5
 8009b3a:	6021      	streq	r1, [r4, #0]
 8009b3c:	e7ed      	b.n	8009b1a <_free_r+0x22>
 8009b3e:	461a      	mov	r2, r3
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	b10b      	cbz	r3, 8009b48 <_free_r+0x50>
 8009b44:	42a3      	cmp	r3, r4
 8009b46:	d9fa      	bls.n	8009b3e <_free_r+0x46>
 8009b48:	6811      	ldr	r1, [r2, #0]
 8009b4a:	1855      	adds	r5, r2, r1
 8009b4c:	42a5      	cmp	r5, r4
 8009b4e:	d10b      	bne.n	8009b68 <_free_r+0x70>
 8009b50:	6824      	ldr	r4, [r4, #0]
 8009b52:	4421      	add	r1, r4
 8009b54:	1854      	adds	r4, r2, r1
 8009b56:	42a3      	cmp	r3, r4
 8009b58:	6011      	str	r1, [r2, #0]
 8009b5a:	d1e0      	bne.n	8009b1e <_free_r+0x26>
 8009b5c:	681c      	ldr	r4, [r3, #0]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	6053      	str	r3, [r2, #4]
 8009b62:	4421      	add	r1, r4
 8009b64:	6011      	str	r1, [r2, #0]
 8009b66:	e7da      	b.n	8009b1e <_free_r+0x26>
 8009b68:	d902      	bls.n	8009b70 <_free_r+0x78>
 8009b6a:	230c      	movs	r3, #12
 8009b6c:	6003      	str	r3, [r0, #0]
 8009b6e:	e7d6      	b.n	8009b1e <_free_r+0x26>
 8009b70:	6825      	ldr	r5, [r4, #0]
 8009b72:	1961      	adds	r1, r4, r5
 8009b74:	428b      	cmp	r3, r1
 8009b76:	bf04      	itt	eq
 8009b78:	6819      	ldreq	r1, [r3, #0]
 8009b7a:	685b      	ldreq	r3, [r3, #4]
 8009b7c:	6063      	str	r3, [r4, #4]
 8009b7e:	bf04      	itt	eq
 8009b80:	1949      	addeq	r1, r1, r5
 8009b82:	6021      	streq	r1, [r4, #0]
 8009b84:	6054      	str	r4, [r2, #4]
 8009b86:	e7ca      	b.n	8009b1e <_free_r+0x26>
 8009b88:	b003      	add	sp, #12
 8009b8a:	bd30      	pop	{r4, r5, pc}
 8009b8c:	20004ca4 	.word	0x20004ca4

08009b90 <__sfputc_r>:
 8009b90:	6893      	ldr	r3, [r2, #8]
 8009b92:	3b01      	subs	r3, #1
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	b410      	push	{r4}
 8009b98:	6093      	str	r3, [r2, #8]
 8009b9a:	da08      	bge.n	8009bae <__sfputc_r+0x1e>
 8009b9c:	6994      	ldr	r4, [r2, #24]
 8009b9e:	42a3      	cmp	r3, r4
 8009ba0:	db01      	blt.n	8009ba6 <__sfputc_r+0x16>
 8009ba2:	290a      	cmp	r1, #10
 8009ba4:	d103      	bne.n	8009bae <__sfputc_r+0x1e>
 8009ba6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009baa:	f000 baf1 	b.w	800a190 <__swbuf_r>
 8009bae:	6813      	ldr	r3, [r2, #0]
 8009bb0:	1c58      	adds	r0, r3, #1
 8009bb2:	6010      	str	r0, [r2, #0]
 8009bb4:	7019      	strb	r1, [r3, #0]
 8009bb6:	4608      	mov	r0, r1
 8009bb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bbc:	4770      	bx	lr

08009bbe <__sfputs_r>:
 8009bbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bc0:	4606      	mov	r6, r0
 8009bc2:	460f      	mov	r7, r1
 8009bc4:	4614      	mov	r4, r2
 8009bc6:	18d5      	adds	r5, r2, r3
 8009bc8:	42ac      	cmp	r4, r5
 8009bca:	d101      	bne.n	8009bd0 <__sfputs_r+0x12>
 8009bcc:	2000      	movs	r0, #0
 8009bce:	e007      	b.n	8009be0 <__sfputs_r+0x22>
 8009bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bd4:	463a      	mov	r2, r7
 8009bd6:	4630      	mov	r0, r6
 8009bd8:	f7ff ffda 	bl	8009b90 <__sfputc_r>
 8009bdc:	1c43      	adds	r3, r0, #1
 8009bde:	d1f3      	bne.n	8009bc8 <__sfputs_r+0xa>
 8009be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009be4 <_vfiprintf_r>:
 8009be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be8:	460d      	mov	r5, r1
 8009bea:	b09d      	sub	sp, #116	; 0x74
 8009bec:	4614      	mov	r4, r2
 8009bee:	4698      	mov	r8, r3
 8009bf0:	4606      	mov	r6, r0
 8009bf2:	b118      	cbz	r0, 8009bfc <_vfiprintf_r+0x18>
 8009bf4:	6983      	ldr	r3, [r0, #24]
 8009bf6:	b90b      	cbnz	r3, 8009bfc <_vfiprintf_r+0x18>
 8009bf8:	f7ff fc36 	bl	8009468 <__sinit>
 8009bfc:	4b89      	ldr	r3, [pc, #548]	; (8009e24 <_vfiprintf_r+0x240>)
 8009bfe:	429d      	cmp	r5, r3
 8009c00:	d11b      	bne.n	8009c3a <_vfiprintf_r+0x56>
 8009c02:	6875      	ldr	r5, [r6, #4]
 8009c04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c06:	07d9      	lsls	r1, r3, #31
 8009c08:	d405      	bmi.n	8009c16 <_vfiprintf_r+0x32>
 8009c0a:	89ab      	ldrh	r3, [r5, #12]
 8009c0c:	059a      	lsls	r2, r3, #22
 8009c0e:	d402      	bmi.n	8009c16 <_vfiprintf_r+0x32>
 8009c10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c12:	f7ff fcec 	bl	80095ee <__retarget_lock_acquire_recursive>
 8009c16:	89ab      	ldrh	r3, [r5, #12]
 8009c18:	071b      	lsls	r3, r3, #28
 8009c1a:	d501      	bpl.n	8009c20 <_vfiprintf_r+0x3c>
 8009c1c:	692b      	ldr	r3, [r5, #16]
 8009c1e:	b9eb      	cbnz	r3, 8009c5c <_vfiprintf_r+0x78>
 8009c20:	4629      	mov	r1, r5
 8009c22:	4630      	mov	r0, r6
 8009c24:	f000 fb06 	bl	800a234 <__swsetup_r>
 8009c28:	b1c0      	cbz	r0, 8009c5c <_vfiprintf_r+0x78>
 8009c2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c2c:	07dc      	lsls	r4, r3, #31
 8009c2e:	d50e      	bpl.n	8009c4e <_vfiprintf_r+0x6a>
 8009c30:	f04f 30ff 	mov.w	r0, #4294967295
 8009c34:	b01d      	add	sp, #116	; 0x74
 8009c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c3a:	4b7b      	ldr	r3, [pc, #492]	; (8009e28 <_vfiprintf_r+0x244>)
 8009c3c:	429d      	cmp	r5, r3
 8009c3e:	d101      	bne.n	8009c44 <_vfiprintf_r+0x60>
 8009c40:	68b5      	ldr	r5, [r6, #8]
 8009c42:	e7df      	b.n	8009c04 <_vfiprintf_r+0x20>
 8009c44:	4b79      	ldr	r3, [pc, #484]	; (8009e2c <_vfiprintf_r+0x248>)
 8009c46:	429d      	cmp	r5, r3
 8009c48:	bf08      	it	eq
 8009c4a:	68f5      	ldreq	r5, [r6, #12]
 8009c4c:	e7da      	b.n	8009c04 <_vfiprintf_r+0x20>
 8009c4e:	89ab      	ldrh	r3, [r5, #12]
 8009c50:	0598      	lsls	r0, r3, #22
 8009c52:	d4ed      	bmi.n	8009c30 <_vfiprintf_r+0x4c>
 8009c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c56:	f7ff fccb 	bl	80095f0 <__retarget_lock_release_recursive>
 8009c5a:	e7e9      	b.n	8009c30 <_vfiprintf_r+0x4c>
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c60:	2320      	movs	r3, #32
 8009c62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c66:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c6a:	2330      	movs	r3, #48	; 0x30
 8009c6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009e30 <_vfiprintf_r+0x24c>
 8009c70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c74:	f04f 0901 	mov.w	r9, #1
 8009c78:	4623      	mov	r3, r4
 8009c7a:	469a      	mov	sl, r3
 8009c7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c80:	b10a      	cbz	r2, 8009c86 <_vfiprintf_r+0xa2>
 8009c82:	2a25      	cmp	r2, #37	; 0x25
 8009c84:	d1f9      	bne.n	8009c7a <_vfiprintf_r+0x96>
 8009c86:	ebba 0b04 	subs.w	fp, sl, r4
 8009c8a:	d00b      	beq.n	8009ca4 <_vfiprintf_r+0xc0>
 8009c8c:	465b      	mov	r3, fp
 8009c8e:	4622      	mov	r2, r4
 8009c90:	4629      	mov	r1, r5
 8009c92:	4630      	mov	r0, r6
 8009c94:	f7ff ff93 	bl	8009bbe <__sfputs_r>
 8009c98:	3001      	adds	r0, #1
 8009c9a:	f000 80aa 	beq.w	8009df2 <_vfiprintf_r+0x20e>
 8009c9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ca0:	445a      	add	r2, fp
 8009ca2:	9209      	str	r2, [sp, #36]	; 0x24
 8009ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	f000 80a2 	beq.w	8009df2 <_vfiprintf_r+0x20e>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8009cb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cb8:	f10a 0a01 	add.w	sl, sl, #1
 8009cbc:	9304      	str	r3, [sp, #16]
 8009cbe:	9307      	str	r3, [sp, #28]
 8009cc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cc4:	931a      	str	r3, [sp, #104]	; 0x68
 8009cc6:	4654      	mov	r4, sl
 8009cc8:	2205      	movs	r2, #5
 8009cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cce:	4858      	ldr	r0, [pc, #352]	; (8009e30 <_vfiprintf_r+0x24c>)
 8009cd0:	f7f6 fab6 	bl	8000240 <memchr>
 8009cd4:	9a04      	ldr	r2, [sp, #16]
 8009cd6:	b9d8      	cbnz	r0, 8009d10 <_vfiprintf_r+0x12c>
 8009cd8:	06d1      	lsls	r1, r2, #27
 8009cda:	bf44      	itt	mi
 8009cdc:	2320      	movmi	r3, #32
 8009cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ce2:	0713      	lsls	r3, r2, #28
 8009ce4:	bf44      	itt	mi
 8009ce6:	232b      	movmi	r3, #43	; 0x2b
 8009ce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cec:	f89a 3000 	ldrb.w	r3, [sl]
 8009cf0:	2b2a      	cmp	r3, #42	; 0x2a
 8009cf2:	d015      	beq.n	8009d20 <_vfiprintf_r+0x13c>
 8009cf4:	9a07      	ldr	r2, [sp, #28]
 8009cf6:	4654      	mov	r4, sl
 8009cf8:	2000      	movs	r0, #0
 8009cfa:	f04f 0c0a 	mov.w	ip, #10
 8009cfe:	4621      	mov	r1, r4
 8009d00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d04:	3b30      	subs	r3, #48	; 0x30
 8009d06:	2b09      	cmp	r3, #9
 8009d08:	d94e      	bls.n	8009da8 <_vfiprintf_r+0x1c4>
 8009d0a:	b1b0      	cbz	r0, 8009d3a <_vfiprintf_r+0x156>
 8009d0c:	9207      	str	r2, [sp, #28]
 8009d0e:	e014      	b.n	8009d3a <_vfiprintf_r+0x156>
 8009d10:	eba0 0308 	sub.w	r3, r0, r8
 8009d14:	fa09 f303 	lsl.w	r3, r9, r3
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	9304      	str	r3, [sp, #16]
 8009d1c:	46a2      	mov	sl, r4
 8009d1e:	e7d2      	b.n	8009cc6 <_vfiprintf_r+0xe2>
 8009d20:	9b03      	ldr	r3, [sp, #12]
 8009d22:	1d19      	adds	r1, r3, #4
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	9103      	str	r1, [sp, #12]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	bfbb      	ittet	lt
 8009d2c:	425b      	neglt	r3, r3
 8009d2e:	f042 0202 	orrlt.w	r2, r2, #2
 8009d32:	9307      	strge	r3, [sp, #28]
 8009d34:	9307      	strlt	r3, [sp, #28]
 8009d36:	bfb8      	it	lt
 8009d38:	9204      	strlt	r2, [sp, #16]
 8009d3a:	7823      	ldrb	r3, [r4, #0]
 8009d3c:	2b2e      	cmp	r3, #46	; 0x2e
 8009d3e:	d10c      	bne.n	8009d5a <_vfiprintf_r+0x176>
 8009d40:	7863      	ldrb	r3, [r4, #1]
 8009d42:	2b2a      	cmp	r3, #42	; 0x2a
 8009d44:	d135      	bne.n	8009db2 <_vfiprintf_r+0x1ce>
 8009d46:	9b03      	ldr	r3, [sp, #12]
 8009d48:	1d1a      	adds	r2, r3, #4
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	9203      	str	r2, [sp, #12]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	bfb8      	it	lt
 8009d52:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d56:	3402      	adds	r4, #2
 8009d58:	9305      	str	r3, [sp, #20]
 8009d5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009e40 <_vfiprintf_r+0x25c>
 8009d5e:	7821      	ldrb	r1, [r4, #0]
 8009d60:	2203      	movs	r2, #3
 8009d62:	4650      	mov	r0, sl
 8009d64:	f7f6 fa6c 	bl	8000240 <memchr>
 8009d68:	b140      	cbz	r0, 8009d7c <_vfiprintf_r+0x198>
 8009d6a:	2340      	movs	r3, #64	; 0x40
 8009d6c:	eba0 000a 	sub.w	r0, r0, sl
 8009d70:	fa03 f000 	lsl.w	r0, r3, r0
 8009d74:	9b04      	ldr	r3, [sp, #16]
 8009d76:	4303      	orrs	r3, r0
 8009d78:	3401      	adds	r4, #1
 8009d7a:	9304      	str	r3, [sp, #16]
 8009d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d80:	482c      	ldr	r0, [pc, #176]	; (8009e34 <_vfiprintf_r+0x250>)
 8009d82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d86:	2206      	movs	r2, #6
 8009d88:	f7f6 fa5a 	bl	8000240 <memchr>
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	d03f      	beq.n	8009e10 <_vfiprintf_r+0x22c>
 8009d90:	4b29      	ldr	r3, [pc, #164]	; (8009e38 <_vfiprintf_r+0x254>)
 8009d92:	bb1b      	cbnz	r3, 8009ddc <_vfiprintf_r+0x1f8>
 8009d94:	9b03      	ldr	r3, [sp, #12]
 8009d96:	3307      	adds	r3, #7
 8009d98:	f023 0307 	bic.w	r3, r3, #7
 8009d9c:	3308      	adds	r3, #8
 8009d9e:	9303      	str	r3, [sp, #12]
 8009da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009da2:	443b      	add	r3, r7
 8009da4:	9309      	str	r3, [sp, #36]	; 0x24
 8009da6:	e767      	b.n	8009c78 <_vfiprintf_r+0x94>
 8009da8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dac:	460c      	mov	r4, r1
 8009dae:	2001      	movs	r0, #1
 8009db0:	e7a5      	b.n	8009cfe <_vfiprintf_r+0x11a>
 8009db2:	2300      	movs	r3, #0
 8009db4:	3401      	adds	r4, #1
 8009db6:	9305      	str	r3, [sp, #20]
 8009db8:	4619      	mov	r1, r3
 8009dba:	f04f 0c0a 	mov.w	ip, #10
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dc4:	3a30      	subs	r2, #48	; 0x30
 8009dc6:	2a09      	cmp	r2, #9
 8009dc8:	d903      	bls.n	8009dd2 <_vfiprintf_r+0x1ee>
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d0c5      	beq.n	8009d5a <_vfiprintf_r+0x176>
 8009dce:	9105      	str	r1, [sp, #20]
 8009dd0:	e7c3      	b.n	8009d5a <_vfiprintf_r+0x176>
 8009dd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	2301      	movs	r3, #1
 8009dda:	e7f0      	b.n	8009dbe <_vfiprintf_r+0x1da>
 8009ddc:	ab03      	add	r3, sp, #12
 8009dde:	9300      	str	r3, [sp, #0]
 8009de0:	462a      	mov	r2, r5
 8009de2:	4b16      	ldr	r3, [pc, #88]	; (8009e3c <_vfiprintf_r+0x258>)
 8009de4:	a904      	add	r1, sp, #16
 8009de6:	4630      	mov	r0, r6
 8009de8:	f3af 8000 	nop.w
 8009dec:	4607      	mov	r7, r0
 8009dee:	1c78      	adds	r0, r7, #1
 8009df0:	d1d6      	bne.n	8009da0 <_vfiprintf_r+0x1bc>
 8009df2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009df4:	07d9      	lsls	r1, r3, #31
 8009df6:	d405      	bmi.n	8009e04 <_vfiprintf_r+0x220>
 8009df8:	89ab      	ldrh	r3, [r5, #12]
 8009dfa:	059a      	lsls	r2, r3, #22
 8009dfc:	d402      	bmi.n	8009e04 <_vfiprintf_r+0x220>
 8009dfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e00:	f7ff fbf6 	bl	80095f0 <__retarget_lock_release_recursive>
 8009e04:	89ab      	ldrh	r3, [r5, #12]
 8009e06:	065b      	lsls	r3, r3, #25
 8009e08:	f53f af12 	bmi.w	8009c30 <_vfiprintf_r+0x4c>
 8009e0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e0e:	e711      	b.n	8009c34 <_vfiprintf_r+0x50>
 8009e10:	ab03      	add	r3, sp, #12
 8009e12:	9300      	str	r3, [sp, #0]
 8009e14:	462a      	mov	r2, r5
 8009e16:	4b09      	ldr	r3, [pc, #36]	; (8009e3c <_vfiprintf_r+0x258>)
 8009e18:	a904      	add	r1, sp, #16
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	f000 f880 	bl	8009f20 <_printf_i>
 8009e20:	e7e4      	b.n	8009dec <_vfiprintf_r+0x208>
 8009e22:	bf00      	nop
 8009e24:	0800a5c4 	.word	0x0800a5c4
 8009e28:	0800a5e4 	.word	0x0800a5e4
 8009e2c:	0800a5a4 	.word	0x0800a5a4
 8009e30:	0800a608 	.word	0x0800a608
 8009e34:	0800a612 	.word	0x0800a612
 8009e38:	00000000 	.word	0x00000000
 8009e3c:	08009bbf 	.word	0x08009bbf
 8009e40:	0800a60e 	.word	0x0800a60e

08009e44 <_printf_common>:
 8009e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e48:	4616      	mov	r6, r2
 8009e4a:	4699      	mov	r9, r3
 8009e4c:	688a      	ldr	r2, [r1, #8]
 8009e4e:	690b      	ldr	r3, [r1, #16]
 8009e50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e54:	4293      	cmp	r3, r2
 8009e56:	bfb8      	it	lt
 8009e58:	4613      	movlt	r3, r2
 8009e5a:	6033      	str	r3, [r6, #0]
 8009e5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e60:	4607      	mov	r7, r0
 8009e62:	460c      	mov	r4, r1
 8009e64:	b10a      	cbz	r2, 8009e6a <_printf_common+0x26>
 8009e66:	3301      	adds	r3, #1
 8009e68:	6033      	str	r3, [r6, #0]
 8009e6a:	6823      	ldr	r3, [r4, #0]
 8009e6c:	0699      	lsls	r1, r3, #26
 8009e6e:	bf42      	ittt	mi
 8009e70:	6833      	ldrmi	r3, [r6, #0]
 8009e72:	3302      	addmi	r3, #2
 8009e74:	6033      	strmi	r3, [r6, #0]
 8009e76:	6825      	ldr	r5, [r4, #0]
 8009e78:	f015 0506 	ands.w	r5, r5, #6
 8009e7c:	d106      	bne.n	8009e8c <_printf_common+0x48>
 8009e7e:	f104 0a19 	add.w	sl, r4, #25
 8009e82:	68e3      	ldr	r3, [r4, #12]
 8009e84:	6832      	ldr	r2, [r6, #0]
 8009e86:	1a9b      	subs	r3, r3, r2
 8009e88:	42ab      	cmp	r3, r5
 8009e8a:	dc26      	bgt.n	8009eda <_printf_common+0x96>
 8009e8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e90:	1e13      	subs	r3, r2, #0
 8009e92:	6822      	ldr	r2, [r4, #0]
 8009e94:	bf18      	it	ne
 8009e96:	2301      	movne	r3, #1
 8009e98:	0692      	lsls	r2, r2, #26
 8009e9a:	d42b      	bmi.n	8009ef4 <_printf_common+0xb0>
 8009e9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ea0:	4649      	mov	r1, r9
 8009ea2:	4638      	mov	r0, r7
 8009ea4:	47c0      	blx	r8
 8009ea6:	3001      	adds	r0, #1
 8009ea8:	d01e      	beq.n	8009ee8 <_printf_common+0xa4>
 8009eaa:	6823      	ldr	r3, [r4, #0]
 8009eac:	68e5      	ldr	r5, [r4, #12]
 8009eae:	6832      	ldr	r2, [r6, #0]
 8009eb0:	f003 0306 	and.w	r3, r3, #6
 8009eb4:	2b04      	cmp	r3, #4
 8009eb6:	bf08      	it	eq
 8009eb8:	1aad      	subeq	r5, r5, r2
 8009eba:	68a3      	ldr	r3, [r4, #8]
 8009ebc:	6922      	ldr	r2, [r4, #16]
 8009ebe:	bf0c      	ite	eq
 8009ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ec4:	2500      	movne	r5, #0
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	bfc4      	itt	gt
 8009eca:	1a9b      	subgt	r3, r3, r2
 8009ecc:	18ed      	addgt	r5, r5, r3
 8009ece:	2600      	movs	r6, #0
 8009ed0:	341a      	adds	r4, #26
 8009ed2:	42b5      	cmp	r5, r6
 8009ed4:	d11a      	bne.n	8009f0c <_printf_common+0xc8>
 8009ed6:	2000      	movs	r0, #0
 8009ed8:	e008      	b.n	8009eec <_printf_common+0xa8>
 8009eda:	2301      	movs	r3, #1
 8009edc:	4652      	mov	r2, sl
 8009ede:	4649      	mov	r1, r9
 8009ee0:	4638      	mov	r0, r7
 8009ee2:	47c0      	blx	r8
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	d103      	bne.n	8009ef0 <_printf_common+0xac>
 8009ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8009eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ef0:	3501      	adds	r5, #1
 8009ef2:	e7c6      	b.n	8009e82 <_printf_common+0x3e>
 8009ef4:	18e1      	adds	r1, r4, r3
 8009ef6:	1c5a      	adds	r2, r3, #1
 8009ef8:	2030      	movs	r0, #48	; 0x30
 8009efa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009efe:	4422      	add	r2, r4
 8009f00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f08:	3302      	adds	r3, #2
 8009f0a:	e7c7      	b.n	8009e9c <_printf_common+0x58>
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	4622      	mov	r2, r4
 8009f10:	4649      	mov	r1, r9
 8009f12:	4638      	mov	r0, r7
 8009f14:	47c0      	blx	r8
 8009f16:	3001      	adds	r0, #1
 8009f18:	d0e6      	beq.n	8009ee8 <_printf_common+0xa4>
 8009f1a:	3601      	adds	r6, #1
 8009f1c:	e7d9      	b.n	8009ed2 <_printf_common+0x8e>
	...

08009f20 <_printf_i>:
 8009f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f24:	7e0f      	ldrb	r7, [r1, #24]
 8009f26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f28:	2f78      	cmp	r7, #120	; 0x78
 8009f2a:	4691      	mov	r9, r2
 8009f2c:	4680      	mov	r8, r0
 8009f2e:	460c      	mov	r4, r1
 8009f30:	469a      	mov	sl, r3
 8009f32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f36:	d807      	bhi.n	8009f48 <_printf_i+0x28>
 8009f38:	2f62      	cmp	r7, #98	; 0x62
 8009f3a:	d80a      	bhi.n	8009f52 <_printf_i+0x32>
 8009f3c:	2f00      	cmp	r7, #0
 8009f3e:	f000 80d8 	beq.w	800a0f2 <_printf_i+0x1d2>
 8009f42:	2f58      	cmp	r7, #88	; 0x58
 8009f44:	f000 80a3 	beq.w	800a08e <_printf_i+0x16e>
 8009f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f50:	e03a      	b.n	8009fc8 <_printf_i+0xa8>
 8009f52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f56:	2b15      	cmp	r3, #21
 8009f58:	d8f6      	bhi.n	8009f48 <_printf_i+0x28>
 8009f5a:	a101      	add	r1, pc, #4	; (adr r1, 8009f60 <_printf_i+0x40>)
 8009f5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f60:	08009fb9 	.word	0x08009fb9
 8009f64:	08009fcd 	.word	0x08009fcd
 8009f68:	08009f49 	.word	0x08009f49
 8009f6c:	08009f49 	.word	0x08009f49
 8009f70:	08009f49 	.word	0x08009f49
 8009f74:	08009f49 	.word	0x08009f49
 8009f78:	08009fcd 	.word	0x08009fcd
 8009f7c:	08009f49 	.word	0x08009f49
 8009f80:	08009f49 	.word	0x08009f49
 8009f84:	08009f49 	.word	0x08009f49
 8009f88:	08009f49 	.word	0x08009f49
 8009f8c:	0800a0d9 	.word	0x0800a0d9
 8009f90:	08009ffd 	.word	0x08009ffd
 8009f94:	0800a0bb 	.word	0x0800a0bb
 8009f98:	08009f49 	.word	0x08009f49
 8009f9c:	08009f49 	.word	0x08009f49
 8009fa0:	0800a0fb 	.word	0x0800a0fb
 8009fa4:	08009f49 	.word	0x08009f49
 8009fa8:	08009ffd 	.word	0x08009ffd
 8009fac:	08009f49 	.word	0x08009f49
 8009fb0:	08009f49 	.word	0x08009f49
 8009fb4:	0800a0c3 	.word	0x0800a0c3
 8009fb8:	682b      	ldr	r3, [r5, #0]
 8009fba:	1d1a      	adds	r2, r3, #4
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	602a      	str	r2, [r5, #0]
 8009fc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009fc8:	2301      	movs	r3, #1
 8009fca:	e0a3      	b.n	800a114 <_printf_i+0x1f4>
 8009fcc:	6820      	ldr	r0, [r4, #0]
 8009fce:	6829      	ldr	r1, [r5, #0]
 8009fd0:	0606      	lsls	r6, r0, #24
 8009fd2:	f101 0304 	add.w	r3, r1, #4
 8009fd6:	d50a      	bpl.n	8009fee <_printf_i+0xce>
 8009fd8:	680e      	ldr	r6, [r1, #0]
 8009fda:	602b      	str	r3, [r5, #0]
 8009fdc:	2e00      	cmp	r6, #0
 8009fde:	da03      	bge.n	8009fe8 <_printf_i+0xc8>
 8009fe0:	232d      	movs	r3, #45	; 0x2d
 8009fe2:	4276      	negs	r6, r6
 8009fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fe8:	485e      	ldr	r0, [pc, #376]	; (800a164 <_printf_i+0x244>)
 8009fea:	230a      	movs	r3, #10
 8009fec:	e019      	b.n	800a022 <_printf_i+0x102>
 8009fee:	680e      	ldr	r6, [r1, #0]
 8009ff0:	602b      	str	r3, [r5, #0]
 8009ff2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ff6:	bf18      	it	ne
 8009ff8:	b236      	sxthne	r6, r6
 8009ffa:	e7ef      	b.n	8009fdc <_printf_i+0xbc>
 8009ffc:	682b      	ldr	r3, [r5, #0]
 8009ffe:	6820      	ldr	r0, [r4, #0]
 800a000:	1d19      	adds	r1, r3, #4
 800a002:	6029      	str	r1, [r5, #0]
 800a004:	0601      	lsls	r1, r0, #24
 800a006:	d501      	bpl.n	800a00c <_printf_i+0xec>
 800a008:	681e      	ldr	r6, [r3, #0]
 800a00a:	e002      	b.n	800a012 <_printf_i+0xf2>
 800a00c:	0646      	lsls	r6, r0, #25
 800a00e:	d5fb      	bpl.n	800a008 <_printf_i+0xe8>
 800a010:	881e      	ldrh	r6, [r3, #0]
 800a012:	4854      	ldr	r0, [pc, #336]	; (800a164 <_printf_i+0x244>)
 800a014:	2f6f      	cmp	r7, #111	; 0x6f
 800a016:	bf0c      	ite	eq
 800a018:	2308      	moveq	r3, #8
 800a01a:	230a      	movne	r3, #10
 800a01c:	2100      	movs	r1, #0
 800a01e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a022:	6865      	ldr	r5, [r4, #4]
 800a024:	60a5      	str	r5, [r4, #8]
 800a026:	2d00      	cmp	r5, #0
 800a028:	bfa2      	ittt	ge
 800a02a:	6821      	ldrge	r1, [r4, #0]
 800a02c:	f021 0104 	bicge.w	r1, r1, #4
 800a030:	6021      	strge	r1, [r4, #0]
 800a032:	b90e      	cbnz	r6, 800a038 <_printf_i+0x118>
 800a034:	2d00      	cmp	r5, #0
 800a036:	d04d      	beq.n	800a0d4 <_printf_i+0x1b4>
 800a038:	4615      	mov	r5, r2
 800a03a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a03e:	fb03 6711 	mls	r7, r3, r1, r6
 800a042:	5dc7      	ldrb	r7, [r0, r7]
 800a044:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a048:	4637      	mov	r7, r6
 800a04a:	42bb      	cmp	r3, r7
 800a04c:	460e      	mov	r6, r1
 800a04e:	d9f4      	bls.n	800a03a <_printf_i+0x11a>
 800a050:	2b08      	cmp	r3, #8
 800a052:	d10b      	bne.n	800a06c <_printf_i+0x14c>
 800a054:	6823      	ldr	r3, [r4, #0]
 800a056:	07de      	lsls	r6, r3, #31
 800a058:	d508      	bpl.n	800a06c <_printf_i+0x14c>
 800a05a:	6923      	ldr	r3, [r4, #16]
 800a05c:	6861      	ldr	r1, [r4, #4]
 800a05e:	4299      	cmp	r1, r3
 800a060:	bfde      	ittt	le
 800a062:	2330      	movle	r3, #48	; 0x30
 800a064:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a068:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a06c:	1b52      	subs	r2, r2, r5
 800a06e:	6122      	str	r2, [r4, #16]
 800a070:	f8cd a000 	str.w	sl, [sp]
 800a074:	464b      	mov	r3, r9
 800a076:	aa03      	add	r2, sp, #12
 800a078:	4621      	mov	r1, r4
 800a07a:	4640      	mov	r0, r8
 800a07c:	f7ff fee2 	bl	8009e44 <_printf_common>
 800a080:	3001      	adds	r0, #1
 800a082:	d14c      	bne.n	800a11e <_printf_i+0x1fe>
 800a084:	f04f 30ff 	mov.w	r0, #4294967295
 800a088:	b004      	add	sp, #16
 800a08a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a08e:	4835      	ldr	r0, [pc, #212]	; (800a164 <_printf_i+0x244>)
 800a090:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a094:	6829      	ldr	r1, [r5, #0]
 800a096:	6823      	ldr	r3, [r4, #0]
 800a098:	f851 6b04 	ldr.w	r6, [r1], #4
 800a09c:	6029      	str	r1, [r5, #0]
 800a09e:	061d      	lsls	r5, r3, #24
 800a0a0:	d514      	bpl.n	800a0cc <_printf_i+0x1ac>
 800a0a2:	07df      	lsls	r7, r3, #31
 800a0a4:	bf44      	itt	mi
 800a0a6:	f043 0320 	orrmi.w	r3, r3, #32
 800a0aa:	6023      	strmi	r3, [r4, #0]
 800a0ac:	b91e      	cbnz	r6, 800a0b6 <_printf_i+0x196>
 800a0ae:	6823      	ldr	r3, [r4, #0]
 800a0b0:	f023 0320 	bic.w	r3, r3, #32
 800a0b4:	6023      	str	r3, [r4, #0]
 800a0b6:	2310      	movs	r3, #16
 800a0b8:	e7b0      	b.n	800a01c <_printf_i+0xfc>
 800a0ba:	6823      	ldr	r3, [r4, #0]
 800a0bc:	f043 0320 	orr.w	r3, r3, #32
 800a0c0:	6023      	str	r3, [r4, #0]
 800a0c2:	2378      	movs	r3, #120	; 0x78
 800a0c4:	4828      	ldr	r0, [pc, #160]	; (800a168 <_printf_i+0x248>)
 800a0c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a0ca:	e7e3      	b.n	800a094 <_printf_i+0x174>
 800a0cc:	0659      	lsls	r1, r3, #25
 800a0ce:	bf48      	it	mi
 800a0d0:	b2b6      	uxthmi	r6, r6
 800a0d2:	e7e6      	b.n	800a0a2 <_printf_i+0x182>
 800a0d4:	4615      	mov	r5, r2
 800a0d6:	e7bb      	b.n	800a050 <_printf_i+0x130>
 800a0d8:	682b      	ldr	r3, [r5, #0]
 800a0da:	6826      	ldr	r6, [r4, #0]
 800a0dc:	6961      	ldr	r1, [r4, #20]
 800a0de:	1d18      	adds	r0, r3, #4
 800a0e0:	6028      	str	r0, [r5, #0]
 800a0e2:	0635      	lsls	r5, r6, #24
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	d501      	bpl.n	800a0ec <_printf_i+0x1cc>
 800a0e8:	6019      	str	r1, [r3, #0]
 800a0ea:	e002      	b.n	800a0f2 <_printf_i+0x1d2>
 800a0ec:	0670      	lsls	r0, r6, #25
 800a0ee:	d5fb      	bpl.n	800a0e8 <_printf_i+0x1c8>
 800a0f0:	8019      	strh	r1, [r3, #0]
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	6123      	str	r3, [r4, #16]
 800a0f6:	4615      	mov	r5, r2
 800a0f8:	e7ba      	b.n	800a070 <_printf_i+0x150>
 800a0fa:	682b      	ldr	r3, [r5, #0]
 800a0fc:	1d1a      	adds	r2, r3, #4
 800a0fe:	602a      	str	r2, [r5, #0]
 800a100:	681d      	ldr	r5, [r3, #0]
 800a102:	6862      	ldr	r2, [r4, #4]
 800a104:	2100      	movs	r1, #0
 800a106:	4628      	mov	r0, r5
 800a108:	f7f6 f89a 	bl	8000240 <memchr>
 800a10c:	b108      	cbz	r0, 800a112 <_printf_i+0x1f2>
 800a10e:	1b40      	subs	r0, r0, r5
 800a110:	6060      	str	r0, [r4, #4]
 800a112:	6863      	ldr	r3, [r4, #4]
 800a114:	6123      	str	r3, [r4, #16]
 800a116:	2300      	movs	r3, #0
 800a118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a11c:	e7a8      	b.n	800a070 <_printf_i+0x150>
 800a11e:	6923      	ldr	r3, [r4, #16]
 800a120:	462a      	mov	r2, r5
 800a122:	4649      	mov	r1, r9
 800a124:	4640      	mov	r0, r8
 800a126:	47d0      	blx	sl
 800a128:	3001      	adds	r0, #1
 800a12a:	d0ab      	beq.n	800a084 <_printf_i+0x164>
 800a12c:	6823      	ldr	r3, [r4, #0]
 800a12e:	079b      	lsls	r3, r3, #30
 800a130:	d413      	bmi.n	800a15a <_printf_i+0x23a>
 800a132:	68e0      	ldr	r0, [r4, #12]
 800a134:	9b03      	ldr	r3, [sp, #12]
 800a136:	4298      	cmp	r0, r3
 800a138:	bfb8      	it	lt
 800a13a:	4618      	movlt	r0, r3
 800a13c:	e7a4      	b.n	800a088 <_printf_i+0x168>
 800a13e:	2301      	movs	r3, #1
 800a140:	4632      	mov	r2, r6
 800a142:	4649      	mov	r1, r9
 800a144:	4640      	mov	r0, r8
 800a146:	47d0      	blx	sl
 800a148:	3001      	adds	r0, #1
 800a14a:	d09b      	beq.n	800a084 <_printf_i+0x164>
 800a14c:	3501      	adds	r5, #1
 800a14e:	68e3      	ldr	r3, [r4, #12]
 800a150:	9903      	ldr	r1, [sp, #12]
 800a152:	1a5b      	subs	r3, r3, r1
 800a154:	42ab      	cmp	r3, r5
 800a156:	dcf2      	bgt.n	800a13e <_printf_i+0x21e>
 800a158:	e7eb      	b.n	800a132 <_printf_i+0x212>
 800a15a:	2500      	movs	r5, #0
 800a15c:	f104 0619 	add.w	r6, r4, #25
 800a160:	e7f5      	b.n	800a14e <_printf_i+0x22e>
 800a162:	bf00      	nop
 800a164:	0800a619 	.word	0x0800a619
 800a168:	0800a62a 	.word	0x0800a62a

0800a16c <_read_r>:
 800a16c:	b538      	push	{r3, r4, r5, lr}
 800a16e:	4d07      	ldr	r5, [pc, #28]	; (800a18c <_read_r+0x20>)
 800a170:	4604      	mov	r4, r0
 800a172:	4608      	mov	r0, r1
 800a174:	4611      	mov	r1, r2
 800a176:	2200      	movs	r2, #0
 800a178:	602a      	str	r2, [r5, #0]
 800a17a:	461a      	mov	r2, r3
 800a17c:	f7f8 f8b2 	bl	80022e4 <_read>
 800a180:	1c43      	adds	r3, r0, #1
 800a182:	d102      	bne.n	800a18a <_read_r+0x1e>
 800a184:	682b      	ldr	r3, [r5, #0]
 800a186:	b103      	cbz	r3, 800a18a <_read_r+0x1e>
 800a188:	6023      	str	r3, [r4, #0]
 800a18a:	bd38      	pop	{r3, r4, r5, pc}
 800a18c:	20004cac 	.word	0x20004cac

0800a190 <__swbuf_r>:
 800a190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a192:	460e      	mov	r6, r1
 800a194:	4614      	mov	r4, r2
 800a196:	4605      	mov	r5, r0
 800a198:	b118      	cbz	r0, 800a1a2 <__swbuf_r+0x12>
 800a19a:	6983      	ldr	r3, [r0, #24]
 800a19c:	b90b      	cbnz	r3, 800a1a2 <__swbuf_r+0x12>
 800a19e:	f7ff f963 	bl	8009468 <__sinit>
 800a1a2:	4b21      	ldr	r3, [pc, #132]	; (800a228 <__swbuf_r+0x98>)
 800a1a4:	429c      	cmp	r4, r3
 800a1a6:	d12b      	bne.n	800a200 <__swbuf_r+0x70>
 800a1a8:	686c      	ldr	r4, [r5, #4]
 800a1aa:	69a3      	ldr	r3, [r4, #24]
 800a1ac:	60a3      	str	r3, [r4, #8]
 800a1ae:	89a3      	ldrh	r3, [r4, #12]
 800a1b0:	071a      	lsls	r2, r3, #28
 800a1b2:	d52f      	bpl.n	800a214 <__swbuf_r+0x84>
 800a1b4:	6923      	ldr	r3, [r4, #16]
 800a1b6:	b36b      	cbz	r3, 800a214 <__swbuf_r+0x84>
 800a1b8:	6923      	ldr	r3, [r4, #16]
 800a1ba:	6820      	ldr	r0, [r4, #0]
 800a1bc:	1ac0      	subs	r0, r0, r3
 800a1be:	6963      	ldr	r3, [r4, #20]
 800a1c0:	b2f6      	uxtb	r6, r6
 800a1c2:	4283      	cmp	r3, r0
 800a1c4:	4637      	mov	r7, r6
 800a1c6:	dc04      	bgt.n	800a1d2 <__swbuf_r+0x42>
 800a1c8:	4621      	mov	r1, r4
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	f7ff fc3a 	bl	8009a44 <_fflush_r>
 800a1d0:	bb30      	cbnz	r0, 800a220 <__swbuf_r+0x90>
 800a1d2:	68a3      	ldr	r3, [r4, #8]
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	60a3      	str	r3, [r4, #8]
 800a1d8:	6823      	ldr	r3, [r4, #0]
 800a1da:	1c5a      	adds	r2, r3, #1
 800a1dc:	6022      	str	r2, [r4, #0]
 800a1de:	701e      	strb	r6, [r3, #0]
 800a1e0:	6963      	ldr	r3, [r4, #20]
 800a1e2:	3001      	adds	r0, #1
 800a1e4:	4283      	cmp	r3, r0
 800a1e6:	d004      	beq.n	800a1f2 <__swbuf_r+0x62>
 800a1e8:	89a3      	ldrh	r3, [r4, #12]
 800a1ea:	07db      	lsls	r3, r3, #31
 800a1ec:	d506      	bpl.n	800a1fc <__swbuf_r+0x6c>
 800a1ee:	2e0a      	cmp	r6, #10
 800a1f0:	d104      	bne.n	800a1fc <__swbuf_r+0x6c>
 800a1f2:	4621      	mov	r1, r4
 800a1f4:	4628      	mov	r0, r5
 800a1f6:	f7ff fc25 	bl	8009a44 <_fflush_r>
 800a1fa:	b988      	cbnz	r0, 800a220 <__swbuf_r+0x90>
 800a1fc:	4638      	mov	r0, r7
 800a1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a200:	4b0a      	ldr	r3, [pc, #40]	; (800a22c <__swbuf_r+0x9c>)
 800a202:	429c      	cmp	r4, r3
 800a204:	d101      	bne.n	800a20a <__swbuf_r+0x7a>
 800a206:	68ac      	ldr	r4, [r5, #8]
 800a208:	e7cf      	b.n	800a1aa <__swbuf_r+0x1a>
 800a20a:	4b09      	ldr	r3, [pc, #36]	; (800a230 <__swbuf_r+0xa0>)
 800a20c:	429c      	cmp	r4, r3
 800a20e:	bf08      	it	eq
 800a210:	68ec      	ldreq	r4, [r5, #12]
 800a212:	e7ca      	b.n	800a1aa <__swbuf_r+0x1a>
 800a214:	4621      	mov	r1, r4
 800a216:	4628      	mov	r0, r5
 800a218:	f000 f80c 	bl	800a234 <__swsetup_r>
 800a21c:	2800      	cmp	r0, #0
 800a21e:	d0cb      	beq.n	800a1b8 <__swbuf_r+0x28>
 800a220:	f04f 37ff 	mov.w	r7, #4294967295
 800a224:	e7ea      	b.n	800a1fc <__swbuf_r+0x6c>
 800a226:	bf00      	nop
 800a228:	0800a5c4 	.word	0x0800a5c4
 800a22c:	0800a5e4 	.word	0x0800a5e4
 800a230:	0800a5a4 	.word	0x0800a5a4

0800a234 <__swsetup_r>:
 800a234:	4b32      	ldr	r3, [pc, #200]	; (800a300 <__swsetup_r+0xcc>)
 800a236:	b570      	push	{r4, r5, r6, lr}
 800a238:	681d      	ldr	r5, [r3, #0]
 800a23a:	4606      	mov	r6, r0
 800a23c:	460c      	mov	r4, r1
 800a23e:	b125      	cbz	r5, 800a24a <__swsetup_r+0x16>
 800a240:	69ab      	ldr	r3, [r5, #24]
 800a242:	b913      	cbnz	r3, 800a24a <__swsetup_r+0x16>
 800a244:	4628      	mov	r0, r5
 800a246:	f7ff f90f 	bl	8009468 <__sinit>
 800a24a:	4b2e      	ldr	r3, [pc, #184]	; (800a304 <__swsetup_r+0xd0>)
 800a24c:	429c      	cmp	r4, r3
 800a24e:	d10f      	bne.n	800a270 <__swsetup_r+0x3c>
 800a250:	686c      	ldr	r4, [r5, #4]
 800a252:	89a3      	ldrh	r3, [r4, #12]
 800a254:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a258:	0719      	lsls	r1, r3, #28
 800a25a:	d42c      	bmi.n	800a2b6 <__swsetup_r+0x82>
 800a25c:	06dd      	lsls	r5, r3, #27
 800a25e:	d411      	bmi.n	800a284 <__swsetup_r+0x50>
 800a260:	2309      	movs	r3, #9
 800a262:	6033      	str	r3, [r6, #0]
 800a264:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a268:	81a3      	strh	r3, [r4, #12]
 800a26a:	f04f 30ff 	mov.w	r0, #4294967295
 800a26e:	e03e      	b.n	800a2ee <__swsetup_r+0xba>
 800a270:	4b25      	ldr	r3, [pc, #148]	; (800a308 <__swsetup_r+0xd4>)
 800a272:	429c      	cmp	r4, r3
 800a274:	d101      	bne.n	800a27a <__swsetup_r+0x46>
 800a276:	68ac      	ldr	r4, [r5, #8]
 800a278:	e7eb      	b.n	800a252 <__swsetup_r+0x1e>
 800a27a:	4b24      	ldr	r3, [pc, #144]	; (800a30c <__swsetup_r+0xd8>)
 800a27c:	429c      	cmp	r4, r3
 800a27e:	bf08      	it	eq
 800a280:	68ec      	ldreq	r4, [r5, #12]
 800a282:	e7e6      	b.n	800a252 <__swsetup_r+0x1e>
 800a284:	0758      	lsls	r0, r3, #29
 800a286:	d512      	bpl.n	800a2ae <__swsetup_r+0x7a>
 800a288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a28a:	b141      	cbz	r1, 800a29e <__swsetup_r+0x6a>
 800a28c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a290:	4299      	cmp	r1, r3
 800a292:	d002      	beq.n	800a29a <__swsetup_r+0x66>
 800a294:	4630      	mov	r0, r6
 800a296:	f7ff fc2f 	bl	8009af8 <_free_r>
 800a29a:	2300      	movs	r3, #0
 800a29c:	6363      	str	r3, [r4, #52]	; 0x34
 800a29e:	89a3      	ldrh	r3, [r4, #12]
 800a2a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2a4:	81a3      	strh	r3, [r4, #12]
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	6063      	str	r3, [r4, #4]
 800a2aa:	6923      	ldr	r3, [r4, #16]
 800a2ac:	6023      	str	r3, [r4, #0]
 800a2ae:	89a3      	ldrh	r3, [r4, #12]
 800a2b0:	f043 0308 	orr.w	r3, r3, #8
 800a2b4:	81a3      	strh	r3, [r4, #12]
 800a2b6:	6923      	ldr	r3, [r4, #16]
 800a2b8:	b94b      	cbnz	r3, 800a2ce <__swsetup_r+0x9a>
 800a2ba:	89a3      	ldrh	r3, [r4, #12]
 800a2bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2c4:	d003      	beq.n	800a2ce <__swsetup_r+0x9a>
 800a2c6:	4621      	mov	r1, r4
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	f000 f847 	bl	800a35c <__smakebuf_r>
 800a2ce:	89a0      	ldrh	r0, [r4, #12]
 800a2d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2d4:	f010 0301 	ands.w	r3, r0, #1
 800a2d8:	d00a      	beq.n	800a2f0 <__swsetup_r+0xbc>
 800a2da:	2300      	movs	r3, #0
 800a2dc:	60a3      	str	r3, [r4, #8]
 800a2de:	6963      	ldr	r3, [r4, #20]
 800a2e0:	425b      	negs	r3, r3
 800a2e2:	61a3      	str	r3, [r4, #24]
 800a2e4:	6923      	ldr	r3, [r4, #16]
 800a2e6:	b943      	cbnz	r3, 800a2fa <__swsetup_r+0xc6>
 800a2e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a2ec:	d1ba      	bne.n	800a264 <__swsetup_r+0x30>
 800a2ee:	bd70      	pop	{r4, r5, r6, pc}
 800a2f0:	0781      	lsls	r1, r0, #30
 800a2f2:	bf58      	it	pl
 800a2f4:	6963      	ldrpl	r3, [r4, #20]
 800a2f6:	60a3      	str	r3, [r4, #8]
 800a2f8:	e7f4      	b.n	800a2e4 <__swsetup_r+0xb0>
 800a2fa:	2000      	movs	r0, #0
 800a2fc:	e7f7      	b.n	800a2ee <__swsetup_r+0xba>
 800a2fe:	bf00      	nop
 800a300:	20000010 	.word	0x20000010
 800a304:	0800a5c4 	.word	0x0800a5c4
 800a308:	0800a5e4 	.word	0x0800a5e4
 800a30c:	0800a5a4 	.word	0x0800a5a4

0800a310 <__swhatbuf_r>:
 800a310:	b570      	push	{r4, r5, r6, lr}
 800a312:	460e      	mov	r6, r1
 800a314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a318:	2900      	cmp	r1, #0
 800a31a:	b096      	sub	sp, #88	; 0x58
 800a31c:	4614      	mov	r4, r2
 800a31e:	461d      	mov	r5, r3
 800a320:	da08      	bge.n	800a334 <__swhatbuf_r+0x24>
 800a322:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a326:	2200      	movs	r2, #0
 800a328:	602a      	str	r2, [r5, #0]
 800a32a:	061a      	lsls	r2, r3, #24
 800a32c:	d410      	bmi.n	800a350 <__swhatbuf_r+0x40>
 800a32e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a332:	e00e      	b.n	800a352 <__swhatbuf_r+0x42>
 800a334:	466a      	mov	r2, sp
 800a336:	f000 f851 	bl	800a3dc <_fstat_r>
 800a33a:	2800      	cmp	r0, #0
 800a33c:	dbf1      	blt.n	800a322 <__swhatbuf_r+0x12>
 800a33e:	9a01      	ldr	r2, [sp, #4]
 800a340:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a344:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a348:	425a      	negs	r2, r3
 800a34a:	415a      	adcs	r2, r3
 800a34c:	602a      	str	r2, [r5, #0]
 800a34e:	e7ee      	b.n	800a32e <__swhatbuf_r+0x1e>
 800a350:	2340      	movs	r3, #64	; 0x40
 800a352:	2000      	movs	r0, #0
 800a354:	6023      	str	r3, [r4, #0]
 800a356:	b016      	add	sp, #88	; 0x58
 800a358:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a35c <__smakebuf_r>:
 800a35c:	898b      	ldrh	r3, [r1, #12]
 800a35e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a360:	079d      	lsls	r5, r3, #30
 800a362:	4606      	mov	r6, r0
 800a364:	460c      	mov	r4, r1
 800a366:	d507      	bpl.n	800a378 <__smakebuf_r+0x1c>
 800a368:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a36c:	6023      	str	r3, [r4, #0]
 800a36e:	6123      	str	r3, [r4, #16]
 800a370:	2301      	movs	r3, #1
 800a372:	6163      	str	r3, [r4, #20]
 800a374:	b002      	add	sp, #8
 800a376:	bd70      	pop	{r4, r5, r6, pc}
 800a378:	ab01      	add	r3, sp, #4
 800a37a:	466a      	mov	r2, sp
 800a37c:	f7ff ffc8 	bl	800a310 <__swhatbuf_r>
 800a380:	9900      	ldr	r1, [sp, #0]
 800a382:	4605      	mov	r5, r0
 800a384:	4630      	mov	r0, r6
 800a386:	f7ff f96b 	bl	8009660 <_malloc_r>
 800a38a:	b948      	cbnz	r0, 800a3a0 <__smakebuf_r+0x44>
 800a38c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a390:	059a      	lsls	r2, r3, #22
 800a392:	d4ef      	bmi.n	800a374 <__smakebuf_r+0x18>
 800a394:	f023 0303 	bic.w	r3, r3, #3
 800a398:	f043 0302 	orr.w	r3, r3, #2
 800a39c:	81a3      	strh	r3, [r4, #12]
 800a39e:	e7e3      	b.n	800a368 <__smakebuf_r+0xc>
 800a3a0:	4b0d      	ldr	r3, [pc, #52]	; (800a3d8 <__smakebuf_r+0x7c>)
 800a3a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a3a4:	89a3      	ldrh	r3, [r4, #12]
 800a3a6:	6020      	str	r0, [r4, #0]
 800a3a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3ac:	81a3      	strh	r3, [r4, #12]
 800a3ae:	9b00      	ldr	r3, [sp, #0]
 800a3b0:	6163      	str	r3, [r4, #20]
 800a3b2:	9b01      	ldr	r3, [sp, #4]
 800a3b4:	6120      	str	r0, [r4, #16]
 800a3b6:	b15b      	cbz	r3, 800a3d0 <__smakebuf_r+0x74>
 800a3b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3bc:	4630      	mov	r0, r6
 800a3be:	f000 f81f 	bl	800a400 <_isatty_r>
 800a3c2:	b128      	cbz	r0, 800a3d0 <__smakebuf_r+0x74>
 800a3c4:	89a3      	ldrh	r3, [r4, #12]
 800a3c6:	f023 0303 	bic.w	r3, r3, #3
 800a3ca:	f043 0301 	orr.w	r3, r3, #1
 800a3ce:	81a3      	strh	r3, [r4, #12]
 800a3d0:	89a0      	ldrh	r0, [r4, #12]
 800a3d2:	4305      	orrs	r5, r0
 800a3d4:	81a5      	strh	r5, [r4, #12]
 800a3d6:	e7cd      	b.n	800a374 <__smakebuf_r+0x18>
 800a3d8:	08009401 	.word	0x08009401

0800a3dc <_fstat_r>:
 800a3dc:	b538      	push	{r3, r4, r5, lr}
 800a3de:	4d07      	ldr	r5, [pc, #28]	; (800a3fc <_fstat_r+0x20>)
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	4608      	mov	r0, r1
 800a3e6:	4611      	mov	r1, r2
 800a3e8:	602b      	str	r3, [r5, #0]
 800a3ea:	f7f7 ffc0 	bl	800236e <_fstat>
 800a3ee:	1c43      	adds	r3, r0, #1
 800a3f0:	d102      	bne.n	800a3f8 <_fstat_r+0x1c>
 800a3f2:	682b      	ldr	r3, [r5, #0]
 800a3f4:	b103      	cbz	r3, 800a3f8 <_fstat_r+0x1c>
 800a3f6:	6023      	str	r3, [r4, #0]
 800a3f8:	bd38      	pop	{r3, r4, r5, pc}
 800a3fa:	bf00      	nop
 800a3fc:	20004cac 	.word	0x20004cac

0800a400 <_isatty_r>:
 800a400:	b538      	push	{r3, r4, r5, lr}
 800a402:	4d06      	ldr	r5, [pc, #24]	; (800a41c <_isatty_r+0x1c>)
 800a404:	2300      	movs	r3, #0
 800a406:	4604      	mov	r4, r0
 800a408:	4608      	mov	r0, r1
 800a40a:	602b      	str	r3, [r5, #0]
 800a40c:	f7f7 ffbf 	bl	800238e <_isatty>
 800a410:	1c43      	adds	r3, r0, #1
 800a412:	d102      	bne.n	800a41a <_isatty_r+0x1a>
 800a414:	682b      	ldr	r3, [r5, #0]
 800a416:	b103      	cbz	r3, 800a41a <_isatty_r+0x1a>
 800a418:	6023      	str	r3, [r4, #0]
 800a41a:	bd38      	pop	{r3, r4, r5, pc}
 800a41c:	20004cac 	.word	0x20004cac

0800a420 <_init>:
 800a420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a422:	bf00      	nop
 800a424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a426:	bc08      	pop	{r3}
 800a428:	469e      	mov	lr, r3
 800a42a:	4770      	bx	lr

0800a42c <_fini>:
 800a42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42e:	bf00      	nop
 800a430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a432:	bc08      	pop	{r3}
 800a434:	469e      	mov	lr, r3
 800a436:	4770      	bx	lr
